
Init-Test-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b15c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b334  0800b334  0000c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3c4  0800b3c4  0000d188  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3c4  0800b3c4  0000c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3cc  0800b3cc  0000d188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3cc  0800b3cc  0000c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3d0  0800b3d0  0000c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800b3d4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  20000188  0800b55c  0000d188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001da4  0800b55c  0000dda4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f253  00000000  00000000  0000d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e98  00000000  00000000  0002c40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000312a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e6  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236b9  00000000  00000000  00033c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002336b  00000000  00000000  000572cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c96cc  00000000  00000000  0007a63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00143d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00149c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000188 	.word	0x20000188
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b31c 	.word	0x0800b31c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000018c 	.word	0x2000018c
 8000214:	0800b31c 	.word	0x0800b31c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800051e:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_DMA_Init+0x50>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000522:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <MX_DMA_Init+0x50>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6493      	str	r3, [r2, #72]	@ 0x48
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_DMA_Init+0x50>)
 800052c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_DMA_Init+0x50>)
 8000538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800053a:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <MX_DMA_Init+0x50>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6493      	str	r3, [r2, #72]	@ 0x48
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_DMA_Init+0x50>)
 8000544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200b      	movs	r0, #11
 8000554:	f000 fef7 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000558:	200b      	movs	r0, #11
 800055a:	f000 ff0e 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	@ 0x30
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b65      	ldr	r3, [pc, #404]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a64      	ldr	r2, [pc, #400]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b62      	ldr	r3, [pc, #392]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	4b5f      	ldr	r3, [pc, #380]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a5e      	ldr	r2, [pc, #376]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b2:	4b59      	ldr	r3, [pc, #356]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a58      	ldr	r2, [pc, #352]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a52      	ldr	r2, [pc, #328]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b47      	ldr	r3, [pc, #284]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a46      	ldr	r2, [pc, #280]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b44      	ldr	r3, [pc, #272]	@ (8000718 <MX_GPIO_Init+0x1ac>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f001 fa1d 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000624:	483d      	ldr	r0, [pc, #244]	@ (800071c <MX_GPIO_Init+0x1b0>)
 8000626:	f001 fa17 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	483c      	ldr	r0, [pc, #240]	@ (8000720 <MX_GPIO_Init+0x1b4>)
 8000630:	f001 fa12 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063e:	2302      	movs	r3, #2
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4834      	ldr	r0, [pc, #208]	@ (800071c <MX_GPIO_Init+0x1b0>)
 800064a:	f001 f86b 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800064e:	f24c 03bf 	movw	r3, #49343	@ 0xc0bf
 8000652:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000654:	2303      	movs	r3, #3
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	482e      	ldr	r0, [pc, #184]	@ (800071c <MX_GPIO_Init+0x1b0>)
 8000664:	f001 f85e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4829      	ldr	r0, [pc, #164]	@ (8000724 <MX_GPIO_Init+0x1b8>)
 800067e:	f001 f851 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000682:	f248 73df 	movw	r3, #34783	@ 0x87df
 8000686:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000688:	2303      	movs	r3, #3
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f001 f843 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800069e:	2320      	movs	r3, #32
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f001 f834 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80006bc:	f244 33ff 	movw	r3, #17407	@ 0x43ff
 80006c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4815      	ldr	r0, [pc, #84]	@ (8000728 <MX_GPIO_Init+0x1bc>)
 80006d2:	f001 f827 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0x1b0>)
 80006f0:	f001 f818 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006f4:	2304      	movs	r3, #4
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_GPIO_Init+0x1b4>)
 800070c:	f001 f80a 	bl	8001724 <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3730      	adds	r7, #48	@ 0x30
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	48000800 	.word	0x48000800
 8000720:	48000c00 	.word	0x48000c00
 8000724:	48001800 	.word	0x48001800
 8000728:	48000400 	.word	0x48000400

0800072c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C3_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20501E65;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C3_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C3_Init+0x74>)
 8000768:	f001 f9a8 	bl	8001abc <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9e8 	bl	8000b46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C3_Init+0x74>)
 800077a:	f001 fdbd 	bl	80022f8 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9df 	bl	8000b46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C3_Init+0x74>)
 800078c:	f001 fdff 	bl	800238e <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9d6 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001a4 	.word	0x200001a4
 80007a4:	40007800 	.word	0x40007800
 80007a8:	20501e65 	.word	0x20501e65

080007ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b09e      	sub	sp, #120	@ 0x78
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2250      	movs	r2, #80	@ 0x50
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00a fd6b 	bl	800b2a8 <memset>
  if(i2cHandle->Instance==I2C3)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <HAL_I2C_MspInit+0xa8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d137      	bne.n	800084c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fa12 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007f6:	f000 f9a6 	bl	8000b46 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000812:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000816:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000824:	2308      	movs	r3, #8
 8000826:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000828:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	@ (800085c <HAL_I2C_MspInit+0xb0>)
 8000830:	f000 ff78 	bl	8001724 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 800083a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800083e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_I2C_MspInit+0xac>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000844:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3778      	adds	r7, #120	@ 0x78
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40007800 	.word	0x40007800
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800

08000860 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000864:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000866:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <MX_I2S2_Init+0x4c>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2S2_Init+0x48>)
 800086c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000870:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_I2S2_Init+0x48>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087e:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000884:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000888:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800088c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2S2_Init+0x48>)
 8000896:	f001 fdc7 	bl	8002428 <HAL_I2S_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 80008a0:	f000 f951 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001f8 	.word	0x200001f8
 80008ac:	40003800 	.word	0x40003800

080008b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09e      	sub	sp, #120	@ 0x78
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2250      	movs	r2, #80	@ 0x50
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00a fce9 	bl	800b2a8 <memset>
  if(i2sHandle->Instance==SPI2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a43      	ldr	r2, [pc, #268]	@ (80009e8 <HAL_I2S_MspInit+0x138>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d17f      	bne.n	80009e0 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f990 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80008fa:	f000 f924 	bl	8000b46 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008fe:	4b3b      	ldr	r3, [pc, #236]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a3a      	ldr	r2, [pc, #232]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b38      	ldr	r3, [pc, #224]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a34      	ldr	r2, [pc, #208]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b2f      	ldr	r3, [pc, #188]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a2e      	ldr	r2, [pc, #184]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <HAL_I2S_MspInit+0x13c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000946:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800094a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000958:	2305      	movs	r3, #5
 800095a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000960:	4619      	mov	r1, r3
 8000962:	4823      	ldr	r0, [pc, #140]	@ (80009f0 <HAL_I2S_MspInit+0x140>)
 8000964:	f000 fede 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000968:	2340      	movs	r3, #64	@ 0x40
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000978:	2306      	movs	r3, #6
 800097a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000980:	4619      	mov	r1, r3
 8000982:	481c      	ldr	r0, [pc, #112]	@ (80009f4 <HAL_I2S_MspInit+0x144>)
 8000984:	f000 fece 	bl	8001724 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <HAL_I2S_MspInit+0x14c>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 8000990:	220d      	movs	r2, #13
 8000992:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 8000996:	2210      	movs	r2, #16
 8000998:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009be:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80009c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009c6:	f000 fcf3 	bl	80013b0 <HAL_DMA_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 80009d0:	f000 f8b9 	bl	8000b46 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009da:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_I2S_MspInit+0x148>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009e0:	bf00      	nop
 80009e2:	3778      	adds	r7, #120	@ 0x78
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40003800 	.word	0x40003800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400
 80009f4:	48000800 	.word	0x48000800
 80009f8:	20000234 	.word	0x20000234
 80009fc:	40020008 	.word	0x40020008

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fb31 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f851 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff fdad 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f7ff fd81 	bl	8000518 <MX_DMA_Init>
  MX_I2S2_Init();
 8000a16:	f7ff ff23 	bl	8000860 <MX_I2S2_Init>
  MX_I2C3_Init();
 8000a1a:	f7ff fe87 	bl	800072c <MX_I2C3_Init>
  MX_SPI3_Init();
 8000a1e:	f000 f8d9 	bl	8000bd4 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000a22:	f009 ff1d 	bl	800a860 <MX_USB_Device_Init>
  MX_USART3_UART_Init();
 8000a26:	f000 f9d1 	bl	8000dcc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f001 f811 	bl	8001a58 <HAL_GPIO_WritePin>

  DAC_Register_Init();
 8000a36:	f000 fab7 	bl	8000fa8 <DAC_Register_Init>

  DAC_Register_Write(0x40, 0x3F);
 8000a3a:	213f      	movs	r1, #63	@ 0x3f
 8000a3c:	2040      	movs	r0, #64	@ 0x40
 8000a3e:	f000 fa95 	bl	8000f6c <DAC_Register_Write>
  DAC_Register_Write(0x44, 0x3F);
 8000a42:	213f      	movs	r1, #63	@ 0x3f
 8000a44:	2044      	movs	r0, #68	@ 0x44
 8000a46:	f000 fa91 	bl	8000f6c <DAC_Register_Write>

  DAC_Register_Write(0x41, 0x3F);
 8000a4a:	213f      	movs	r1, #63	@ 0x3f
 8000a4c:	2041      	movs	r0, #65	@ 0x41
 8000a4e:	f000 fa8d 	bl	8000f6c <DAC_Register_Write>
  DAC_Register_Write(0x45, 0x3F);
 8000a52:	213f      	movs	r1, #63	@ 0x3f
 8000a54:	2045      	movs	r0, #69	@ 0x45
 8000a56:	f000 fa89 	bl	8000f6c <DAC_Register_Write>

  GPIO_Register_Init();
 8000a5a:	f000 fafb 	bl	8001054 <GPIO_Register_Init>

  //CDC_Transmit_FS((uint8_t *) data, strlen (data));

  int check = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
//		  check = 0;
//		  memset (usb_vcp_buffer, '\0', 64); // to clear buffer of old data
//
//	  }

	  if( (usb_data_present == 1)){
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <main+0xa4>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d101      	bne.n	8000a6e <main+0x6e>
		  Serial_Command_Handler();
 8000a6a:	f000 f873 	bl	8000b54 <Serial_Command_Handler>
	  }

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1){
 8000a6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <main+0xa8>)
 8000a74:	f000 ffd8 	bl	8001a28 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d1f1      	bne.n	8000a62 <main+0x62>
		  CDC_Transmit_FS((uint8_t *) data, strlen (data));
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <main+0xac>)
 8000a80:	681c      	ldr	r4, [r3, #0]
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <main+0xac>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbc6 	bl	8000218 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	4620      	mov	r0, r4
 8000a94:	f009 ffbc 	bl	800aa10 <CDC_Transmit_FS>
		  HAL_Delay(500);
 8000a98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a9c:	f000 fb56 	bl	800114c <HAL_Delay>
	  if( (usb_data_present == 1)){
 8000aa0:	e7df      	b.n	8000a62 <main+0x62>
 8000aa2:	bf00      	nop
 8000aa4:	200002d4 	.word	0x200002d4
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	20000000 	.word	0x20000000

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	@ 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2238      	movs	r2, #56	@ 0x38
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00a fbf2 	bl	800b2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f003 fabc 	bl	8004050 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ad8:	2321      	movs	r3, #33	@ 0x21
 8000ada:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aea:	2303      	movs	r3, #3
 8000aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000aee:	2303      	movs	r3, #3
 8000af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000af2:	232a      	movs	r3, #42	@ 0x2a
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fb56 	bl	80041b8 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b12:	f000 f818 	bl	8000b46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fe54 	bl	80047dc <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 f804 	bl	8000b46 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3750      	adds	r7, #80	@ 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4a:	b672      	cpsid	i
}
 8000b4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4e:	bf00      	nop
 8000b50:	e7fd      	b.n	8000b4e <Error_Handler+0x8>
	...

08000b54 <Serial_Command_Handler>:
#include "gpio.h"

extern uint8_t usb_vcp_buffer[64]; // import buffer from main
extern int usb_data_present; // import state from main

void Serial_Command_Handler(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000b58:	2104      	movs	r1, #4
 8000b5a:	481b      	ldr	r0, [pc, #108]	@ (8000bc8 <Serial_Command_Handler+0x74>)
 8000b5c:	f000 ff94 	bl	8001a88 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b60:	20c8      	movs	r0, #200	@ 0xc8
 8000b62:	f000 faf3 	bl	800114c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000b66:	2104      	movs	r1, #4
 8000b68:	4817      	ldr	r0, [pc, #92]	@ (8000bc8 <Serial_Command_Handler+0x74>)
 8000b6a:	f000 ff8d 	bl	8001a88 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b6e:	20c8      	movs	r0, #200	@ 0xc8
 8000b70:	f000 faec 	bl	800114c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000b74:	2104      	movs	r1, #4
 8000b76:	4814      	ldr	r0, [pc, #80]	@ (8000bc8 <Serial_Command_Handler+0x74>)
 8000b78:	f000 ff86 	bl	8001a88 <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000b7c:	20c8      	movs	r0, #200	@ 0xc8
 8000b7e:	f000 fae5 	bl	800114c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000b82:	2104      	movs	r1, #4
 8000b84:	4810      	ldr	r0, [pc, #64]	@ (8000bc8 <Serial_Command_Handler+0x74>)
 8000b86:	f000 ff7f 	bl	8001a88 <HAL_GPIO_TogglePin>
    usb_data_present = 0;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <Serial_Command_Handler+0x78>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]

	if( (usb_vcp_buffer[0] == 'A') ){
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <Serial_Command_Handler+0x7c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b41      	cmp	r3, #65	@ 0x41
 8000b96:	d115      	bne.n	8000bc4 <Serial_Command_Handler+0x70>

	    //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);

	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f000 ff5a 	bl	8001a58 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 8000ba4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ba8:	f000 fad0 	bl	800114c <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2120      	movs	r1, #32
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f000 ff50 	bl	8001a58 <HAL_GPIO_WritePin>
	    memset (usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 8000bb8:	2240      	movs	r2, #64	@ 0x40
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <Serial_Command_Handler+0x7c>)
 8000bbe:	f00a fb73 	bl	800b2a8 <memset>

	    return;
 8000bc2:	e000      	b.n	8000bc6 <Serial_Command_Handler+0x72>
	}
	else return;
 8000bc4:	bf00      	nop

}
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	200002d4 	.word	0x200002d4
 8000bd0:	20000294 	.word	0x20000294

08000bd4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <MX_SPI3_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000bee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bf2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c22:	2207      	movs	r2, #7
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_SPI3_Init+0x74>)
 8000c34:	f004 ff3c 	bl	8005ab0 <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f7ff ff82 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002d8 	.word	0x200002d8
 8000c4c:	40003c00 	.word	0x40003c00

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <HAL_SPI_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d128      	bne.n	8000cc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_SPI_MspInit+0x80>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ca2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <HAL_SPI_MspInit+0x84>)
 8000cc0:	f000 fd30 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40003c00 	.word	0x40003c00
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <HAL_MspInit+0x44>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_MspInit+0x44>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d0e:	f003 fa43 	bl	8004198 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f9cb 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <DMA1_Channel1_IRQHandler+0x10>)
 8000d86:	f000 fbbb 	bl	8001500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000234 	.word	0x20000234

08000d94 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <USB_LP_IRQHandler+0x10>)
 8000d9a:	f001 fd15 	bl	80027c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200018a8 	.word	0x200018a8

08000da8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <MX_USART3_UART_Init+0x94>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e14:	4811      	ldr	r0, [pc, #68]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e16:	f004 fef6 	bl	8005c06 <HAL_UART_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e20:	f7ff fe91 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e28:	f005 fc92 	bl	8006750 <HAL_UARTEx_SetTxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e32:	f7ff fe88 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e3a:	f005 fcc7 	bl	80067cc <HAL_UARTEx_SetRxFifoThreshold>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fe7f 	bl	8000b46 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_USART3_UART_Init+0x90>)
 8000e4a:	f005 fc48 	bl	80066de <HAL_UARTEx_DisableFifoMode>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e54:	f7ff fe77 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000033c 	.word	0x2000033c
 8000e60:	40004800 	.word	0x40004800

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	@ 0x78
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2250      	movs	r2, #80	@ 0x50
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00a fa0f 	bl	800b2a8 <memset>
  if(uartHandle->Instance==USART3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f0c <HAL_UART_MspInit+0xa8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d136      	bne.n	8000f02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e94:	2304      	movs	r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 feb7 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eac:	f7ff fe4b 	bl	8000b46 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000eb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ecc:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_UART_MspInit+0xac>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ee0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ee4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_UART_MspInit+0xb0>)
 8000efe:	f000 fc11 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3778      	adds	r7, #120	@ 0x78
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004800 	.word	0x40004800
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400

08000f18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f1c:	f7ff ff44 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	@ (8000f64 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f00a f9b7 	bl	800b2b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4a:	f7ff fd59 	bl	8000a00 <main>

08000f4e <LoopForever>:

LoopForever:
    b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000f5c:	0800b3d4 	.word	0x0800b3d4
  ldr r2, =_sbss
 8000f60:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000f64:	20001da4 	.word	0x20001da4

08000f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_2_IRQHandler>
	...

08000f6c <DAC_Register_Write>:
#define DAC_REG_TREBLE_BOOST 	0x5E
#define DAC_REG_3D_SOUND 		0x5F
#define DAC_REG_MONO_MIX		0x60


void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	230a      	movs	r3, #10
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	218e      	movs	r1, #142	@ 0x8e
 8000f96:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <DAC_Register_Write+0x38>)
 8000f98:	f000 fe2c 	bl	8001bf4 <HAL_I2C_Mem_Write>

	return;
 8000f9c:	bf00      	nop
}
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200001a4 	.word	0x200001a4

08000fa8 <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	2055      	movs	r0, #85	@ 0x55
 8000fb0:	f7ff ffdc 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8000fb4:	2127      	movs	r1, #39	@ 0x27
 8000fb6:	2040      	movs	r0, #64	@ 0x40
 8000fb8:	f7ff ffd8 	bl	8000f6c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8000fbc:	2127      	movs	r1, #39	@ 0x27
 8000fbe:	2041      	movs	r0, #65	@ 0x41
 8000fc0:	f7ff ffd4 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8000fc4:	2127      	movs	r1, #39	@ 0x27
 8000fc6:	2044      	movs	r0, #68	@ 0x44
 8000fc8:	f7ff ffd0 	bl	8000f6c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 8000fcc:	2127      	movs	r1, #39	@ 0x27
 8000fce:	2045      	movs	r0, #69	@ 0x45
 8000fd0:	f7ff ffcc 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x01); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	2046      	movs	r0, #70	@ 0x46
 8000fd8:	f7ff ffc8 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 8000fdc:	21e0      	movs	r1, #224	@ 0xe0
 8000fde:	2049      	movs	r0, #73	@ 0x49
 8000fe0:	f7ff ffc4 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2056      	movs	r0, #86	@ 0x56
 8000fe8:	f7ff ffc0 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 8000fec:	2103      	movs	r1, #3
 8000fee:	204b      	movs	r0, #75	@ 0x4b
 8000ff0:	f7ff ffbc 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIXER , 0x11); // analog mixer close switch 2 and 5
 8000ff4:	2111      	movs	r1, #17
 8000ff6:	2058      	movs	r0, #88	@ 0x58
 8000ff8:	f7ff ffb8 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 8000ffc:	21ec      	movs	r1, #236	@ 0xec
 8000ffe:	2049      	movs	r0, #73	@ 0x49
 8001000:	f7ff ffb4 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 8001004:	2101      	movs	r1, #1
 8001006:	204a      	movs	r0, #74	@ 0x4a
 8001008:	f7ff ffb0 	bl	8000f6c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 800100c:	2130      	movs	r1, #48	@ 0x30
 800100e:	2059      	movs	r0, #89	@ 0x59
 8001010:	f7ff ffac 	bl	8000f6c <DAC_Register_Write>

	return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}

08001018 <GPIO_Register_Write>:
#define GPIO_INTF 		0x07
#define GPIO_INTCAP 	0x08
#define GPIO_GPIO 		0x09
#define GPIO_OLAT 		0x0A

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	b29a      	uxth	r2, r3
 8001030:	230a      	movs	r3, #10
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2140      	movs	r1, #64	@ 0x40
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <GPIO_Register_Write+0x38>)
 8001044:	f000 fdd6 	bl	8001bf4 <HAL_I2C_Mem_Write>

	return;
 8001048:	bf00      	nop
}
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001a4 	.word	0x200001a4

08001054 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_GPIO, 0xFF); // set all output latch bits to high
 8001058:	21ff      	movs	r1, #255	@ 0xff
 800105a:	2009      	movs	r0, #9
 800105c:	f7ff ffdc 	bl	8001018 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_IODIR, 0x00); // configure all GPIO as output
 8001060:	2100      	movs	r1, #0
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ffd8 	bl	8001018 <GPIO_Register_Write>

	return;
 8001068:	bf00      	nop
}
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f95a 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107c:	200f      	movs	r0, #15
 800107e:	f000 f80d 	bl	800109c <HAL_InitTick>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e001      	b.n	8001092 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108e:	f7ff fe23 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001092:	79fb      	ldrb	r3, [r7, #7]

}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_InitTick+0x68>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d022      	beq.n	80010f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_InitTick+0x6c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_InitTick+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f966 	bl	8001396 <HAL_SYSTICK_Config>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d809      	bhi.n	80010ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d6:	2200      	movs	r2, #0
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	f000 f932 	bl	8001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_InitTick+0x70>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e007      	b.n	80010fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e004      	b.n	80010fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e001      	b.n	80010fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000000c 	.word	0x2000000c
 8001108:	20000004 	.word	0x20000004
 800110c:	20000008 	.word	0x20000008

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x1c>)
 8001120:	6013      	str	r3, [r2, #0]
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	200003d0 	.word	0x200003d0
 8001130:	2000000c 	.word	0x2000000c

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200003d0 	.word	0x200003d0

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d004      	beq.n	8001170 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_Delay+0x40>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001170:	bf00      	nop
 8001172:	f7ff ffdf 	bl	8001134 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	429a      	cmp	r2, r3
 8001180:	d8f7      	bhi.n	8001172 <HAL_Delay+0x26>
  {
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000000c 	.word	0x2000000c

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff40 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff33 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa4 	bl	80012ec <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e08d      	b.n	80014de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_DMA_Init+0x138>)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d80f      	bhi.n	80013ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b45      	ldr	r3, [pc, #276]	@ (80014ec <HAL_DMA_Init+0x13c>)
 80013d6:	4413      	add	r3, r2
 80013d8:	4a45      	ldr	r2, [pc, #276]	@ (80014f0 <HAL_DMA_Init+0x140>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	009a      	lsls	r2, r3, #2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <HAL_DMA_Init+0x144>)
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ec:	e00e      	b.n	800140c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b40      	ldr	r3, [pc, #256]	@ (80014f8 <HAL_DMA_Init+0x148>)
 80013f6:	4413      	add	r3, r2
 80013f8:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_DMA_Init+0x140>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	009a      	lsls	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a3c      	ldr	r2, [pc, #240]	@ (80014fc <HAL_DMA_Init+0x14c>)
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001426:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f8fe 	bl	8001660 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800146c:	d102      	bne.n	8001474 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001488:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <HAL_DMA_Init+0x104>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d80c      	bhi.n	80014b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f91e 	bl	80016dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	e008      	b.n	80014c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020407 	.word	0x40020407
 80014ec:	bffdfff8 	.word	0xbffdfff8
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	40020000 	.word	0x40020000
 80014f8:	bffdfbf8 	.word	0xbffdfbf8
 80014fc:	40020400 	.word	0x40020400

08001500 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2204      	movs	r2, #4
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d026      	beq.n	800157a <HAL_DMA_IRQHandler+0x7a>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d021      	beq.n	800157a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	2104      	movs	r1, #4
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	2b00      	cmp	r3, #0
 800156e:	d071      	beq.n	8001654 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001578:	e06c      	b.n	8001654 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	2202      	movs	r2, #2
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d02e      	beq.n	80015ec <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d029      	beq.n	80015ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10b      	bne.n	80015be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 020a 	bic.w	r2, r2, #10
 80015b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f003 021f 	and.w	r2, r3, #31
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	2102      	movs	r1, #2
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d038      	beq.n	8001654 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015ea:	e033      	b.n	8001654 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	2208      	movs	r2, #8
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d02a      	beq.n	8001656 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d025      	beq.n	8001656 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 020e 	bic.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f003 021f 	and.w	r2, r3, #31
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001654:	bf00      	nop
 8001656:	bf00      	nop
}
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d802      	bhi.n	800167a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e001      	b.n	800167e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800167c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3b08      	subs	r3, #8
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	009a      	lsls	r2, r3, #2
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4413      	add	r3, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2201      	movs	r2, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40020407 	.word	0x40020407
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020820 	.word	0x40020820
 80016d4:	cccccccd 	.word	0xcccccccd
 80016d8:	40020880 	.word	0x40020880

080016dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2201      	movs	r2, #1
 800170a:	409a      	lsls	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	1000823f 	.word	0x1000823f
 8001720:	40020940 	.word	0x40020940

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001732:	e15a      	b.n	80019ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 814c 	beq.w	80019e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 0201 	and.w	r2, r3, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	6939      	ldr	r1, [r7, #16]
 8001852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0203 	and.w	r2, r3, #3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80a6 	beq.w	80019e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	4b5b      	ldr	r3, [pc, #364]	@ (8001a08 <HAL_GPIO_Init+0x2e4>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a08 <HAL_GPIO_Init+0x2e4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a4:	4b58      	ldr	r3, [pc, #352]	@ (8001a08 <HAL_GPIO_Init+0x2e4>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b0:	4a56      	ldr	r2, [pc, #344]	@ (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_Init+0x1f8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4c      	ldr	r2, [pc, #304]	@ (8001a10 <HAL_GPIO_Init+0x2ec>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d019      	beq.n	8001918 <HAL_GPIO_Init+0x1f4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4b      	ldr	r2, [pc, #300]	@ (8001a14 <HAL_GPIO_Init+0x2f0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x1f0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001a18 <HAL_GPIO_Init+0x2f4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1ec>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a49      	ldr	r2, [pc, #292]	@ (8001a1c <HAL_GPIO_Init+0x2f8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1e8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a48      	ldr	r2, [pc, #288]	@ (8001a20 <HAL_GPIO_Init+0x2fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1e4>
 8001904:	2305      	movs	r3, #5
 8001906:	e00a      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001908:	2306      	movs	r3, #6
 800190a:	e008      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 800190c:	2304      	movs	r3, #4
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001910:	2303      	movs	r3, #3
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 800191c:	2300      	movs	r3, #0
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192e:	4937      	ldr	r1, [pc, #220]	@ (8001a0c <HAL_GPIO_Init+0x2e8>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001960:	4a30      	ldr	r2, [pc, #192]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800198a:	4a26      	ldr	r2, [pc, #152]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019de:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f ae9d 	bne.w	8001734 <HAL_GPIO_Init+0x10>
  }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	48001000 	.word	0x48001000
 8001a20:	48001400 	.word	0x48001400
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43d9      	mvns	r1, r3
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e08d      	b.n	8001bea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fe62 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	@ 0x24
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e006      	b.n	8001b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d108      	bne.n	8001b5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	e007      	b.n	8001b6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69d9      	ldr	r1, [r3, #28]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	f040 80f9 	bne.w	8001e0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_I2C_Mem_Write+0x34>
 8001c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0ed      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Mem_Write+0x4e>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e0e6      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fa73 	bl	8001134 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2319      	movs	r3, #25
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f955 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d1      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2221      	movs	r2, #33	@ 0x21
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2240      	movs	r2, #64	@ 0x40
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c94:	88f8      	ldrh	r0, [r7, #6]
 8001c96:	893a      	ldrh	r2, [r7, #8]
 8001c98:	8979      	ldrh	r1, [r7, #10]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f8b9 	bl	8001e1c <I2C_RequestMemoryWrite>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0a9      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2bff      	cmp	r3, #255	@ 0xff
 8001cc4:	d90e      	bls.n	8001ce4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	22ff      	movs	r2, #255	@ 0xff
 8001cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	8979      	ldrh	r1, [r7, #10]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fad9 	bl	8002294 <I2C_TransferConfig>
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fac8 	bl	8002294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f958 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e07b      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d034      	beq.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d130      	bne.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d60:	2200      	movs	r2, #0
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8d1 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04d      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2bff      	cmp	r3, #255	@ 0xff
 8001d7c:	d90e      	bls.n	8001d9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	22ff      	movs	r2, #255	@ 0xff
 8001d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fa7d 	bl	8002294 <I2C_TransferConfig>
 8001d9a:	e00f      	b.n	8001dbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	8979      	ldrh	r1, [r7, #10]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fa6c 	bl	8002294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d19e      	bne.n	8001d04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f93e 	bl	800204c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01a      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_I2C_Mem_Write+0x224>)
 8001dee:	400b      	ands	r3, r1
 8001df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	817b      	strh	r3, [r7, #10]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	813b      	strh	r3, [r7, #8]
 8001e32:	4613      	mov	r3, r2
 8001e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <I2C_RequestMemoryWrite+0xa4>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fa25 	bl	8002294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f8b5 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e02c      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e64:	893b      	ldrh	r3, [r7, #8]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e6e:	e015      	b.n	8001e9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e70:	893b      	ldrh	r3, [r7, #8]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	69b9      	ldr	r1, [r7, #24]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f89b 	bl	8001fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e012      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f830 	bl	8001f0c <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	80002000 	.word	0x80002000

08001ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d103      	bne.n	8001ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	619a      	str	r2, [r3, #24]
  }
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f1c:	e03b      	b.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f8d6 	bl	80020d4 <I2C_IsErrorOccurred>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e041      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d02d      	beq.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f8fb 	bl	8001134 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d122      	bne.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d113      	bne.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d0b4      	beq.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fca:	e033      	b.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f87f 	bl	80020d4 <I2C_IsErrorOccurred>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e031      	b.n	8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d025      	beq.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe8:	f7ff f8a4 	bl	8001134 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d302      	bcc.n	8001ffe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d11a      	bne.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d013      	beq.n	8002034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d1c4      	bne.n	8001fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002058:	e02f      	b.n	80020ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f838 	bl	80020d4 <I2C_IsErrorOccurred>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e02d      	b.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206e:	f7ff f861 	bl	8001134 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	d302      	bcc.n	8002084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11a      	bne.n	80020ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b20      	cmp	r3, #32
 8002090:	d013      	beq.n	80020ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d1c8      	bne.n	800205a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d068      	beq.n	80021d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2210      	movs	r2, #16
 8002106:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002108:	e049      	b.n	800219e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d045      	beq.n	800219e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7ff f80f 	bl	8001134 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_IsErrorOccurred+0x54>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d13a      	bne.n	800219e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002132:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800213a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800214a:	d121      	bne.n	8002190 <I2C_IsErrorOccurred+0xbc>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002152:	d01d      	beq.n	8002190 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b20      	cmp	r3, #32
 8002158:	d01a      	beq.n	8002190 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002168:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800216a:	f7fe ffe3 	bl	8001134 <HAL_GetTick>
 800216e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002170:	e00e      	b.n	8002190 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002172:	f7fe ffdf 	bl	8001134 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b19      	cmp	r3, #25
 800217e:	d907      	bls.n	8002190 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800218e:	e006      	b.n	800219e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d1e9      	bne.n	8002172 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d003      	beq.n	80021b4 <I2C_IsErrorOccurred+0xe0>
 80021ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0aa      	beq.n	800210a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2220      	movs	r2, #32
 80021c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01c      	beq.n	8002282 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fe3b 	bl	8001ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <I2C_IsErrorOccurred+0x1bc>)
 800225a:	400b      	ands	r3, r1
 800225c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002286:	4618      	mov	r0, r3
 8002288:	3728      	adds	r7, #40	@ 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	fe00e800 	.word	0xfe00e800

08002294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	4613      	mov	r3, r2
 80022a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ac:	7a7b      	ldrb	r3, [r7, #9]
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	4313      	orrs	r3, r2
 80022be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	0d5b      	lsrs	r3, r3, #21
 80022ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <I2C_TransferConfig+0x60>)
 80022d4:	430b      	orrs	r3, r1
 80022d6:	43db      	mvns	r3, r3
 80022d8:	ea02 0103 	and.w	r1, r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	03ff63ff 	.word	0x03ff63ff

080022f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	d138      	bne.n	8002380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002318:	2302      	movs	r3, #2
 800231a:	e032      	b.n	8002382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	@ 0x24
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800234a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	e000      	b.n	8002382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002380:	2302      	movs	r3, #2
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d139      	bne.n	8002418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e033      	b.n	800241a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	@ 0x24
 80023be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0d0      	b.n	80025dc <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fa2e 	bl	80008b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800246a:	f023 030f 	bic.w	r3, r3, #15
 800246e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2202      	movs	r2, #2
 8002476:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d061      	beq.n	8002544 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002488:	2310      	movs	r3, #16
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e001      	b.n	8002492 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b20      	cmp	r3, #32
 8002498:	d802      	bhi.n	80024a0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80024a0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80024a4:	f002 fdf2 	bl	800508c <HAL_RCCEx_GetPeriphCLKFreq>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b2:	d125      	bne.n	8002500 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	3305      	adds	r3, #5
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e01f      	b.n	800251e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	3305      	adds	r3, #5
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	e00e      	b.n	800251e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fbb2 f2f3 	udiv	r2, r2, r3
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	461a      	mov	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	3305      	adds	r3, #5
 800251c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a30      	ldr	r2, [pc, #192]	@ (80025e4 <HAL_I2S_Init+0x1bc>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	08db      	lsrs	r3, r3, #3
 8002528:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	e003      	b.n	800254c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002544:	2302      	movs	r3, #2
 8002546:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d902      	bls.n	8002558 <HAL_I2S_Init+0x130>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2bff      	cmp	r3, #255	@ 0xff
 8002556:	d907      	bls.n	8002568 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e039      	b.n	80025dc <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	ea42 0103 	orr.w	r1, r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	430a      	orrs	r2, r1
 800257a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002586:	f023 030f 	bic.w	r3, r3, #15
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6851      	ldr	r1, [r2, #4]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6892      	ldr	r2, [r2, #8]
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68d2      	ldr	r2, [r2, #12]
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6992      	ldr	r2, [r2, #24]
 800259e:	430a      	orrs	r2, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025aa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b30      	cmp	r3, #48	@ 0x30
 80025b2:	d003      	beq.n	80025bc <HAL_I2S_Init+0x194>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80025ba:	d107      	bne.n	80025cc <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	cccccccd 	.word	0xcccccccd

080025e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0c0      	b.n	800277c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f008 fb46 	bl	800aca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 f976 	bl	8006912 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e03e      	b.n	80026aa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3311      	adds	r3, #17
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3310      	adds	r3, #16
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	3313      	adds	r3, #19
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3320      	adds	r3, #32
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3324      	adds	r3, #36	@ 0x24
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	791b      	ldrb	r3, [r3, #4]
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3bb      	bcc.n	800262c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e044      	b.n	8002744 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	791b      	ldrb	r3, [r3, #4]
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3b5      	bcc.n	80026ba <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	e893 0006 	ldmia.w	r3, {r1, r2}
 800275a:	f004 f8f5 	bl	8006948 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7a9b      	ldrb	r3, [r3, #10]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f001 fc40 	bl	8003ffa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_PCD_Start+0x16>
 8002796:	2302      	movs	r3, #2
 8002798:	e012      	b.n	80027c0 <HAL_PCD_Start+0x3c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f89c 	bl	80068e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 fb5c 	bl	8008e6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f006 fb61 	bl	8008e9c <USB_ReadInterrupts>
 80027da:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fb04 	bl	8002df4 <PCD_EP_ISR_Handler>

    return;
 80027ec:	e110      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002800:	b29a      	uxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280a:	b292      	uxth	r2, r2
 800280c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f008 fad6 	bl	800adc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002816:	2100      	movs	r1, #0
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8fc 	bl	8002a16 <HAL_PCD_SetAddress>

    return;
 800281e:	e0f7      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800283c:	b292      	uxth	r2, r2
 800283e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002842:	e0e5      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002866:	e0d3      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d034      	beq.n	80028dc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0204 	bic.w	r2, r2, #4
 8002884:	b292      	uxth	r2, r2
 8002886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	b292      	uxth	r2, r2
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f008 fc76 	bl	800b1a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f008 fab9 	bl	800ae34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028d4:	b292      	uxth	r2, r2
 80028d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028da:	e099      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d027      	beq.n	8002936 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0208 	orr.w	r2, r2, #8
 80028f8:	b292      	uxth	r2, r2
 80028fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002910:	b292      	uxth	r2, r2
 8002912:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0204 	orr.w	r2, r2, #4
 8002928:	b292      	uxth	r2, r2
 800292a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f008 fa66 	bl	800ae00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002934:	e06c      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d040      	beq.n	80029c2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002952:	b292      	uxth	r2, r2
 8002954:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12b      	bne.n	80029ba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0204 	orr.w	r2, r2, #4
 8002974:	b292      	uxth	r2, r2
 8002976:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0208 	orr.w	r2, r2, #8
 800298c:	b292      	uxth	r2, r2
 800298e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029b0:	2101      	movs	r1, #1
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f008 fbf8 	bl	800b1a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80029b8:	e02a      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f008 fa20 	bl	800ae00 <HAL_PCD_SuspendCallback>
    return;
 80029c0:	e026      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00f      	beq.n	80029ec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029de:	b292      	uxth	r2, r2
 80029e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f008 f9de 	bl	800ada6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029ea:	e011      	b.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a0e:	bf00      	nop
  }
}
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_PCD_SetAddress+0x1a>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e012      	b.n	8002a56 <HAL_PCD_SetAddress+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 f9fd 	bl	8008e46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	70fb      	strb	r3, [r7, #3]
 8002a70:	460b      	mov	r3, r1
 8002a72:	803b      	strh	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da0e      	bge.n	8002aa2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	3310      	adds	r3, #16
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	705a      	strb	r2, [r3, #1]
 8002aa0:	e00e      	b.n	8002ac0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 0207 	and.w	r2, r3, #7
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002acc:	883a      	ldrh	r2, [r7, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	78ba      	ldrb	r2, [r7, #2]
 8002ad6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ad8:	78bb      	ldrb	r3, [r7, #2]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d102      	bne.n	8002ae4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_EP_Open+0x94>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e00e      	b.n	8002b10 <HAL_PCD_EP_Open+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 ff3f 	bl	8006984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0e      	bge.n	8002b4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
 8002b48:	e00e      	b.n	8002b68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 0207 	and.w	r2, r3, #7
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_Close+0x6a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_Close+0x88>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fabb 	bl	800710c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fc73 	bl	80074e6 <USB_EPStartXfer>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 0207 	and.w	r2, r3, #7
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002c2c:	681b      	ldr	r3, [r3, #0]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	460b      	mov	r3, r1
 8002c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f003 0207 	and.w	r2, r3, #7
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	3310      	adds	r3, #16
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2201      	movs	r2, #1
 8002c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 fc24 	bl	80074e6 <USB_EPStartXfer>

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	7912      	ldrb	r2, [r2, #4]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e03e      	b.n	8002d44 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da0e      	bge.n	8002cec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 0207 	and.w	r2, r3, #7
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3310      	adds	r3, #16
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	705a      	strb	r2, [r3, #1]
 8002cea:	e00c      	b.n	8002d06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PCD_EP_SetStall+0x7e>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_SetStall+0x9c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 ff87 	bl	8008c48 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	7912      	ldrb	r2, [r2, #4]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e040      	b.n	8002dec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da0e      	bge.n	8002d90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 0207 	and.w	r2, r3, #7
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3310      	adds	r3, #16
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	705a      	strb	r2, [r3, #1]
 8002d8e:	e00e      	b.n	8002dae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0207 	and.w	r2, r3, #7
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_PCD_EP_ClrStall+0x82>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e00e      	b.n	8002dec <HAL_PCD_EP_ClrStall+0xa0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f005 ff84 	bl	8008cea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b096      	sub	sp, #88	@ 0x58
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dfc:	e3ad      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002e18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 816f 	bne.w	8003100 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d14c      	bne.n	8002ec8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3e:	81fb      	strh	r3, [r7, #14]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	89fb      	ldrh	r3, [r7, #14]
 8002e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3310      	adds	r3, #16
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	441a      	add	r2, r3
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f007 ff6e 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7b1b      	ldrb	r3, [r3, #12]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 835c 	beq.w	800355a <PCD_EP_ISR_Handler+0x766>
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8357 	bne.w	800355a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7b1b      	ldrb	r3, [r3, #12]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	731a      	strb	r2, [r3, #12]
 8002ec6:	e348      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ece:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d032      	beq.n	8002f4c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	4413      	add	r3, r2
 8002f00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f006 f80d 	bl	8008f40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f32:	4013      	ands	r3, r2
 8002f34:	823b      	strh	r3, [r7, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	8a3a      	ldrh	r2, [r7, #16]
 8002f3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f40:	b292      	uxth	r2, r2
 8002f42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f007 fee7 	bl	800ad18 <HAL_PCD_SetupStageCallback>
 8002f4a:	e306      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f4c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f280 8302 	bge.w	800355a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f62:	4013      	ands	r3, r2
 8002f64:	83fb      	strh	r3, [r7, #30]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	8bfa      	ldrh	r2, [r7, #30]
 8002f6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f70:	b292      	uxth	r2, r2
 8002f72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d019      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x1e4>
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	6959      	ldr	r1, [r3, #20]
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f005 ffbf 	bl	8008f40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	441a      	add	r2, r3
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f007 feb2 	bl	800ad3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fe2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 82b5 	bne.w	800355a <PCD_EP_ISR_Handler+0x766>
 8002ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ffc:	f000 82ad 	beq.w	800355a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302a:	b29a      	uxth	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b3e      	cmp	r3, #62	@ 0x3e
 8003036:	d91d      	bls.n	8003074 <PCD_EP_ISR_Handler+0x280>
 8003038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <PCD_EP_ISR_Handler+0x25e>
 800304c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304e:	3b01      	subs	r3, #1
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29a      	uxth	r2, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800305a:	b29b      	uxth	r3, r3
 800305c:	029b      	lsls	r3, r3, #10
 800305e:	b29b      	uxth	r3, r3
 8003060:	4313      	orrs	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306c:	b29a      	uxth	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	e026      	b.n	80030c2 <PCD_EP_ISR_Handler+0x2ce>
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <PCD_EP_ISR_Handler+0x29e>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29a      	uxth	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e017      	b.n	80030c2 <PCD_EP_ISR_Handler+0x2ce>
 8003092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	647b      	str	r3, [r7, #68]	@ 0x44
 800309a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <PCD_EP_ISR_Handler+0x2b8>
 80030a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a8:	3301      	adds	r3, #1
 80030aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b29a      	uxth	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d2:	827b      	strh	r3, [r7, #18]
 80030d4:	8a7b      	ldrh	r3, [r7, #18]
 80030d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030da:	827b      	strh	r3, [r7, #18]
 80030dc:	8a7b      	ldrh	r3, [r7, #18]
 80030de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030e2:	827b      	strh	r3, [r7, #18]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	8a7b      	ldrh	r3, [r7, #18]
 80030ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	8013      	strh	r3, [r2, #0]
 80030fe:	e22c      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003114:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003118:	2b00      	cmp	r3, #0
 800311a:	f280 80f6 	bge.w	800330a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29a      	uxth	r2, r3
 8003130:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003134:	4013      	ands	r3, r2
 8003136:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800314c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003150:	b292      	uxth	r2, r2
 8003152:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003154:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800316a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316c:	7b1b      	ldrb	r3, [r3, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d123      	bne.n	80031ba <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4413      	add	r3, r2
 800318c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003196:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800319a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 808e 	beq.w	80032c0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	6959      	ldr	r1, [r3, #20]
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	88da      	ldrh	r2, [r3, #6]
 80031b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031b4:	f005 fec4 	bl	8008f40 <USB_ReadPMA>
 80031b8:	e082      	b.n	80032c0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d10a      	bne.n	80031d8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031c6:	461a      	mov	r2, r3
 80031c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9d3 	bl	8003576 <HAL_PCD_EP_DB_Receive>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80031d6:	e073      	b.n	80032c0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d022      	beq.n	800327c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4413      	add	r3, r2
 8003250:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800325e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02c      	beq.n	80032c0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326c:	6959      	ldr	r1, [r3, #20]
 800326e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003270:	891a      	ldrh	r2, [r3, #8]
 8003272:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003276:	f005 fe63 	bl	8008f40 <USB_ReadPMA>
 800327a:	e021      	b.n	80032c0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003284:	b29b      	uxth	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4413      	add	r3, r2
 8003296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80032a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	6959      	ldr	r1, [r3, #20]
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	895a      	ldrh	r2, [r3, #10]
 80032b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032bc:	f005 fe40 	bl	8008f40 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032c8:	441a      	add	r2, r3
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032d6:	441a      	add	r2, r3
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <PCD_EP_ISR_Handler+0x4fc>
 80032e4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d206      	bcs.n	80032fe <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f007 fd20 	bl	800ad3c <HAL_PCD_DataOutStageCallback>
 80032fc:	e005      	b.n	800330a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003304:	4618      	mov	r0, r3
 8003306:	f004 f8ee 	bl	80074e6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800330a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800330e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8121 	beq.w	800355a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003318:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	3310      	adds	r3, #16
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800335c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 80a2 	bne.w	80034b6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	7b1b      	ldrb	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8093 	beq.w	80034a8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003382:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d046      	beq.n	800341c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d126      	bne.n	80033e4 <PCD_EP_ISR_Handler+0x5f0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	4413      	add	r3, r2
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00da      	lsls	r2, r3, #3
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	4413      	add	r3, r2
 80033b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033dc:	b29a      	uxth	r2, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	e061      	b.n	80034a8 <PCD_EP_ISR_Handler+0x6b4>
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d15d      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x6b4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003400:	4413      	add	r3, r2
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00da      	lsls	r2, r3, #3
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	4413      	add	r3, r2
 800340e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	801a      	strh	r2, [r3, #0]
 800341a:	e045      	b.n	80034a8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d126      	bne.n	8003478 <PCD_EP_ISR_Handler+0x684>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	4413      	add	r3, r2
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
 8003442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344a:	4413      	add	r3, r2
 800344c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345c:	b29a      	uxth	r2, r3
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003470:	b29a      	uxth	r2, r3
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	e017      	b.n	80034a8 <PCD_EP_ISR_Handler+0x6b4>
 8003478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d113      	bne.n	80034a8 <PCD_EP_ISR_Handler+0x6b4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348e:	4413      	add	r3, r2
 8003490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00da      	lsls	r2, r3, #3
 8003498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349a:	4413      	add	r3, r2
 800349c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a4:	2200      	movs	r2, #0
 80034a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f007 fc5f 	bl	800ad72 <HAL_PCD_DataInStageCallback>
 80034b4:	e051      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d144      	bne.n	800354c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d907      	bls.n	8003506 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	619a      	str	r2, [r3, #24]
 8003504:	e002      	b.n	800350c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d106      	bne.n	8003522 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f007 fc29 	bl	800ad72 <HAL_PCD_DataInStageCallback>
 8003520:	e01b      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800352a:	441a      	add	r2, r3
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003538:	441a      	add	r2, r3
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003544:	4618      	mov	r0, r3
 8003546:	f003 ffce 	bl	80074e6 <USB_EPStartXfer>
 800354a:	e006      	b.n	800355a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800354c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003550:	461a      	mov	r2, r3
 8003552:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f917 	bl	8003788 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003562:	b29b      	uxth	r3, r3
 8003564:	b21b      	sxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	f6ff ac49 	blt.w	8002dfe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3758      	adds	r7, #88	@ 0x58
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b088      	sub	sp, #32
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	4613      	mov	r3, r2
 8003582:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d07c      	beq.n	8003688 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	699a      	ldr	r2, [r3, #24]
 80035b8:	8b7b      	ldrh	r3, [r7, #26]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d306      	bcc.n	80035cc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	8b7b      	ldrh	r3, [r7, #26]
 80035c4:	1ad2      	subs	r2, r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	619a      	str	r2, [r3, #24]
 80035ca:	e002      	b.n	80035d2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d123      	bne.n	8003622 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f4:	833b      	strh	r3, [r7, #24]
 80035f6:	8b3b      	ldrh	r3, [r7, #24]
 80035f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035fc:	833b      	strh	r3, [r7, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	8b3b      	ldrh	r3, [r7, #24]
 800360e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800361a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361e:	b29b      	uxth	r3, r3
 8003620:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01f      	beq.n	800366c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003646:	82fb      	strh	r3, [r7, #22]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	8afb      	ldrh	r3, [r7, #22]
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800366c:	8b7b      	ldrh	r3, [r7, #26]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8085 	beq.w	800377e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6959      	ldr	r1, [r3, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	891a      	ldrh	r2, [r3, #8]
 8003680:	8b7b      	ldrh	r3, [r7, #26]
 8003682:	f005 fc5d 	bl	8008f40 <USB_ReadPMA>
 8003686:	e07a      	b.n	800377e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	8b7b      	ldrh	r3, [r7, #26]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d306      	bcc.n	80036c6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	8b7b      	ldrh	r3, [r7, #26]
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	e002      	b.n	80036cc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d123      	bne.n	800371c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ee:	83fb      	strh	r3, [r7, #30]
 80036f0:	8bfb      	ldrh	r3, [r7, #30]
 80036f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036f6:	83fb      	strh	r3, [r7, #30]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	8bfb      	ldrh	r3, [r7, #30]
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800373c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003740:	83bb      	strh	r3, [r7, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	441a      	add	r2, r3
 8003750:	8bbb      	ldrh	r3, [r7, #28]
 8003752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800375a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003762:	b29b      	uxth	r3, r3
 8003764:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003766:	8b7b      	ldrh	r3, [r7, #26]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6959      	ldr	r1, [r3, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	895a      	ldrh	r2, [r3, #10]
 8003778:	8b7b      	ldrh	r3, [r7, #26]
 800377a:	f005 fbe1 	bl	8008f40 <USB_ReadPMA>
    }
  }

  return count;
 800377e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0a4      	sub	sp, #144	@ 0x90
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 81db 	beq.w	8003b58 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	4413      	add	r3, r2
 80037bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d907      	bls.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	619a      	str	r2, [r3, #24]
 80037e4:	e002      	b.n	80037ec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 80b9 	bne.w	8003968 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d126      	bne.n	800384c <HAL_PCD_EP_DB_Transmit+0xc4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	4413      	add	r3, r2
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	4413      	add	r3, r2
 8003820:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003830:	b29a      	uxth	r2, r3
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003844:	b29a      	uxth	r2, r3
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e01a      	b.n	8003882 <HAL_PCD_EP_DB_Transmit+0xfa>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d116      	bne.n	8003882 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003868:	4413      	add	r3, r2
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00da      	lsls	r2, r3, #3
 8003872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003874:	4413      	add	r3, r2
 8003876:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387e:	2200      	movs	r2, #0
 8003880:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d126      	bne.n	80038de <HAL_PCD_EP_DB_Transmit+0x156>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00da      	lsls	r2, r3, #3
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e017      	b.n	800390e <HAL_PCD_EP_DB_Transmit+0x186>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d113      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x186>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	4413      	add	r3, r2
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00da      	lsls	r2, r3, #3
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	4413      	add	r3, r2
 8003902:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	2200      	movs	r2, #0
 800390c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f007 fa2c 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 82fa 	beq.w	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003940:	82fb      	strh	r3, [r7, #22]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800395e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
 8003966:	e2d8      	b.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d021      	beq.n	80039b6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80039a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 82ac 	bne.w	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ca:	441a      	add	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	69da      	ldr	r2, [r3, #28]
 80039d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039d8:	441a      	add	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d30b      	bcc.n	8003a02 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	621a      	str	r2, [r3, #32]
 8003a00:	e017      	b.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003a0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a1a:	e00a      	b.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d165      	bne.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4e:	4413      	add	r3, r2
 8003a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	00da      	lsls	r2, r3, #3
 8003a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a76:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a78:	d91d      	bls.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a90:	3b01      	subs	r3, #1
 8003a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	e044      	b.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	e035      	b.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_PCD_EP_DB_Transmit+0x366>
 8003ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aea:	3301      	adds	r3, #1
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	029b      	lsls	r3, r3, #10
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4313      	orrs	r3, r2
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	e01c      	b.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d118      	bne.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b22:	4413      	add	r3, r2
 8003b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2e:	4413      	add	r3, r2
 8003b30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6959      	ldr	r1, [r3, #20]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	891a      	ldrh	r2, [r3, #8]
 8003b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f005 f9b3 	bl	8008ebc <USB_WritePMA>
 8003b56:	e1e0      	b.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d307      	bcc.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b94:	1ad2      	subs	r2, r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	619a      	str	r2, [r3, #24]
 8003b9a:	e002      	b.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 80c0 	bne.w	8003d2c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d126      	bne.n	8003c02 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bc8:	4413      	add	r3, r2
 8003bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	00da      	lsls	r2, r3, #3
 8003bd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	e01a      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d116      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c1e:	4413      	add	r3, r2
 8003c20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	00da      	lsls	r2, r3, #3
 8003c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d12b      	bne.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x516>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	00da      	lsls	r2, r3, #3
 8003c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c66:	4413      	add	r3, r2
 8003c68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e017      	b.n	8003cce <HAL_PCD_EP_DB_Transmit+0x546>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	785b      	ldrb	r3, [r3, #1]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d113      	bne.n	8003cce <HAL_PCD_EP_DB_Transmit+0x546>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb4:	4413      	add	r3, r2
 8003cb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	00da      	lsls	r2, r3, #3
 8003cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cca:	2200      	movs	r2, #0
 8003ccc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f007 f84c 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 811a 	bne.w	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d00:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	441a      	add	r2, r3
 8003d12:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
 8003d2a:	e0f6      	b.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d121      	bne.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f040 80ca 	bne.w	8003f1a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d8e:	441a      	add	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d9c:	441a      	add	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d30b      	bcc.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	621a      	str	r2, [r3, #32]
 8003dc4:	e017      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003dce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003dde:	e00a      	b.n	8003df6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d165      	bne.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x748>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e18:	4413      	add	r3, r2
 8003e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00da      	lsls	r2, r3, #3
 8003e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e40:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e42:	d91d      	bls.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	e041      	b.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x716>
 8003e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e032      	b.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x730>
 8003eb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	e019      	b.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d115      	bne.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee6:	4413      	add	r3, r2
 8003ee8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	00da      	lsls	r2, r3, #3
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f02:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	6959      	ldr	r1, [r3, #20]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	895a      	ldrh	r2, [r3, #10]
 8003f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f004 ffd1 	bl	8008ebc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f34:	82bb      	strh	r3, [r7, #20]
 8003f36:	8abb      	ldrh	r3, [r7, #20]
 8003f38:	f083 0310 	eor.w	r3, r3, #16
 8003f3c:	82bb      	strh	r3, [r7, #20]
 8003f3e:	8abb      	ldrh	r3, [r7, #20]
 8003f40:	f083 0320 	eor.w	r3, r3, #32
 8003f44:	82bb      	strh	r3, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	8abb      	ldrh	r3, [r7, #20]
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3790      	adds	r7, #144	@ 0x90
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	4613      	mov	r3, r2
 8003f84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	f003 0207 	and.w	r2, r3, #7
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3310      	adds	r3, #16
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e009      	b.n	8003fbe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003faa:	897a      	ldrh	r2, [r7, #10]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d107      	bne.n	8003fd4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	80da      	strh	r2, [r3, #6]
 8003fd2:	e00b      	b.n	8003fec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800401e:	b29b      	uxth	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004032:	b29b      	uxth	r3, r3
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d141      	bne.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405e:	4b4b      	ldr	r3, [pc, #300]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d131      	bne.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800406c:	4b47      	ldr	r3, [pc, #284]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004072:	4a46      	ldr	r2, [pc, #280]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004078:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407c:	4b43      	ldr	r3, [pc, #268]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004084:	4a41      	ldr	r2, [pc, #260]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800408c:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2232      	movs	r2, #50	@ 0x32
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	4a3f      	ldr	r2, [pc, #252]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	0c9b      	lsrs	r3, r3, #18
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	e002      	b.n	80040aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040aa:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b6:	d102      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f2      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040be:	4b33      	ldr	r3, [pc, #204]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ca:	d158      	bne.n	800417e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e057      	b.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d0:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d6:	4a2d      	ldr	r2, [pc, #180]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040e0:	e04d      	b.n	800417e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e8:	d141      	bne.n	800416e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f6:	d131      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040f8:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fe:	4a23      	ldr	r2, [pc, #140]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004104:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004108:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004110:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004116:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004118:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2232      	movs	r2, #50	@ 0x32
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	0c9b      	lsrs	r3, r3, #18
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412e:	e002      	b.n	8004136 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3b01      	subs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004142:	d102      	bne.n	800414a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f2      	bne.n	8004130 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d112      	bne.n	800417e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e011      	b.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004168:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800416c:	e007      	b.n	800417e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004176:	4a05      	ldr	r2, [pc, #20]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800417c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40007000 	.word	0x40007000
 8004190:	20000004 	.word	0x20000004
 8004194:	431bde83 	.word	0x431bde83

08004198 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041a6:	6093      	str	r3, [r2, #8]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e2fe      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d075      	beq.n	80042c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d6:	4b97      	ldr	r3, [pc, #604]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e0:	4b94      	ldr	r3, [pc, #592]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b0c      	cmp	r3, #12
 80041ee:	d102      	bne.n	80041f6 <HAL_RCC_OscConfig+0x3e>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d002      	beq.n	80041fc <HAL_RCC_OscConfig+0x44>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d05b      	beq.n	80042c0 <HAL_RCC_OscConfig+0x108>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d157      	bne.n	80042c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e2d9      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421c:	d106      	bne.n	800422c <HAL_RCC_OscConfig+0x74>
 800421e:	4b85      	ldr	r3, [pc, #532]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a84      	ldr	r2, [pc, #528]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01d      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x98>
 8004236:	4b7f      	ldr	r3, [pc, #508]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7e      	ldr	r2, [pc, #504]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800423c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b7c      	ldr	r3, [pc, #496]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a7b      	ldr	r2, [pc, #492]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_OscConfig+0xb0>
 8004250:	4b78      	ldr	r3, [pc, #480]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a77      	ldr	r2, [pc, #476]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b75      	ldr	r3, [pc, #468]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a74      	ldr	r2, [pc, #464]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fc ff60 	bl	8001134 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fc ff5c 	bl	8001134 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	@ 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e29e      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428a:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0xc0>
 8004296:	e014      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fc ff4c 	bl	8001134 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fc ff48 	bl	8001134 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e28a      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b2:	4b60      	ldr	r3, [pc, #384]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0xe8>
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d075      	beq.n	80043ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ce:	4b59      	ldr	r3, [pc, #356]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d8:	4b56      	ldr	r3, [pc, #344]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_OscConfig+0x136>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_OscConfig+0x13c>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d11f      	bne.n	8004334 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_OscConfig+0x154>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e25d      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b49      	ldr	r3, [pc, #292]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4946      	ldr	r1, [pc, #280]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004320:	4b45      	ldr	r3, [pc, #276]	@ (8004438 <HAL_RCC_OscConfig+0x280>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc feb9 	bl	800109c <HAL_InitTick>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d043      	beq.n	80043b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e249      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d023      	beq.n	8004384 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b3d      	ldr	r3, [pc, #244]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3c      	ldr	r2, [pc, #240]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fc fef4 	bl	8001134 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fc fef0 	bl	8001134 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e232      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	4b34      	ldr	r3, [pc, #208]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	492d      	ldr	r1, [pc, #180]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
 8004382:	e01a      	b.n	80043ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004384:	4b2b      	ldr	r3, [pc, #172]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2a      	ldr	r2, [pc, #168]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800438a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fc fed0 	bl	8001134 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004398:	f7fc fecc 	bl	8001134 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e20e      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043aa:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1e0>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d041      	beq.n	800444a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01c      	beq.n	8004408 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b19      	ldr	r3, [pc, #100]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d4:	4a17      	ldr	r2, [pc, #92]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fc fea9 	bl	8001134 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fc fea5 	bl	8001134 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1e7      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ef      	beq.n	80043e6 <HAL_RCC_OscConfig+0x22e>
 8004406:	e020      	b.n	800444a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440e:	4a09      	ldr	r2, [pc, #36]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fc fe8c 	bl	8001134 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441e:	e00d      	b.n	800443c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004420:	f7fc fe88 	bl	8001134 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d906      	bls.n	800443c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e1ca      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800443c:	4b8c      	ldr	r3, [pc, #560]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ea      	bne.n	8004420 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a6 	beq.w	80045a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800445c:	4b84      	ldr	r3, [pc, #528]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_OscConfig+0x2b4>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x2b6>
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	4b7f      	ldr	r3, [pc, #508]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004476:	4a7e      	ldr	r2, [pc, #504]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447c:	6593      	str	r3, [r2, #88]	@ 0x58
 800447e:	4b7c      	ldr	r3, [pc, #496]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800448a:	2301      	movs	r3, #1
 800448c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800448e:	4b79      	ldr	r3, [pc, #484]	@ (8004674 <HAL_RCC_OscConfig+0x4bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d118      	bne.n	80044cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449a:	4b76      	ldr	r3, [pc, #472]	@ (8004674 <HAL_RCC_OscConfig+0x4bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a75      	ldr	r2, [pc, #468]	@ (8004674 <HAL_RCC_OscConfig+0x4bc>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a6:	f7fc fe45 	bl	8001134 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ae:	f7fc fe41 	bl	8001134 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e183      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004674 <HAL_RCC_OscConfig+0x4bc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d108      	bne.n	80044e6 <HAL_RCC_OscConfig+0x32e>
 80044d4:	4b66      	ldr	r3, [pc, #408]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044da:	4a65      	ldr	r2, [pc, #404]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e4:	e024      	b.n	8004530 <HAL_RCC_OscConfig+0x378>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d110      	bne.n	8004510 <HAL_RCC_OscConfig+0x358>
 80044ee:	4b60      	ldr	r3, [pc, #384]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80044f6:	f043 0304 	orr.w	r3, r3, #4
 80044fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	4a5a      	ldr	r2, [pc, #360]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800450e:	e00f      	b.n	8004530 <HAL_RCC_OscConfig+0x378>
 8004510:	4b57      	ldr	r3, [pc, #348]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004516:	4a56      	ldr	r2, [pc, #344]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004520:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	4a52      	ldr	r2, [pc, #328]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d016      	beq.n	8004566 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fc fdfc 	bl	8001134 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fc fdf8 	bl	8001134 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e138      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ed      	beq.n	8004540 <HAL_RCC_OscConfig+0x388>
 8004564:	e015      	b.n	8004592 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fc fde5 	bl	8001134 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fc fde1 	bl	8001134 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e121      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004584:	4b3a      	ldr	r3, [pc, #232]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ed      	bne.n	800456e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004592:	7ffb      	ldrb	r3, [r7, #31]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459c:	4a34      	ldr	r2, [pc, #208]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d03c      	beq.n	800462a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045be:	4a2c      	ldr	r2, [pc, #176]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fc fdb4 	bl	8001134 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d0:	f7fc fdb0 	bl	8001134 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0f2      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045e2:	4b23      	ldr	r3, [pc, #140]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ef      	beq.n	80045d0 <HAL_RCC_OscConfig+0x418>
 80045f0:	e01b      	b.n	800462a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004602:	f7fc fd97 	bl	8001134 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800460a:	f7fc fd93 	bl	8001134 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e0d5      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800461c:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800461e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ef      	bne.n	800460a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80c9 	beq.w	80047c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b0c      	cmp	r3, #12
 800463e:	f000 8083 	beq.w	8004748 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d15e      	bne.n	8004708 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464a:	4b09      	ldr	r3, [pc, #36]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fc fd6d 	bl	8001134 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465c:	e00c      	b.n	8004678 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465e:	f7fc fd69 	bl	8001134 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d905      	bls.n	8004678 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0ab      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
 8004670:	40021000 	.word	0x40021000
 8004674:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ec      	bne.n	800465e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004684:	4b52      	ldr	r3, [pc, #328]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	4b52      	ldr	r3, [pc, #328]	@ (80047d4 <HAL_RCC_OscConfig+0x61c>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6a11      	ldr	r1, [r2, #32]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004694:	3a01      	subs	r2, #1
 8004696:	0112      	lsls	r2, r2, #4
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800469e:	0212      	lsls	r2, r2, #8
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046a6:	0852      	lsrs	r2, r2, #1
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0552      	lsls	r2, r2, #21
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046b2:	0852      	lsrs	r2, r2, #1
 80046b4:	3a01      	subs	r2, #1
 80046b6:	0652      	lsls	r2, r2, #25
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046be:	06d2      	lsls	r2, r2, #27
 80046c0:	430a      	orrs	r2, r1
 80046c2:	4943      	ldr	r1, [pc, #268]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b41      	ldr	r3, [pc, #260]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a40      	ldr	r2, [pc, #256]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d4:	4b3e      	ldr	r3, [pc, #248]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a3d      	ldr	r2, [pc, #244]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc fd28 	bl	8001134 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fc fd24 	bl	8001134 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e066      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x530>
 8004706:	e05e      	b.n	80047c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004708:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a30      	ldr	r2, [pc, #192]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 800470e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fc fd0e 	bl	8001134 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fc fd0a 	bl	8001134 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e04c      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800473a:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	4924      	ldr	r1, [pc, #144]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004740:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x620>)
 8004742:	4013      	ands	r3, r2
 8004744:	60cb      	str	r3, [r1, #12]
 8004746:	e03e      	b.n	80047c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e039      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004754:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <HAL_RCC_OscConfig+0x618>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0203 	and.w	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	429a      	cmp	r2, r3
 8004766:	d12c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	3b01      	subs	r3, #1
 8004774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d123      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d11b      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d113      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	3b01      	subs	r3, #1
 80047bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	019f800c 	.word	0x019f800c
 80047d8:	feeefffc 	.word	0xfeeefffc

080047dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e11e      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b91      	ldr	r3, [pc, #580]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d910      	bls.n	8004824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b8e      	ldr	r3, [pc, #568]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	498c      	ldr	r1, [pc, #560]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b8a      	ldr	r3, [pc, #552]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e106      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d073      	beq.n	8004918 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d129      	bne.n	800488c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	4b81      	ldr	r3, [pc, #516]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0f4      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004848:	f000 f99e 	bl	8004b88 <RCC_GetSysClockFreqFromPLLSource>
 800484c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4a7c      	ldr	r2, [pc, #496]	@ (8004a44 <HAL_RCC_ClockConfig+0x268>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d93f      	bls.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004856:	4b7a      	ldr	r3, [pc, #488]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d033      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004872:	2b00      	cmp	r3, #0
 8004874:	d12f      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004876:	4b72      	ldr	r3, [pc, #456]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800487e:	4a70      	ldr	r2, [pc, #448]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e024      	b.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004894:	4b6a      	ldr	r3, [pc, #424]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d109      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0c6      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0be      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048b4:	f000 f8ce 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a61      	ldr	r2, [pc, #388]	@ (8004a44 <HAL_RCC_ClockConfig+0x268>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d909      	bls.n	80048d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4957      	ldr	r1, [pc, #348]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fc fc24 	bl	8001134 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fc fc20 	bl	8001134 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e095      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b4e      	ldr	r3, [pc, #312]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d023      	beq.n	800496c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004930:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a42      	ldr	r2, [pc, #264]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004936:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800493a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004948:	4b3d      	ldr	r3, [pc, #244]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004950:	4a3b      	ldr	r2, [pc, #236]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004952:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4936      	ldr	r1, [pc, #216]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	e008      	b.n	800497e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b80      	cmp	r3, #128	@ 0x80
 8004970:	d105      	bne.n	800497e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004972:	4b33      	ldr	r3, [pc, #204]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a32      	ldr	r2, [pc, #200]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004978:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800497c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d21d      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 020f 	bic.w	r2, r3, #15
 8004994:	4929      	ldr	r1, [pc, #164]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800499c:	f7fc fbca 	bl	8001134 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fc fbc6 	bl	8001134 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e03b      	b.n	8004a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_RCC_ClockConfig+0x260>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1ed      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4917      	ldr	r1, [pc, #92]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	490f      	ldr	r1, [pc, #60]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a06:	f000 f825 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490c      	ldr	r1, [pc, #48]	@ (8004a48 <HAL_RCC_ClockConfig+0x26c>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <HAL_RCC_ClockConfig+0x270>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <HAL_RCC_ClockConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fb36 	bl	800109c <HAL_InitTick>
 8004a30:	4603      	mov	r3, r0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	04c4b400 	.word	0x04c4b400
 8004a48:	0800b384 	.word	0x0800b384
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	20000008 	.word	0x20000008

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a66:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e047      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d102      	bne.n	8004a7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a78:	4b26      	ldr	r3, [pc, #152]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e03e      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a7e:	4b23      	ldr	r3, [pc, #140]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d136      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8a:	4b20      	ldr	r3, [pc, #128]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab0:	4a16      	ldr	r2, [pc, #88]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab2:	68d2      	ldr	r2, [r2, #12]
 8004ab4:	0a12      	lsrs	r2, r2, #8
 8004ab6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	617b      	str	r3, [r7, #20]
      break;
 8004ac0:	e00c      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac2:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	4a10      	ldr	r2, [pc, #64]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	0a12      	lsrs	r2, r2, #8
 8004ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
      break;
 8004ada:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e001      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004afc:	693b      	ldr	r3, [r7, #16]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	016e3600 	.word	0x016e3600

08004b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	@ (8004b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20000004 	.word	0x20000004

08004b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4904      	ldr	r1, [pc, #16]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	0800b394 	.word	0x0800b394

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b60:	f7ff ffda 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0adb      	lsrs	r3, r3, #11
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800b394 	.word	0x0800b394

08004b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d10c      	bne.n	8004bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	4a14      	ldr	r2, [pc, #80]	@ (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bb6:	68d2      	ldr	r2, [r2, #12]
 8004bb8:	0a12      	lsrs	r2, r2, #8
 8004bba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
    break;
 8004bc4:	e00c      	b.n	8004be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bc6:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	4a0e      	ldr	r2, [pc, #56]	@ (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd0:	68d2      	ldr	r2, [r2, #12]
 8004bd2:	0a12      	lsrs	r2, r2, #8
 8004bd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
    break;
 8004bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0e5b      	lsrs	r3, r3, #25
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bfa:	687b      	ldr	r3, [r7, #4]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	016e3600 	.word	0x016e3600
 8004c10:	00f42400 	.word	0x00f42400

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c20:	2300      	movs	r3, #0
 8004c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8098 	beq.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b43      	ldr	r3, [pc, #268]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b40      	ldr	r3, [pc, #256]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	4a3f      	ldr	r2, [pc, #252]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a39      	ldr	r2, [pc, #228]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c6a:	f7fc fa63 	bl	8001134 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c70:	e009      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c72:	f7fc fa5f 	bl	8001134 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d902      	bls.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	74fb      	strb	r3, [r7, #19]
        break;
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c86:	4b30      	ldr	r3, [pc, #192]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c92:	7cfb      	ldrb	r3, [r7, #19]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d159      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c98:	4b2a      	ldr	r3, [pc, #168]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01e      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d019      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cb4:	4b23      	ldr	r3, [pc, #140]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce0:	4a18      	ldr	r2, [pc, #96]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fa1f 	bl	8001134 <HAL_GetTick>
 8004cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fc fa1b 	bl	8001134 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d902      	bls.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ec      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d34:	4903      	ldr	r1, [pc, #12]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3e:	7cfb      	ldrb	r3, [r7, #19]
 8004d40:	74bb      	strb	r3, [r7, #18]
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d50:	7c7b      	ldrb	r3, [r7, #17]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d56:	4ba7      	ldr	r3, [pc, #668]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d74:	f023 0203 	bic.w	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	499d      	ldr	r1, [pc, #628]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d90:	4b98      	ldr	r3, [pc, #608]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f023 020c 	bic.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4995      	ldr	r1, [pc, #596]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004db2:	4b90      	ldr	r3, [pc, #576]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	498c      	ldr	r1, [pc, #560]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd4:	4b87      	ldr	r3, [pc, #540]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	4984      	ldr	r1, [pc, #528]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	497b      	ldr	r1, [pc, #492]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e18:	4b76      	ldr	r3, [pc, #472]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	4973      	ldr	r1, [pc, #460]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	496a      	ldr	r1, [pc, #424]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e5c:	4b65      	ldr	r3, [pc, #404]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4962      	ldr	r1, [pc, #392]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	4959      	ldr	r1, [pc, #356]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea0:	4b54      	ldr	r3, [pc, #336]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	4951      	ldr	r1, [pc, #324]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	4948      	ldr	r1, [pc, #288]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee2:	4b44      	ldr	r3, [pc, #272]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a43      	ldr	r2, [pc, #268]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d015      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004efa:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	493a      	ldr	r1, [pc, #232]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f18:	d105      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a35      	ldr	r2, [pc, #212]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f24:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f32:	4b30      	ldr	r3, [pc, #192]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f40:	492c      	ldr	r1, [pc, #176]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f52:	4b28      	ldr	r3, [pc, #160]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4a27      	ldr	r2, [pc, #156]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f5c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f6a:	4b22      	ldr	r3, [pc, #136]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	491e      	ldr	r1, [pc, #120]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f88:	d105      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f94:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb0:	4910      	ldr	r1, [pc, #64]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc0:	d105      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fcc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	4902      	ldr	r1, [pc, #8]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ffe:	d105      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005000:	4b21      	ldr	r3, [pc, #132]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a20      	ldr	r2, [pc, #128]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d015      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005018:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	4918      	ldr	r1, [pc, #96]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005036:	d105      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005038:	4b13      	ldr	r3, [pc, #76]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005042:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005050:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505e:	490a      	ldr	r1, [pc, #40]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800506e:	d105      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005070:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a04      	ldr	r2, [pc, #16]	@ (8005088 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800507a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800507c:	7cbb      	ldrb	r3, [r7, #18]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800509e:	d136      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80050a0:	4bb3      	ldr	r3, [pc, #716]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80050ac:	4bb0      	ldr	r3, [pc, #704]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d108      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c0:	d104      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	f000 bce6 	b.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80050cc:	4ba8      	ldr	r3, [pc, #672]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80050ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d108      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e0:	d104      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80050e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	f000 bcd6 	b.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80050ec:	4ba0      	ldr	r3, [pc, #640]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050f8:	f040 84ce 	bne.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005102:	f040 84c9 	bne.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 8005106:	4b9b      	ldr	r3, [pc, #620]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	f000 bcc5 	b.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800510e:	4b98      	ldr	r3, [pc, #608]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d10c      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800511a:	4b95      	ldr	r3, [pc, #596]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005126:	d102      	bne.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8005128:	4b93      	ldr	r3, [pc, #588]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e017      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e014      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8005134:	4b8e      	ldr	r3, [pc, #568]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b03      	cmp	r3, #3
 800513e:	d10c      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005140:	4b8b      	ldr	r3, [pc, #556]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800514c:	d102      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800514e:	4b8b      	ldr	r3, [pc, #556]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e004      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	e001      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800515e:	4b84      	ldr	r3, [pc, #528]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	3301      	adds	r3, #1
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005178:	f000 843c 	beq.w	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005182:	f200 8464 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518c:	f000 83f7 	beq.w	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005196:	f200 845a 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a0:	f000 83b0 	beq.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051aa:	f200 8450 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051b4:	f000 8378 	beq.w	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051be:	f200 8446 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c8:	f000 8335 	beq.w	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d2:	f200 843c 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051dc:	f000 82f6 	beq.w	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e6:	f200 8432 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f0:	f000 82a8 	beq.w	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051fa:	f200 8428 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005204:	f000 825a 	beq.w	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520e:	f200 841e 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005218:	f000 8214 	beq.w	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005222:	f200 8414 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522c:	f000 81e0 	beq.w	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005236:	f200 840a 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	f000 81b2 	beq.w	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b80      	cmp	r3, #128	@ 0x80
 8005246:	f200 8402 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b20      	cmp	r3, #32
 800524e:	d84b      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 83fb 	beq.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	2b1f      	cmp	r3, #31
 800525e:	f200 83f6 	bhi.w	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8005262:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	080052f3 	.word	0x080052f3
 800526c:	08005355 	.word	0x08005355
 8005270:	08005a4f 	.word	0x08005a4f
 8005274:	080053c9 	.word	0x080053c9
 8005278:	08005a4f 	.word	0x08005a4f
 800527c:	08005a4f 	.word	0x08005a4f
 8005280:	08005a4f 	.word	0x08005a4f
 8005284:	0800542b 	.word	0x0800542b
 8005288:	08005a4f 	.word	0x08005a4f
 800528c:	08005a4f 	.word	0x08005a4f
 8005290:	08005a4f 	.word	0x08005a4f
 8005294:	08005a4f 	.word	0x08005a4f
 8005298:	08005a4f 	.word	0x08005a4f
 800529c:	08005a4f 	.word	0x08005a4f
 80052a0:	08005a4f 	.word	0x08005a4f
 80052a4:	0800548d 	.word	0x0800548d
 80052a8:	08005a4f 	.word	0x08005a4f
 80052ac:	08005a4f 	.word	0x08005a4f
 80052b0:	08005a4f 	.word	0x08005a4f
 80052b4:	08005a4f 	.word	0x08005a4f
 80052b8:	08005a4f 	.word	0x08005a4f
 80052bc:	08005a4f 	.word	0x08005a4f
 80052c0:	08005a4f 	.word	0x08005a4f
 80052c4:	08005a4f 	.word	0x08005a4f
 80052c8:	08005a4f 	.word	0x08005a4f
 80052cc:	08005a4f 	.word	0x08005a4f
 80052d0:	08005a4f 	.word	0x08005a4f
 80052d4:	08005a4f 	.word	0x08005a4f
 80052d8:	08005a4f 	.word	0x08005a4f
 80052dc:	08005a4f 	.word	0x08005a4f
 80052e0:	08005a4f 	.word	0x08005a4f
 80052e4:	080054f5 	.word	0x080054f5
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b40      	cmp	r3, #64	@ 0x40
 80052ec:	f000 8136 	beq.w	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 80052f0:	e3ad      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80052f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005304:	f7ff fc2a 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8005308:	61f8      	str	r0, [r7, #28]
      break;
 800530a:	e3a2      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d103      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 8005312:	f7ff fb9f 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005316:	61f8      	str	r0, [r7, #28]
      break;
 8005318:	e39b      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800531a:	4b15      	ldr	r3, [pc, #84]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d102      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 800532e:	4b12      	ldr	r3, [pc, #72]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8005330:	61fb      	str	r3, [r7, #28]
      break;
 8005332:	e38e      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005334:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	f040 8387 	bne.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b03      	cmp	r3, #3
 8005348:	f040 8383 	bne.w	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 800534c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005350:	61fb      	str	r3, [r7, #28]
      break;
 8005352:	e37e      	b.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005366:	f7ff fbe3 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800536a:	61f8      	str	r0, [r7, #28]
      break;
 800536c:	e373      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	000b71b0 	.word	0x000b71b0
 8005378:	00f42400 	.word	0x00f42400
 800537c:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d103      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 8005386:	f7ff fb65 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800538a:	61f8      	str	r0, [r7, #28]
      break;
 800538c:	e363      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800538e:	4ba3      	ldr	r3, [pc, #652]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539a:	d105      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d102      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 80053a2:	4b9f      	ldr	r3, [pc, #636]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80053a4:	61fb      	str	r3, [r7, #28]
      break;
 80053a6:	e356      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80053a8:	4b9c      	ldr	r3, [pc, #624]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f040 834f 	bne.w	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	f040 834b 	bne.w	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 80053c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053c4:	61fb      	str	r3, [r7, #28]
      break;
 80053c6:	e346      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80053c8:	4b94      	ldr	r3, [pc, #592]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053d2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 80053da:	f7ff fba9 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80053de:	61f8      	str	r0, [r7, #28]
      break;
 80053e0:	e33b      	b.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d103      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 80053e8:	f7ff fb34 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80053ec:	61f8      	str	r0, [r7, #28]
      break;
 80053ee:	e334      	b.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80053f0:	4b8a      	ldr	r3, [pc, #552]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053fc:	d105      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b20      	cmp	r3, #32
 8005402:	d102      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 8005404:	4b86      	ldr	r3, [pc, #536]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005406:	61fb      	str	r3, [r7, #28]
      break;
 8005408:	e327      	b.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800540a:	4b84      	ldr	r3, [pc, #528]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	f040 8320 	bne.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	f040 831c 	bne.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
      break;
 8005428:	e317      	b.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800542a:	4b7c      	ldr	r3, [pc, #496]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005434:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 800543c:	f7ff fb78 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8005440:	61f8      	str	r0, [r7, #28]
      break;
 8005442:	e30c      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d103      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 800544a:	f7ff fb03 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800544e:	61f8      	str	r0, [r7, #28]
      break;
 8005450:	e305      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005452:	4b72      	ldr	r3, [pc, #456]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d102      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 8005466:	4b6e      	ldr	r3, [pc, #440]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005468:	61fb      	str	r3, [r7, #28]
      break;
 800546a:	e2f8      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800546c:	4b6b      	ldr	r3, [pc, #428]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b02      	cmp	r3, #2
 8005478:	f040 82f1 	bne.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005480:	f040 82ed 	bne.w	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 8005484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005488:	61fb      	str	r3, [r7, #28]
      break;
 800548a:	e2e8      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800548c:	4b63      	ldr	r3, [pc, #396]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005496:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800549e:	f7ff fb47 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80054a2:	61f8      	str	r0, [r7, #28]
      break;
 80054a4:	e2dd      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ac:	d103      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 80054ae:	f7ff fad1 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80054b2:	61f8      	str	r0, [r7, #28]
      break;
 80054b4:	e2d5      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80054b6:	4b59      	ldr	r3, [pc, #356]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c2:	d106      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ca:	d102      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 80054cc:	4b54      	ldr	r3, [pc, #336]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80054ce:	61fb      	str	r3, [r7, #28]
      break;
 80054d0:	e2c7      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80054d2:	4b52      	ldr	r3, [pc, #328]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	f040 82c0 	bne.w	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e8:	f040 82bb 	bne.w	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 80054ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f0:	61fb      	str	r3, [r7, #28]
      break;
 80054f2:	e2b6      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80054f4:	4b49      	ldr	r3, [pc, #292]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054fe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005506:	f7ff fb13 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800550a:	61f8      	str	r0, [r7, #28]
      break;
 800550c:	e2ab      	b.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005514:	d103      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 8005516:	f7ff fa9d 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800551a:	61f8      	str	r0, [r7, #28]
      break;
 800551c:	e2a3      	b.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800551e:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005532:	d102      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 8005534:	4b3a      	ldr	r3, [pc, #232]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005536:	61fb      	str	r3, [r7, #28]
      break;
 8005538:	e295      	b.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800553a:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	f040 828e 	bne.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005550:	f040 8289 	bne.w	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 8005554:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005558:	61fb      	str	r3, [r7, #28]
      break;
 800555a:	e284      	b.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800555c:	4b2f      	ldr	r3, [pc, #188]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005562:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005566:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 800556e:	f7ff fadf 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8005572:	61f8      	str	r0, [r7, #28]
      break;
 8005574:	e279      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557c:	d103      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 800557e:	f7ff fa69 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005582:	61f8      	str	r0, [r7, #28]
      break;
 8005584:	e271      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005586:	4b25      	ldr	r3, [pc, #148]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005592:	f040 826a 	bne.w	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559c:	f040 8265 	bne.w	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 80055a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055a2:	61fb      	str	r3, [r7, #28]
      break;
 80055a4:	e261      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80055a6:	4b1d      	ldr	r3, [pc, #116]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80055b0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d103      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7ff faba 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80055bc:	61f8      	str	r0, [r7, #28]
      break;
 80055be:	e256      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055c6:	d103      	bne.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 80055c8:	f7ff fa44 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80055cc:	61f8      	str	r0, [r7, #28]
      break;
 80055ce:	e24e      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80055d0:	4b12      	ldr	r3, [pc, #72]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055dc:	f040 8247 	bne.w	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e6:	f040 8242 	bne.w	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 80055ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055ec:	61fb      	str	r3, [r7, #28]
      break;
 80055ee:	e23e      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80055f0:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055fa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005602:	f7ff fa95 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8005606:	61f8      	str	r0, [r7, #28]
      break;
 8005608:	e233      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005610:	d108      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 8005612:	f7ff fa1f 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005616:	61f8      	str	r0, [r7, #28]
      break;
 8005618:	e22b      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005624:	4b9b      	ldr	r3, [pc, #620]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005630:	f040 821f 	bne.w	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800563a:	f040 821a 	bne.w	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 800563e:	4b96      	ldr	r3, [pc, #600]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005640:	61fb      	str	r3, [r7, #28]
      break;
 8005642:	e216      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005644:	4b93      	ldr	r3, [pc, #588]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800564e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005656:	f7ff fa6b 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 800565a:	61f8      	str	r0, [r7, #28]
      break;
 800565c:	e20b      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800565e:	4b8d      	ldr	r3, [pc, #564]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d107      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005672:	d103      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 8005674:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e01e      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800567c:	4b85      	ldr	r3, [pc, #532]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005688:	d106      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005690:	d102      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 8005692:	4b81      	ldr	r3, [pc, #516]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	e010      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005698:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	f040 81e7 	bne.w	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056ae:	f040 81e2 	bne.w	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	61fb      	str	r3, [r7, #28]
      break;
 80056b8:	e1dd      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80056ba:	e1dc      	b.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056bc:	4b75      	ldr	r3, [pc, #468]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80056c6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 80056ce:	f7ff f9c1 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
      break;
 80056d4:	e1d1      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056dc:	d11b      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80056de:	4b6d      	ldr	r3, [pc, #436]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 81c7 	beq.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80056ec:	4b69      	ldr	r3, [pc, #420]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0a1b      	lsrs	r3, r3, #8
 80056f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	fb03 f202 	mul.w	r2, r3, r2
 8005700:	4b64      	ldr	r3, [pc, #400]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	0d5b      	lsrs	r3, r3, #21
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	3301      	adds	r3, #1
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	61fb      	str	r3, [r7, #28]
      break;
 8005714:	e1b1      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800571c:	d102      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 800571e:	4b5f      	ldr	r3, [pc, #380]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005720:	61fb      	str	r3, [r7, #28]
      break;
 8005722:	e1aa      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8005724:	4b5b      	ldr	r3, [pc, #364]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005730:	f040 81a3 	bne.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573a:	f040 819e 	bne.w	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 800573e:	4b56      	ldr	r3, [pc, #344]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005740:	61fb      	str	r3, [r7, #28]
      break;
 8005742:	e19a      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005744:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800574e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 8005756:	f7ff f97d 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800575a:	61f8      	str	r0, [r7, #28]
      break;
 800575c:	e18f      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005764:	d11b      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8005766:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8185 	beq.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005774:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800577e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	fb03 f202 	mul.w	r2, r3, r2
 8005788:	4b42      	ldr	r3, [pc, #264]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	0d5b      	lsrs	r3, r3, #21
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	61fb      	str	r3, [r7, #28]
      break;
 800579c:	e16f      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057a4:	d102      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 80057a6:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80057a8:	61fb      	str	r3, [r7, #28]
      break;
 80057aa:	e168      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80057ac:	4b39      	ldr	r3, [pc, #228]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b8:	f040 8161 	bne.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057c2:	f040 815c 	bne.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 80057c6:	4b34      	ldr	r3, [pc, #208]	@ (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80057c8:	61fb      	str	r3, [r7, #28]
      break;
 80057ca:	e158      	b.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80057cc:	4b31      	ldr	r3, [pc, #196]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80057d6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057de:	d103      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7ff f9a6 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80057e4:	61f8      	str	r0, [r7, #28]
      break;
 80057e6:	e14c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 80057ee:	4b2c      	ldr	r3, [pc, #176]	@ (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80057f0:	61fb      	str	r3, [r7, #28]
      break;
 80057f2:	e146      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057fa:	f040 8142 	bne.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80057fe:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 813b 	beq.w	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800580c:	4b21      	ldr	r3, [pc, #132]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005816:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	fb03 f202 	mul.w	r2, r3, r2
 8005820:	4b1c      	ldr	r3, [pc, #112]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	0d5b      	lsrs	r3, r3, #21
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	3301      	adds	r3, #1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	61fb      	str	r3, [r7, #28]
      break;
 8005834:	e125      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005836:	4b17      	ldr	r3, [pc, #92]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005840:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005848:	d114      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800584a:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005854:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	0d5b      	lsrs	r3, r3, #21
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	3301      	adds	r3, #1
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	61fb      	str	r3, [r7, #28]
      break;
 8005872:	e108      	b.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	f040 8101 	bne.w	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 80fd 	bne.w	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800588e:	61fb      	str	r3, [r7, #28]
      break;
 8005890:	e0f9      	b.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	00f42400 	.word	0x00f42400
 800589c:	00bb8000 	.word	0x00bb8000
 80058a0:	016e3600 	.word	0x016e3600
 80058a4:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80058a8:	4b7e      	ldr	r3, [pc, #504]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80058b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ba:	d114      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058bc:	4b79      	ldr	r3, [pc, #484]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c6:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	fb03 f202 	mul.w	r2, r3, r2
 80058d0:	4b74      	ldr	r3, [pc, #464]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	0d5b      	lsrs	r3, r3, #21
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	61fb      	str	r3, [r7, #28]
      break;
 80058e4:	e0d1      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80058e6:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80058e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f040 80ca 	bne.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 80c6 	bne.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 80058fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8005900:	61fb      	str	r3, [r7, #28]
      break;
 8005902:	e0c2      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8005904:	4b67      	ldr	r3, [pc, #412]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800590e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005916:	d129      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8005918:	4b62      	ldr	r3, [pc, #392]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80b4 	beq.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005926:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005930:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005932:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	0edb      	lsrs	r3, r3, #27
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005944:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8005950:	2311      	movs	r3, #17
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 8005956:	2307      	movs	r3, #7
 8005958:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fb03 f202 	mul.w	r2, r3, r2
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	61fb      	str	r3, [r7, #28]
      break;
 800596a:	e090      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005972:	f040 808c 	bne.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 8005976:	f7ff f86d 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800597a:	61f8      	str	r0, [r7, #28]
      break;
 800597c:	e087      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 800597e:	4b49      	ldr	r3, [pc, #292]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005988:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d128      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8005992:	4b44      	ldr	r3, [pc, #272]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d079      	beq.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800599e:	4b41      	ldr	r3, [pc, #260]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a8:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80059aa:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	0edb      	lsrs	r3, r3, #27
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80059bc:	4b39      	ldr	r3, [pc, #228]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 80059c8:	2311      	movs	r3, #17
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e001      	b.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 80059ce:	2307      	movs	r3, #7
 80059d0:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	fb03 f202 	mul.w	r2, r3, r2
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	61fb      	str	r3, [r7, #28]
      break;
 80059e2:	e056      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ea:	d152      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 80059ec:	f7ff f832 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80059f0:	61f8      	str	r0, [r7, #28]
      break;
 80059f2:	e04e      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80059f4:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80059f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80059fe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a06:	d114      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005a08:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a12:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	fb03 f202 	mul.w	r2, r3, r2
 8005a1c:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	0d5b      	lsrs	r3, r3, #21
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	3301      	adds	r3, #1
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	61fb      	str	r3, [r7, #28]
      break;
 8005a30:	e031      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a38:	d102      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8005a3c:	61fb      	str	r3, [r7, #28]
      break;
 8005a3e:	e02a      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d127      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 8005a46:	f7ff f805 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005a4a:	61f8      	str	r0, [r7, #28]
      break;
 8005a4c:	e023      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8005a4e:	bf00      	nop
 8005a50:	e022      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a52:	bf00      	nop
 8005a54:	e020      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a56:	bf00      	nop
 8005a58:	e01e      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e01c      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e01a      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a62:	bf00      	nop
 8005a64:	e018      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a66:	bf00      	nop
 8005a68:	e016      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e014      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e012      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a72:	bf00      	nop
 8005a74:	e010      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a76:	bf00      	nop
 8005a78:	e00e      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e00c      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e00a      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a82:	bf00      	nop
 8005a84:	e008      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a86:	bf00      	nop
 8005a88:	e006      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e004      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8005a96:	bf00      	nop
    }
  }

  return(frequency);
 8005a98:	69fb      	ldr	r3, [r7, #28]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	02dc6c00 	.word	0x02dc6c00
 8005aac:	00f42400 	.word	0x00f42400

08005ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e09d      	b.n	8005bfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad2:	d009      	beq.n	8005ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
 8005ada:	e005      	b.n	8005ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb f8a4 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b28:	d902      	bls.n	8005b30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e002      	b.n	8005b36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b3e:	d007      	beq.n	8005b50 <HAL_SPI_Init+0xa0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	ea42 0103 	orr.w	r1, r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	f003 0204 	and.w	r2, r3, #4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bcc:	ea42 0103 	orr.w	r1, r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e042      	b.n	8005c9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb f91a 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	@ 0x24
 8005c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fb25 	bl	80062a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f826 	bl	8005ca8 <UART_SetConfig>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e01b      	b.n	8005c9e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fba4 	bl	80063e4 <UART_CheckIdleState>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b08c      	sub	sp, #48	@ 0x30
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4baa      	ldr	r3, [pc, #680]	@ (8005f80 <UART_SetConfig+0x2d8>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a9f      	ldr	r2, [pc, #636]	@ (8005f84 <UART_SetConfig+0x2dc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d10:	4313      	orrs	r3, r2
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	f023 010f 	bic.w	r1, r3, #15
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a90      	ldr	r2, [pc, #576]	@ (8005f88 <UART_SetConfig+0x2e0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d125      	bne.n	8005d98 <UART_SetConfig+0xf0>
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d81a      	bhi.n	8005d90 <UART_SetConfig+0xe8>
 8005d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <UART_SetConfig+0xb8>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d76:	e116      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7e:	e112      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d86:	e10e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d8e:	e10a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d96:	e106      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f90 <UART_SetConfig+0x2e8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d138      	bne.n	8005e14 <UART_SetConfig+0x16c>
 8005da2:	4b7a      	ldr	r3, [pc, #488]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d82d      	bhi.n	8005e0c <UART_SetConfig+0x164>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <UART_SetConfig+0x110>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e0d8      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005df4:	2302      	movs	r3, #2
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e0d4      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e0d0      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e0cc      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e12:	e0c8      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5e      	ldr	r2, [pc, #376]	@ (8005f94 <UART_SetConfig+0x2ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d125      	bne.n	8005e6a <UART_SetConfig+0x1c2>
 8005e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e28:	2b30      	cmp	r3, #48	@ 0x30
 8005e2a:	d016      	beq.n	8005e5a <UART_SetConfig+0x1b2>
 8005e2c:	2b30      	cmp	r3, #48	@ 0x30
 8005e2e:	d818      	bhi.n	8005e62 <UART_SetConfig+0x1ba>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d00a      	beq.n	8005e4a <UART_SetConfig+0x1a2>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d814      	bhi.n	8005e62 <UART_SetConfig+0x1ba>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <UART_SetConfig+0x19a>
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d008      	beq.n	8005e52 <UART_SetConfig+0x1aa>
 8005e40:	e00f      	b.n	8005e62 <UART_SetConfig+0x1ba>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e48:	e0ad      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e50:	e0a9      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e52:	2304      	movs	r3, #4
 8005e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e58:	e0a5      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e60:	e0a1      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e62:	2310      	movs	r3, #16
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e68:	e09d      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f98 <UART_SetConfig+0x2f0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d125      	bne.n	8005ec0 <UART_SetConfig+0x218>
 8005e74:	4b45      	ldr	r3, [pc, #276]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e80:	d016      	beq.n	8005eb0 <UART_SetConfig+0x208>
 8005e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e84:	d818      	bhi.n	8005eb8 <UART_SetConfig+0x210>
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d00a      	beq.n	8005ea0 <UART_SetConfig+0x1f8>
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	d814      	bhi.n	8005eb8 <UART_SetConfig+0x210>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <UART_SetConfig+0x1f0>
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x200>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x210>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9e:	e082      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea6:	e07e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eae:	e07a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb6:	e076      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ebe:	e072      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a35      	ldr	r2, [pc, #212]	@ (8005f9c <UART_SetConfig+0x2f4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12a      	bne.n	8005f20 <UART_SetConfig+0x278>
 8005eca:	4b30      	ldr	r3, [pc, #192]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x268>
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x270>
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x258>
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x270>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x250>
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x260>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x270>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efe:	e052      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f06:	e04e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	e04a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f16:	e046      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f1e:	e042      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <UART_SetConfig+0x2dc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d13a      	bne.n	8005fa0 <UART_SetConfig+0x2f8>
 8005f2a:	4b18      	ldr	r3, [pc, #96]	@ (8005f8c <UART_SetConfig+0x2e4>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f38:	d01a      	beq.n	8005f70 <UART_SetConfig+0x2c8>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f3e:	d81b      	bhi.n	8005f78 <UART_SetConfig+0x2d0>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f44:	d00c      	beq.n	8005f60 <UART_SetConfig+0x2b8>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4a:	d815      	bhi.n	8005f78 <UART_SetConfig+0x2d0>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <UART_SetConfig+0x2b0>
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f54:	d008      	beq.n	8005f68 <UART_SetConfig+0x2c0>
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x2d0>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	e022      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f66:	e01e      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e01a      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e016      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e012      	b.n	8005fa6 <UART_SetConfig+0x2fe>
 8005f80:	cfff69f3 	.word	0xcfff69f3
 8005f84:	40008000 	.word	0x40008000
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400
 8005f94:	40004800 	.word	0x40004800
 8005f98:	40004c00 	.word	0x40004c00
 8005f9c:	40005000 	.word	0x40005000
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4aae      	ldr	r2, [pc, #696]	@ (8006264 <UART_SetConfig+0x5bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f040 8097 	bne.w	80060e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d823      	bhi.n	8006002 <UART_SetConfig+0x35a>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <UART_SetConfig+0x318>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08005ff3 	.word	0x08005ff3
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006003 	.word	0x08006003
 8005fe0:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe fda4 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b9e      	ldr	r3, [pc, #632]	@ (8006268 <UART_SetConfig+0x5c0>)
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fe fd2f 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005ff6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800600c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8130 	beq.w	8006276 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	4a94      	ldr	r2, [pc, #592]	@ (800626c <UART_SetConfig+0x5c4>)
 800601c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006020:	461a      	mov	r2, r3
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	fbb3 f3f2 	udiv	r3, r3, r2
 8006028:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4413      	add	r3, r2
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	429a      	cmp	r2, r3
 8006038:	d305      	bcc.n	8006046 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d903      	bls.n	800604e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800604c:	e113      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	2200      	movs	r2, #0
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	60fa      	str	r2, [r7, #12]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	4a84      	ldr	r2, [pc, #528]	@ (800626c <UART_SetConfig+0x5c4>)
 800605c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006060:	b29b      	uxth	r3, r3
 8006062:	2200      	movs	r2, #0
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006070:	f7fa f8da 	bl	8000228 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	020b      	lsls	r3, r1, #8
 8006086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800608a:	0202      	lsls	r2, r0, #8
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	6849      	ldr	r1, [r1, #4]
 8006090:	0849      	lsrs	r1, r1, #1
 8006092:	2000      	movs	r0, #0
 8006094:	460c      	mov	r4, r1
 8006096:	4605      	mov	r5, r0
 8006098:	eb12 0804 	adds.w	r8, r2, r4
 800609c:	eb43 0905 	adc.w	r9, r3, r5
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	469a      	mov	sl, r3
 80060a8:	4693      	mov	fp, r2
 80060aa:	4652      	mov	r2, sl
 80060ac:	465b      	mov	r3, fp
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa f8b9 	bl	8000228 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4613      	mov	r3, r2
 80060bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060c4:	d308      	bcc.n	80060d8 <UART_SetConfig+0x430>
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060cc:	d204      	bcs.n	80060d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	e0ce      	b.n	8006276 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060de:	e0ca      	b.n	8006276 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e8:	d166      	bne.n	80061b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d827      	bhi.n	8006142 <UART_SetConfig+0x49a>
 80060f2:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <UART_SetConfig+0x450>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800612d 	.word	0x0800612d
 8006104:	08006143 	.word	0x08006143
 8006108:	08006133 	.word	0x08006133
 800610c:	08006143 	.word	0x08006143
 8006110:	08006143 	.word	0x08006143
 8006114:	08006143 	.word	0x08006143
 8006118:	0800613b 	.word	0x0800613b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe fd08 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 8006120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006122:	e014      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006124:	f7fe fd1a 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8006128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800612a:	e010      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800612c:	4b4e      	ldr	r3, [pc, #312]	@ (8006268 <UART_SetConfig+0x5c0>)
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006130:	e00d      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006132:	f7fe fc8f 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8006136:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006138:	e009      	b.n	800614e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006140:	e005      	b.n	800614e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800614c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8090 	beq.w	8006276 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	4a44      	ldr	r2, [pc, #272]	@ (800626c <UART_SetConfig+0x5c4>)
 800615c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006160:	461a      	mov	r2, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	fbb3 f3f2 	udiv	r3, r3, r2
 8006168:	005a      	lsls	r2, r3, #1
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	441a      	add	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b0f      	cmp	r3, #15
 8006180:	d916      	bls.n	80061b0 <UART_SetConfig+0x508>
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006188:	d212      	bcs.n	80061b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f023 030f 	bic.w	r3, r3, #15
 8006192:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	b29b      	uxth	r3, r3
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	b29a      	uxth	r2, r3
 80061a0:	8bfb      	ldrh	r3, [r7, #30]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	8bfa      	ldrh	r2, [r7, #30]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	e062      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061b6:	e05e      	b.n	8006276 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d828      	bhi.n	8006212 <UART_SetConfig+0x56a>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0x520>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fca0 	bl	8004b30 <HAL_RCC_GetPCLK1Freq>
 80061f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fcb2 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 80061f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006268 <UART_SetConfig+0x5c0>)
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe fc27 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800621c:	bf00      	nop
    }

    if (pclk != 0U)
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d028      	beq.n	8006276 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	4a10      	ldr	r2, [pc, #64]	@ (800626c <UART_SetConfig+0x5c4>)
 800622a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622e:	461a      	mov	r2, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	fbb3 f2f2 	udiv	r2, r3, r2
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	441a      	add	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	fbb2 f3f3 	udiv	r3, r2, r3
 8006246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d910      	bls.n	8006270 <UART_SetConfig+0x5c8>
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006254:	d20c      	bcs.n	8006270 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b29a      	uxth	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x5ce>
 8006262:	bf00      	nop
 8006264:	40008000 	.word	0x40008000
 8006268:	00f42400 	.word	0x00f42400
 800626c:	0800b39c 	.word	0x0800b39c
      }
      else
      {
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2201      	movs	r2, #1
 800627a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2201      	movs	r2, #1
 8006282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006292:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006296:	4618      	mov	r0, r3
 8006298:	3730      	adds	r7, #48	@ 0x30
 800629a:	46bd      	mov	sp, r7
 800629c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800639e:	d10a      	bne.n	80063b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b098      	sub	sp, #96	@ 0x60
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f4:	f7fa fe9e 	bl	8001134 <HAL_GetTick>
 80063f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d12f      	bne.n	8006468 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006408:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f88e 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d022      	beq.n	8006468 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006436:	653b      	str	r3, [r7, #80]	@ 0x50
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006440:	647b      	str	r3, [r7, #68]	@ 0x44
 8006442:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800644e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e063      	b.n	8006530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b04      	cmp	r3, #4
 8006474:	d149      	bne.n	800650a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006476:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800647e:	2200      	movs	r2, #0
 8006480:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f857 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d03c      	beq.n	800650a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	623b      	str	r3, [r7, #32]
   return(result);
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80064b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e6      	bne.n	8006490 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e2:	61fa      	str	r2, [r7, #28]
 80064e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	69b9      	ldr	r1, [r7, #24]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	617b      	str	r3, [r7, #20]
   return(result);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e5      	bne.n	80064c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e012      	b.n	8006530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3758      	adds	r7, #88	@ 0x58
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	e04f      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d04b      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fa fdef 	bl	8001134 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <UART_WaitOnFlagUntilTimeout+0x30>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e04e      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d037      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b80      	cmp	r3, #128	@ 0x80
 800657e:	d034      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d031      	beq.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d110      	bne.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2208      	movs	r2, #8
 800659a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f838 	bl	8006612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2208      	movs	r2, #8
 80065a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e029      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c4:	d111      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f81e 	bl	8006612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e00f      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69da      	ldr	r2, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4013      	ands	r3, r2
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	bf0c      	ite	eq
 80065fa:	2301      	moveq	r3, #1
 80065fc:	2300      	movne	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	429a      	cmp	r2, r3
 8006606:	d0a0      	beq.n	800654a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b095      	sub	sp, #84	@ 0x54
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006638:	643b      	str	r3, [r7, #64]	@ 0x40
 800663a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800663e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3308      	adds	r3, #8
 8006652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	61fb      	str	r3, [r7, #28]
   return(result);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e3      	bne.n	800664c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d118      	bne.n	80066be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60bb      	str	r3, [r7, #8]
   return(result);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066d2:	bf00      	nop
 80066d4:	3754      	adds	r7, #84	@ 0x54
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e027      	b.n	8006744 <HAL_UARTEx_DisableFifoMode+0x66>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	@ 0x24
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e02d      	b.n	80067c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2224      	movs	r2, #36	@ 0x24
 8006774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f84f 	bl	8006848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e02d      	b.n	8006840 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	@ 0x24
 80067f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f811 	bl	8006848 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006854:	2b00      	cmp	r3, #0
 8006856:	d108      	bne.n	800686a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006868:	e031      	b.n	80068ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800686a:	2308      	movs	r3, #8
 800686c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800686e:	2308      	movs	r3, #8
 8006870:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	0e5b      	lsrs	r3, r3, #25
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	0f5b      	lsrs	r3, r3, #29
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	7b3a      	ldrb	r2, [r7, #12]
 8006896:	4911      	ldr	r1, [pc, #68]	@ (80068dc <UARTEx_SetNbDataToProcess+0x94>)
 8006898:	5c8a      	ldrb	r2, [r1, r2]
 800689a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800689e:	7b3a      	ldrb	r2, [r7, #12]
 80068a0:	490f      	ldr	r1, [pc, #60]	@ (80068e0 <UARTEx_SetNbDataToProcess+0x98>)
 80068a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	7b7a      	ldrb	r2, [r7, #13]
 80068b4:	4909      	ldr	r1, [pc, #36]	@ (80068dc <UARTEx_SetNbDataToProcess+0x94>)
 80068b6:	5c8a      	ldrb	r2, [r1, r2]
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068bc:	7b7a      	ldrb	r2, [r7, #13]
 80068be:	4908      	ldr	r1, [pc, #32]	@ (80068e0 <UARTEx_SetNbDataToProcess+0x98>)
 80068c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	0800b3b4 	.word	0x0800b3b4
 80068e0:	0800b3bc 	.word	0x0800b3bc

080068e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068f4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80068f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800691a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800691e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	b29b      	uxth	r3, r3
 800692c:	43db      	mvns	r3, r3
 800692e:	b29b      	uxth	r3, r3
 8006930:	4013      	ands	r3, r2
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006984:	b480      	push	{r7}
 8006986:	b09d      	sub	sp, #116	@ 0x74
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d81f      	bhi.n	80069f6 <USB_ActivateEndpoint+0x72>
 80069b6:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <USB_ActivateEndpoint+0x38>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069e9 	.word	0x080069e9
 80069c4:	080069ff 	.word	0x080069ff
 80069c8:	080069db 	.word	0x080069db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80069cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80069d8:	e012      	b.n	8006a00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80069da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80069e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80069e6:	e00b      	b.n	8006a00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80069e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80069f4:	e004      	b.n	8006a00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80069fc:	e000      	b.n	8006a00 <USB_ActivateEndpoint+0x7c>
      break;
 80069fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	b21b      	sxth	r3, r3
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b21b      	sxth	r3, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b21b      	sxth	r3, r3
 8006a46:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	7b1b      	ldrb	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 8178 	bne.w	8006d66 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8084 	beq.w	8006b88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	4413      	add	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	00da      	lsls	r2, r3, #3
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	88db      	ldrh	r3, [r3, #6]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	827b      	strh	r3, [r7, #18]
 8006ac2:	8a7b      	ldrh	r3, [r7, #18]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01b      	beq.n	8006b04 <USB_ActivateEndpoint+0x180>
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae2:	823b      	strh	r3, [r7, #16]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	441a      	add	r2, r3
 8006aee:	8a3b      	ldrh	r3, [r7, #16]
 8006af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006afc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	78db      	ldrb	r3, [r3, #3]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d020      	beq.n	8006b4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b22:	81bb      	strh	r3, [r7, #12]
 8006b24:	89bb      	ldrh	r3, [r7, #12]
 8006b26:	f083 0320 	eor.w	r3, r3, #32
 8006b2a:	81bb      	strh	r3, [r7, #12]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	89bb      	ldrh	r3, [r7, #12]
 8006b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	8013      	strh	r3, [r2, #0]
 8006b4c:	e2d5      	b.n	80070fa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b64:	81fb      	strh	r3, [r7, #14]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	441a      	add	r2, r3
 8006b70:	89fb      	ldrh	r3, [r7, #14]
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]
 8006b86:	e2b8      	b.n	80070fa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	4413      	add	r3, r2
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	00da      	lsls	r2, r3, #3
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	88db      	ldrh	r3, [r3, #6]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	4413      	add	r3, r2
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	00da      	lsls	r2, r3, #3
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	4413      	add	r3, r2
 8006bda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bf6:	d91d      	bls.n	8006c34 <USB_ActivateEndpoint+0x2b0>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <USB_ActivateEndpoint+0x28e>
 8006c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	801a      	strh	r2, [r3, #0]
 8006c32:	e026      	b.n	8006c82 <USB_ActivateEndpoint+0x2fe>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <USB_ActivateEndpoint+0x2ce>
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e017      	b.n	8006c82 <USB_ActivateEndpoint+0x2fe>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <USB_ActivateEndpoint+0x2e8>
 8006c66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c68:	3301      	adds	r3, #1
 8006c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01b      	beq.n	8006cd2 <USB_ActivateEndpoint+0x34e>
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb0:	843b      	strh	r3, [r7, #32]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	8c3b      	ldrh	r3, [r7, #32]
 8006cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d124      	bne.n	8006d24 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf0:	83bb      	strh	r3, [r7, #28]
 8006cf2:	8bbb      	ldrh	r3, [r7, #28]
 8006cf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006cf8:	83bb      	strh	r3, [r7, #28]
 8006cfa:	8bbb      	ldrh	r3, [r7, #28]
 8006cfc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d00:	83bb      	strh	r3, [r7, #28]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	8bbb      	ldrh	r3, [r7, #28]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
 8006d22:	e1ea      	b.n	80070fa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	83fb      	strh	r3, [r7, #30]
 8006d3c:	8bfb      	ldrh	r3, [r7, #30]
 8006d3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d42:	83fb      	strh	r3, [r7, #30]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	441a      	add	r2, r3
 8006d4e:	8bfb      	ldrh	r3, [r7, #30]
 8006d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8013      	strh	r3, [r2, #0]
 8006d64:	e1c9      	b.n	80070fa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	78db      	ldrb	r3, [r3, #3]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d11e      	bne.n	8006dac <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]
 8006daa:	e01d      	b.n	8006de8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	441a      	add	r2, r3
 8006dd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006df8:	4413      	add	r3, r2
 8006dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00da      	lsls	r2, r3, #3
 8006e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	891b      	ldrh	r3, [r3, #8]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2c:	4413      	add	r3, r2
 8006e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	00da      	lsls	r2, r3, #3
 8006e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e38:	4413      	add	r3, r2
 8006e3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	895b      	ldrh	r3, [r3, #10]
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 8093 	bne.w	8006f80 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01b      	beq.n	8006eae <USB_ActivateEndpoint+0x52a>
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006ebc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01b      	beq.n	8006efe <USB_ActivateEndpoint+0x57a>
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f14:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f1c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f24:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]
 8006f7e:	e0bc      	b.n	80070fa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006f90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01d      	beq.n	8006fd8 <USB_ActivateEndpoint+0x654>
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	441a      	add	r2, r3
 8006fc0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006fe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01d      	beq.n	8007030 <USB_ActivateEndpoint+0x6ac>
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800700a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800701c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007028:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800702c:	b29b      	uxth	r3, r3
 800702e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d024      	beq.n	8007082 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007052:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007056:	f083 0320 	eor.w	r3, r3, #32
 800705a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
 8007080:	e01d      	b.n	80070be <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007098:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80070fa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3774      	adds	r7, #116	@ 0x74
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop

0800710c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800710c:	b480      	push	{r7}
 800710e:	b08d      	sub	sp, #52	@ 0x34
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	7b1b      	ldrb	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 808e 	bne.w	800723c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d044      	beq.n	80071b2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	81bb      	strh	r3, [r7, #12]
 8007136:	89bb      	ldrh	r3, [r7, #12]
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01b      	beq.n	8007178 <USB_DeactivateEndpoint+0x6c>
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	817b      	strh	r3, [r7, #10]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007170:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800718a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718e:	813b      	strh	r3, [r7, #8]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	441a      	add	r2, r3
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]
 80071b0:	e192      	b.n	80074d8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	827b      	strh	r3, [r7, #18]
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01b      	beq.n	8007202 <USB_DeactivateEndpoint+0xf6>
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e0:	823b      	strh	r3, [r7, #16]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	8a3b      	ldrh	r3, [r7, #16]
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007218:	81fb      	strh	r3, [r7, #14]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	441a      	add	r2, r3
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800722a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800722e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007236:	b29b      	uxth	r3, r3
 8007238:	8013      	strh	r3, [r2, #0]
 800723a:	e14d      	b.n	80074d8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 80a5 	bne.w	8007390 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	843b      	strh	r3, [r7, #32]
 8007254:	8c3b      	ldrh	r3, [r7, #32]
 8007256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01b      	beq.n	8007296 <USB_DeactivateEndpoint+0x18a>
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007274:	83fb      	strh	r3, [r7, #30]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	8bfb      	ldrh	r3, [r7, #30]
 8007282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800728e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	83bb      	strh	r3, [r7, #28]
 80072a4:	8bbb      	ldrh	r3, [r7, #28]
 80072a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d01b      	beq.n	80072e6 <USB_DeactivateEndpoint+0x1da>
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c4:	837b      	strh	r3, [r7, #26]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	8b7b      	ldrh	r3, [r7, #26]
 80072d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fc:	833b      	strh	r3, [r7, #24]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	8b3b      	ldrh	r3, [r7, #24]
 800730a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007316:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800731a:	b29b      	uxth	r3, r3
 800731c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007334:	82fb      	strh	r3, [r7, #22]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	8afb      	ldrh	r3, [r7, #22]
 8007342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800734a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800736c:	82bb      	strh	r3, [r7, #20]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	8abb      	ldrh	r3, [r7, #20]
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]
 800738e:	e0a3      	b.n	80074d8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800739e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80073a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <USB_DeactivateEndpoint+0x2d4>
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80073ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80073f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01b      	beq.n	8007430 <USB_DeactivateEndpoint+0x324>
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800741c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007428:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800742c:	b29b      	uxth	r3, r3
 800742e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007446:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	441a      	add	r2, r3
 8007452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800745c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007464:	b29b      	uxth	r3, r3
 8007466:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800747a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800748c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800749c:	b29b      	uxth	r3, r3
 800749e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	441a      	add	r2, r3
 80074c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80074c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3734      	adds	r7, #52	@ 0x34
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b0c2      	sub	sp, #264	@ 0x108
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f4:	6018      	str	r0, [r3, #0]
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 86b7 	bne.w	8008280 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d908      	bls.n	8007540 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800753e:	e007      	b.n	8007550 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	7b1b      	ldrb	r3, [r3, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d13a      	bne.n	80075d6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6959      	ldr	r1, [r3, #20]
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	88da      	ldrh	r2, [r3, #6]
 8007578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757c:	b29b      	uxth	r3, r3
 800757e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007582:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f001 fc98 	bl	8008ebc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	00da      	lsls	r2, r3, #3
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	801a      	strh	r2, [r3, #0]
 80075d2:	f000 be1f 	b.w	8008214 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80075d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	f040 8462 	bne.w	8007eac <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a1a      	ldr	r2, [r3, #32]
 80075f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	429a      	cmp	r2, r3
 8007602:	f240 83df 	bls.w	8007dc4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007656:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800765a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 81c7 	beq.w	8007a36 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d177      	bne.n	80077b4 <USB_EPStartXfer+0x2ce>
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076de:	b29b      	uxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e4:	4413      	add	r3, r2
 80076e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	00da      	lsls	r2, r3, #3
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770a:	b29a      	uxth	r2, r3
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	2b3e      	cmp	r3, #62	@ 0x3e
 8007716:	d921      	bls.n	800775c <USB_EPStartXfer+0x276>
 8007718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771c:	095b      	lsrs	r3, r3, #5
 800771e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <USB_EPStartXfer+0x252>
 800772e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007732:	3b01      	subs	r3, #1
 8007734:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007742:	b29b      	uxth	r3, r3
 8007744:	029b      	lsls	r3, r3, #10
 8007746:	b29b      	uxth	r3, r3
 8007748:	4313      	orrs	r3, r2
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e050      	b.n	80077fe <USB_EPStartXfer+0x318>
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <USB_EPStartXfer+0x294>
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007772:	b29a      	uxth	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e041      	b.n	80077fe <USB_EPStartXfer+0x318>
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <USB_EPStartXfer+0x2b4>
 8007790:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007794:	3301      	adds	r3, #1
 8007796:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	029b      	lsls	r3, r3, #10
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	e024      	b.n	80077fe <USB_EPStartXfer+0x318>
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d11c      	bne.n	80077fe <USB_EPStartXfer+0x318>
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	4413      	add	r3, r2
 80077da:	633b      	str	r3, [r7, #48]	@ 0x30
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	00da      	lsls	r2, r3, #3
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	895b      	ldrh	r3, [r3, #10]
 800780a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6959      	ldr	r1, [r3, #20]
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781e:	b29b      	uxth	r3, r3
 8007820:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007824:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007828:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	f001 fb45 	bl	8008ebc <USB_WritePMA>
            ep->xfer_buff += len;
 8007832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	441a      	add	r2, r3
 8007844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1a      	ldr	r2, [r3, #32]
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d90f      	bls.n	800788c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6a1a      	ldr	r2, [r3, #32]
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	621a      	str	r2, [r3, #32]
 800788a:	e00e      	b.n	80078aa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800788c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d177      	bne.n	80079aa <USB_EPStartXfer+0x4c4>
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	4413      	add	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	00da      	lsls	r2, r3, #3
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007900:	b29a      	uxth	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	2b3e      	cmp	r3, #62	@ 0x3e
 800790c:	d921      	bls.n	8007952 <USB_EPStartXfer+0x46c>
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <USB_EPStartXfer+0x448>
 8007924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007928:	3b01      	subs	r3, #1
 800792a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007938:	b29b      	uxth	r3, r3
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29a      	uxth	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e056      	b.n	8007a00 <USB_EPStartXfer+0x51a>
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <USB_EPStartXfer+0x48a>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e047      	b.n	8007a00 <USB_EPStartXfer+0x51a>
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USB_EPStartXfer+0x4aa>
 8007986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800798a:	3301      	adds	r3, #1
 800798c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e02a      	b.n	8007a00 <USB_EPStartXfer+0x51a>
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d122      	bne.n	8007a00 <USB_EPStartXfer+0x51a>
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	623b      	str	r3, [r7, #32]
 80079c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	4413      	add	r3, r2
 80079dc:	623b      	str	r3, [r7, #32]
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	00da      	lsls	r2, r3, #3
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	4413      	add	r3, r2
 80079f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	891b      	ldrh	r3, [r3, #8]
 8007a0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6959      	ldr	r1, [r3, #20]
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	f001 fa44 	bl	8008ebc <USB_WritePMA>
 8007a34:	e3ee      	b.n	8008214 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d177      	bne.n	8007b36 <USB_EPStartXfer+0x650>
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a66:	4413      	add	r3, r2
 8007a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	00da      	lsls	r2, r3, #3
 8007a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a96:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a98:	d921      	bls.n	8007ade <USB_EPStartXfer+0x5f8>
 8007a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <USB_EPStartXfer+0x5d4>
 8007ab0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	e056      	b.n	8007b8c <USB_EPStartXfer+0x6a6>
 8007ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <USB_EPStartXfer+0x616>
 8007ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	e047      	b.n	8007b8c <USB_EPStartXfer+0x6a6>
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <USB_EPStartXfer+0x636>
 8007b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b16:	3301      	adds	r3, #1
 8007b18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	029b      	lsls	r3, r3, #10
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e02a      	b.n	8007b8c <USB_EPStartXfer+0x6a6>
 8007b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d122      	bne.n	8007b8c <USB_EPStartXfer+0x6a6>
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	461a      	mov	r2, r3
 8007b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b66:	4413      	add	r3, r2
 8007b68:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	00da      	lsls	r2, r3, #3
 8007b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	891b      	ldrh	r3, [r3, #8]
 8007b98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6959      	ldr	r1, [r3, #20]
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bb2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bb6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	f001 f97e 	bl	8008ebc <USB_WritePMA>
            ep->xfer_buff += len;
 8007bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	441a      	add	r2, r3
 8007bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a1a      	ldr	r2, [r3, #32]
 8007bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d90f      	bls.n	8007c1a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6a1a      	ldr	r2, [r3, #32]
 8007c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	621a      	str	r2, [r3, #32]
 8007c18:	e00e      	b.n	8007c38 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2200      	movs	r2, #0
 8007c36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d177      	bne.n	8007d44 <USB_EPStartXfer+0x85e>
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	4413      	add	r3, r2
 8007c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	00da      	lsls	r2, r3, #3
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	4413      	add	r3, r2
 8007c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ca6:	d921      	bls.n	8007cec <USB_EPStartXfer+0x806>
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <USB_EPStartXfer+0x7e2>
 8007cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce8:	801a      	strh	r2, [r3, #0]
 8007cea:	e050      	b.n	8007d8e <USB_EPStartXfer+0x8a8>
 8007cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <USB_EPStartXfer+0x824>
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	801a      	strh	r2, [r3, #0]
 8007d08:	e041      	b.n	8007d8e <USB_EPStartXfer+0x8a8>
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <USB_EPStartXfer+0x844>
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	3301      	adds	r3, #1
 8007d26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e024      	b.n	8007d8e <USB_EPStartXfer+0x8a8>
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d11c      	bne.n	8007d8e <USB_EPStartXfer+0x8a8>
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d68:	4413      	add	r3, r2
 8007d6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	00da      	lsls	r2, r3, #3
 8007d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6959      	ldr	r1, [r3, #20]
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007db4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007db8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f001 f87d 	bl	8008ebc <USB_WritePMA>
 8007dc2:	e227      	b.n	8008214 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e50:	4413      	add	r3, r2
 8007e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	00da      	lsls	r2, r3, #3
 8007e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e64:	4413      	add	r3, r2
 8007e66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	891b      	ldrh	r3, [r3, #8]
 8007e82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6959      	ldr	r1, [r3, #20]
 8007e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ea0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ea4:	6800      	ldr	r0, [r0, #0]
 8007ea6:	f001 f809 	bl	8008ebc <USB_WritePMA>
 8007eaa:	e1b3      	b.n	8008214 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	1ad2      	subs	r2, r2, r3
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80c6 	beq.w	800807e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d177      	bne.n	8007ffe <USB_EPStartXfer+0xb18>
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f2e:	4413      	add	r3, r2
 8007f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	00da      	lsls	r2, r3, #3
 8007f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f42:	4413      	add	r3, r2
 8007f44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f48:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f60:	d921      	bls.n	8007fa6 <USB_EPStartXfer+0xac0>
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USB_EPStartXfer+0xa9c>
 8007f78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	e050      	b.n	8008048 <USB_EPStartXfer+0xb62>
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <USB_EPStartXfer+0xade>
 8007fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e041      	b.n	8008048 <USB_EPStartXfer+0xb62>
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <USB_EPStartXfer+0xafe>
 8007fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e024      	b.n	8008048 <USB_EPStartXfer+0xb62>
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d11c      	bne.n	8008048 <USB_EPStartXfer+0xb62>
 800800e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800801c:	b29b      	uxth	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008022:	4413      	add	r3, r2
 8008024:	673b      	str	r3, [r7, #112]	@ 0x70
 8008026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	00da      	lsls	r2, r3, #3
 8008034:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008036:	4413      	add	r3, r2
 8008038:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800803c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	b29a      	uxth	r2, r3
 8008044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008046:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	895b      	ldrh	r3, [r3, #10]
 8008054:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6959      	ldr	r1, [r3, #20]
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	b29b      	uxth	r3, r3
 800806a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800806e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008072:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008076:	6800      	ldr	r0, [r0, #0]
 8008078:	f000 ff20 	bl	8008ebc <USB_WritePMA>
 800807c:	e0ca      	b.n	8008214 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800807e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d177      	bne.n	800817e <USB_EPStartXfer+0xc98>
 800808e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800809a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	461a      	mov	r2, r3
 80080ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080ae:	4413      	add	r3, r2
 80080b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	00da      	lsls	r2, r3, #3
 80080c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080c2:	4413      	add	r3, r2
 80080c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080d8:	801a      	strh	r2, [r3, #0]
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080de:	2b3e      	cmp	r3, #62	@ 0x3e
 80080e0:	d921      	bls.n	8008126 <USB_EPStartXfer+0xc40>
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <USB_EPStartXfer+0xc1c>
 80080f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80080fc:	3b01      	subs	r3, #1
 80080fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008102:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800810c:	b29b      	uxth	r3, r3
 800810e:	029b      	lsls	r3, r3, #10
 8008110:	b29b      	uxth	r3, r3
 8008112:	4313      	orrs	r3, r2
 8008114:	b29b      	uxth	r3, r3
 8008116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800811e:	b29a      	uxth	r2, r3
 8008120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	e05c      	b.n	80081e0 <USB_EPStartXfer+0xcfa>
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <USB_EPStartXfer+0xc5e>
 800812e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29a      	uxth	r2, r3
 800813e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e04d      	b.n	80081e0 <USB_EPStartXfer+0xcfa>
 8008144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008148:	085b      	lsrs	r3, r3, #1
 800814a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800814e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <USB_EPStartXfer+0xc7e>
 800815a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800815e:	3301      	adds	r3, #1
 8008160:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800816e:	b29b      	uxth	r3, r3
 8008170:	029b      	lsls	r3, r3, #10
 8008172:	b29b      	uxth	r3, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	b29a      	uxth	r2, r3
 8008178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	e030      	b.n	80081e0 <USB_EPStartXfer+0xcfa>
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d128      	bne.n	80081e0 <USB_EPStartXfer+0xcfa>
 800818e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081b2:	4413      	add	r3, r2
 80081b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	00da      	lsls	r2, r3, #3
 80081c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081ca:	4413      	add	r3, r2
 80081cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d8:	b29a      	uxth	r2, r3
 80081da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80081de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	891b      	ldrh	r3, [r3, #8]
 80081ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	b29b      	uxth	r3, r3
 8008202:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008206:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800820a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	f000 fe54 	bl	8008ebc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800823a:	817b      	strh	r3, [r7, #10]
 800823c:	897b      	ldrh	r3, [r7, #10]
 800823e:	f083 0310 	eor.w	r3, r3, #16
 8008242:	817b      	strh	r3, [r7, #10]
 8008244:	897b      	ldrh	r3, [r7, #10]
 8008246:	f083 0320 	eor.w	r3, r3, #32
 800824a:	817b      	strh	r3, [r7, #10]
 800824c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	441a      	add	r2, r3
 8008266:	897b      	ldrh	r3, [r7, #10]
 8008268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800826c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008278:	b29b      	uxth	r3, r3
 800827a:	8013      	strh	r3, [r2, #0]
 800827c:	f000 bcde 	b.w	8008c3c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	7b1b      	ldrb	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 80bb 	bne.w	8008408 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d917      	bls.n	80082de <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	619a      	str	r2, [r3, #24]
 80082dc:	e00e      	b.n	80082fc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80082de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80082ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008318:	b29b      	uxth	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008320:	4413      	add	r3, r2
 8008322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	00da      	lsls	r2, r3, #3
 8008334:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008338:	4413      	add	r3, r2
 800833a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800833e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800834e:	b29a      	uxth	r2, r3
 8008350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835a:	2b3e      	cmp	r3, #62	@ 0x3e
 800835c:	d924      	bls.n	80083a8 <USB_EPStartXfer+0xec2>
 800835e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836c:	f003 031f 	and.w	r3, r3, #31
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <USB_EPStartXfer+0xe98>
 8008374:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008378:	3b01      	subs	r3, #1
 800837a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800837e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800838a:	b29b      	uxth	r3, r3
 800838c:	029b      	lsls	r3, r3, #10
 800838e:	b29b      	uxth	r3, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	b29b      	uxth	r3, r3
 8008394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839c:	b29a      	uxth	r2, r3
 800839e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083a2:	801a      	strh	r2, [r3, #0]
 80083a4:	f000 bc10 	b.w	8008bc8 <USB_EPStartXfer+0x16e2>
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <USB_EPStartXfer+0xee4>
 80083b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e3fe      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ce:	085b      	lsrs	r3, r3, #1
 80083d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <USB_EPStartXfer+0xf04>
 80083e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083e4:	3301      	adds	r3, #1
 80083e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	029b      	lsls	r3, r3, #10
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e3df      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	78db      	ldrb	r3, [r3, #3]
 8008414:	2b02      	cmp	r3, #2
 8008416:	f040 8218 	bne.w	800884a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f040 809d 	bne.w	8008566 <USB_EPStartXfer+0x1080>
 800842c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800843a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008448:	b29b      	uxth	r3, r3
 800844a:	461a      	mov	r2, r3
 800844c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008450:	4413      	add	r3, r2
 8008452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	00da      	lsls	r2, r3, #3
 8008464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008468:	4413      	add	r3, r2
 800846a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800846e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800847e:	b29a      	uxth	r2, r3
 8008480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b3e      	cmp	r3, #62	@ 0x3e
 8008494:	d92b      	bls.n	80084ee <USB_EPStartXfer+0x1008>
 8008496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <USB_EPStartXfer+0xfe0>
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c0:	3b01      	subs	r3, #1
 80084c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	029b      	lsls	r3, r3, #10
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4313      	orrs	r3, r2
 80084da:	b29b      	uxth	r3, r3
 80084dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e070      	b.n	80085d0 <USB_EPStartXfer+0x10ea>
 80084ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10c      	bne.n	8008518 <USB_EPStartXfer+0x1032>
 80084fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800850e:	b29a      	uxth	r2, r3
 8008510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e05b      	b.n	80085d0 <USB_EPStartXfer+0x10ea>
 8008518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	085b      	lsrs	r3, r3, #1
 8008526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <USB_EPStartXfer+0x1062>
 800853e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008542:	3301      	adds	r3, #1
 8008544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29a      	uxth	r2, r3
 8008550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008554:	b29b      	uxth	r3, r3
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	b29b      	uxth	r3, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	e034      	b.n	80085d0 <USB_EPStartXfer+0x10ea>
 8008566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d12c      	bne.n	80085d0 <USB_EPStartXfer+0x10ea>
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008592:	b29b      	uxth	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800859a:	4413      	add	r3, r2
 800859c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	00da      	lsls	r2, r3, #3
 80085ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b2:	4413      	add	r3, r2
 80085b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085ce:	801a      	strh	r2, [r3, #0]
 80085d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80085de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	785b      	ldrb	r3, [r3, #1]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f040 809d 	bne.w	800872a <USB_EPStartXfer+0x1244>
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800860c:	b29b      	uxth	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008614:	4413      	add	r3, r2
 8008616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800861a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	00da      	lsls	r2, r3, #3
 8008628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800862c:	4413      	add	r3, r2
 800862e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008632:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008636:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	b29b      	uxth	r3, r3
 800863e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008642:	b29a      	uxth	r2, r3
 8008644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008648:	801a      	strh	r2, [r3, #0]
 800864a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b3e      	cmp	r3, #62	@ 0x3e
 8008658:	d92b      	bls.n	80086b2 <USB_EPStartXfer+0x11cc>
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800866c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <USB_EPStartXfer+0x11a4>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008684:	3b01      	subs	r3, #1
 8008686:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800868a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29a      	uxth	r2, r3
 8008692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008696:	b29b      	uxth	r3, r3
 8008698:	029b      	lsls	r3, r3, #10
 800869a:	b29b      	uxth	r3, r3
 800869c:	4313      	orrs	r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e069      	b.n	8008786 <USB_EPStartXfer+0x12a0>
 80086b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10c      	bne.n	80086dc <USB_EPStartXfer+0x11f6>
 80086c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	e054      	b.n	8008786 <USB_EPStartXfer+0x12a0>
 80086dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <USB_EPStartXfer+0x1226>
 8008702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008706:	3301      	adds	r3, #1
 8008708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800870c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29a      	uxth	r2, r3
 8008714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008718:	b29b      	uxth	r3, r3
 800871a:	029b      	lsls	r3, r3, #10
 800871c:	b29b      	uxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	e02d      	b.n	8008786 <USB_EPStartXfer+0x12a0>
 800872a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d125      	bne.n	8008786 <USB_EPStartXfer+0x12a0>
 800873a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008748:	b29b      	uxth	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008750:	4413      	add	r3, r2
 8008752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	00da      	lsls	r2, r3, #3
 8008764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008768:	4413      	add	r3, r2
 800876a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800876e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	b29a      	uxth	r2, r3
 8008780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008784:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 8218 	beq.w	8008bc8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <USB_EPStartXfer+0x12ea>
 80087c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10d      	bne.n	80087ec <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f040 81f5 	bne.w	8008bc8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80087e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f040 81ee 	bne.w	8008bc8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80087ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008812:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800883c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008840:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008844:	b29b      	uxth	r3, r3
 8008846:	8013      	strh	r3, [r2, #0]
 8008848:	e1be      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800884a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	78db      	ldrb	r3, [r3, #3]
 8008856:	2b01      	cmp	r3, #1
 8008858:	f040 81b4 	bne.w	8008bc4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800885c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699a      	ldr	r2, [r3, #24]
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	429a      	cmp	r2, r3
 8008876:	d917      	bls.n	80088a8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	1ad2      	subs	r2, r2, r3
 800889a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	619a      	str	r2, [r3, #24]
 80088a6:	e00e      	b.n	80088c6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80088b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2200      	movs	r2, #0
 80088c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 8085 	bne.w	80089e2 <USB_EPStartXfer+0x14fc>
 80088d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088fc:	4413      	add	r3, r2
 80088fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008914:	4413      	add	r3, r2
 8008916:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800891a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800891e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008936:	2b3e      	cmp	r3, #62	@ 0x3e
 8008938:	d923      	bls.n	8008982 <USB_EPStartXfer+0x149c>
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <USB_EPStartXfer+0x1474>
 8008950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008954:	3b01      	subs	r3, #1
 8008956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800895a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29a      	uxth	r2, r3
 8008962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008966:	b29b      	uxth	r3, r3
 8008968:	029b      	lsls	r3, r3, #10
 800896a:	b29b      	uxth	r3, r3
 800896c:	4313      	orrs	r3, r2
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e060      	b.n	8008a44 <USB_EPStartXfer+0x155e>
 8008982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10c      	bne.n	80089a4 <USB_EPStartXfer+0x14be>
 800898a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899a:	b29a      	uxth	r2, r3
 800899c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089a0:	801a      	strh	r2, [r3, #0]
 80089a2:	e04f      	b.n	8008a44 <USB_EPStartXfer+0x155e>
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <USB_EPStartXfer+0x14de>
 80089ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089be:	3301      	adds	r3, #1
 80089c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	029b      	lsls	r3, r3, #10
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4313      	orrs	r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089de:	801a      	strh	r2, [r3, #0]
 80089e0:	e030      	b.n	8008a44 <USB_EPStartXfer+0x155e>
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d128      	bne.n	8008a44 <USB_EPStartXfer+0x155e>
 80089f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a16:	4413      	add	r3, r2
 8008a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	00da      	lsls	r2, r3, #3
 8008a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a2e:	4413      	add	r3, r2
 8008a30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 8085 	bne.w	8008b6e <USB_EPStartXfer+0x1688>
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	461a      	mov	r2, r3
 8008a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a88:	4413      	add	r3, r2
 8008a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	00da      	lsls	r2, r3, #3
 8008a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008abc:	801a      	strh	r2, [r3, #0]
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ac4:	d923      	bls.n	8008b0e <USB_EPStartXfer+0x1628>
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aca:	095b      	lsrs	r3, r3, #5
 8008acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad4:	f003 031f 	and.w	r3, r3, #31
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <USB_EPStartXfer+0x1600>
 8008adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	029b      	lsls	r3, r3, #10
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	e05c      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10c      	bne.n	8008b30 <USB_EPStartXfer+0x164a>
 8008b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b2c:	801a      	strh	r2, [r3, #0]
 8008b2e:	e04b      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <USB_EPStartXfer+0x166a>
 8008b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	029b      	lsls	r3, r3, #10
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4313      	orrs	r3, r2
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e02c      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
 8008b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d124      	bne.n	8008bc8 <USB_EPStartXfer+0x16e2>
 8008b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b94:	4413      	add	r3, r2
 8008b96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	00da      	lsls	r2, r3, #3
 8008ba8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008bac:	4413      	add	r3, r2
 8008bae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e001      	b.n	8008bc8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e03a      	b.n	8008c3e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008bf2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008bf6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008bfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008bfe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c06:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	441a      	add	r2, r3
 8008c24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d020      	beq.n	8008c9c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c70:	81bb      	strh	r3, [r7, #12]
 8008c72:	89bb      	ldrh	r3, [r7, #12]
 8008c74:	f083 0310 	eor.w	r3, r3, #16
 8008c78:	81bb      	strh	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	89bb      	ldrh	r3, [r7, #12]
 8008c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8013      	strh	r3, [r2, #0]
 8008c9a:	e01f      	b.n	8008cdc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb2:	81fb      	strh	r3, [r7, #14]
 8008cb4:	89fb      	ldrh	r3, [r7, #14]
 8008cb6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cba:	81fb      	strh	r3, [r7, #14]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	441a      	add	r2, r3
 8008cc6:	89fb      	ldrh	r3, [r7, #14]
 8008cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b087      	sub	sp, #28
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	7b1b      	ldrb	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f040 809d 	bne.w	8008e38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d04c      	beq.n	8008da0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	823b      	strh	r3, [r7, #16]
 8008d14:	8a3b      	ldrh	r3, [r7, #16]
 8008d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01b      	beq.n	8008d56 <USB_EPClearStall+0x6c>
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d34:	81fb      	strh	r3, [r7, #14]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	441a      	add	r2, r3
 8008d40:	89fb      	ldrh	r3, [r7, #14]
 8008d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	78db      	ldrb	r3, [r3, #3]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d06c      	beq.n	8008e38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d74:	81bb      	strh	r3, [r7, #12]
 8008d76:	89bb      	ldrh	r3, [r7, #12]
 8008d78:	f083 0320 	eor.w	r3, r3, #32
 8008d7c:	81bb      	strh	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	441a      	add	r2, r3
 8008d88:	89bb      	ldrh	r3, [r7, #12]
 8008d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
 8008d9e:	e04b      	b.n	8008e38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	82fb      	strh	r3, [r7, #22]
 8008dae:	8afb      	ldrh	r3, [r7, #22]
 8008db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01b      	beq.n	8008df0 <USB_EPClearStall+0x106>
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dce:	82bb      	strh	r3, [r7, #20]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	441a      	add	r2, r3
 8008dda:	8abb      	ldrh	r3, [r7, #20]
 8008ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e06:	827b      	strh	r3, [r7, #18]
 8008e08:	8a7b      	ldrh	r3, [r7, #18]
 8008e0a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e0e:	827b      	strh	r3, [r7, #18]
 8008e10:	8a7b      	ldrh	r3, [r7, #18]
 8008e12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e16:	827b      	strh	r3, [r7, #18]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	8a7b      	ldrh	r3, [r7, #18]
 8008e24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2280      	movs	r2, #128	@ 0x80
 8008e5c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b08b      	sub	sp, #44	@ 0x2c
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	460b      	mov	r3, r1
 8008ecc:	80fb      	strh	r3, [r7, #6]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ed2:	88bb      	ldrh	r3, [r7, #4]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ee2:	88fa      	ldrh	r2, [r7, #6]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef2:	e01b      	b.n	8008f2c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	3301      	adds	r3, #1
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	b21a      	sxth	r2, r3
 8008f04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	8a7a      	ldrh	r2, [r7, #18]
 8008f12:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	3302      	adds	r3, #2
 8008f18:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	3301      	adds	r3, #1
 8008f24:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e0      	bne.n	8008ef4 <USB_WritePMA+0x38>
  }
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	372c      	adds	r7, #44	@ 0x2c
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b08b      	sub	sp, #44	@ 0x2c
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	460b      	mov	r3, r1
 8008f50:	80fb      	strh	r3, [r7, #6]
 8008f52:	4613      	mov	r3, r2
 8008f54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f56:	88bb      	ldrh	r3, [r7, #4]
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f76:	e018      	b.n	8008faa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	3302      	adds	r3, #2
 8008f84:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3301      	adds	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e3      	bne.n	8008f78 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008fb0:	88bb      	ldrh	r3, [r7, #4]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d007      	beq.n	8008fcc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	701a      	strb	r2, [r3, #0]
  }
}
 8008fcc:	bf00      	nop
 8008fce:	372c      	adds	r7, #44	@ 0x2c
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fe4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008fe8:	f002 f914 	bl	800b214 <USBD_static_malloc>
 8008fec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e066      	b.n	80090ce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7c1b      	ldrb	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d119      	bne.n	8009044 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009014:	2202      	movs	r2, #2
 8009016:	2181      	movs	r1, #129	@ 0x81
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 ffa2 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009028:	2202      	movs	r2, #2
 800902a:	2101      	movs	r1, #1
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 ff98 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2210      	movs	r2, #16
 800903e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009042:	e016      	b.n	8009072 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009044:	2340      	movs	r3, #64	@ 0x40
 8009046:	2202      	movs	r2, #2
 8009048:	2181      	movs	r1, #129	@ 0x81
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 ff89 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009056:	2340      	movs	r3, #64	@ 0x40
 8009058:	2202      	movs	r2, #2
 800905a:	2101      	movs	r1, #1
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 ff80 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2210      	movs	r2, #16
 800906e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009072:	2308      	movs	r3, #8
 8009074:	2203      	movs	r2, #3
 8009076:	2182      	movs	r1, #130	@ 0x82
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 ff72 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7c1b      	ldrb	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090b2:	2101      	movs	r1, #1
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f002 f843 	bl	800b140 <USBD_LL_PrepareReceive>
 80090ba:	e007      	b.n	80090cc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090c2:	2340      	movs	r3, #64	@ 0x40
 80090c4:	2101      	movs	r1, #1
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f002 f83a 	bl	800b140 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090e2:	2181      	movs	r1, #129	@ 0x81
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 ff62 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090f0:	2101      	movs	r1, #1
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 ff5b 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009100:	2182      	movs	r1, #130	@ 0x82
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 ff53 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00e      	beq.n	8009140 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009132:	4618      	mov	r0, r3
 8009134:	f002 f87c 	bl	800b230 <USBD_static_free>
    pdev->pClassData = NULL;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800915c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009170:	2303      	movs	r3, #3
 8009172:	e0af      	b.n	80092d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800917c:	2b00      	cmp	r3, #0
 800917e:	d03f      	beq.n	8009200 <USBD_CDC_Setup+0xb4>
 8009180:	2b20      	cmp	r3, #32
 8009182:	f040 809f 	bne.w	80092c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d02e      	beq.n	80091ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b25b      	sxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	da16      	bge.n	80091c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80091a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	88d2      	ldrh	r2, [r2, #6]
 80091aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	88db      	ldrh	r3, [r3, #6]
 80091b0:	2b07      	cmp	r3, #7
 80091b2:	bf28      	it	cs
 80091b4:	2307      	movcs	r3, #7
 80091b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	89fa      	ldrh	r2, [r7, #14]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 facd 	bl	800a75e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80091c4:	e085      	b.n	80092d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	785a      	ldrb	r2, [r3, #1]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	88db      	ldrh	r3, [r3, #6]
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091dc:	6939      	ldr	r1, [r7, #16]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fae6 	bl	800a7b6 <USBD_CtlPrepareRx>
      break;
 80091ea:	e072      	b.n	80092d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	7850      	ldrb	r0, [r2, #1]
 80091f8:	2200      	movs	r2, #0
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	4798      	blx	r3
      break;
 80091fe:	e068      	b.n	80092d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b0b      	cmp	r3, #11
 8009206:	d852      	bhi.n	80092ae <USBD_CDC_Setup+0x162>
 8009208:	a201      	add	r2, pc, #4	@ (adr r2, 8009210 <USBD_CDC_Setup+0xc4>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009241 	.word	0x08009241
 8009214:	080092bd 	.word	0x080092bd
 8009218:	080092af 	.word	0x080092af
 800921c:	080092af 	.word	0x080092af
 8009220:	080092af 	.word	0x080092af
 8009224:	080092af 	.word	0x080092af
 8009228:	080092af 	.word	0x080092af
 800922c:	080092af 	.word	0x080092af
 8009230:	080092af 	.word	0x080092af
 8009234:	080092af 	.word	0x080092af
 8009238:	0800926b 	.word	0x0800926b
 800923c:	08009295 	.word	0x08009295
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b03      	cmp	r3, #3
 800924a:	d107      	bne.n	800925c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800924c:	f107 030a 	add.w	r3, r7, #10
 8009250:	2202      	movs	r2, #2
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fa82 	bl	800a75e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800925a:	e032      	b.n	80092c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 fa0c 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	75fb      	strb	r3, [r7, #23]
          break;
 8009268:	e02b      	b.n	80092c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b03      	cmp	r3, #3
 8009274:	d107      	bne.n	8009286 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009276:	f107 030d 	add.w	r3, r7, #13
 800927a:	2201      	movs	r2, #1
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fa6d 	bl	800a75e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009284:	e01d      	b.n	80092c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 f9f7 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 800928e:	2303      	movs	r3, #3
 8009290:	75fb      	strb	r3, [r7, #23]
          break;
 8009292:	e016      	b.n	80092c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b03      	cmp	r3, #3
 800929e:	d00f      	beq.n	80092c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 f9ea 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092ac:	e008      	b.n	80092c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 f9e3 	bl	800a67c <USBD_CtlError>
          ret = USBD_FAIL;
 80092b6:	2303      	movs	r3, #3
 80092b8:	75fb      	strb	r3, [r7, #23]
          break;
 80092ba:	e002      	b.n	80092c2 <USBD_CDC_Setup+0x176>
          break;
 80092bc:	bf00      	nop
 80092be:	e008      	b.n	80092d2 <USBD_CDC_Setup+0x186>
          break;
 80092c0:	bf00      	nop
      }
      break;
 80092c2:	e006      	b.n	80092d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 f9d8 	bl	800a67c <USBD_CtlError>
      ret = USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	75fb      	strb	r3, [r7, #23]
      break;
 80092d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80092ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e04f      	b.n	800939e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009304:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	4613      	mov	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	440b      	add	r3, r1
 8009314:	3318      	adds	r3, #24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d029      	beq.n	8009370 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	3318      	adds	r3, #24
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	78f9      	ldrb	r1, [r7, #3]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	460b      	mov	r3, r1
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	4403      	add	r3, r0
 800933c:	3320      	adds	r3, #32
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	fbb2 f1f3 	udiv	r1, r2, r3
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800934a:	2b00      	cmp	r3, #0
 800934c:	d110      	bne.n	8009370 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	3318      	adds	r3, #24
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009362:	78f9      	ldrb	r1, [r7, #3]
 8009364:	2300      	movs	r3, #0
 8009366:	2200      	movs	r2, #0
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fec8 	bl	800b0fe <USBD_LL_Transmit>
 800936e:	e015      	b.n	800939c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e015      	b.n	80093f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fed8 	bl	800b182 <USBD_LL_GetRxDataSize>
 80093d2:	4602      	mov	r2, r0
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80093ee:	4611      	mov	r1, r2
 80093f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800940a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009412:	2303      	movs	r3, #3
 8009414:	e01a      	b.n	800944c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d014      	beq.n	800944a <USBD_CDC_EP0_RxReady+0x4e>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009426:	2bff      	cmp	r3, #255	@ 0xff
 8009428:	d00f      	beq.n	800944a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009438:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009440:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	22ff      	movs	r2, #255	@ 0xff
 8009446:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2243      	movs	r2, #67	@ 0x43
 8009460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009462:	4b03      	ldr	r3, [pc, #12]	@ (8009470 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20000098 	.word	0x20000098

08009474 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2243      	movs	r2, #67	@ 0x43
 8009480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009482:	4b03      	ldr	r3, [pc, #12]	@ (8009490 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	20000054 	.word	0x20000054

08009494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2243      	movs	r2, #67	@ 0x43
 80094a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80094a2:	4b03      	ldr	r3, [pc, #12]	@ (80094b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200000dc 	.word	0x200000dc

080094b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	220a      	movs	r2, #10
 80094c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80094c2:	4b03      	ldr	r3, [pc, #12]	@ (80094d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	20000010 	.word	0x20000010

080094d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e004      	b.n	80094f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094fe:	b480      	push	{r7}
 8009500:	b087      	sub	sp, #28
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009510:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	e008      	b.n	800952e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	371c      	adds	r7, #28
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800953a:	b480      	push	{r7}
 800953c:	b085      	sub	sp, #20
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800954a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009552:	2303      	movs	r3, #3
 8009554:	e004      	b.n	8009560 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800957a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800957c:	2301      	movs	r3, #1
 800957e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800958a:	2303      	movs	r3, #3
 800958c:	e01a      	b.n	80095c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009594:	2b00      	cmp	r3, #0
 8009596:	d114      	bne.n	80095c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2201      	movs	r2, #1
 800959c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80095b6:	2181      	movs	r1, #129	@ 0x81
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fda0 	bl	800b0fe <USBD_LL_Transmit>

    ret = USBD_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e016      	b.n	8009618 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7c1b      	ldrb	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095fc:	2101      	movs	r1, #1
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fd9e 	bl	800b140 <USBD_LL_PrepareReceive>
 8009604:	e007      	b.n	8009616 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	2101      	movs	r1, #1
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 fd95 	bl	800b140 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e01f      	b.n	8009678 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	79fa      	ldrb	r2, [r7, #7]
 800966a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f001 fbfd 	bl	800ae6c <USBD_LL_Init>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009694:	2303      	movs	r3, #3
 8009696:	e016      	b.n	80096c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b4:	f107 020e 	add.w	r2, r7, #14
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
 80096bc:	4602      	mov	r2, r0
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fc28 	bl	800af2c <USBD_LL_Start>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009708:	2303      	movs	r3, #3
 800970a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d009      	beq.n	800972a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	78fa      	ldrb	r2, [r7, #3]
 8009720:	4611      	mov	r1, r2
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d007      	beq.n	800975a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	78fa      	ldrb	r2, [r7, #3]
 8009754:	4611      	mov	r1, r2
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
  }

  return USBD_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 ff46 	bl	800a608 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	2b02      	cmp	r3, #2
 800979e:	d01a      	beq.n	80097d6 <USBD_LL_SetupStage+0x72>
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d822      	bhi.n	80097ea <USBD_LL_SetupStage+0x86>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <USBD_LL_SetupStage+0x4a>
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d00a      	beq.n	80097c2 <USBD_LL_SetupStage+0x5e>
 80097ac:	e01d      	b.n	80097ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f9ee 	bl	8009b98 <USBD_StdDevReq>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
      break;
 80097c0:	e020      	b.n	8009804 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa52 	bl	8009c74 <USBD_StdItfReq>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e016      	b.n	8009804 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa91 	bl	8009d06 <USBD_StdEPReq>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
      break;
 80097e8:	e00c      	b.n	8009804 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 fbf7 	bl	800afec <USBD_LL_StallEP>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
      break;
 8009802:	bf00      	nop
  }

  return ret;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	460b      	mov	r3, r1
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d138      	bne.n	8009894 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009828:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009830:	2b03      	cmp	r3, #3
 8009832:	d14a      	bne.n	80098ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d913      	bls.n	8009868 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	1ad2      	subs	r2, r2, r3
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	4293      	cmp	r3, r2
 8009858:	bf28      	it	cs
 800985a:	4613      	movcs	r3, r2
 800985c:	461a      	mov	r2, r3
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 ffc5 	bl	800a7f0 <USBD_CtlContinueRx>
 8009866:	e030      	b.n	80098ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b03      	cmp	r3, #3
 8009872:	d10b      	bne.n	800988c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 ffc0 	bl	800a812 <USBD_CtlSendStatus>
 8009892:	e01a      	b.n	80098ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b03      	cmp	r3, #3
 800989e:	d114      	bne.n	80098ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	7afa      	ldrb	r2, [r7, #11]
 80098b6:	4611      	mov	r1, r2
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	4798      	blx	r3
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	e000      	b.n	80098cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	460b      	mov	r3, r1
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d16b      	bne.n	80099c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3314      	adds	r3, #20
 80098ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d156      	bne.n	80099a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d914      	bls.n	800992e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	461a      	mov	r2, r3
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 ff3a 	bl	800a794 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	2100      	movs	r1, #0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 fc0a 	bl	800b140 <USBD_LL_PrepareReceive>
 800992c:	e03b      	b.n	80099a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	429a      	cmp	r2, r3
 8009938:	d11c      	bne.n	8009974 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009942:	429a      	cmp	r2, r3
 8009944:	d316      	bcc.n	8009974 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009950:	429a      	cmp	r2, r3
 8009952:	d20f      	bcs.n	8009974 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009954:	2200      	movs	r2, #0
 8009956:	2100      	movs	r1, #0
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 ff1b 	bl	800a794 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f001 fbe7 	bl	800b140 <USBD_LL_PrepareReceive>
 8009972:	e018      	b.n	80099a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b03      	cmp	r3, #3
 800997e:	d10b      	bne.n	8009998 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009998:	2180      	movs	r1, #128	@ 0x80
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f001 fb26 	bl	800afec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 ff49 	bl	800a838 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d122      	bne.n	80099f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fe98 	bl	80096e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099be:	e01a      	b.n	80099f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d114      	bne.n	80099f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00e      	beq.n	80099f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	7afa      	ldrb	r2, [r7, #11]
 80099e2:	4611      	mov	r1, r2
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	4798      	blx	r3
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	e000      	b.n	80099f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e02f      	b.n	8009a94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00f      	beq.n	8009a5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6852      	ldr	r2, [r2, #4]
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	4611      	mov	r1, r2
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a5e:	2340      	movs	r3, #64	@ 0x40
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 fa7c 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2240      	movs	r2, #64	@ 0x40
 8009a76:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a7a:	2340      	movs	r3, #64	@ 0x40
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2180      	movs	r1, #128	@ 0x80
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 fa6e 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2240      	movs	r2, #64	@ 0x40
 8009a90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d106      	bne.n	8009b0a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e012      	b.n	8009b54 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d10b      	bne.n	8009b52 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	3301      	adds	r3, #1
 8009b72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b7a:	8a3b      	ldrh	r3, [r7, #16]
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	b21a      	sxth	r2, r3
 8009b80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	b21b      	sxth	r3, r3
 8009b88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bae:	2b40      	cmp	r3, #64	@ 0x40
 8009bb0:	d005      	beq.n	8009bbe <USBD_StdDevReq+0x26>
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d853      	bhi.n	8009c5e <USBD_StdDevReq+0xc6>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00b      	beq.n	8009bd2 <USBD_StdDevReq+0x3a>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d14f      	bne.n	8009c5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	4798      	blx	r3
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd0:	e04a      	b.n	8009c68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d83b      	bhi.n	8009c52 <USBD_StdDevReq+0xba>
 8009bda:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <USBD_StdDevReq+0x48>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009c49 	.word	0x08009c49
 8009be8:	08009c53 	.word	0x08009c53
 8009bec:	08009c3f 	.word	0x08009c3f
 8009bf0:	08009c53 	.word	0x08009c53
 8009bf4:	08009c13 	.word	0x08009c13
 8009bf8:	08009c09 	.word	0x08009c09
 8009bfc:	08009c53 	.word	0x08009c53
 8009c00:	08009c2b 	.word	0x08009c2b
 8009c04:	08009c1d 	.word	0x08009c1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f9de 	bl	8009fcc <USBD_GetDescriptor>
          break;
 8009c10:	e024      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb6d 	bl	800a2f4 <USBD_SetAddress>
          break;
 8009c1a:	e01f      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fbac 	bl	800a37c <USBD_SetConfig>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]
          break;
 8009c28:	e018      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fc4b 	bl	800a4c8 <USBD_GetConfig>
          break;
 8009c32:	e013      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fc7c 	bl	800a534 <USBD_GetStatus>
          break;
 8009c3c:	e00e      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fcab 	bl	800a59c <USBD_SetFeature>
          break;
 8009c46:	e009      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fcba 	bl	800a5c4 <USBD_ClrFeature>
          break;
 8009c50:	e004      	b.n	8009c5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fd11 	bl	800a67c <USBD_CtlError>
          break;
 8009c5a:	bf00      	nop
      }
      break;
 8009c5c:	e004      	b.n	8009c68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fd0b 	bl	800a67c <USBD_CtlError>
      break;
 8009c66:	bf00      	nop
  }

  return ret;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop

08009c74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d005      	beq.n	8009c9a <USBD_StdItfReq+0x26>
 8009c8e:	2b40      	cmp	r3, #64	@ 0x40
 8009c90:	d82f      	bhi.n	8009cf2 <USBD_StdItfReq+0x7e>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <USBD_StdItfReq+0x26>
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d12b      	bne.n	8009cf2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d81d      	bhi.n	8009ce4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	889b      	ldrh	r3, [r3, #4]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d813      	bhi.n	8009cda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	4798      	blx	r3
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	88db      	ldrh	r3, [r3, #6]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d110      	bne.n	8009cee <USBD_StdItfReq+0x7a>
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fd9d 	bl	800a812 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cd8:	e009      	b.n	8009cee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fccd 	bl	800a67c <USBD_CtlError>
          break;
 8009ce2:	e004      	b.n	8009cee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fcc8 	bl	800a67c <USBD_CtlError>
          break;
 8009cec:	e000      	b.n	8009cf0 <USBD_StdItfReq+0x7c>
          break;
 8009cee:	bf00      	nop
      }
      break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fcc1 	bl	800a67c <USBD_CtlError>
      break;
 8009cfa:	bf00      	nop
  }

  return ret;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	889b      	ldrh	r3, [r3, #4]
 8009d18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d22:	2b40      	cmp	r3, #64	@ 0x40
 8009d24:	d007      	beq.n	8009d36 <USBD_StdEPReq+0x30>
 8009d26:	2b40      	cmp	r3, #64	@ 0x40
 8009d28:	f200 8145 	bhi.w	8009fb6 <USBD_StdEPReq+0x2b0>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00c      	beq.n	8009d4a <USBD_StdEPReq+0x44>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	f040 8140 	bne.w	8009fb6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]
      break;
 8009d48:	e13a      	b.n	8009fc0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d007      	beq.n	8009d62 <USBD_StdEPReq+0x5c>
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	f300 8129 	bgt.w	8009faa <USBD_StdEPReq+0x2a4>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d07f      	beq.n	8009e5c <USBD_StdEPReq+0x156>
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d03c      	beq.n	8009dda <USBD_StdEPReq+0xd4>
 8009d60:	e123      	b.n	8009faa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d002      	beq.n	8009d74 <USBD_StdEPReq+0x6e>
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d016      	beq.n	8009da0 <USBD_StdEPReq+0x9a>
 8009d72:	e02c      	b.n	8009dce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00d      	beq.n	8009d96 <USBD_StdEPReq+0x90>
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	2b80      	cmp	r3, #128	@ 0x80
 8009d7e:	d00a      	beq.n	8009d96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 f931 	bl	800afec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d8a:	2180      	movs	r1, #128	@ 0x80
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 f92d 	bl	800afec <USBD_LL_StallEP>
 8009d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d94:	e020      	b.n	8009dd8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fc6f 	bl	800a67c <USBD_CtlError>
              break;
 8009d9e:	e01b      	b.n	8009dd8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	885b      	ldrh	r3, [r3, #2]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10e      	bne.n	8009dc6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <USBD_StdEPReq+0xc0>
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b80      	cmp	r3, #128	@ 0x80
 8009db2:	d008      	beq.n	8009dc6 <USBD_StdEPReq+0xc0>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	88db      	ldrh	r3, [r3, #6]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 f913 	bl	800afec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fd23 	bl	800a812 <USBD_CtlSendStatus>

              break;
 8009dcc:	e004      	b.n	8009dd8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fc53 	bl	800a67c <USBD_CtlError>
              break;
 8009dd6:	bf00      	nop
          }
          break;
 8009dd8:	e0ec      	b.n	8009fb4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d002      	beq.n	8009dec <USBD_StdEPReq+0xe6>
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d016      	beq.n	8009e18 <USBD_StdEPReq+0x112>
 8009dea:	e030      	b.n	8009e4e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00d      	beq.n	8009e0e <USBD_StdEPReq+0x108>
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	2b80      	cmp	r3, #128	@ 0x80
 8009df6:	d00a      	beq.n	8009e0e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f8f5 	bl	800afec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e02:	2180      	movs	r1, #128	@ 0x80
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 f8f1 	bl	800afec <USBD_LL_StallEP>
 8009e0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e0c:	e025      	b.n	8009e5a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fc33 	bl	800a67c <USBD_CtlError>
              break;
 8009e16:	e020      	b.n	8009e5a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	885b      	ldrh	r3, [r3, #2]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11b      	bne.n	8009e58 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f8fb 	bl	800b02a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fcec 	bl	800a812 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e4c:	e004      	b.n	8009e58 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fc13 	bl	800a67c <USBD_CtlError>
              break;
 8009e56:	e000      	b.n	8009e5a <USBD_StdEPReq+0x154>
              break;
 8009e58:	bf00      	nop
          }
          break;
 8009e5a:	e0ab      	b.n	8009fb4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d002      	beq.n	8009e6e <USBD_StdEPReq+0x168>
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d032      	beq.n	8009ed2 <USBD_StdEPReq+0x1cc>
 8009e6c:	e097      	b.n	8009f9e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <USBD_StdEPReq+0x17e>
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b80      	cmp	r3, #128	@ 0x80
 8009e78:	d004      	beq.n	8009e84 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fbfd 	bl	800a67c <USBD_CtlError>
                break;
 8009e82:	e091      	b.n	8009fa8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0b      	bge.n	8009ea4 <USBD_StdEPReq+0x19e>
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	3310      	adds	r3, #16
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	e00b      	b.n	8009ebc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	3304      	adds	r3, #4
 8009ebc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fc47 	bl	800a75e <USBD_CtlSendData>
              break;
 8009ed0:	e06a      	b.n	8009fa8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da11      	bge.n	8009efe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	f003 020f 	and.w	r2, r3, #15
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	440b      	add	r3, r1
 8009eec:	3324      	adds	r3, #36	@ 0x24
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d117      	bne.n	8009f24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fbc0 	bl	800a67c <USBD_CtlError>
                  break;
 8009efc:	e054      	b.n	8009fa8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	f003 020f 	and.w	r2, r3, #15
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d104      	bne.n	8009f24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fbad 	bl	800a67c <USBD_CtlError>
                  break;
 8009f22:	e041      	b.n	8009fa8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da0b      	bge.n	8009f44 <USBD_StdEPReq+0x23e>
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	3310      	adds	r3, #16
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	4413      	add	r3, r2
 8009f40:	3304      	adds	r3, #4
 8009f42:	e00b      	b.n	8009f5c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <USBD_StdEPReq+0x264>
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b80      	cmp	r3, #128	@ 0x80
 8009f68:	d103      	bne.n	8009f72 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e00e      	b.n	8009f90 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f001 f876 	bl	800b068 <USBD_LL_IsStallEP>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2201      	movs	r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	e002      	b.n	8009f90 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2202      	movs	r2, #2
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fbe1 	bl	800a75e <USBD_CtlSendData>
              break;
 8009f9c:	e004      	b.n	8009fa8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fb6b 	bl	800a67c <USBD_CtlError>
              break;
 8009fa6:	bf00      	nop
          }
          break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fb65 	bl	800a67c <USBD_CtlError>
          break;
 8009fb2:	bf00      	nop
      }
      break;
 8009fb4:	e004      	b.n	8009fc0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fb5f 	bl	800a67c <USBD_CtlError>
      break;
 8009fbe:	bf00      	nop
  }

  return ret;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	885b      	ldrh	r3, [r3, #2]
 8009fe6:	0a1b      	lsrs	r3, r3, #8
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b0e      	cmp	r3, #14
 8009fee:	f200 8152 	bhi.w	800a296 <USBD_GetDescriptor+0x2ca>
 8009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <USBD_GetDescriptor+0x2c>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a069 	.word	0x0800a069
 8009ffc:	0800a081 	.word	0x0800a081
 800a000:	0800a0c1 	.word	0x0800a0c1
 800a004:	0800a297 	.word	0x0800a297
 800a008:	0800a297 	.word	0x0800a297
 800a00c:	0800a237 	.word	0x0800a237
 800a010:	0800a263 	.word	0x0800a263
 800a014:	0800a297 	.word	0x0800a297
 800a018:	0800a297 	.word	0x0800a297
 800a01c:	0800a297 	.word	0x0800a297
 800a020:	0800a297 	.word	0x0800a297
 800a024:	0800a297 	.word	0x0800a297
 800a028:	0800a297 	.word	0x0800a297
 800a02c:	0800a297 	.word	0x0800a297
 800a030:	0800a035 	.word	0x0800a035
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	7c12      	ldrb	r2, [r2, #16]
 800a04c:	f107 0108 	add.w	r1, r7, #8
 800a050:	4610      	mov	r0, r2
 800a052:	4798      	blx	r3
 800a054:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a056:	e126      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fb0e 	bl	800a67c <USBD_CtlError>
        err++;
 800a060:	7afb      	ldrb	r3, [r7, #11]
 800a062:	3301      	adds	r3, #1
 800a064:	72fb      	strb	r3, [r7, #11]
      break;
 800a066:	e11e      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
      break;
 800a07e:	e112      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	7c1b      	ldrb	r3, [r3, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10d      	bne.n	800a0a4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	f107 0208 	add.w	r2, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	2202      	movs	r2, #2
 800a0a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0a2:	e100      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	f107 0208 	add.w	r2, r7, #8
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
 800a0b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	701a      	strb	r2, [r3, #0]
      break;
 800a0be:	e0f2      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	885b      	ldrh	r3, [r3, #2]
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	f200 80ac 	bhi.w	800a224 <USBD_GetDescriptor+0x258>
 800a0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <USBD_GetDescriptor+0x108>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a121 	.word	0x0800a121
 800a0dc:	0800a155 	.word	0x0800a155
 800a0e0:	0800a189 	.word	0x0800a189
 800a0e4:	0800a1bd 	.word	0x0800a1bd
 800a0e8:	0800a1f1 	.word	0x0800a1f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7c12      	ldrb	r2, [r2, #16]
 800a104:	f107 0108 	add.w	r1, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10e:	e091      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fab2 	bl	800a67c <USBD_CtlError>
            err++;
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	3301      	adds	r3, #1
 800a11c:	72fb      	strb	r3, [r7, #11]
          break;
 800a11e:	e089      	b.n	800a234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	7c12      	ldrb	r2, [r2, #16]
 800a138:	f107 0108 	add.w	r1, r7, #8
 800a13c:	4610      	mov	r0, r2
 800a13e:	4798      	blx	r3
 800a140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a142:	e077      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fa98 	bl	800a67c <USBD_CtlError>
            err++;
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	3301      	adds	r3, #1
 800a150:	72fb      	strb	r3, [r7, #11]
          break;
 800a152:	e06f      	b.n	800a234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	7c12      	ldrb	r2, [r2, #16]
 800a16c:	f107 0108 	add.w	r1, r7, #8
 800a170:	4610      	mov	r0, r2
 800a172:	4798      	blx	r3
 800a174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a176:	e05d      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fa7e 	bl	800a67c <USBD_CtlError>
            err++;
 800a180:	7afb      	ldrb	r3, [r7, #11]
 800a182:	3301      	adds	r3, #1
 800a184:	72fb      	strb	r3, [r7, #11]
          break;
 800a186:	e055      	b.n	800a234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	7c12      	ldrb	r2, [r2, #16]
 800a1a0:	f107 0108 	add.w	r1, r7, #8
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4798      	blx	r3
 800a1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1aa:	e043      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fa64 	bl	800a67c <USBD_CtlError>
            err++;
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ba:	e03b      	b.n	800a234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	7c12      	ldrb	r2, [r2, #16]
 800a1d4:	f107 0108 	add.w	r1, r7, #8
 800a1d8:	4610      	mov	r0, r2
 800a1da:	4798      	blx	r3
 800a1dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1de:	e029      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fa4a 	bl	800a67c <USBD_CtlError>
            err++;
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ee:	e021      	b.n	800a234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	7c12      	ldrb	r2, [r2, #16]
 800a208:	f107 0108 	add.w	r1, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a212:	e00f      	b.n	800a234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa30 	bl	800a67c <USBD_CtlError>
            err++;
 800a21c:	7afb      	ldrb	r3, [r7, #11]
 800a21e:	3301      	adds	r3, #1
 800a220:	72fb      	strb	r3, [r7, #11]
          break;
 800a222:	e007      	b.n	800a234 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa28 	bl	800a67c <USBD_CtlError>
          err++;
 800a22c:	7afb      	ldrb	r3, [r7, #11]
 800a22e:	3301      	adds	r3, #1
 800a230:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a232:	bf00      	nop
      }
      break;
 800a234:	e037      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7c1b      	ldrb	r3, [r3, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d109      	bne.n	800a252 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a246:	f107 0208 	add.w	r2, r7, #8
 800a24a:	4610      	mov	r0, r2
 800a24c:	4798      	blx	r3
 800a24e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a250:	e029      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fa11 	bl	800a67c <USBD_CtlError>
        err++;
 800a25a:	7afb      	ldrb	r3, [r7, #11]
 800a25c:	3301      	adds	r3, #1
 800a25e:	72fb      	strb	r3, [r7, #11]
      break;
 800a260:	e021      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7c1b      	ldrb	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10d      	bne.n	800a286 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a272:	f107 0208 	add.w	r2, r7, #8
 800a276:	4610      	mov	r0, r2
 800a278:	4798      	blx	r3
 800a27a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	2207      	movs	r2, #7
 800a282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a284:	e00f      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f9f7 	bl	800a67c <USBD_CtlError>
        err++;
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	3301      	adds	r3, #1
 800a292:	72fb      	strb	r3, [r7, #11]
      break;
 800a294:	e007      	b.n	800a2a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f9ef 	bl	800a67c <USBD_CtlError>
      err++;
 800a29e:	7afb      	ldrb	r3, [r7, #11]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2a4:	bf00      	nop
  }

  if (err != 0U)
 800a2a6:	7afb      	ldrb	r3, [r7, #11]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d11e      	bne.n	800a2ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	88db      	ldrh	r3, [r3, #6]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d016      	beq.n	800a2e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a2b4:	893b      	ldrh	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00e      	beq.n	800a2d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	88da      	ldrh	r2, [r3, #6]
 800a2be:	893b      	ldrh	r3, [r7, #8]
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bf28      	it	cs
 800a2c4:	4613      	movcs	r3, r2
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ca:	893b      	ldrh	r3, [r7, #8]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fa44 	bl	800a75e <USBD_CtlSendData>
 800a2d6:	e009      	b.n	800a2ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f9ce 	bl	800a67c <USBD_CtlError>
 800a2e0:	e004      	b.n	800a2ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa95 	bl	800a812 <USBD_CtlSendStatus>
 800a2e8:	e000      	b.n	800a2ec <USBD_GetDescriptor+0x320>
    return;
 800a2ea:	bf00      	nop
  }
}
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	889b      	ldrh	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d131      	bne.n	800a36a <USBD_SetAddress+0x76>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	88db      	ldrh	r3, [r3, #6]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d12d      	bne.n	800a36a <USBD_SetAddress+0x76>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	2b7f      	cmp	r3, #127	@ 0x7f
 800a314:	d829      	bhi.n	800a36a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d104      	bne.n	800a338 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f9a3 	bl	800a67c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a336:	e01d      	b.n	800a374 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7bfa      	ldrb	r2, [r7, #15]
 800a33c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 febb 	bl	800b0c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fa61 	bl	800a812 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d004      	beq.n	800a360 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35e:	e009      	b.n	800a374 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a368:	e004      	b.n	800a374 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f985 	bl	800a67c <USBD_CtlError>
  }
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	4b4c      	ldr	r3, [pc, #304]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a394:	4b4b      	ldr	r3, [pc, #300]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d905      	bls.n	800a3a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f96c 	bl	800a67c <USBD_CtlError>
    return USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e088      	b.n	800a4ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d002      	beq.n	800a3ba <USBD_SetConfig+0x3e>
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d025      	beq.n	800a404 <USBD_SetConfig+0x88>
 800a3b8:	e071      	b.n	800a49e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3ba:	4b42      	ldr	r3, [pc, #264]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01c      	beq.n	800a3fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a3c2:	4b40      	ldr	r3, [pc, #256]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3cc:	4b3d      	ldr	r3, [pc, #244]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff f992 	bl	80096fc <USBD_SetClassConfig>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f949 	bl	800a67c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3ea:	e065      	b.n	800a4b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fa10 	bl	800a812 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2203      	movs	r2, #3
 800a3f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3fa:	e05d      	b.n	800a4b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa08 	bl	800a812 <USBD_CtlSendStatus>
      break;
 800a402:	e059      	b.n	800a4b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a404:	4b2f      	ldr	r3, [pc, #188]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d112      	bne.n	800a432 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a414:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a41e:	4b29      	ldr	r3, [pc, #164]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff f985 	bl	8009734 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f9f1 	bl	800a812 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a430:	e042      	b.n	800a4b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a432:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d02a      	beq.n	800a496 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff f973 	bl	8009734 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a458:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff f94c 	bl	80096fc <USBD_SetClassConfig>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00f      	beq.n	800a48e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f903 	bl	800a67c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff f958 	bl	8009734 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a48c:	e014      	b.n	800a4b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f9bf 	bl	800a812 <USBD_CtlSendStatus>
      break;
 800a494:	e010      	b.n	800a4b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f9bb 	bl	800a812 <USBD_CtlSendStatus>
      break;
 800a49c:	e00c      	b.n	800a4b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f8eb 	bl	800a67c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4a6:	4b07      	ldr	r3, [pc, #28]	@ (800a4c4 <USBD_SetConfig+0x148>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff f941 	bl	8009734 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b6:	bf00      	nop
  }

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200003d4 	.word	0x200003d4

0800a4c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	88db      	ldrh	r3, [r3, #6]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d004      	beq.n	800a4e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8cd 	bl	800a67c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4e2:	e023      	b.n	800a52c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	dc02      	bgt.n	800a4f6 <USBD_GetConfig+0x2e>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dc03      	bgt.n	800a4fc <USBD_GetConfig+0x34>
 800a4f4:	e015      	b.n	800a522 <USBD_GetConfig+0x5a>
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d00b      	beq.n	800a512 <USBD_GetConfig+0x4a>
 800a4fa:	e012      	b.n	800a522 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3308      	adds	r3, #8
 800a506:	2201      	movs	r2, #1
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f927 	bl	800a75e <USBD_CtlSendData>
        break;
 800a510:	e00c      	b.n	800a52c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3304      	adds	r3, #4
 800a516:	2201      	movs	r2, #1
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f91f 	bl	800a75e <USBD_CtlSendData>
        break;
 800a520:	e004      	b.n	800a52c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f8a9 	bl	800a67c <USBD_CtlError>
        break;
 800a52a:	bf00      	nop
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a544:	b2db      	uxtb	r3, r3
 800a546:	3b01      	subs	r3, #1
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d81e      	bhi.n	800a58a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	88db      	ldrh	r3, [r3, #6]
 800a550:	2b02      	cmp	r3, #2
 800a552:	d004      	beq.n	800a55e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f890 	bl	800a67c <USBD_CtlError>
        break;
 800a55c:	e01a      	b.n	800a594 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d005      	beq.n	800a57a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f043 0202 	orr.w	r2, r3, #2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	330c      	adds	r3, #12
 800a57e:	2202      	movs	r2, #2
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8eb 	bl	800a75e <USBD_CtlSendData>
      break;
 800a588:	e004      	b.n	800a594 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f875 	bl	800a67c <USBD_CtlError>
      break;
 800a592:	bf00      	nop
  }
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d106      	bne.n	800a5bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f92b 	bl	800a812 <USBD_CtlSendStatus>
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d80b      	bhi.n	800a5f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	885b      	ldrh	r3, [r3, #2]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10c      	bne.n	800a5fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f910 	bl	800a812 <USBD_CtlSendStatus>
      }
      break;
 800a5f2:	e004      	b.n	800a5fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f840 	bl	800a67c <USBD_CtlError>
      break;
 800a5fc:	e000      	b.n	800a600 <USBD_ClrFeature+0x3c>
      break;
 800a5fe:	bf00      	nop
  }
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	781a      	ldrb	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	781a      	ldrb	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff fa92 	bl	8009b5c <SWAPBYTE>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3301      	adds	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f7ff fa85 	bl	8009b5c <SWAPBYTE>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3301      	adds	r3, #1
 800a664:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fa78 	bl	8009b5c <SWAPBYTE>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	80da      	strh	r2, [r3, #6]
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a686:	2180      	movs	r1, #128	@ 0x80
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fcaf 	bl	800afec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a68e:	2100      	movs	r1, #0
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fcab 	bl	800afec <USBD_LL_StallEP>
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b086      	sub	sp, #24
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d036      	beq.n	800a722 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6b8:	6938      	ldr	r0, [r7, #16]
 800a6ba:	f000 f836 	bl	800a72a <USBD_GetLen>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	7812      	ldrb	r2, [r2, #0]
 800a6d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	2203      	movs	r2, #3
 800a6e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6ee:	e013      	b.n	800a718 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	7812      	ldrb	r2, [r2, #0]
 800a6fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3301      	adds	r3, #1
 800a700:	613b      	str	r3, [r7, #16]
    idx++;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	3301      	adds	r3, #1
 800a706:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4413      	add	r3, r2
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
    idx++;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	3301      	adds	r3, #1
 800a716:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e7      	bne.n	800a6f0 <USBD_GetString+0x52>
 800a720:	e000      	b.n	800a724 <USBD_GetString+0x86>
    return;
 800a722:	bf00      	nop
  }
}
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a73a:	e005      	b.n	800a748 <USBD_GetLen+0x1e>
  {
    len++;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	3301      	adds	r3, #1
 800a740:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	3301      	adds	r3, #1
 800a746:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f5      	bne.n	800a73c <USBD_GetLen+0x12>
  }

  return len;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2202      	movs	r2, #2
 800a76e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fcba 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fca9 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2203      	movs	r2, #3
 800a7c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	2100      	movs	r1, #0
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 fcad 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	2100      	movs	r1, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fc9c 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2204      	movs	r2, #4
 800a81e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a822:	2300      	movs	r3, #0
 800a824:	2200      	movs	r2, #0
 800a826:	2100      	movs	r1, #0
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fc68 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2205      	movs	r2, #5
 800a844:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a848:	2300      	movs	r3, #0
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fc76 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a864:	2200      	movs	r2, #0
 800a866:	4912      	ldr	r1, [pc, #72]	@ (800a8b0 <MX_USB_Device_Init+0x50>)
 800a868:	4812      	ldr	r0, [pc, #72]	@ (800a8b4 <MX_USB_Device_Init+0x54>)
 800a86a:	f7fe fed9 	bl	8009620 <USBD_Init>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a874:	f7f6 f967 	bl	8000b46 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a878:	490f      	ldr	r1, [pc, #60]	@ (800a8b8 <MX_USB_Device_Init+0x58>)
 800a87a:	480e      	ldr	r0, [pc, #56]	@ (800a8b4 <MX_USB_Device_Init+0x54>)
 800a87c:	f7fe ff00 	bl	8009680 <USBD_RegisterClass>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a886:	f7f6 f95e 	bl	8000b46 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a88a:	490c      	ldr	r1, [pc, #48]	@ (800a8bc <MX_USB_Device_Init+0x5c>)
 800a88c:	4809      	ldr	r0, [pc, #36]	@ (800a8b4 <MX_USB_Device_Init+0x54>)
 800a88e:	f7fe fe21 	bl	80094d4 <USBD_CDC_RegisterInterface>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a898:	f7f6 f955 	bl	8000b46 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a89c:	4805      	ldr	r0, [pc, #20]	@ (800a8b4 <MX_USB_Device_Init+0x54>)
 800a89e:	f7fe ff16 	bl	80096ce <USBD_Start>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a8a8:	f7f6 f94d 	bl	8000b46 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a8ac:	bf00      	nop
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000134 	.word	0x20000134
 800a8b4:	200003d8 	.word	0x200003d8
 800a8b8:	2000001c 	.word	0x2000001c
 800a8bc:	20000120 	.word	0x20000120

0800a8c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4905      	ldr	r1, [pc, #20]	@ (800a8dc <CDC_Init_FS+0x1c>)
 800a8c8:	4805      	ldr	r0, [pc, #20]	@ (800a8e0 <CDC_Init_FS+0x20>)
 800a8ca:	f7fe fe18 	bl	80094fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8ce:	4905      	ldr	r1, [pc, #20]	@ (800a8e4 <CDC_Init_FS+0x24>)
 800a8d0:	4803      	ldr	r0, [pc, #12]	@ (800a8e0 <CDC_Init_FS+0x20>)
 800a8d2:	f7fe fe32 	bl	800953a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20000ea8 	.word	0x20000ea8
 800a8e0:	200003d8 	.word	0x200003d8
 800a8e4:	200006a8 	.word	0x200006a8

0800a8e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	71fb      	strb	r3, [r7, #7]
 800a904:	4613      	mov	r3, r2
 800a906:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	2b23      	cmp	r3, #35	@ 0x23
 800a90c:	d84a      	bhi.n	800a9a4 <CDC_Control_FS+0xac>
 800a90e:	a201      	add	r2, pc, #4	@ (adr r2, 800a914 <CDC_Control_FS+0x1c>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a9a5 	.word	0x0800a9a5
 800a918:	0800a9a5 	.word	0x0800a9a5
 800a91c:	0800a9a5 	.word	0x0800a9a5
 800a920:	0800a9a5 	.word	0x0800a9a5
 800a924:	0800a9a5 	.word	0x0800a9a5
 800a928:	0800a9a5 	.word	0x0800a9a5
 800a92c:	0800a9a5 	.word	0x0800a9a5
 800a930:	0800a9a5 	.word	0x0800a9a5
 800a934:	0800a9a5 	.word	0x0800a9a5
 800a938:	0800a9a5 	.word	0x0800a9a5
 800a93c:	0800a9a5 	.word	0x0800a9a5
 800a940:	0800a9a5 	.word	0x0800a9a5
 800a944:	0800a9a5 	.word	0x0800a9a5
 800a948:	0800a9a5 	.word	0x0800a9a5
 800a94c:	0800a9a5 	.word	0x0800a9a5
 800a950:	0800a9a5 	.word	0x0800a9a5
 800a954:	0800a9a5 	.word	0x0800a9a5
 800a958:	0800a9a5 	.word	0x0800a9a5
 800a95c:	0800a9a5 	.word	0x0800a9a5
 800a960:	0800a9a5 	.word	0x0800a9a5
 800a964:	0800a9a5 	.word	0x0800a9a5
 800a968:	0800a9a5 	.word	0x0800a9a5
 800a96c:	0800a9a5 	.word	0x0800a9a5
 800a970:	0800a9a5 	.word	0x0800a9a5
 800a974:	0800a9a5 	.word	0x0800a9a5
 800a978:	0800a9a5 	.word	0x0800a9a5
 800a97c:	0800a9a5 	.word	0x0800a9a5
 800a980:	0800a9a5 	.word	0x0800a9a5
 800a984:	0800a9a5 	.word	0x0800a9a5
 800a988:	0800a9a5 	.word	0x0800a9a5
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9a5 	.word	0x0800a9a5
 800a994:	0800a9a5 	.word	0x0800a9a5
 800a998:	0800a9a5 	.word	0x0800a9a5
 800a99c:	0800a9a5 	.word	0x0800a9a5
 800a9a0:	0800a9a5 	.word	0x0800a9a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9a4:	bf00      	nop
  }

  return (USBD_OK);
 800a9a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	4810      	ldr	r0, [pc, #64]	@ (800aa04 <CDC_Receive_FS+0x50>)
 800a9c2:	f7fe fdba 	bl	800953a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9c6:	480f      	ldr	r0, [pc, #60]	@ (800aa04 <CDC_Receive_FS+0x50>)
 800a9c8:	f7fe fe00 	bl	80095cc <USBD_CDC_ReceivePacket>

  usb_data_present = 1;
 800a9cc:	4b0e      	ldr	r3, [pc, #56]	@ (800aa08 <CDC_Receive_FS+0x54>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]

  uint8_t len = (uint8_t) *Len;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	73fb      	strb	r3, [r7, #15]
  memset (usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800a9d8:	2240      	movs	r2, #64	@ 0x40
 800a9da:	2100      	movs	r1, #0
 800a9dc:	480b      	ldr	r0, [pc, #44]	@ (800aa0c <CDC_Receive_FS+0x58>)
 800a9de:	f000 fc63 	bl	800b2a8 <memset>
  memcpy (usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4808      	ldr	r0, [pc, #32]	@ (800aa0c <CDC_Receive_FS+0x58>)
 800a9ea:	f000 fc89 	bl	800b300 <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800a9ee:	2240      	movs	r2, #64	@ 0x40
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fc58 	bl	800b2a8 <memset>

  return (USBD_OK);
 800a9f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	200003d8 	.word	0x200003d8
 800aa08:	200002d4 	.word	0x200002d4
 800aa0c:	20000294 	.word	0x20000294

0800aa10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa20:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e00b      	b.n	800aa4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	4806      	ldr	r0, [pc, #24]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa3e:	f7fe fd5e 	bl	80094fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa42:	4805      	ldr	r0, [pc, #20]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa44:	f7fe fd92 	bl	800956c <USBD_CDC_TransmitPacket>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	200003d8 	.word	0x200003d8

0800aa5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2212      	movs	r2, #18
 800aa90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aa92:	4b03      	ldr	r3, [pc, #12]	@ (800aaa0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20000154 	.word	0x20000154

0800aaa4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2204      	movs	r2, #4
 800aab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aab6:	4b03      	ldr	r3, [pc, #12]	@ (800aac4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000168 	.word	0x20000168

0800aac8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4907      	ldr	r1, [pc, #28]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aade:	4808      	ldr	r0, [pc, #32]	@ (800ab00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aae0:	f7ff fddd 	bl	800a69e <USBD_GetString>
 800aae4:	e004      	b.n	800aaf0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4904      	ldr	r1, [pc, #16]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aaea:	4805      	ldr	r0, [pc, #20]	@ (800ab00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aaec:	f7ff fdd7 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf0:	4b02      	ldr	r3, [pc, #8]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200016a8 	.word	0x200016a8
 800ab00:	0800b340 	.word	0x0800b340

0800ab04 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	@ (800ab24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ab14:	4804      	ldr	r0, [pc, #16]	@ (800ab28 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ab16:	f7ff fdc2 	bl	800a69e <USBD_GetString>
  return USBD_StrDesc;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	@ (800ab24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200016a8 	.word	0x200016a8
 800ab28:	0800b354 	.word	0x0800b354

0800ab2c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	221a      	movs	r2, #26
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab3e:	f000 f843 	bl	800abc8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab42:	4b02      	ldr	r3, [pc, #8]	@ (800ab4c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	2000016c 	.word	0x2000016c

0800ab50 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	@ (800ab88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab68:	f7ff fd99 	bl	800a69e <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	@ (800ab88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab74:	f7ff fd93 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200016a8 	.word	0x200016a8
 800ab88:	0800b368 	.word	0x0800b368

0800ab8c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4907      	ldr	r1, [pc, #28]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800aba2:	4808      	ldr	r0, [pc, #32]	@ (800abc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800aba4:	f7ff fd7b 	bl	800a69e <USBD_GetString>
 800aba8:	e004      	b.n	800abb4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4904      	ldr	r1, [pc, #16]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800abae:	4805      	ldr	r0, [pc, #20]	@ (800abc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800abb0:	f7ff fd75 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	200016a8 	.word	0x200016a8
 800abc4:	0800b374 	.word	0x0800b374

0800abc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abce:	4b0f      	ldr	r3, [pc, #60]	@ (800ac0c <Get_SerialNum+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <Get_SerialNum+0x48>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abda:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <Get_SerialNum+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abee:	2208      	movs	r2, #8
 800abf0:	4909      	ldr	r1, [pc, #36]	@ (800ac18 <Get_SerialNum+0x50>)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f814 	bl	800ac20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abf8:	2204      	movs	r2, #4
 800abfa:	4908      	ldr	r1, [pc, #32]	@ (800ac1c <Get_SerialNum+0x54>)
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f000 f80f 	bl	800ac20 <IntToUnicode>
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	1fff7590 	.word	0x1fff7590
 800ac10:	1fff7594 	.word	0x1fff7594
 800ac14:	1fff7598 	.word	0x1fff7598
 800ac18:	2000016e 	.word	0x2000016e
 800ac1c:	2000017e 	.word	0x2000017e

0800ac20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e027      	b.n	800ac88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d80b      	bhi.n	800ac58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3230      	adds	r2, #48	@ 0x30
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e00a      	b.n	800ac6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4619      	mov	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	440b      	add	r3, r1
 800ac68:	3237      	adds	r2, #55	@ 0x37
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3301      	adds	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	7dfa      	ldrb	r2, [r7, #23]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d3d3      	bcc.n	800ac38 <IntToUnicode+0x18>
  }
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b098      	sub	sp, #96	@ 0x60
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aca8:	f107 0310 	add.w	r3, r7, #16
 800acac:	2250      	movs	r2, #80	@ 0x50
 800acae:	2100      	movs	r1, #0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 faf9 	bl	800b2a8 <memset>
  if(pcdHandle->Instance==USB)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a15      	ldr	r2, [pc, #84]	@ (800ad10 <HAL_PCD_MspInit+0x70>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d122      	bne.n	800ad06 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800acc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800acc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800acc6:	2300      	movs	r3, #0
 800acc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800acca:	f107 0310 	add.w	r3, r7, #16
 800acce:	4618      	mov	r0, r3
 800acd0:	f7f9 ffa0 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800acda:	f7f5 ff34 	bl	8000b46 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800acde:	4b0d      	ldr	r3, [pc, #52]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800ace0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace2:	4a0c      	ldr	r2, [pc, #48]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800ace4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ace8:	6593      	str	r3, [r2, #88]	@ 0x58
 800acea:	4b0a      	ldr	r3, [pc, #40]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800acec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800acf6:	2200      	movs	r2, #0
 800acf8:	2100      	movs	r1, #0
 800acfa:	2014      	movs	r0, #20
 800acfc:	f7f6 fb23 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ad00:	2014      	movs	r0, #20
 800ad02:	f7f6 fb3a 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad06:	bf00      	nop
 800ad08:	3760      	adds	r7, #96	@ 0x60
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	40005c00 	.word	0x40005c00
 800ad14:	40021000 	.word	0x40021000

0800ad18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe fd18 	bl	8009764 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	440b      	add	r3, r1
 800ad5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	4619      	mov	r1, r3
 800ad66:	f7fe fd52 	bl	800980e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ad6a:	bf00      	nop
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b082      	sub	sp, #8
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ad84:	78fa      	ldrb	r2, [r7, #3]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	440b      	add	r3, r1
 800ad92:	3324      	adds	r3, #36	@ 0x24
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	f7fe fd9b 	bl	80098d4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe feaf 	bl	8009b18 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d001      	beq.n	800adda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800add6:	f7f5 feb6 	bl	8000b46 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fe59 	bl	8009a9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fe05 	bl	8009a00 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fe54 	bl	8009abc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7a5b      	ldrb	r3, [r3, #9]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <HAL_PCD_SuspendCallback+0x30>)
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	4a03      	ldr	r2, [pc, #12]	@ (800ae30 <HAL_PCD_SuspendCallback+0x30>)
 800ae22:	f043 0306 	orr.w	r3, r3, #6
 800ae26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	e000ed00 	.word	0xe000ed00

0800ae34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7a5b      	ldrb	r3, [r3, #9]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <HAL_PCD_ResumeCallback+0x34>)
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	4a07      	ldr	r2, [pc, #28]	@ (800ae68 <HAL_PCD_ResumeCallback+0x34>)
 800ae4a:	f023 0306 	bic.w	r3, r3, #6
 800ae4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae50:	f000 f9f8 	bl	800b244 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fe44 	bl	8009ae8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed00 	.word	0xe000ed00

0800ae6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ae74:	4a2b      	ldr	r2, [pc, #172]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a29      	ldr	r2, [pc, #164]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ae84:	4b27      	ldr	r3, [pc, #156]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae86:	4a28      	ldr	r2, [pc, #160]	@ (800af28 <USBD_LL_Init+0xbc>)
 800ae88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae8a:	4b26      	ldr	r3, [pc, #152]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae90:	4b24      	ldr	r3, [pc, #144]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae92:	2202      	movs	r2, #2
 800ae94:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae96:	4b23      	ldr	r3, [pc, #140]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae98:	2202      	movs	r2, #2
 800ae9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ae9c:	4b21      	ldr	r3, [pc, #132]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aea2:	4b20      	ldr	r3, [pc, #128]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aea8:	4b1e      	ldr	r3, [pc, #120]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aeae:	4b1d      	ldr	r3, [pc, #116]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aeb4:	481b      	ldr	r0, [pc, #108]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeb6:	f7f7 fb97 	bl	80025e8 <HAL_PCD_Init>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800aec0:	f7f5 fe41 	bl	8000b46 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeca:	2318      	movs	r3, #24
 800aecc:	2200      	movs	r2, #0
 800aece:	2100      	movs	r1, #0
 800aed0:	f7f9 f850 	bl	8003f74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeda:	2358      	movs	r3, #88	@ 0x58
 800aedc:	2200      	movs	r2, #0
 800aede:	2180      	movs	r1, #128	@ 0x80
 800aee0:	f7f9 f848 	bl	8003f74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeea:	23c0      	movs	r3, #192	@ 0xc0
 800aeec:	2200      	movs	r2, #0
 800aeee:	2181      	movs	r1, #129	@ 0x81
 800aef0:	f7f9 f840 	bl	8003f74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aefa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800aefe:	2200      	movs	r2, #0
 800af00:	2101      	movs	r1, #1
 800af02:	f7f9 f837 	bl	8003f74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af10:	2200      	movs	r2, #0
 800af12:	2182      	movs	r1, #130	@ 0x82
 800af14:	f7f9 f82e 	bl	8003f74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	200018a8 	.word	0x200018a8
 800af28:	40005c00 	.word	0x40005c00

0800af2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af42:	4618      	mov	r0, r3
 800af44:	f7f7 fc1e 	bl	8002784 <HAL_PCD_Start>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f97e 	bl	800b250 <USBD_Get_USB_Status>
 800af54:	4603      	mov	r3, r0
 800af56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af58:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	461a      	mov	r2, r3
 800af70:	4603      	mov	r3, r0
 800af72:	70fb      	strb	r3, [r7, #3]
 800af74:	460b      	mov	r3, r1
 800af76:	70bb      	strb	r3, [r7, #2]
 800af78:	4613      	mov	r3, r2
 800af7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af8a:	78bb      	ldrb	r3, [r7, #2]
 800af8c:	883a      	ldrh	r2, [r7, #0]
 800af8e:	78f9      	ldrb	r1, [r7, #3]
 800af90:	f7f7 fd65 	bl	8002a5e <HAL_PCD_EP_Open>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f958 	bl	800b250 <USBD_Get_USB_Status>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	460b      	mov	r3, r1
 800afb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800afc8:	78fa      	ldrb	r2, [r7, #3]
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f7 fda3 	bl	8002b18 <HAL_PCD_EP_Close>
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f939 	bl	800b250 <USBD_Get_USB_Status>
 800afde:	4603      	mov	r3, r0
 800afe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f7 fe4c 	bl	8002ca8 <HAL_PCD_EP_SetStall>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f91a 	bl	800b250 <USBD_Get_USB_Status>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b020:	7bbb      	ldrb	r3, [r7, #14]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f7 fe7f 	bl	8002d4c <HAL_PCD_EP_ClrStall>
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	4618      	mov	r0, r3
 800b056:	f000 f8fb 	bl	800b250 <USBD_Get_USB_Status>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b07a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b07c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da0b      	bge.n	800b09c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	440b      	add	r3, r1
 800b096:	3312      	adds	r3, #18
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	e00b      	b.n	800b0b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	440b      	add	r3, r1
 800b0ae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b0b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f7 fc99 	bl	8002a16 <HAL_PCD_SetAddress>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f8b0 	bl	800b250 <USBD_Get_USB_Status>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
 800b10a:	460b      	mov	r3, r1
 800b10c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b11c:	7af9      	ldrb	r1, [r7, #11]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	f7f7 fd8a 	bl	8002c3a <HAL_PCD_EP_Transmit>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f88f 	bl	800b250 <USBD_Get_USB_Status>
 800b132:	4603      	mov	r3, r0
 800b134:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b136:	7dbb      	ldrb	r3, [r7, #22]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	460b      	mov	r3, r1
 800b14e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b15e:	7af9      	ldrb	r1, [r7, #11]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	f7f7 fd20 	bl	8002ba8 <HAL_PCD_EP_Receive>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f86e 	bl	800b250 <USBD_Get_USB_Status>
 800b174:	4603      	mov	r3, r0
 800b176:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b178:	7dbb      	ldrb	r3, [r7, #22]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b194:	78fa      	ldrb	r2, [r7, #3]
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f7 fd36 	bl	8002c0a <HAL_PCD_EP_GetRxCount>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <HAL_PCDEx_LPM_Callback+0x18>
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d013      	beq.n	800b1e6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b1be:	e023      	b.n	800b208 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7a5b      	ldrb	r3, [r3, #9]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b1c8:	f000 f83c 	bl	800b244 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1cc:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1d2:	f023 0306 	bic.w	r3, r3, #6
 800b1d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fc82 	bl	8009ae8 <USBD_LL_Resume>
    break;
 800b1e4:	e010      	b.n	800b208 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fc65 	bl	8009abc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7a5b      	ldrb	r3, [r3, #9]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1fa:	4b05      	ldr	r3, [pc, #20]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	4a04      	ldr	r2, [pc, #16]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b200:	f043 0306 	orr.w	r3, r3, #6
 800b204:	6113      	str	r3, [r2, #16]
    break;
 800b206:	bf00      	nop
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	e000ed00 	.word	0xe000ed00

0800b214 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b21c:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <USBD_static_malloc+0x18>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	20001b84 	.word	0x20001b84

0800b230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b248:	f7f5 fc32 	bl	8000ab0 <SystemClock_Config>
}
 800b24c:	bf00      	nop
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d817      	bhi.n	800b294 <USBD_Get_USB_Status+0x44>
 800b264:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <USBD_Get_USB_Status+0x1c>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b283 	.word	0x0800b283
 800b274:	0800b289 	.word	0x0800b289
 800b278:	0800b28f 	.word	0x0800b28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e00b      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e008      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e005      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	e002      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	bf00      	nop
  }
  return usb_status;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <memset>:
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d100      	bne.n	800b2b2 <memset+0xa>
 800b2b0:	4770      	bx	lr
 800b2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2b6:	e7f9      	b.n	800b2ac <memset+0x4>

0800b2b8 <__libc_init_array>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800b2f0 <__libc_init_array+0x38>)
 800b2bc:	4c0d      	ldr	r4, [pc, #52]	@ (800b2f4 <__libc_init_array+0x3c>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	42a6      	cmp	r6, r4
 800b2c6:	d109      	bne.n	800b2dc <__libc_init_array+0x24>
 800b2c8:	4d0b      	ldr	r5, [pc, #44]	@ (800b2f8 <__libc_init_array+0x40>)
 800b2ca:	4c0c      	ldr	r4, [pc, #48]	@ (800b2fc <__libc_init_array+0x44>)
 800b2cc:	f000 f826 	bl	800b31c <_init>
 800b2d0:	1b64      	subs	r4, r4, r5
 800b2d2:	10a4      	asrs	r4, r4, #2
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	42a6      	cmp	r6, r4
 800b2d8:	d105      	bne.n	800b2e6 <__libc_init_array+0x2e>
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e0:	4798      	blx	r3
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__libc_init_array+0xc>
 800b2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ea:	4798      	blx	r3
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	e7f2      	b.n	800b2d6 <__libc_init_array+0x1e>
 800b2f0:	0800b3cc 	.word	0x0800b3cc
 800b2f4:	0800b3cc 	.word	0x0800b3cc
 800b2f8:	0800b3cc 	.word	0x0800b3cc
 800b2fc:	0800b3d0 	.word	0x0800b3d0

0800b300 <memcpy>:
 800b300:	440a      	add	r2, r1
 800b302:	4291      	cmp	r1, r2
 800b304:	f100 33ff 	add.w	r3, r0, #4294967295
 800b308:	d100      	bne.n	800b30c <memcpy+0xc>
 800b30a:	4770      	bx	lr
 800b30c:	b510      	push	{r4, lr}
 800b30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b316:	4291      	cmp	r1, r2
 800b318:	d1f9      	bne.n	800b30e <memcpy+0xe>
 800b31a:	bd10      	pop	{r4, pc}

0800b31c <_init>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr

0800b328 <_fini>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr
