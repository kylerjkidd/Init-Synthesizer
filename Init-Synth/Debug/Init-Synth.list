
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb1c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800fcf4  0800fcf4  00010cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b0  080105b0  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  080105b0  080105b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105b8  080105b8  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105b8  080105b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105bc  080105bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080105c0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200001d4  08010794  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002068  08010794  00013068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cade  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006567  00000000  00000000  0003ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00045250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000188e  00000000  00000000  00047278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ff  00000000  00000000  00048b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002df15  00000000  00000000  0006ec05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db545  00000000  00000000  0009cb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017805f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088bc  00000000  00000000  00178118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001809d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00180a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00180b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800fcdc 	.word	0x0800fcdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800fcdc 	.word	0x0800fcdc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f002 fc77 	bl	80036c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f002 fc8e 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 f845 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 f83e 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 f838 	bl	8003f24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 f833 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f002 fea2 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f002 fe95 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f002 fe88 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f002 fe7a 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f002 fe6a 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f002 fe5b 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f002 fe4e 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f002 fe40 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f002 fe32 	bl	8003c20 <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f002 ffb8 	bl	8003f88 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9fa 	bl	8001416 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f003 fbcd 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9f1 	bl	8001416 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f003 fc0f 	bl	800485a <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9e8 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e f983 	bl	800f384 <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f916 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9b8 	bl	8001416 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f002 fda0 	bl	8003c20 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f003 fbd7 	bl	80048f4 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f963 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e f901 	bl	800f384 <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 f894 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f936 	bl	8001416 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f002 fd06 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f002 fcf6 	bl	8003c20 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 fa5b 	bl	800372c <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8cb 	bl	8001416 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 f899 	bl	80033e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f863 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 f9e9 	bl	80026a0 <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00d fadf 	bl	800e890 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f001 fec1 	bl	8003058 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f001 fe61 	bl	8002f9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4824      	ldr	r0, [pc, #144]	@ (800136c <main+0xc0>)
 80012dc:	f007 fb20 	bl	8008920 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f001 fdee 	bl	8002ec0 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 fb64 	bl	80029b0 <Synth_Reset_Initialize>

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET); // trigger gate
  //HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); // set gate low
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f002 fe17 	bl	8003f24 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point

  //HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, sys.red_led_state); // red

  HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f002 fe10 	bl	8003f24 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 8001304:	2201      	movs	r2, #1
 8001306:	491a      	ldr	r1, [pc, #104]	@ (8001370 <main+0xc4>)
 8001308:	481a      	ldr	r0, [pc, #104]	@ (8001374 <main+0xc8>)
 800130a:	f007 ff7b 	bl	8009204 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, midi_buf, 3);

  uint8_t data[] = "INIT-READY\n";
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <main+0xcc>)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	ca07      	ldmia	r2, {r0, r1, r2}
 8001314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 8001318:	1d39      	adds	r1, r7, #4
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	220a      	movs	r2, #10
 8001320:	4814      	ldr	r0, [pc, #80]	@ (8001374 <main+0xc8>)
 8001322:	f007 fee1 	bl	80090e8 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(sys.midi_data_present == 1){
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <main+0xd0>)
 8001328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <main+0x86>
		  MIDI_Decode_Handler();
 800132e:	f000 f879 	bl	8001424 <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <main+0xd0>)
 8001334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <main+0x92>
		  Serial_Command_Handler();
 800133a:	f000 fc91 	bl	8001c60 <Serial_Command_Handler>
	  }

	  Gate_Control(sys.note_status_bit == 1 ? 1 : 0);
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <main+0xd0>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001342:	2b01      	cmp	r3, #1
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fc31 	bl	8002bb4 <Gate_Control>

	  if((sys.note_status_bit == 1)){
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <main+0xd0>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001356:	2b01      	cmp	r3, #1
 8001358:	d1e5      	bne.n	8001326 <main+0x7a>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <main+0xd0>)
 800135c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800135e:	4a07      	ldr	r2, [pc, #28]	@ (800137c <main+0xd0>)
 8001360:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fa7d 	bl	8001864 <Waveform_Synthesis_Handler>
	  if(sys.midi_data_present == 1){
 800136a:	e7dc      	b.n	8001326 <main+0x7a>
 800136c:	2000047c 	.word	0x2000047c
 8001370:	20000457 	.word	0x20000457
 8001374:	200004c8 	.word	0x200004c8
 8001378:	0800fcf4 	.word	0x0800fcf4
 800137c:	200003f8 	.word	0x200003f8

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	@ 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	2238      	movs	r2, #56	@ 0x38
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00d fff8 	bl	800f384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f005 f9ae 	bl	8006704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013a8:	2321      	movs	r3, #33	@ 0x21
 80013aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b2:	2301      	movs	r3, #1
 80013b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ba:	2303      	movs	r3, #3
 80013bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 80013c2:	231c      	movs	r3, #28
 80013c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fa48 	bl	800686c <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013e2:	f000 f818 	bl	8001416 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2303      	movs	r3, #3
 80013ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2104      	movs	r1, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fd46 	bl	8006e90 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800140a:	f000 f804 	bl	8001416 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	@ 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141a:	b672      	cpsid	i
}
 800141c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141e:	bf00      	nop
 8001420:	e7fd      	b.n	800141e <Error_Handler+0x8>
	...

08001424 <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0

	//memcpy (midi_buf, rx_buf, temp_buf_index);

	int status_byte = sys.midi_buf[0];
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 800142c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001430:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 8001432:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 8001434:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001438:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 800143c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001440:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b7f      	cmp	r3, #127	@ 0x7f
 8001446:	dc0a      	bgt.n	800145e <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 8001448:	f000 fc0a 	bl	8001c60 <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	665a      	str	r2, [r3, #100]	@ 0x64
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 8001452:	2203      	movs	r2, #3
 8001454:	2100      	movs	r1, #0
 8001456:	4820      	ldr	r0, [pc, #128]	@ (80014d8 <MIDI_Decode_Handler+0xb4>)
 8001458:	f00d ff94 	bl	800f384 <memset>

	    return;
 800145c:	e036      	b.n	80014cc <MIDI_Decode_Handler+0xa8>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	66da      	str	r2, [r3, #108]	@ 0x6c

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800146a:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b80      	cmp	r3, #128	@ 0x80
 8001470:	d10c      	bne.n	800148c <MIDI_Decode_Handler+0x68>
    	sys.note_status_bit    =  0; // note off
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 8001474:	2200      	movs	r2, #0
 8001476:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 8001478:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 800147e:	4a15      	ldr	r2, [pc, #84]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6793      	str	r3, [r2, #120]	@ 0x78
    	Command_Blink_Status_LED(0); // report no error
 8001484:	2000      	movs	r0, #0
 8001486:	f001 f87f 	bl	8002588 <Command_Blink_Status_LED>
 800148a:	e016      	b.n	80014ba <MIDI_Decode_Handler+0x96>
    }
    else if(status_byte == 0x90){
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b90      	cmp	r3, #144	@ 0x90
 8001490:	d10c      	bne.n	80014ac <MIDI_Decode_Handler+0x88>
    	sys.note_status_bit    =  1; // note on
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 8001494:	2201      	movs	r2, #1
 8001496:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 8001498:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 800149e:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6793      	str	r3, [r2, #120]	@ 0x78
    	Command_Blink_Status_LED(0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f001 f86f 	bl	8002588 <Command_Blink_Status_LED>
 80014aa:	e006      	b.n	80014ba <MIDI_Decode_Handler+0x96>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	671a      	str	r2, [r3, #112]	@ 0x70
    	Command_Blink_Status_LED(1); // report an error;
 80014b4:	2001      	movs	r0, #1
 80014b6:	f001 f867 	bl	8002588 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MIDI_Decode_Handler+0xb0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	665a      	str	r2, [r3, #100]	@ 0x64
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014c0:	2203      	movs	r2, #3
 80014c2:	2100      	movs	r1, #0
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MIDI_Decode_Handler+0xb4>)
 80014c6:	f00d ff5d 	bl	800f384 <memset>

    return;
 80014ca:	bf00      	nop
}
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003f8 	.word	0x200003f8
 80014d8:	20000454 	.word	0x20000454

080014dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014ea:	f892 105f 	ldrb.w	r1, [r2, #95]	@ 0x5f
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001500:	6653      	str	r3, [r2, #100]	@ 0x64
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001506:	2b02      	cmp	r3, #2
 8001508:	dd05      	ble.n	8001516 <HAL_UART_RxCpltCallback+0x3a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	665a      	str	r2, [r3, #100]	@ 0x64
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001512:	2201      	movs	r2, #1
 8001514:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	4904      	ldr	r1, [pc, #16]	@ (800152c <HAL_UART_RxCpltCallback+0x50>)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <HAL_UART_RxCpltCallback+0x54>)
 800151c:	f007 fe72 	bl	8009204 <HAL_UART_Receive_IT>

}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003f8 	.word	0x200003f8
 800152c:	20000457 	.word	0x20000457
 8001530:	200004c8 	.word	0x200004c8

08001534 <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7fe ffce 	bl	80004e0 <__aeabi_f2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <Calculate_Frequency+0x78>)
 800154a:	f7fe fe69 	bl	8000220 <__aeabi_dsub>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <Calculate_Frequency+0x7c>)
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fa4c 	bl	8000a04 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	ee00 3a90 	vmov	s1, r3
 8001572:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001576:	f00d ff65 	bl	800f444 <powf>
 800157a:	ee10 3a10 	vmov	r3, s0
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffae 	bl	80004e0 <__aeabi_f2d>
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <Calculate_Frequency+0x80>)
 800158a:	f7ff f801 	bl	8000590 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fa35 	bl	8000a04 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee07 3a90 	vmov	s15, r3
}
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40514000 	.word	0x40514000
 80015b0:	40280000 	.word	0x40280000
 80015b4:	407b8000 	.word	0x407b8000

080015b8 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	ed87 0a01 	vstr	s0, [r7, #4]
 80015c2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe ff8a 	bl	80004e0 <__aeabi_f2d>
 80015cc:	a317      	add	r3, pc, #92	@ (adr r3, 800162c <Synthesize_Sine_Wave+0x74>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ffdd 	bl	8000590 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe ff7e 	bl	80004e0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe ffd0 	bl	8000590 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa04 	bl	8000a04 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	ee00 3a10 	vmov	s0, r3
 8001602:	f00d fe79 	bl	800f2f8 <arm_sin_f32>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001628 <Synthesize_Sine_Wave+0x70>
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 800161c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	46fffe00 	.word	0x46fffe00
 800162c:	54442d18 	.word	0x54442d18
 8001630:	401921fb 	.word	0x401921fb
 8001634:	00000000 	.word	0x00000000

08001638 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001642:	edc7 0a02 	vstr	s1, [r7, #8]
 8001646:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 800164a:	ed97 7a03 	vldr	s14, [r7, #12]
 800164e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f00d fed1 	bl	800f404 <fmodf>
 8001662:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 8001666:	ed97 7a05 	vldr	s14, [r7, #20]
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d503      	bpl.n	8001680 <Synthesize_Pulse_Wave+0x48>
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	490e      	ldr	r1, [pc, #56]	@ (80016b8 <Synthesize_Pulse_Wave+0x80>)
 800167e:	e002      	b.n	8001686 <Synthesize_Pulse_Wave+0x4e>
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	490d      	ldr	r1, [pc, #52]	@ (80016bc <Synthesize_Pulse_Wave+0x84>)
 8001686:	a30a      	add	r3, pc, #40	@ (adr r3, 80016b0 <Synthesize_Pulse_Wave+0x78>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff80 	bl	8000590 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f98c 	bl	80009b4 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	827b      	strh	r3, [r7, #18]

	return sample;
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40dfffc0 	.word	0x40dfffc0
 80016b8:	3ff00000 	.word	0x3ff00000
 80016bc:	bff00000 	.word	0xbff00000

080016c0 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ca:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d2:	edd7 7a00 	vldr	s15, [r7]
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f00d fe8f 	bl	800f404 <fmodf>
 80016e6:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ee:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d519      	bpl.n	8001730 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f7fe feef 	bl	80004e0 <__aeabi_f2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 8001708:	f7fe ff42 	bl	8000590 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a330      	add	r3, pc, #192	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff39 	bl	8000590 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f945 	bl	80009b4 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	e04c      	b.n	80017ca <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001730:	edd7 7a02 	vldr	s15, [r7, #8]
 8001734:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d521      	bpl.n	8001786 <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f7fe fecc 	bl	80004e0 <__aeabi_f2d>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 800174e:	f7fe ff1f 	bl	8000590 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800175e:	f7fe fd5f 	bl	8000220 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a31b      	add	r3, pc, #108	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff0e 	bl	8000590 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f91a 	bl	80009b4 <__aeabi_d2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	e021      	b.n	80017ca <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7fe feaa 	bl	80004e0 <__aeabi_f2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <Synthesize_Triangle_Wave+0x124>)
 8001792:	f7fe fd45 	bl	8000220 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 80017a4:	f7fe fef4 	bl	8000590 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	a309      	add	r3, pc, #36	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe feeb 	bl	8000590 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f8f7 	bl	80009b4 <__aeabi_d2iz>
 80017c6:	4603      	mov	r3, r0
 80017c8:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40dfffc0 	.word	0x40dfffc0
 80017e0:	40100000 	.word	0x40100000
 80017e4:	3ff00000 	.word	0x3ff00000

080017e8 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80017f2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017fa:	edd7 7a00 	vldr	s15, [r7]
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	f00d fdfb 	bl	800f404 <fmodf>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
 8001812:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001860 <Synthesize_Sawtooth_Wave+0x78>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe5f 	bl	80004e0 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f7fe fcfd 	bl	8000224 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	a309      	add	r3, pc, #36	@ (adr r3, 8001858 <Synthesize_Sawtooth_Wave+0x70>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fcf2 	bl	8000220 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f8b6 	bl	80009b4 <__aeabi_d2iz>
 8001848:	4603      	mov	r3, r0
 800184a:	81fb      	strh	r3, [r7, #14]

	return sample;
 800184c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	00000000 	.word	0x00000000
 800185c:	40dfffc0 	.word	0x40dfffc0
 8001860:	46fffe00 	.word	0x46fffe00

08001864 <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001872:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001876:	6018      	str	r0, [r3, #0]
 8001878:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800187c:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001880:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 8001882:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8001886:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800188a:	f102 0218 	add.w	r2, r2, #24
 800188e:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001890:	4bcb      	ldr	r3, [pc, #812]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f1a3 020c 	sub.w	r2, r3, #12
 8001898:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800189c:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff fe40 	bl	8001534 <Calculate_Frequency>
 80018b4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018b8:	f103 0314 	add.w	r3, r3, #20
 80018bc:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018c0:	4bbf      	ldr	r3, [pc, #764]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	f1a3 020c 	sub.w	r2, r3, #12
 80018c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018cc:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	f7ff fe28 	bl	8001534 <Calculate_Frequency>
 80018e4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018e8:	f103 0310 	add.w	r3, r3, #16
 80018ec:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018f6:	f102 021c 	add.w	r2, r2, #28
 80018fa:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018fc:	e152      	b.n	8001ba4 <Waveform_Synthesis_Handler+0x340>
        float t = ((float)i/2.0)/((float)nsamples);
 80018fe:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001902:	f103 031c 	add.w	r3, r3, #28
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ee17 0a90 	vmov	r0, s15
 8001914:	f7fe fde4 	bl	80004e0 <__aeabi_f2d>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001920:	f7fe ff60 	bl	80007e4 <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001930:	f103 0318 	add.w	r3, r3, #24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fdcd 	bl	80004e0 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe ff49 	bl	80007e4 <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f853 	bl	8000a04 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001964:	f102 0208 	add.w	r2, r2, #8
 8001968:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 800196a:	4b95      	ldr	r3, [pc, #596]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d11b      	bne.n	80019aa <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 8001972:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001976:	f103 0314 	add.w	r3, r3, #20
 800197a:	edd3 0a00 	vldr	s1, [r3]
 800197e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001982:	f103 0308 	add.w	r3, r3, #8
 8001986:	ed93 0a00 	vldr	s0, [r3]
 800198a:	f7ff fe15 	bl	80015b8 <Synthesize_Sine_Wave>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001996:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 800199a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800199e:	f102 021c 	add.w	r2, r2, #28
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019a8:	e066      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d120      	bne.n	80019f4 <Waveform_Synthesis_Handler+0x190>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 80019b2:	4b83      	ldr	r3, [pc, #524]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019b4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80019b8:	eeb0 1a67 	vmov.f32	s2, s15
 80019bc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019c0:	f103 0314 	add.w	r3, r3, #20
 80019c4:	edd3 0a00 	vldr	s1, [r3]
 80019c8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019cc:	f103 0308 	add.w	r3, r3, #8
 80019d0:	ed93 0a00 	vldr	s0, [r3]
 80019d4:	f7ff fe30 	bl	8001638 <Synthesize_Pulse_Wave>
 80019d8:	4603      	mov	r3, r0
 80019da:	4619      	mov	r1, r3
 80019dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019e0:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019e4:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019e8:	f102 021c 	add.w	r2, r2, #28
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019f2:	e041      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019f4:	4b72      	ldr	r3, [pc, #456]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d11b      	bne.n	8001a34 <Waveform_Synthesis_Handler+0x1d0>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019fc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a00:	f103 0314 	add.w	r3, r3, #20
 8001a04:	edd3 0a00 	vldr	s1, [r3]
 8001a08:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a0c:	f103 0308 	add.w	r3, r3, #8
 8001a10:	ed93 0a00 	vldr	s0, [r3]
 8001a14:	f7ff fe54 	bl	80016c0 <Synthesize_Triangle_Wave>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a20:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a24:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a28:	f102 021c 	add.w	r2, r2, #28
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a32:	e021      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d11b      	bne.n	8001a74 <Waveform_Synthesis_Handler+0x210>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a3c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a40:	f103 0314 	add.w	r3, r3, #20
 8001a44:	edd3 0a00 	vldr	s1, [r3]
 8001a48:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a4c:	f103 0308 	add.w	r3, r3, #8
 8001a50:	ed93 0a00 	vldr	s0, [r3]
 8001a54:	f7ff fec8 	bl	80017e8 <Synthesize_Sawtooth_Wave>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a60:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a64:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a68:	f102 021c 	add.w	r2, r2, #28
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a72:	e001      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d3      	b.n	8001c20 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a78:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d11c      	bne.n	8001aba <Waveform_Synthesis_Handler+0x256>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a80:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a84:	f103 031c 	add.w	r3, r3, #28
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5c      	adds	r4, r3, #1
 8001a8c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a90:	f103 0310 	add.w	r3, r3, #16
 8001a94:	edd3 0a00 	vldr	s1, [r3]
 8001a98:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a9c:	f103 0308 	add.w	r3, r3, #8
 8001aa0:	ed93 0a00 	vldr	s0, [r3]
 8001aa4:	f7ff fd88 	bl	80015b8 <Synthesize_Sine_Wave>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ab0:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001ab4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001ab8:	e069      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d121      	bne.n	8001b06 <Waveform_Synthesis_Handler+0x2a2>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001ac4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ac8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001acc:	f103 031c 	add.w	r3, r3, #28
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c5c      	adds	r4, r3, #1
 8001ad4:	eeb0 1a67 	vmov.f32	s2, s15
 8001ad8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001adc:	f103 0310 	add.w	r3, r3, #16
 8001ae0:	edd3 0a00 	vldr	s1, [r3]
 8001ae4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ae8:	f103 0308 	add.w	r3, r3, #8
 8001aec:	ed93 0a00 	vldr	s0, [r3]
 8001af0:	f7ff fda2 	bl	8001638 <Synthesize_Pulse_Wave>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001afc:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b04:	e043      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d11c      	bne.n	8001b48 <Waveform_Synthesis_Handler+0x2e4>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001b0e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b12:	f103 031c 	add.w	r3, r3, #28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1c5c      	adds	r4, r3, #1
 8001b1a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b1e:	f103 0310 	add.w	r3, r3, #16
 8001b22:	edd3 0a00 	vldr	s1, [r3]
 8001b26:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b2a:	f103 0308 	add.w	r3, r3, #8
 8001b2e:	ed93 0a00 	vldr	s0, [r3]
 8001b32:	f7ff fdc5 	bl	80016c0 <Synthesize_Triangle_Wave>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b3e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b42:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b46:	e022      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11c      	bne.n	8001b8a <Waveform_Synthesis_Handler+0x326>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b50:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b54:	f103 031c 	add.w	r3, r3, #28
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1c5c      	adds	r4, r3, #1
 8001b5c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b60:	f103 0310 	add.w	r3, r3, #16
 8001b64:	edd3 0a00 	vldr	s1, [r3]
 8001b68:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b6c:	f103 0308 	add.w	r3, r3, #8
 8001b70:	ed93 0a00 	vldr	s0, [r3]
 8001b74:	f7ff fe38 	bl	80017e8 <Synthesize_Sawtooth_Wave>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b80:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b84:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b88:	e001      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e048      	b.n	8001c20 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b8e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b92:	f103 031c 	add.w	r3, r3, #28
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001b9e:	f102 021c 	add.w	r2, r2, #28
 8001ba2:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001ba4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ba8:	f103 031c 	add.w	r3, r3, #28
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bb2:	f103 0318 	add.w	r3, r3, #24
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f6ff aea0 	blt.w	80018fe <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001bbe:	e02a      	b.n	8001c16 <Waveform_Synthesis_Handler+0x3b2>
 8001bc0:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bc4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bc8:	f103 0318 	add.w	r3, r3, #24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f107 0120 	add.w	r1, r7, #32
 8001bd4:	3918      	subs	r1, #24
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <Waveform_Synthesis_Handler+0x3c8>)
 8001bdc:	f002 ff6a 	bl	8004ab4 <HAL_I2S_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001be6:	f102 020f 	add.w	r2, r2, #15
 8001bea:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001bec:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bf0:	f103 030f 	add.w	r3, r3, #15
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <Waveform_Synthesis_Handler+0x3a6>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f002 f98e 	bl	8003f24 <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001c08:	e009      	b.n	8001c1e <Waveform_Synthesis_Handler+0x3ba>
        }

        if((sys.midi_data_present == 1)){
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <Waveform_Synthesis_Handler+0x3cc>)
 8001c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <Waveform_Synthesis_Handler+0x3b2>
        	MIDI_Decode_Handler();
 8001c12:	f7ff fc07 	bl	8001424 <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <Waveform_Synthesis_Handler+0x3cc>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d0d2      	beq.n	8001bc4 <Waveform_Synthesis_Handler+0x360>
        }
    }

    return 0;
 8001c1e:	2300      	movs	r3, #0

}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	20000244 	.word	0x20000244
 8001c30:	200003f8 	.word	0x200003f8

08001c34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c38:	f3bf 8f4f 	dsb	sy
}
 8001c3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <__NVIC_SystemReset+0x24>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c46:	4904      	ldr	r1, [pc, #16]	@ (8001c58 <__NVIC_SystemReset+0x24>)
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_SystemReset+0x28>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4e:	f3bf 8f4f 	dsb	sy
}
 8001c52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <__NVIC_SystemReset+0x20>
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	05fa0004 	.word	0x05fa0004

08001c60 <Serial_Command_Handler>:
#include "serial.h"
#include "system.h"

extern System sys;

void Serial_Command_Handler(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0

    //usb_data_present = 0;
	int error_check = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
	//int sys.value_returned = 0;

	sys.value_returned = 0;
 8001c6a:	4b61      	ldr	r3, [pc, #388]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]

	int command_byte;
	int address_byte;
	int data_byte;

    if(sys.usb_data_present == 1){
 8001c70:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10b      	bne.n	8001c90 <Serial_Command_Handler+0x30>
    	sys.usb_data_present = 0;
 8001c78:	4b5d      	ldr	r3, [pc, #372]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	669a      	str	r2, [r3, #104]	@ 0x68

        command_byte = sys.usb_vcp_buffer[0];
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c80:	7f1b      	ldrb	r3, [r3, #28]
 8001c82:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8001c84:	4b5a      	ldr	r3, [pc, #360]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c86:	7f5b      	ldrb	r3, [r3, #29]
 8001c88:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 8001c8a:	4b59      	ldr	r3, [pc, #356]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c8c:	7f9b      	ldrb	r3, [r3, #30]
 8001c8e:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8001c90:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10e      	bne.n	8001cb6 <Serial_Command_Handler+0x56>
    	sys.midi_data_present = 0;
 8001c98:	4b55      	ldr	r3, [pc, #340]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        command_byte = sys.midi_buf[0];
 8001c9e:	4b54      	ldr	r3, [pc, #336]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001ca0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ca4:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 8001ca6:	4b52      	ldr	r3, [pc, #328]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001cac:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8001cae:	4b50      	ldr	r3, [pc, #320]	@ (8001df0 <Serial_Command_Handler+0x190>)
 8001cb0:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001cb4:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3b41      	subs	r3, #65	@ 0x41
 8001cba:	2b19      	cmp	r3, #25
 8001cbc:	d878      	bhi.n	8001db0 <Serial_Command_Handler+0x150>
 8001cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <Serial_Command_Handler+0x64>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001d2d 	.word	0x08001d2d
 8001cc8:	08001db1 	.word	0x08001db1
 8001ccc:	08001db1 	.word	0x08001db1
 8001cd0:	08001db1 	.word	0x08001db1
 8001cd4:	08001d39 	.word	0x08001d39
 8001cd8:	08001d45 	.word	0x08001d45
 8001cdc:	08001db1 	.word	0x08001db1
 8001ce0:	08001db1 	.word	0x08001db1
 8001ce4:	08001d51 	.word	0x08001d51
 8001ce8:	08001db1 	.word	0x08001db1
 8001cec:	08001db1 	.word	0x08001db1
 8001cf0:	08001db1 	.word	0x08001db1
 8001cf4:	08001d59 	.word	0x08001d59
 8001cf8:	08001db1 	.word	0x08001db1
 8001cfc:	08001d65 	.word	0x08001d65
 8001d00:	08001d71 	.word	0x08001d71
 8001d04:	08001db1 	.word	0x08001db1
 8001d08:	08001d7d 	.word	0x08001d7d
 8001d0c:	08001db1 	.word	0x08001db1
 8001d10:	08001db1 	.word	0x08001db1
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db1 	.word	0x08001db1
 8001d1c:	08001db1 	.word	0x08001db1
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f862 	bl	8001df8 <VCA_Command_Handler>
 8001d34:	6178      	str	r0, [r7, #20]

            break;
 8001d36:	e03f      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f970 	bl	8002020 <Envelope_Command_Handler>
 8001d40:	6178      	str	r0, [r7, #20]

            break;
 8001d42:	e039      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fa2a 	bl	80021a0 <Filter_Command_Handler>
 8001d4c:	6178      	str	r0, [r7, #20]

            break;
 8001d4e:	e033      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8001d50:	f000 fe7e 	bl	8002a50 <Synth_Initialize_Preset>
 8001d54:	6178      	str	r0, [r7, #20]

            break;
 8001d56:	e02f      	b.n	8001db8 <Serial_Command_Handler+0x158>
//        case 'L': // load preset command
//
//            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 faaa 	bl	80022b4 <Mixer_Command_Handler>
 8001d60:	6178      	str	r0, [r7, #20]

            break;
 8001d62:	e029      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 faee 	bl	8002348 <LFO_Command_Handler>
 8001d6c:	6178      	str	r0, [r7, #20]

            break;
 8001d6e:	e023      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fb4c 	bl	8002410 <Preset_Command_Handler>
 8001d78:	6178      	str	r0, [r7, #20]

            break;
 8001d7a:	e01d      	b.n	8001db8 <Serial_Command_Handler+0x158>
        case 'R': // reset command

        	for(int i=0; i <4 ; i++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	e011      	b.n	8001da6 <Serial_Command_Handler+0x146>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8001d82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8a:	f002 f8e3 	bl	8003f54 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8001d8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d96:	f002 f8dd 	bl	8003f54 <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8001d9a:	207d      	movs	r0, #125	@ 0x7d
 8001d9c:	f001 fb94 	bl	80034c8 <HAL_Delay>
        	for(int i=0; i <4 ; i++){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	ddea      	ble.n	8001d82 <Serial_Command_Handler+0x122>
        	}

			NVIC_SystemReset();
 8001dac:	f7ff ff42 	bl	8001c34 <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

        	error_check = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]

            break;
 8001db4:	e000      	b.n	8001db8 <Serial_Command_Handler+0x158>
            break;
 8001db6:	bf00      	nop
    }

    //error_check ? Command_Error() : Command_Success();
    error_check ? Command_Blink_Status_LED(1) : Command_Blink_Status_LED(0);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <Serial_Command_Handler+0x166>
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 fbe2 	bl	8002588 <Command_Blink_Status_LED>
 8001dc4:	e002      	b.n	8001dcc <Serial_Command_Handler+0x16c>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 fbde 	bl	8002588 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	b2d9      	uxtb	r1, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	6978      	ldr	r0, [r7, #20]
 8001dda:	f000 fb31 	bl	8002440 <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	2100      	movs	r1, #0
 8001de2:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <Serial_Command_Handler+0x194>)
 8001de4:	f00d face 	bl	800f384 <memset>

}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200003f8 	.word	0x200003f8
 8001df4:	20000414 	.word	0x20000414

08001df8 <VCA_Command_Handler>:

// ===========================================================================================================
// VCA functions

int VCA_Command_Handler(int address, int data){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3b31      	subs	r3, #49	@ 0x31
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d87d      	bhi.n	8001f0a <VCA_Command_Handler+0x112>
 8001e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <VCA_Command_Handler+0x1c>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e29 	.word	0x08001e29
 8001e18:	08001e53 	.word	0x08001e53
 8001e1c:	08001e7d 	.word	0x08001e7d
 8001e20:	08001eaf 	.word	0x08001eaf
 8001e24:	08001ee1 	.word	0x08001ee1
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e28:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e2c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e30:	22ff      	movs	r2, #255	@ 0xff
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fb57 	bl	80024e8 <Command_Error_Check>
 8001e3a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <VCA_Command_Handler+0x56>
                SynthParameters.vca_offset = data;
 8001e42:	4a35      	ldr	r2, [pc, #212]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                VCA_Digital_Pot_Control();
 8001e4a:	f000 ff39 	bl	8002cc0 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	e05c      	b.n	8001f0c <VCA_Command_Handler+0x114>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e52:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e56:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e5a:	22ff      	movs	r2, #255	@ 0xff
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 fb42 	bl	80024e8 <Command_Error_Check>
 8001e64:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <VCA_Command_Handler+0x80>
                SynthParameters.vca_cv_intensity = data;
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                VCA_Digital_Pot_Control();
 8001e74:	f000 ff24 	bl	8002cc0 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	e047      	b.n	8001f0c <VCA_Command_Handler+0x114>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8001e7c:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e80:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001e84:	2203      	movs	r2, #3
 8001e86:	6839      	ldr	r1, [r7, #0]
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f000 fb2d 	bl	80024e8 <Command_Error_Check>
 8001e8e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <VCA_Command_Handler+0xb2>
                SynthParameters.vca_mod_source = data;
 8001e96:	4a20      	ldr	r2, [pc, #128]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6013      	str	r3, [r2, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f88b 	bl	8001fbc <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8001ea6:	f000 feaf 	bl	8002c08 <VCA_Mod_Source_Control>
            }

        	return error_check;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	e02e      	b.n	8001f0c <VCA_Command_Handler+0x114>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8001eae:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001eb2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 fb14 	bl	80024e8 <Command_Error_Check>
 8001ec0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <VCA_Command_Handler+0xe4>
                SynthParameters.vca_bypass = data;
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6053      	str	r3, [r2, #4]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <VCA_Command_Handler+0x120>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f872 	bl	8001fbc <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8001ed8:	f000 fec4 	bl	8002c64 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	e015      	b.n	8001f0c <VCA_Command_Handler+0x114>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8001ee0:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001ee4:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001f14 <VCA_Command_Handler+0x11c>
 8001ee8:	2204      	movs	r2, #4
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	2002      	movs	r0, #2
 8001eee:	f000 fafb 	bl	80024e8 <Command_Error_Check>
 8001ef2:	60f8      	str	r0, [r7, #12]

        	//VCA_Value_Query(data);
            if (error_check == 0) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <VCA_Command_Handler+0x10e>
            	VCA_Value_Query(data);
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f000 f810 	bl	8001f20 <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <VCA_Command_Handler+0x124>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	e000      	b.n	8001f0c <VCA_Command_Handler+0x114>
        default:
            // do nothing on invalid command

        	return 1;
 8001f0a:	2301      	movs	r3, #1
    }

    return 1;
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	00000000 	.word	0x00000000
 8001f18:	20000344 	.word	0x20000344
 8001f1c:	200003f8 	.word	0x200003f8

08001f20 <VCA_Value_Query>:

void VCA_Value_Query(int data){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8001f28:	2341      	movs	r3, #65	@ 0x41
 8001f2a:	733b      	strb	r3, [r7, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	737b      	strb	r3, [r7, #13]
 8001f32:	2300      	movs	r3, #0
 8001f34:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3b31      	subs	r3, #49	@ 0x31
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d820      	bhi.n	8001f80 <VCA_Value_Query+0x60>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <VCA_Value_Query+0x24>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f6d 	.word	0x08001f6d
 8001f50:	08001f77 	.word	0x08001f77
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8001f54:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <VCA_Value_Query+0x90>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	73bb      	strb	r3, [r7, #14]
            break;
 8001f5e:	e010      	b.n	8001f82 <VCA_Value_Query+0x62>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <VCA_Value_Query+0x90>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73bb      	strb	r3, [r7, #14]
            break;
 8001f6a:	e00a      	b.n	8001f82 <VCA_Value_Query+0x62>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 8001f6c:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <VCA_Value_Query+0x90>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	73bb      	strb	r3, [r7, #14]
            break;
 8001f74:	e005      	b.n	8001f82 <VCA_Value_Query+0x62>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <VCA_Value_Query+0x90>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	73bb      	strb	r3, [r7, #14]
            break;
 8001f7e:	e000      	b.n	8001f82 <VCA_Value_Query+0x62>
        default:  // do nothing on invalid command

            break;
 8001f80:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	2103      	movs	r1, #3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00c fd69 	bl	800ea60 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <VCA_Value_Query+0x94>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <VCA_Value_Query+0x88>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8001f96:	f107 010c 	add.w	r1, r7, #12
 8001f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <VCA_Value_Query+0x98>)
 8001fa2:	f007 f8a1 	bl	80090e8 <HAL_UART_Transmit>
    }

	return;
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
}
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000344 	.word	0x20000344
 8001fb4:	200003f8 	.word	0x200003f8
 8001fb8:	200004c8 	.word	0x200004c8

08001fbc <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d017      	beq.n	8001ffa <VCA_Mod_Source_Decode+0x3e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	dc1d      	bgt.n	800200c <VCA_Mod_Source_Decode+0x50>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d003      	beq.n	8001fde <VCA_Mod_Source_Decode+0x22>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d005      	beq.n	8001fe8 <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8001fdc:	e016      	b.n	800200c <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <VCA_Mod_Source_Decode+0x60>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            break;
 8001fe6:	e012      	b.n	800200e <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <VCA_Mod_Source_Decode+0x60>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 1;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <VCA_Mod_Source_Decode+0x60>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8001ff8:	e009      	b.n	800200e <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <VCA_Mod_Source_Decode+0x60>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 0;
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <VCA_Mod_Source_Decode+0x60>)
 8002004:	2200      	movs	r2, #0
 8002006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 800200a:	e000      	b.n	800200e <VCA_Mod_Source_Decode+0x52>
            break;
 800200c:	bf00      	nop
    }

	return;
 800200e:	bf00      	nop
}
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000344 	.word	0x20000344

08002020 <Envelope_Command_Handler>:
}

// ===========================================================================================================
// envelope functions

int Envelope_Command_Handler(int address, int data){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3b31      	subs	r3, #49	@ 0x31
 8002032:	2b04      	cmp	r3, #4
 8002034:	d864      	bhi.n	8002100 <Envelope_Command_Handler+0xe0>
 8002036:	a201      	add	r2, pc, #4	@ (adr r2, 800203c <Envelope_Command_Handler+0x1c>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	08002051 	.word	0x08002051
 8002040:	08002071 	.word	0x08002071
 8002044:	08002091 	.word	0x08002091
 8002048:	080020b1 	.word	0x080020b1
 800204c:	080020d9 	.word	0x080020d9
        case '1': // envelope attack rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002050:	21ff      	movs	r1, #255	@ 0xff
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f000 fafc 	bl	8002650 <Command_Range_Check_Error>
 8002058:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <Envelope_Command_Handler+0x4c>
                SynthParameters.env_attack_rate = data;
 8002060:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <Envelope_Command_Handler+0xec>)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                Filter_Digital_Pot_Control();
 8002068:	f000 fe6c 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	e048      	b.n	8002102 <Envelope_Command_Handler+0xe2>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002070:	21ff      	movs	r1, #255	@ 0xff
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f000 faec 	bl	8002650 <Command_Range_Check_Error>
 8002078:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <Envelope_Command_Handler+0x6c>
                SynthParameters.env_decay_rate = data;
 8002080:	4a22      	ldr	r2, [pc, #136]	@ (800210c <Envelope_Command_Handler+0xec>)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
                Filter_Digital_Pot_Control();
 8002088:	f000 fe5c 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	e038      	b.n	8002102 <Envelope_Command_Handler+0xe2>
        case '3': // envelope release rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002090:	21ff      	movs	r1, #255	@ 0xff
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f000 fadc 	bl	8002650 <Command_Range_Check_Error>
 8002098:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <Envelope_Command_Handler+0x8c>
                SynthParameters.env_release_rate = data;
 80020a0:	4a1a      	ldr	r2, [pc, #104]	@ (800210c <Envelope_Command_Handler+0xec>)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
                Filter_Digital_Pot_Control();
 80020a8:	f000 fe4c 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e028      	b.n	8002102 <Envelope_Command_Handler+0xe2>
        case '4': // envelope output polarity

        	error_check = Command_Range_Check_Error(data, 1);
 80020b0:	2101      	movs	r1, #1
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f000 facc 	bl	8002650 <Command_Range_Check_Error>
 80020b8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <Envelope_Command_Handler+0xb4>
                SynthParameters.env_invert_mode = data;
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <Envelope_Command_Handler+0xec>)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6153      	str	r3, [r2, #20]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <Envelope_Command_Handler+0xec>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f820 	bl	8002110 <Envelope_Output_Polarity_Decode>
                ENV_Mode_Control();
 80020d0:	f000 fe8e 	bl	8002df0 <ENV_Mode_Control>
            }

        	return error_check;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	e014      	b.n	8002102 <Envelope_Command_Handler+0xe2>
        case '5': // envelope loop mode control

        	error_check = Command_Range_Check_Error(data, 1);
 80020d8:	2101      	movs	r1, #1
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f000 fab8 	bl	8002650 <Command_Range_Check_Error>
 80020e0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <Envelope_Command_Handler+0xdc>
                SynthParameters.env_loop_mode = data;
 80020e8:	4a08      	ldr	r2, [pc, #32]	@ (800210c <Envelope_Command_Handler+0xec>)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6193      	str	r3, [r2, #24]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <Envelope_Command_Handler+0xec>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f830 	bl	8002158 <Envelope_Loop_Mode_Decode>
                ENV_Mode_Control();
 80020f8:	f000 fe7a 	bl	8002df0 <ENV_Mode_Control>
            }

        	return error_check;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e000      	b.n	8002102 <Envelope_Command_Handler+0xe2>
        default:
            // do nothing on invalid command

        	return 1;
 8002100:	2301      	movs	r3, #1
    }

    return 1;
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000344 	.word	0x20000344

08002110 <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <Envelope_Output_Polarity_Decode+0x44>)
 8002120:	2201      	movs	r2, #1
 8002122:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 1;
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <Envelope_Output_Polarity_Decode+0x44>)
 8002128:	2201      	movs	r2, #1
 800212a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 800212e:	e00b      	b.n	8002148 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <Envelope_Output_Polarity_Decode+0x44>)
 8002138:	2201      	movs	r2, #1
 800213a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 0;
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <Envelope_Output_Polarity_Decode+0x44>)
 8002140:	2200      	movs	r2, #0
 8002142:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	return;
 8002146:	bf00      	nop
 8002148:	bf00      	nop
}
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	20000344 	.word	0x20000344

08002158 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 8002166:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <Envelope_Loop_Mode_Decode+0x44>)
 8002168:	2201      	movs	r2, #1
 800216a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 1;
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <Envelope_Loop_Mode_Decode+0x44>)
 8002170:	2201      	movs	r2, #1
 8002172:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 8002176:	e00b      	b.n	8002190 <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <Envelope_Loop_Mode_Decode+0x44>)
 8002180:	2201      	movs	r2, #1
 8002182:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 0;
 8002186:	4b05      	ldr	r3, [pc, #20]	@ (800219c <Envelope_Loop_Mode_Decode+0x44>)
 8002188:	2200      	movs	r2, #0
 800218a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	return;
 800218e:	bf00      	nop
 8002190:	bf00      	nop
}
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	20000344 	.word	0x20000344

080021a0 <Filter_Command_Handler>:

// ===========================================================================================================
// filter functions

int Filter_Command_Handler(int address, int data){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3b31      	subs	r3, #49	@ 0x31
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d84b      	bhi.n	800224e <Filter_Command_Handler+0xae>
 80021b6:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <Filter_Command_Handler+0x1c>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	080021eb 	.word	0x080021eb
 80021c4:	08002209 	.word	0x08002209
 80021c8:	08002227 	.word	0x08002227
        case '1': // filter cutoff

        	error_check = Command_Range_Check_Error(data, 255);
 80021cc:	21ff      	movs	r1, #255	@ 0xff
 80021ce:	6838      	ldr	r0, [r7, #0]
 80021d0:	f000 fa3e 	bl	8002650 <Command_Range_Check_Error>
 80021d4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <Filter_Command_Handler+0x46>
                SynthParameters.vcf_cutoff = data;
 80021dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002258 <Filter_Command_Handler+0xb8>)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	66d3      	str	r3, [r2, #108]	@ 0x6c
                Filter_Digital_Pot_Control();
 80021e2:	f000 fdaf 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	e032      	b.n	8002250 <Filter_Command_Handler+0xb0>
        case '2': // filter resonance intensity

        	error_check = Command_Range_Check_Error(data, 255);
 80021ea:	21ff      	movs	r1, #255	@ 0xff
 80021ec:	6838      	ldr	r0, [r7, #0]
 80021ee:	f000 fa2f 	bl	8002650 <Command_Range_Check_Error>
 80021f2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <Filter_Command_Handler+0x64>
                SynthParameters.vcf_resonance = data;
 80021fa:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <Filter_Command_Handler+0xb8>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6713      	str	r3, [r2, #112]	@ 0x70
                Filter_Digital_Pot_Control();
 8002200:	f000 fda0 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	e023      	b.n	8002250 <Filter_Command_Handler+0xb0>
        case '3': // filter modulation intensity

        	error_check = Command_Range_Check_Error(data, 255);
 8002208:	21ff      	movs	r1, #255	@ 0xff
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	f000 fa20 	bl	8002650 <Command_Range_Check_Error>
 8002210:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <Filter_Command_Handler+0x82>
                SynthParameters.vcf_cv_intensity = data;
 8002218:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <Filter_Command_Handler+0xb8>)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6693      	str	r3, [r2, #104]	@ 0x68
                Filter_Digital_Pot_Control();
 800221e:	f000 fd91 	bl	8002d44 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	e014      	b.n	8002250 <Filter_Command_Handler+0xb0>
        case '4': // filter modulation control

        	error_check = Command_Option_Check_Error(data, 3);
 8002226:	2103      	movs	r1, #3
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f000 fa23 	bl	8002674 <Command_Option_Check_Error>
 800222e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_mod_source = data;
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <Filter_Command_Handler+0xb8>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6093      	str	r3, [r2, #8]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <Filter_Command_Handler+0xb8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f80b 	bl	800225c <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 8002246:	f000 fd51 	bl	8002cec <Filter_Mod_Source_Control>
            }

        	return error_check;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e000      	b.n	8002250 <Filter_Command_Handler+0xb0>
        default:
            // do nothing on invalid command

        	return 1;
 800224e:	2301      	movs	r3, #1
    }

    return 1;
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000344 	.word	0x20000344

0800225c <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d014      	beq.n	8002294 <Filter_Mod_Source_Decode+0x38>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	dc18      	bgt.n	80022a2 <Filter_Mod_Source_Decode+0x46>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <Filter_Mod_Source_Decode+0x22>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d004      	beq.n	8002286 <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 800227c:	e011      	b.n	80022a2 <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 800227e:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <Filter_Mod_Source_Decode+0x54>)
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	@ 0x60
            break;
 8002284:	e00e      	b.n	80022a4 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <Filter_Mod_Source_Decode+0x54>)
 8002288:	2201      	movs	r2, #1
 800228a:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 1;
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <Filter_Mod_Source_Decode+0x54>)
 800228e:	2201      	movs	r2, #1
 8002290:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 8002292:	e007      	b.n	80022a4 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <Filter_Mod_Source_Decode+0x54>)
 8002296:	2201      	movs	r2, #1
 8002298:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 0;
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <Filter_Mod_Source_Decode+0x54>)
 800229c:	2200      	movs	r2, #0
 800229e:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 80022a0:	e000      	b.n	80022a4 <Filter_Mod_Source_Decode+0x48>
            break;
 80022a2:	bf00      	nop
    }

	return;
 80022a4:	bf00      	nop
}
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000344 	.word	0x20000344

080022b4 <Mixer_Command_Handler>:

// ===========================================================================================================
// mixer function

int Mixer_Command_Handler(int address, int data){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b33      	cmp	r3, #51	@ 0x33
 80022c6:	d027      	beq.n	8002318 <Mixer_Command_Handler+0x64>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b33      	cmp	r3, #51	@ 0x33
 80022cc:	dc32      	bgt.n	8002334 <Mixer_Command_Handler+0x80>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b31      	cmp	r3, #49	@ 0x31
 80022d2:	d003      	beq.n	80022dc <Mixer_Command_Handler+0x28>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b32      	cmp	r3, #50	@ 0x32
 80022d8:	d00f      	beq.n	80022fa <Mixer_Command_Handler+0x46>
 80022da:	e02b      	b.n	8002334 <Mixer_Command_Handler+0x80>
        case '1': // DAC output level

        	error_check = Command_Range_Check_Error(data, 255);
 80022dc:	21ff      	movs	r1, #255	@ 0xff
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	f000 f9b6 	bl	8002650 <Command_Range_Check_Error>
 80022e4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <Mixer_Command_Handler+0x42>
                SynthParameters.dac_mixer_level = data;
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <Mixer_Command_Handler+0x8c>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
                Mixer_Digital_Pot_Control();
 80022f2:	f000 fc75 	bl	8002be0 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	e01d      	b.n	8002336 <Mixer_Command_Handler+0x82>
        case '2': // filter output level

        	error_check = Command_Range_Check_Error(data, 255);
 80022fa:	21ff      	movs	r1, #255	@ 0xff
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f000 f9a7 	bl	8002650 <Command_Range_Check_Error>
 8002302:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d104      	bne.n	8002314 <Mixer_Command_Handler+0x60>
                SynthParameters.filter_out_level = data;
 800230a:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <Mixer_Command_Handler+0x8c>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	65d3      	str	r3, [r2, #92]	@ 0x5c
                Mixer_Digital_Pot_Control();
 8002310:	f000 fc66 	bl	8002be0 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	e00e      	b.n	8002336 <Mixer_Command_Handler+0x82>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Range_Check_Error(data, 1);
 8002318:	2101      	movs	r1, #1
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f000 f998 	bl	8002650 <Command_Range_Check_Error>
 8002320:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <Mixer_Command_Handler+0x7c>
            	sys.velocity_enable = data;
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <Mixer_Command_Handler+0x90>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            }

        	return error_check;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	e000      	b.n	8002336 <Mixer_Command_Handler+0x82>
        default:
            // do nothing on invalid command

        	return 1;
 8002334:	2301      	movs	r3, #1
    }

    return 1;
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000344 	.word	0x20000344
 8002344:	200003f8 	.word	0x200003f8

08002348 <LFO_Command_Handler>:

// ===========================================================================================================
// LFO functions

int LFO_Command_Handler(int address, int data){
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b31      	cmp	r3, #49	@ 0x31
 800235a:	d003      	beq.n	8002364 <LFO_Command_Handler+0x1c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b32      	cmp	r3, #50	@ 0x32
 8002360:	d00f      	beq.n	8002382 <LFO_Command_Handler+0x3a>
 8002362:	e022      	b.n	80023aa <LFO_Command_Handler+0x62>
        case '1': // LFO frequency/rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002364:	21ff      	movs	r1, #255	@ 0xff
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	f000 f972 	bl	8002650 <Command_Range_Check_Error>
 800236c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <LFO_Command_Handler+0x36>
                SynthParameters.lfo_frequency = data;
 8002374:	4a0f      	ldr	r2, [pc, #60]	@ (80023b4 <LFO_Command_Handler+0x6c>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	67d3      	str	r3, [r2, #124]	@ 0x7c
                LFO_Digital_Pot_Control();
 800237a:	f000 fd2b 	bl	8002dd4 <LFO_Digital_Pot_Control>
            }

        	return error_check;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	e014      	b.n	80023ac <LFO_Command_Handler+0x64>
        case '2': // LFO output waveform

        	error_check = Command_Option_Check_Error(data, 3);
 8002382:	2103      	movs	r1, #3
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f000 f975 	bl	8002674 <Command_Option_Check_Error>
 800238a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <LFO_Command_Handler+0x5e>
                SynthParameters.lfo_waveform = data;
 8002392:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <LFO_Command_Handler+0x6c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	61d3      	str	r3, [r2, #28]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <LFO_Command_Handler+0x6c>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f80b 	bl	80023b8 <LFO_Waveform_Decode>
                LFO_Output_Control();
 80023a2:	f000 fceb 	bl	8002d7c <LFO_Output_Control>
            }

        	return error_check;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	e000      	b.n	80023ac <LFO_Command_Handler+0x64>
        default:
            // do nothing on invalid command

        	return 1;
 80023aa:	2301      	movs	r3, #1
    }

    return 1;
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20000344 	.word	0x20000344

080023b8 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

    switch(data) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d014      	beq.n	80023f0 <LFO_Waveform_Decode+0x38>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	dc18      	bgt.n	80023fe <LFO_Waveform_Decode+0x46>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d003      	beq.n	80023da <LFO_Waveform_Decode+0x22>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d004      	beq.n	80023e2 <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80023d8:	e011      	b.n	80023fe <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 80023da:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <LFO_Waveform_Decode+0x54>)
 80023dc:	2200      	movs	r2, #0
 80023de:	675a      	str	r2, [r3, #116]	@ 0x74
            break;
 80023e0:	e00e      	b.n	8002400 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <LFO_Waveform_Decode+0x54>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 1;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <LFO_Waveform_Decode+0x54>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80023ee:	e007      	b.n	8002400 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <LFO_Waveform_Decode+0x54>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 0;
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <LFO_Waveform_Decode+0x54>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80023fc:	e000      	b.n	8002400 <LFO_Waveform_Decode+0x48>
            break;
 80023fe:	bf00      	nop
    }

	return;
 8002400:	bf00      	nop
}
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000344 	.word	0x20000344

08002410 <Preset_Command_Handler>:

// ===========================================================================================================
// preset function

int Preset_Command_Handler(int address, int data){
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

    switch(address) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b31      	cmp	r3, #49	@ 0x31
 800241e:	d003      	beq.n	8002428 <Preset_Command_Handler+0x18>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b32      	cmp	r3, #50	@ 0x32
 8002424:	d002      	beq.n	800242c <Preset_Command_Handler+0x1c>
 8002426:	e003      	b.n	8002430 <Preset_Command_Handler+0x20>
        case '1': // preset save function

        	// preset save function

        	return 0;
 8002428:	2300      	movs	r3, #0
 800242a:	e002      	b.n	8002432 <Preset_Command_Handler+0x22>
        case '2': // preset load function

        	// preset load function

        	return 0;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <Preset_Command_Handler+0x22>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return 1;
 8002430:	2301      	movs	r3, #1
    }

    return 1;
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <Command_Response_Handler>:
	}

	return;
}

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	70fb      	strb	r3, [r7, #3]
 8002452:	460b      	mov	r3, r1
 8002454:	70bb      	strb	r3, [r7, #2]
 8002456:	4613      	mov	r3, r2
 8002458:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 800245a:	4b1f      	ldr	r3, [pc, #124]	@ (80024d8 <Command_Response_Handler+0x98>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d033      	beq.n	80024ca <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d109      	bne.n	800247c <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <Command_Response_Handler+0x9c>)
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4611      	mov	r1, r2
 8002472:	8019      	strh	r1, [r3, #0]
 8002474:	3302      	adds	r3, #2
 8002476:	0c12      	lsrs	r2, r2, #16
 8002478:	701a      	strb	r2, [r3, #0]
 800247a:	e013      	b.n	80024a4 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <Command_Response_Handler+0x98>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 8002488:	78bb      	ldrb	r3, [r7, #2]
 800248a:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	73bb      	strb	r3, [r7, #14]
 8002490:	e008      	b.n	80024a4 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <Command_Response_Handler+0xa0>)
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4611      	mov	r1, r2
 800249c:	8019      	strh	r1, [r3, #0]
 800249e:	3302      	adds	r3, #2
 80024a0:	0c12      	lsrs	r2, r2, #16
 80024a2:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00c fad8 	bl	800ea60 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <Command_Response_Handler+0x98>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10a      	bne.n	80024ce <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 80024b8:	f107 010c 	add.w	r1, r7, #12
 80024bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c0:	2203      	movs	r2, #3
 80024c2:	4808      	ldr	r0, [pc, #32]	@ (80024e4 <Command_Response_Handler+0xa4>)
 80024c4:	f006 fe10 	bl	80090e8 <HAL_UART_Transmit>
    }

	return;
 80024c8:	e001      	b.n	80024ce <Command_Response_Handler+0x8e>
        return;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <Command_Response_Handler+0x90>
	return;
 80024ce:	bf00      	nop
}
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200003f8 	.word	0x200003f8
 80024dc:	0800fd00 	.word	0x0800fd00
 80024e0:	0800fd04 	.word	0x0800fd04
 80024e4:	200004c8 	.word	0x200004c8

080024e8 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6139      	str	r1, [r7, #16]
 80024f2:	60fa      	str	r2, [r7, #12]
 80024f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80024fc:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d83a      	bhi.n	800257a <Command_Error_Check+0x92>
 8002504:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <Command_Error_Check+0x24>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800252d 	.word	0x0800252d
 8002514:	08002543 	.word	0x08002543
 8002518:	0800255b 	.word	0x0800255b
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	bfcc      	ite	gt
 8002524:	2301      	movgt	r3, #1
 8002526:	2300      	movle	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e027      	b.n	800257c <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	dd03      	ble.n	800253a <Command_Error_Check+0x52>
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	429a      	cmp	r2, r3
 8002538:	dd01      	ble.n	800253e <Command_Error_Check+0x56>
 800253a:	2301      	movs	r3, #1
 800253c:	e01e      	b.n	800257c <Command_Error_Check+0x94>
 800253e:	2300      	movs	r3, #0
 8002540:	e01c      	b.n	800257c <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b30      	cmp	r3, #48	@ 0x30
 8002546:	dd04      	ble.n	8002552 <Command_Error_Check+0x6a>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3330      	adds	r3, #48	@ 0x30
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	dd01      	ble.n	8002556 <Command_Error_Check+0x6e>
 8002552:	2301      	movs	r3, #1
 8002554:	e012      	b.n	800257c <Command_Error_Check+0x94>
 8002556:	2300      	movs	r3, #0
 8002558:	e010      	b.n	800257c <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 800255a:	ed97 7a02 	vldr	s14, [r7, #8]
 800255e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e000      	b.n	800257c <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 800257a:	2301      	movs	r3, #1
    }
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d103      	bne.n	800259e <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <Command_Blink_Status_LED+0x2c>)
 8002598:	2201      	movs	r2, #1
 800259a:	615a      	str	r2, [r3, #20]
 800259c:	e002      	b.n	80025a4 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <Command_Blink_Status_LED+0x2c>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 80025a4:	4804      	ldr	r0, [pc, #16]	@ (80025b8 <Command_Blink_Status_LED+0x30>)
 80025a6:	f006 f9bb 	bl	8008920 <HAL_TIM_Base_Start_IT>

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003f8 	.word	0x200003f8
 80025b8:	2000047c 	.word	0x2000047c

080025bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a20      	ldr	r2, [pc, #128]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d139      	bne.n	8002640 <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 80025cc:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d118      	bne.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	dc0b      	bgt.n	80025f4 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80025dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e4:	f001 fcb6 	bl	8003f54 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 80025e8:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025f0:	6193      	str	r3, [r2, #24]
 80025f2:	e008      	b.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80025f4:	4814      	ldr	r0, [pc, #80]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025f6:	f006 fa03 	bl	8008a00 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d118      	bne.n	8002640 <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 800260e:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	dc0b      	bgt.n	800262e <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8002616:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800261a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261e:	f001 fc99 	bl	8003f54 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	3301      	adds	r3, #1
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800262a:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 800262c:	e008      	b.n	8002640 <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 800262e:	4806      	ldr	r0, [pc, #24]	@ (8002648 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002630:	f006 f9e6 	bl	8008a00 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 800263a:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2000047c 	.word	0x2000047c
 800264c:	200003f8 	.word	0x200003f8

08002650 <Command_Range_Check_Error>:

int Command_Range_Check_Error(int data, int max_value){
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range
	if(data <= max_value){
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	dc01      	bgt.n	8002666 <Command_Range_Check_Error+0x16>
		return 0; // value is valid, return success
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <Command_Range_Check_Error+0x18>
	}
	else{
		return 1; // value is invalid, return error
 8002666:	2301      	movs	r3, #1
	}

}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <Command_Option_Check_Error>:

int Command_Option_Check_Error(int data, int max_value) {
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range or is zero
    if (data <= 0 || data > max_value) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	dd03      	ble.n	800268c <Command_Option_Check_Error+0x18>
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	dd01      	ble.n	8002690 <Command_Option_Check_Error+0x1c>
        return 1; // value is invalid, return error
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <Command_Option_Check_Error+0x1e>
    }
    return 0; // value is valid
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002718 <MX_SPI3_Init+0x78>)
 80026a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026b2:	4b18      	ldr	r3, [pc, #96]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026d6:	2228      	movs	r2, #40	@ 0x28
 80026d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026ee:	2207      	movs	r2, #7
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_SPI3_Init+0x74>)
 80026fa:	2208      	movs	r2, #8
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026fe:	4805      	ldr	r0, [pc, #20]	@ (8002714 <MX_SPI3_Init+0x74>)
 8002700:	f005 fd30 	bl	8008164 <HAL_SPI_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800270a:	f7fe fe84 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200002e0 	.word	0x200002e0
 8002718:	40003c00 	.word	0x40003c00

0800271c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <HAL_SPI_MspInit+0x7c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d128      	bne.n	8002790 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_SPI_MspInit+0x80>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	4a16      	ldr	r2, [pc, #88]	@ (800279c <HAL_SPI_MspInit+0x80>)
 8002744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002748:	6593      	str	r3, [r2, #88]	@ 0x58
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_SPI_MspInit+0x80>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_SPI_MspInit+0x80>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	4a10      	ldr	r2, [pc, #64]	@ (800279c <HAL_SPI_MspInit+0x80>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_SPI_MspInit+0x80>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800276e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002780:	2306      	movs	r3, #6
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <HAL_SPI_MspInit+0x84>)
 800278c:	f001 fa48 	bl	8003c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002790:	bf00      	nop
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40003c00 	.word	0x40003c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000800 	.word	0x48000800

080027a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_MspInit+0x44>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <HAL_MspInit+0x44>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_MspInit+0x44>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_MspInit+0x44>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <HAL_MspInit+0x44>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_MspInit+0x44>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027da:	f004 f837 	bl	800684c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <NMI_Handler+0x4>

080027f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <MemManage_Handler+0x4>

08002804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <BusFault_Handler+0x4>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <UsageFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 fe23 	bl	800348c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Channel1_IRQHandler+0x10>)
 8002852:	f001 f8d3 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000280 	.word	0x20000280

08002860 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <USB_LP_IRQHandler+0x10>)
 8002866:	f002 fb3b 	bl	8004ee0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20001a34 	.word	0x20001a34

08002874 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <USART2_IRQHandler+0x10>)
 800287a:	f006 fd0f 	bl	800929c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200004c8 	.word	0x200004c8

08002888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <TIM6_DAC_IRQHandler+0x10>)
 800288e:	f006 f8e6 	bl	8008a5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000047c 	.word	0x2000047c

0800289c <Digital_Pot_Wiper_Set>:
extern System sys;
Synth SynthParameters;// = {10, 3.14};

uint16_t gpio_reg = 0x0000;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <Digital_Pot_Wiper_Set+0x1c>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e001      	b.n	80028bc <Digital_Pot_Wiper_Set+0x20>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b0a      	cmp	r3, #10
 80028c2:	d854      	bhi.n	800296e <Digital_Pot_Wiper_Set+0xd2>
 80028c4:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <Digital_Pot_Wiper_Set+0x30>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028f9 	.word	0x080028f9
 80028d0:	08002905 	.word	0x08002905
 80028d4:	0800290f 	.word	0x0800290f
 80028d8:	08002919 	.word	0x08002919
 80028dc:	08002925 	.word	0x08002925
 80028e0:	0800292f 	.word	0x0800292f
 80028e4:	08002939 	.word	0x08002939
 80028e8:	08002943 	.word	0x08002943
 80028ec:	0800294f 	.word	0x0800294f
 80028f0:	0800295b 	.word	0x0800295b
 80028f4:	08002965 	.word	0x08002965
        case 0:
            CSn_PORT = CS0_PORT;
 80028f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80028fc:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 80028fe:	2320      	movs	r3, #32
 8002900:	827b      	strh	r3, [r7, #18]
            break;
 8002902:	e035      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 8002904:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <Digital_Pot_Wiper_Set+0x104>)
 8002906:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 8002908:	2302      	movs	r3, #2
 800290a:	827b      	strh	r3, [r7, #18]
            break;
 800290c:	e030      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 800290e:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <Digital_Pot_Wiper_Set+0x108>)
 8002910:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 8002912:	2304      	movs	r3, #4
 8002914:	827b      	strh	r3, [r7, #18]
            break;
 8002916:	e02b      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <Digital_Pot_Wiper_Set+0x104>)
 800291a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 800291c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002920:	827b      	strh	r3, [r7, #18]
            break;
 8002922:	e025      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <Digital_Pot_Wiper_Set+0x104>)
 8002926:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 8002928:	2340      	movs	r3, #64	@ 0x40
 800292a:	827b      	strh	r3, [r7, #18]
            break;
 800292c:	e020      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <Digital_Pot_Wiper_Set+0x10c>)
 8002930:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 8002932:	2320      	movs	r3, #32
 8002934:	827b      	strh	r3, [r7, #18]
            break;
 8002936:	e01b      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <Digital_Pot_Wiper_Set+0x104>)
 800293a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	827b      	strh	r3, [r7, #18]
            break;
 8002940:	e016      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <Digital_Pot_Wiper_Set+0x10c>)
 8002944:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 8002946:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294a:	827b      	strh	r3, [r7, #18]
            break;
 800294c:	e010      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 800294e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002952:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	827b      	strh	r3, [r7, #18]
            break;
 8002958:	e00a      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 800295a:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <Digital_Pot_Wiper_Set+0x10c>)
 800295c:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 800295e:	2310      	movs	r3, #16
 8002960:	827b      	strh	r3, [r7, #18]
            break;
 8002962:	e005      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8002964:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <Digital_Pot_Wiper_Set+0x104>)
 8002966:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 8002968:	2301      	movs	r3, #1
 800296a:	827b      	strh	r3, [r7, #18]
            break;
 800296c:	e000      	b.n	8002970 <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 800296e:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8002970:	8a7b      	ldrh	r3, [r7, #18]
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f001 fad4 	bl	8003f24 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 800297c:	f107 0110 	add.w	r1, r7, #16
 8002980:	230a      	movs	r3, #10
 8002982:	2201      	movs	r2, #1
 8002984:	4809      	ldr	r0, [pc, #36]	@ (80029ac <Digital_Pot_Wiper_Set+0x110>)
 8002986:	f005 fc98 	bl	80082ba <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 800298a:	8a7b      	ldrh	r3, [r7, #18]
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f001 fac7 	bl	8003f24 <HAL_GPIO_WritePin>

	return;
 8002996:	bf00      	nop
}
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000c00 	.word	0x48000c00
 80029a8:	48000800 	.word	0x48000800
 80029ac:	200002e0 	.word	0x200002e0

080029b0 <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 80029b4:	2201      	movs	r2, #1
 80029b6:	2120      	movs	r1, #32
 80029b8:	4822      	ldr	r0, [pc, #136]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 80029ba:	f001 fab3 	bl	8003f24 <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	2120      	movs	r1, #32
 80029c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c6:	f001 faad 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	2102      	movs	r1, #2
 80029ce:	481d      	ldr	r0, [pc, #116]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 80029d0:	f001 faa8 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2104      	movs	r1, #4
 80029d8:	481b      	ldr	r0, [pc, #108]	@ (8002a48 <Synth_Reset_Initialize+0x98>)
 80029da:	f001 faa3 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029e4:	4817      	ldr	r0, [pc, #92]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 80029e6:	f001 fa9d 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 80029ea:	2201      	movs	r2, #1
 80029ec:	2140      	movs	r1, #64	@ 0x40
 80029ee:	4815      	ldr	r0, [pc, #84]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 80029f0:	f001 fa98 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 80029f4:	2201      	movs	r2, #1
 80029f6:	2120      	movs	r1, #32
 80029f8:	4814      	ldr	r0, [pc, #80]	@ (8002a4c <Synth_Reset_Initialize+0x9c>)
 80029fa:	f001 fa93 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 80029fe:	2201      	movs	r2, #1
 8002a00:	2180      	movs	r1, #128	@ 0x80
 8002a02:	4810      	ldr	r0, [pc, #64]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 8002a04:	f001 fa8e 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a0e:	480f      	ldr	r0, [pc, #60]	@ (8002a4c <Synth_Reset_Initialize+0x9c>)
 8002a10:	f001 fa88 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2180      	movs	r1, #128	@ 0x80
 8002a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a1c:	f001 fa82 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	2110      	movs	r1, #16
 8002a24:	4809      	ldr	r0, [pc, #36]	@ (8002a4c <Synth_Reset_Initialize+0x9c>)
 8002a26:	f001 fa7d 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <Synth_Reset_Initialize+0x94>)
 8002a30:	f001 fa78 	bl	8003f24 <HAL_GPIO_WritePin>

	// set gate low
	Gate_Control(0);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 f8bd 	bl	8002bb4 <Gate_Control>

	Synth_Initialize_Preset();
 8002a3a:	f000 f809 	bl	8002a50 <Synth_Initialize_Preset>

	return;
 8002a3e:	bf00      	nop
}
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	48000400 	.word	0x48000400
 8002a48:	48000c00 	.word	0x48000c00
 8002a4c:	48000800 	.word	0x48000800

08002a50 <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source = 1;
 8002a54:	4b56      	ldr	r3, [pc, #344]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
	SynthParameters.vca_bypass = 1;
 8002a5a:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	605a      	str	r2, [r3, #4]
	SynthParameters.vcf_mod_source = 1;
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	609a      	str	r2, [r3, #8]
	SynthParameters.fm1_enable = 0;
 8002a66:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
	SynthParameters.fm2_enable = 0;
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
	SynthParameters.env_invert_mode = 0;
 8002a72:	4b4f      	ldr	r3, [pc, #316]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
	SynthParameters.env_loop_mode = 0;
 8002a78:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
	SynthParameters.lfo_waveform = 1;
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	61da      	str	r2, [r3, #28]

	// waveform synthesis settings
	SynthParameters.oscillator1 = 4;
 8002a84:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a86:	2204      	movs	r2, #4
 8002a88:	621a      	str	r2, [r3, #32]
	SynthParameters.oscillator2 = 4;
 8002a8a:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	625a      	str	r2, [r3, #36]	@ 0x24
	SynthParameters.note_offset1 = 12;
 8002a90:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
	SynthParameters.note_offset2 = 12;
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a98:	220c      	movs	r2, #12
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	SynthParameters.detune_osc1 = 100;
 8002a9c:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002a9e:	2264      	movs	r2, #100	@ 0x64
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
	SynthParameters.detune_osc2 = 100;
 8002aa2:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002aa4:	2264      	movs	r2, #100	@ 0x64
 8002aa6:	635a      	str	r2, [r3, #52]	@ 0x34
	SynthParameters.fm_intensity1 = 0.5;
 8002aa8:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002aaa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002aae:	639a      	str	r2, [r3, #56]	@ 0x38
	SynthParameters.fm_intensity2 = 0.5;
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ab2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
	SynthParameters.fm_harmonic1 = 1.0;
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002aba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40
	SynthParameters.fm_harmonic2 = 1.0;
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ac2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44
	SynthParameters.duty_cycle1 = 0.5;
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002aca:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002ace:	649a      	str	r2, [r3, #72]	@ 0x48
	SynthParameters.duty_cycle2 = 0.5;
 8002ad0:	4b37      	ldr	r3, [pc, #220]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ad2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
	SynthParameters.volume_osc1 = 100;
 8002ad8:	4b35      	ldr	r3, [pc, #212]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ada:	2264      	movs	r2, #100	@ 0x64
 8002adc:	651a      	str	r2, [r3, #80]	@ 0x50
	SynthParameters.volume_osc2 = 100;
 8002ade:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ae0:	2264      	movs	r2, #100	@ 0x64
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54

	// mixer output level settings
	SynthParameters.dac_mixer_level = 127;
 8002ae4:	4b32      	ldr	r3, [pc, #200]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002ae6:	227f      	movs	r2, #127	@ 0x7f
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58
	SynthParameters.filter_out_level = 127;
 8002aea:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002aec:	227f      	movs	r2, #127	@ 0x7f
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

	// filter modulation source settings
	SynthParameters.vcf_cv_en = 0;
 8002af0:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	661a      	str	r2, [r3, #96]	@ 0x60
	SynthParameters.vcf_cv_sel = 0;
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	665a      	str	r2, [r3, #100]	@ 0x64

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity = 127;
 8002afc:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002afe:	227f      	movs	r2, #127	@ 0x7f
 8002b00:	669a      	str	r2, [r3, #104]	@ 0x68
	SynthParameters.vcf_cutoff = 127;
 8002b02:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b04:	227f      	movs	r2, #127	@ 0x7f
 8002b06:	66da      	str	r2, [r3, #108]	@ 0x6c
	SynthParameters.vcf_resonance = 127;
 8002b08:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b0a:	227f      	movs	r2, #127	@ 0x7f
 8002b0c:	671a      	str	r2, [r3, #112]	@ 0x70

	// LFO output settings
	SynthParameters.lfo_output_en = 0;
 8002b0e:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	675a      	str	r2, [r3, #116]	@ 0x74
	SynthParameters.lfo_output_waveform = 0;
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	679a      	str	r2, [r3, #120]	@ 0x78

	// LFO output frequency setting
	SynthParameters.lfo_frequency = 127;
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b1c:	227f      	movs	r2, #127	@ 0x7f
 8002b1e:	67da      	str	r2, [r3, #124]	@ 0x7c

	// VCA modulation source settings
	SynthParameters.vca_cv_en = 0;
 8002b20:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	SynthParameters.vca_cv_sel = 0;
 8002b28:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en = 1;
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	SynthParameters.vca_output_sel = 1;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity = 127;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b42:	227f      	movs	r2, #127	@ 0x7f
 8002b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	SynthParameters.vca_offset = 127;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b4a:	227f      	movs	r2, #127	@ 0x7f
 8002b4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	// envelope output settings
	SynthParameters.env_en = 1;
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	SynthParameters.env_loop = 0;
 8002b58:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SynthParameters.env_invert = 0;
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	// envelope timing settings
	//SynthParameters.env_attack_rate = 0;
	SynthParameters.env_attack_rate = 127;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b6a:	227f      	movs	r2, #127	@ 0x7f
 8002b6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	SynthParameters.env_release_rate = 127;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b72:	227f      	movs	r2, #127	@ 0x7f
 8002b74:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	//SynthParameters.env_release_rate = 255;
	SynthParameters.env_decay_rate = 127;
 8002b78:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <Synth_Initialize_Preset+0x160>)
 8002b7a:	227f      	movs	r2, #127	@ 0x7f
 8002b7c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//SynthParameters.env_decay_rate = 0;

	Mixer_Digital_Pot_Control();
 8002b80:	f000 f82e 	bl	8002be0 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8002b84:	f000 f8b2 	bl	8002cec <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8002b88:	f000 f8dc 	bl	8002d44 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8002b8c:	f000 f8f6 	bl	8002d7c <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8002b90:	f000 f920 	bl	8002dd4 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8002b94:	f000 f838 	bl	8002c08 <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8002b98:	f000 f864 	bl	8002c64 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8002b9c:	f000 f890 	bl	8002cc0 <VCA_Digital_Pot_Control>

	ENV_Mode_Control();
 8002ba0:	f000 f926 	bl	8002df0 <ENV_Mode_Control>
	ENV_Digital_Pot_Control();
 8002ba4:	f000 f966 	bl	8002e74 <ENV_Digital_Pot_Control>

	return 0;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000344 	.word	0x20000344

08002bb4 <Gate_Control>:

void Gate_Control(int gate_state){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

	gpio_reg = GPIO_State_Change(GATE_PORT, gpio_reg, GATE_PIN, gate_state);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <Gate_Control+0x28>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f000 fba8 	bl	800331c <GPIO_State_Change>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b02      	ldr	r3, [pc, #8]	@ (8002bdc <Gate_Control+0x28>)
 8002bd2:	801a      	strh	r2, [r3, #0]

	return;
 8002bd4:	bf00      	nop
}
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200003f4 	.word	0x200003f4

08002be0 <Mixer_Digital_Pot_Control>:

void Mixer_Digital_Pot_Control(){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8002be4:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <Mixer_Digital_Pot_Control+0x24>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be8:	2200      	movs	r2, #0
 8002bea:	4619      	mov	r1, r3
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fe55 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8002bf2:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <Mixer_Digital_Pot_Control+0x24>)
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7ff fe4e 	bl	800289c <Digital_Pot_Wiper_Set>

    return;
 8002c00:	bf00      	nop
}
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000344 	.word	0x20000344

08002c08 <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <VCA_Mod_Source_Control+0x54>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <VCA_Mod_Source_Control+0x58>)
 8002c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2207      	movs	r2, #7
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 fb79 	bl	800331c <GPIO_State_Change>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <VCA_Mod_Source_Control+0x54>)
 8002c30:	801a      	strh	r2, [r3, #0]

    // select modulation source
    gpio_reg = GPIO_State_Change(VCA_SEL_PORT, gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <VCA_Mod_Source_Control+0x54>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <VCA_Mod_Source_Control+0x58>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 fb66 	bl	800331c <GPIO_State_Change>
 8002c50:	4603      	mov	r3, r0
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b01      	ldr	r3, [pc, #4]	@ (8002c5c <VCA_Mod_Source_Control+0x54>)
 8002c56:	801a      	strh	r2, [r3, #0]

    return;
 8002c58:	bf00      	nop
}
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200003f4 	.word	0x200003f4
 8002c60:	20000344 	.word	0x20000344

08002c64 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8002c68:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <VCA_Bypass_Switch_Control+0x54>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <VCA_Bypass_Switch_Control+0x58>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2206      	movs	r2, #6
 8002c80:	2000      	movs	r0, #0
 8002c82:	f000 fb4b 	bl	800331c <GPIO_State_Change>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <VCA_Bypass_Switch_Control+0x54>)
 8002c8c:	801a      	strh	r2, [r3, #0]

    // update output source selection; true = bypass VCA, false = output through VCA
    gpio_reg = GPIO_State_Change(VCA_BYP_PORT, gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <VCA_Bypass_Switch_Control+0x54>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <VCA_Bypass_Switch_Control+0x58>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 fb38 	bl	800331c <GPIO_State_Change>
 8002cac:	4603      	mov	r3, r0
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b01      	ldr	r3, [pc, #4]	@ (8002cb8 <VCA_Bypass_Switch_Control+0x54>)
 8002cb2:	801a      	strh	r2, [r3, #0]

    return;
 8002cb4:	bf00      	nop
}
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200003f4 	.word	0x200003f4
 8002cbc:	20000344 	.word	0x20000344

08002cc0 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <VCA_Digital_Pot_Control+0x28>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	2006      	movs	r0, #6
 8002cd0:	f7ff fde4 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <VCA_Digital_Pot_Control+0x28>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	2007      	movs	r0, #7
 8002ce0:	f7ff fddc 	bl	800289c <Digital_Pot_Wiper_Set>

    return;
 8002ce4:	bf00      	nop
}
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000344 	.word	0x20000344

08002cec <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <Filter_Mod_Source_Control+0x50>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <Filter_Mod_Source_Control+0x54>)
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2202      	movs	r2, #2
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 fb08 	bl	800331c <GPIO_State_Change>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <Filter_Mod_Source_Control+0x50>)
 8002d12:	801a      	strh	r2, [r3, #0]

    // select modulation source; true = LFO, false = envelope
    gpio_reg = GPIO_State_Change(VCF_SEL_PORT, gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8002d14:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <Filter_Mod_Source_Control+0x50>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <Filter_Mod_Source_Control+0x54>)
 8002d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2201      	movs	r2, #1
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f000 faf6 	bl	800331c <GPIO_State_Change>
 8002d30:	4603      	mov	r3, r0
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b01      	ldr	r3, [pc, #4]	@ (8002d3c <Filter_Mod_Source_Control+0x50>)
 8002d36:	801a      	strh	r2, [r3, #0]

    return;
 8002d38:	bf00      	nop
}
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200003f4 	.word	0x200003f4
 8002d40:	20000344 	.word	0x20000344

08002d44 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <Filter_Digital_Pot_Control+0x34>)
 8002d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	2004      	movs	r0, #4
 8002d52:	f7ff fda3 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <Filter_Digital_Pot_Control+0x34>)
 8002d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	2003      	movs	r0, #3
 8002d60:	f7ff fd9c 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <Filter_Digital_Pot_Control+0x34>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f7ff fd95 	bl	800289c <Digital_Pot_Wiper_Set>

    return;
 8002d72:	bf00      	nop
}
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000344 	.word	0x20000344

08002d7c <LFO_Output_Control>:

void LFO_Output_Control() {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    gpio_reg = GPIO_State_Change(LFO_EN_PORT, gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8002d80:	4b12      	ldr	r3, [pc, #72]	@ (8002dcc <LFO_Output_Control+0x50>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <LFO_Output_Control+0x54>)
 8002d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2207      	movs	r2, #7
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 fac0 	bl	800331c <GPIO_State_Change>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <LFO_Output_Control+0x50>)
 8002da2:	801a      	strh	r2, [r3, #0]

    // select LFO output waveform; true = square wave, false = triangle wave
    gpio_reg = GPIO_State_Change(LFO_SEL_PORT, gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <LFO_Output_Control+0x50>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <LFO_Output_Control+0x54>)
 8002dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2206      	movs	r2, #6
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f000 faae 	bl	800331c <GPIO_State_Change>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b01      	ldr	r3, [pc, #4]	@ (8002dcc <LFO_Output_Control+0x50>)
 8002dc6:	801a      	strh	r2, [r3, #0]

    return;
 8002dc8:	bf00      	nop
}
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200003f4 	.word	0x200003f4
 8002dd0:	20000344 	.word	0x20000344

08002dd4 <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <LFO_Digital_Pot_Control+0x18>)
 8002dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4619      	mov	r1, r3
 8002de0:	2005      	movs	r0, #5
 8002de2:	f7ff fd5b 	bl	800289c <Digital_Pot_Wiper_Set>

    return;
 8002de6:	bf00      	nop
}
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000344 	.word	0x20000344

08002df0 <ENV_Mode_Control>:

void ENV_Mode_Control() {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    gpio_reg = GPIO_State_Change(ENV_EN_PORT, gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8002df4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <ENV_Mode_Control+0x80>)
 8002dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f000 fa85 	bl	800331c <GPIO_State_Change>
 8002e12:	4603      	mov	r3, r0
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002e18:	801a      	strh	r2, [r3, #0]

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    gpio_reg = GPIO_State_Change(ENV_LP_PORT, gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <ENV_Mode_Control+0x80>)
 8002e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2204      	movs	r2, #4
 8002e32:	2001      	movs	r0, #1
 8002e34:	f000 fa72 	bl	800331c <GPIO_State_Change>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002e3e:	801a      	strh	r2, [r3, #0]

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    gpio_reg = GPIO_State_Change(ENV_POL_PORT, gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <ENV_Mode_Control+0x80>)
 8002e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2203      	movs	r2, #3
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f000 fa5f 	bl	800331c <GPIO_State_Change>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b02      	ldr	r3, [pc, #8]	@ (8002e6c <ENV_Mode_Control+0x7c>)
 8002e64:	801a      	strh	r2, [r3, #0]

    return;
 8002e66:	bf00      	nop
}
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200003f4 	.word	0x200003f4
 8002e70:	20000344 	.word	0x20000344

08002e74 <ENV_Digital_Pot_Control>:

void ENV_Digital_Pot_Control(){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	480e      	ldr	r0, [pc, #56]	@ (8002eb8 <ENV_Digital_Pot_Control+0x44>)
 8002e7e:	f001 f851 	bl	8003f24 <HAL_GPIO_WritePin>

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 8002e82:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <ENV_Digital_Pot_Control+0x48>)
 8002e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2008      	movs	r0, #8
 8002e8e:	f7ff fd05 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <ENV_Digital_Pot_Control+0x48>)
 8002e94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	2009      	movs	r0, #9
 8002e9e:	f7ff fcfd 	bl	800289c <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <ENV_Digital_Pot_Control+0x48>)
 8002ea4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	200a      	movs	r0, #10
 8002eae:	f7ff fcf5 	bl	800289c <Digital_Pot_Wiper_Set>

    return;
 8002eb2:	bf00      	nop
}
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	20000344 	.word	0x20000344

08002ec0 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 8002ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 1;
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 8002edc:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 8002ee2:	4b23      	ldr	r3, [pc, #140]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 8002ee8:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	sys.midi_buf[3] = 0;
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	sys.temp_buf[3] = 0;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	sys.temp_buf_index = 0;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	665a      	str	r2, [r3, #100]	@ 0x64

	// communication status flags
	sys.usb_data_present = 0;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	669a      	str	r2, [r3, #104]	@ 0x68
	sys.midi_data_present = 0;
 8002f12:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	66da      	str	r2, [r3, #108]	@ 0x6c

	// midi variables
	sys.note_status_bit = 0;
 8002f18:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	671a      	str	r2, [r3, #112]	@ 0x70
	sys.midi_note_input = 0;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	675a      	str	r2, [r3, #116]	@ 0x74
	sys.midi_note_velocity = 0;
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	679a      	str	r2, [r3, #120]	@ 0x78

	sys.gate = 0;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	67da      	str	r2, [r3, #124]	@ 0x7c
	sys.velocity_enable = 0;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <System_Reset_Initialize+0xb0>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f3e:	480d      	ldr	r0, [pc, #52]	@ (8002f74 <System_Reset_Initialize+0xb4>)
 8002f40:	f000 fff0 	bl	8003f24 <HAL_GPIO_WritePin>

	DAC_Register_Init();
 8002f44:	f000 f980 	bl	8003248 <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 8002f48:	213f      	movs	r1, #63	@ 0x3f
 8002f4a:	2040      	movs	r0, #64	@ 0x40
 8002f4c:	f000 f95e 	bl	800320c <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 8002f50:	213f      	movs	r1, #63	@ 0x3f
 8002f52:	2044      	movs	r0, #68	@ 0x44
 8002f54:	f000 f95a 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 8002f58:	213f      	movs	r1, #63	@ 0x3f
 8002f5a:	2041      	movs	r0, #65	@ 0x41
 8002f5c:	f000 f956 	bl	800320c <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 8002f60:	213f      	movs	r1, #63	@ 0x3f
 8002f62:	2045      	movs	r0, #69	@ 0x45
 8002f64:	f000 f952 	bl	800320c <DAC_Register_Write>

	GPIO_Register_Init();
 8002f68:	f000 f9c4 	bl	80032f4 <GPIO_Register_Init>

	return;
 8002f6c:	bf00      	nop
}
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200003f8 	.word	0x200003f8
 8002f74:	48000400 	.word	0x48000400

08002f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002fac:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fae:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <MX_TIM6_Init+0x6c>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fb4:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002fb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 8002fc0:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fc2:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8002fc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002fce:	480d      	ldr	r0, [pc, #52]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fd0:	f005 fc4e 	bl	8008870 <HAL_TIM_Base_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002fda:	f7fe fa1c 	bl	8001416 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	@ (8003004 <MX_TIM6_Init+0x68>)
 8002fec:	f005 ff58 	bl	8008ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002ff6:	f7fe fa0e 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000047c 	.word	0x2000047c
 8003008:	40001000 	.word	0x40001000

0800300c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <HAL_TIM_Base_MspInit+0x44>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_TIM_Base_MspInit+0x48>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	4a0c      	ldr	r2, [pc, #48]	@ (8003054 <HAL_TIM_Base_MspInit+0x48>)
 8003024:	f043 0310 	orr.w	r3, r3, #16
 8003028:	6593      	str	r3, [r2, #88]	@ 0x58
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_TIM_Base_MspInit+0x48>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2036      	movs	r0, #54	@ 0x36
 800303c:	f000 fb41 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003040:	2036      	movs	r0, #54	@ 0x36
 8003042:	f000 fb58 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40001000 	.word	0x40001000
 8003054:	40021000 	.word	0x40021000

08003058 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 800305e:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <MX_USART2_UART_Init+0x9c>)
 8003060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003062:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800306a:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003076:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800307c:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 800307e:	220c      	movs	r2, #12
 8003080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800308e:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003094:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 8003096:	2200      	movs	r2, #0
 8003098:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 800309c:	2208      	movs	r2, #8
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80030a0:	4b13      	ldr	r3, [pc, #76]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 80030a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030a6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030a8:	4811      	ldr	r0, [pc, #68]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 80030aa:	f005 ffcd 	bl	8009048 <HAL_UART_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80030b4:	f7fe f9af 	bl	8001416 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030b8:	2100      	movs	r1, #0
 80030ba:	480d      	ldr	r0, [pc, #52]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 80030bc:	f008 f843 	bl	800b146 <HAL_UARTEx_SetTxFifoThreshold>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80030c6:	f7fe f9a6 	bl	8001416 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ca:	2100      	movs	r1, #0
 80030cc:	4808      	ldr	r0, [pc, #32]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 80030ce:	f008 f878 	bl	800b1c2 <HAL_UARTEx_SetRxFifoThreshold>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80030d8:	f7fe f99d 	bl	8001416 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80030dc:	4804      	ldr	r0, [pc, #16]	@ (80030f0 <MX_USART2_UART_Init+0x98>)
 80030de:	f007 fff9 	bl	800b0d4 <HAL_UARTEx_DisableFifoMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80030e8:	f7fe f995 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200004c8 	.word	0x200004c8
 80030f4:	40004400 	.word	0x40004400

080030f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b09e      	sub	sp, #120	@ 0x78
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2250      	movs	r2, #80	@ 0x50
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f00c f933 	bl	800f384 <memset>
  if(uartHandle->Instance==USART2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <HAL_UART_MspInit+0xb4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d13d      	bne.n	80031a4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003128:	2302      	movs	r3, #2
 800312a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4618      	mov	r0, r3
 8003136:	f004 f8c7 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003140:	f7fe f969 	bl	8001416 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003144:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 800314a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003150:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003160:	4a13      	ldr	r2, [pc, #76]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_UART_MspInit+0xb8>)
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003174:	2318      	movs	r3, #24
 8003176:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003184:	2307      	movs	r3, #7
 8003186:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800318c:	4619      	mov	r1, r3
 800318e:	4809      	ldr	r0, [pc, #36]	@ (80031b4 <HAL_UART_MspInit+0xbc>)
 8003190:	f000 fd46 	bl	8003c20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	2100      	movs	r1, #0
 8003198:	2026      	movs	r0, #38	@ 0x26
 800319a:	f000 fa92 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800319e:	2026      	movs	r0, #38	@ 0x26
 80031a0:	f000 faa9 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80031a4:	bf00      	nop
 80031a6:	3778      	adds	r7, #120	@ 0x78
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40004400 	.word	0x40004400
 80031b0:	40021000 	.word	0x40021000
 80031b4:	48000400 	.word	0x48000400

080031b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031b8:	480d      	ldr	r0, [pc, #52]	@ (80031f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031bc:	f7ff fedc 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031c0:	480c      	ldr	r0, [pc, #48]	@ (80031f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80031c2:	490d      	ldr	r1, [pc, #52]	@ (80031f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <LoopForever+0xe>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003204 <LoopForever+0x16>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031e6:	f00c f8db 	bl	800f3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ea:	f7fe f85f 	bl	80012ac <main>

080031ee <LoopForever>:

LoopForever:
    b LoopForever
 80031ee:	e7fe      	b.n	80031ee <LoopForever>
  ldr   r0, =_estack
 80031f0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80031fc:	080105c0 	.word	0x080105c0
  ldr r2, =_sbss
 8003200:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003204:	20002068 	.word	0x20002068

08003208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC1_2_IRQHandler>
	...

0800320c <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af04      	add	r7, sp, #16
 8003212:	4603      	mov	r3, r0
 8003214:	460a      	mov	r2, r1
 8003216:	71fb      	strb	r3, [r7, #7]
 8003218:	4613      	mov	r3, r2
 800321a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 800321c:	79bb      	ldrb	r3, [r7, #6]
 800321e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	b29a      	uxth	r2, r3
 8003224:	230a      	movs	r3, #10
 8003226:	9302      	str	r3, [sp, #8]
 8003228:	2301      	movs	r3, #1
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2301      	movs	r3, #1
 8003234:	218e      	movs	r1, #142	@ 0x8e
 8003236:	4803      	ldr	r0, [pc, #12]	@ (8003244 <DAC_Register_Write+0x38>)
 8003238:	f000 ff42 	bl	80040c0 <HAL_I2C_Mem_Write>

	return;
 800323c:	bf00      	nop
}
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200001f0 	.word	0x200001f0

08003248 <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	2055      	movs	r0, #85	@ 0x55
 8003250:	f7ff ffdc 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8003254:	2127      	movs	r1, #39	@ 0x27
 8003256:	2040      	movs	r0, #64	@ 0x40
 8003258:	f7ff ffd8 	bl	800320c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 800325c:	2127      	movs	r1, #39	@ 0x27
 800325e:	2041      	movs	r0, #65	@ 0x41
 8003260:	f7ff ffd4 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8003264:	2127      	movs	r1, #39	@ 0x27
 8003266:	2044      	movs	r0, #68	@ 0x44
 8003268:	f7ff ffd0 	bl	800320c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 800326c:	2127      	movs	r1, #39	@ 0x27
 800326e:	2045      	movs	r0, #69	@ 0x45
 8003270:	f7ff ffcc 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8003274:	2100      	movs	r1, #0
 8003276:	2046      	movs	r0, #70	@ 0x46
 8003278:	f7ff ffc8 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 800327c:	21e0      	movs	r1, #224	@ 0xe0
 800327e:	2049      	movs	r0, #73	@ 0x49
 8003280:	f7ff ffc4 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8003284:	2101      	movs	r1, #1
 8003286:	2056      	movs	r0, #86	@ 0x56
 8003288:	f7ff ffc0 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 800328c:	2103      	movs	r1, #3
 800328e:	204b      	movs	r0, #75	@ 0x4b
 8003290:	f7ff ffbc 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 8003294:	2111      	movs	r1, #17
 8003296:	2058      	movs	r0, #88	@ 0x58
 8003298:	f7ff ffb8 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 800329c:	21ec      	movs	r1, #236	@ 0xec
 800329e:	2049      	movs	r0, #73	@ 0x49
 80032a0:	f7ff ffb4 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 80032a4:	2101      	movs	r1, #1
 80032a6:	204a      	movs	r0, #74	@ 0x4a
 80032a8:	f7ff ffb0 	bl	800320c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 80032ac:	2130      	movs	r1, #48	@ 0x30
 80032ae:	2059      	movs	r0, #89	@ 0x59
 80032b0:	f7ff ffac 	bl	800320c <DAC_Register_Write>

	return;
 80032b4:	bf00      	nop
}
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af04      	add	r7, sp, #16
 80032be:	4603      	mov	r3, r0
 80032c0:	460a      	mov	r2, r1
 80032c2:	71fb      	strb	r3, [r7, #7]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	230a      	movs	r3, #10
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	2301      	movs	r3, #1
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2301      	movs	r3, #1
 80032e0:	21ee      	movs	r1, #238	@ 0xee
 80032e2:	4803      	ldr	r0, [pc, #12]	@ (80032f0 <GPIO_Register_Write+0x38>)
 80032e4:	f000 feec 	bl	80040c0 <HAL_I2C_Mem_Write>

	return;
 80032e8:	bf00      	nop
}
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200001f0 	.word	0x200001f0

080032f4 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 80032f8:	2100      	movs	r1, #0
 80032fa:	2006      	movs	r0, #6
 80032fc:	f7ff ffdc 	bl	80032b8 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003300:	2100      	movs	r1, #0
 8003302:	2007      	movs	r0, #7
 8003304:	f7ff ffd8 	bl	80032b8 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 8003308:	2100      	movs	r1, #0
 800330a:	2002      	movs	r0, #2
 800330c:	f7ff ffd4 	bl	80032b8 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003310:	2100      	movs	r1, #0
 8003312:	2003      	movs	r0, #3
 8003314:	f7ff ffd0 	bl	80032b8 <GPIO_Register_Write>

	return;
 8003318:	bf00      	nop
}
 800331a:	bd80      	pop	{r7, pc}

0800331c <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	460b      	mov	r3, r1
 800332a:	817b      	strh	r3, [r7, #10]
 800332c:	4613      	mov	r3, r2
 800332e:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b07      	cmp	r3, #7
 8003334:	dd02      	ble.n	800333c <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 8003336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800333a:	e051      	b.n	80033e0 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d121      	bne.n	8003386 <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 8003342:	7a7b      	ldrb	r3, [r7, #9]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 8003348:	2201      	movs	r2, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	b21a      	sxth	r2, r3
 8003352:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003356:	4313      	orrs	r3, r2
 8003358:	b21b      	sxth	r3, r3
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	e00b      	b.n	8003376 <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 800335e:	2201      	movs	r2, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	b21b      	sxth	r3, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	b21a      	sxth	r2, r3
 800336c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003370:	4013      	ands	r3, r2
 8003372:	b21b      	sxth	r3, r3
 8003374:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 800337a:	7dbb      	ldrb	r3, [r7, #22]
 800337c:	4619      	mov	r1, r3
 800337e:	2002      	movs	r0, #2
 8003380:	f7ff ff9a 	bl	80032b8 <GPIO_Register_Write>
 8003384:	e02b      	b.n	80033de <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d125      	bne.n	80033d8 <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 800338c:	7a7b      	ldrb	r3, [r7, #9]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3308      	adds	r3, #8
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	b21a      	sxth	r2, r3
 800339e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	817b      	strh	r3, [r7, #10]
 80033a8:	e00c      	b.n	80033c4 <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3308      	adds	r3, #8
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	b21b      	sxth	r3, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	b21a      	sxth	r2, r3
 80033ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033be:	4013      	ands	r3, r2
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 80033c4:	897b      	ldrh	r3, [r7, #10]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	4619      	mov	r1, r3
 80033d0:	2003      	movs	r0, #3
 80033d2:	f7ff ff71 	bl	80032b8 <GPIO_Register_Write>
 80033d6:	e002      	b.n	80033de <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 80033d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033dc:	e000      	b.n	80033e0 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 80033de:	897b      	ldrh	r3, [r7, #10]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f2:	2003      	movs	r0, #3
 80033f4:	f000 f95a 	bl	80036ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f8:	200f      	movs	r0, #15
 80033fa:	f000 f80d 	bl	8003418 <HAL_InitTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	e001      	b.n	800340e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800340a:	f7ff f9cb 	bl	80027a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800340e:	79fb      	ldrb	r3, [r7, #7]

}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003424:	4b16      	ldr	r3, [pc, #88]	@ (8003480 <HAL_InitTick+0x68>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d022      	beq.n	8003472 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800342c:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <HAL_InitTick+0x6c>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <HAL_InitTick+0x68>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f966 	bl	8003712 <HAL_SYSTICK_Config>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	d809      	bhi.n	8003466 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003452:	2200      	movs	r2, #0
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	f04f 30ff 	mov.w	r0, #4294967295
 800345a:	f000 f932 	bl	80036c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <HAL_InitTick+0x70>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e007      	b.n	8003476 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
 800346a:	e004      	b.n	8003476 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e001      	b.n	8003476 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000008 	.word	0x20000008
 8003484:	20000000 	.word	0x20000000
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_IncTick+0x1c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_IncTick+0x20>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4413      	add	r3, r2
 800349a:	4a03      	ldr	r2, [pc, #12]	@ (80034a8 <HAL_IncTick+0x1c>)
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	2000055c 	.word	0x2000055c
 80034ac:	20000008 	.word	0x20000008

080034b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return uwTick;
 80034b4:	4b03      	ldr	r3, [pc, #12]	@ (80034c4 <HAL_GetTick+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000055c 	.word	0x2000055c

080034c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7ff ffee 	bl	80034b0 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d004      	beq.n	80034ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <HAL_Delay+0x40>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4413      	add	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ec:	bf00      	nop
 80034ee:	f7ff ffdf 	bl	80034b0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d8f7      	bhi.n	80034ee <HAL_Delay+0x26>
  {
  }
}
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000008 	.word	0x20000008

0800350c <__NVIC_SetPriorityGrouping>:
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	@ (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	@ (80035a8 <__NVIC_EnableIRQ+0x38>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_SetPriority>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db0a      	blt.n	80035d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	490c      	ldr	r1, [pc, #48]	@ (80035f8 <__NVIC_SetPriority+0x4c>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	440b      	add	r3, r1
 80035d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035d4:	e00a      	b.n	80035ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4908      	ldr	r1, [pc, #32]	@ (80035fc <__NVIC_SetPriority+0x50>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	3b04      	subs	r3, #4
 80035e4:	0112      	lsls	r2, r2, #4
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	440b      	add	r3, r1
 80035ea:	761a      	strb	r2, [r3, #24]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <NVIC_EncodePriority>:
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3304      	adds	r3, #4
 8003626:	2b06      	cmp	r3, #6
 8003628:	d902      	bls.n	8003630 <NVIC_EncodePriority+0x30>
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3b03      	subs	r3, #3
 800362e:	e000      	b.n	8003632 <NVIC_EncodePriority+0x32>
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	401a      	ands	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003648:	f04f 31ff 	mov.w	r1, #4294967295
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43d9      	mvns	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	4313      	orrs	r3, r2
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d301      	bcc.n	800367e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367a:	2301      	movs	r3, #1
 800367c:	e00f      	b.n	800369e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <SysTick_Config+0x40>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003686:	210f      	movs	r1, #15
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
 800368c:	f7ff ff8e 	bl	80035ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <SysTick_Config+0x40>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <SysTick_Config+0x40>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000e010 	.word	0xe000e010

080036ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff29 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4603      	mov	r3, r0
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff40 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff90 	bl	8003600 <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5f 	bl	80035ac <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff33 	bl	8003570 <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa4 	bl	8003668 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e08d      	b.n	800385a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_DMA_Init+0x138>)
 8003746:	429a      	cmp	r2, r3
 8003748:	d80f      	bhi.n	800376a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b45      	ldr	r3, [pc, #276]	@ (8003868 <HAL_DMA_Init+0x13c>)
 8003752:	4413      	add	r3, r2
 8003754:	4a45      	ldr	r2, [pc, #276]	@ (800386c <HAL_DMA_Init+0x140>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	009a      	lsls	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a42      	ldr	r2, [pc, #264]	@ (8003870 <HAL_DMA_Init+0x144>)
 8003766:	641a      	str	r2, [r3, #64]	@ 0x40
 8003768:	e00e      	b.n	8003788 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <HAL_DMA_Init+0x148>)
 8003772:	4413      	add	r3, r2
 8003774:	4a3d      	ldr	r2, [pc, #244]	@ (800386c <HAL_DMA_Init+0x140>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	009a      	lsls	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_DMA_Init+0x14c>)
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9be 	bl	8003b5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d102      	bne.n	80037f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003804:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_DMA_Init+0x104>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d80c      	bhi.n	8003830 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9de 	bl	8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	e008      	b.n	8003842 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40020407 	.word	0x40020407
 8003868:	bffdfff8 	.word	0xbffdfff8
 800386c:	cccccccd 	.word	0xcccccccd
 8003870:	40020000 	.word	0x40020000
 8003874:	bffdfbf8 	.word	0xbffdfbf8
 8003878:	40020400 	.word	0x40020400

0800387c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d005      	beq.n	80038a0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e037      	b.n	8003910 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038be:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ec:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003904:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800390e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d00d      	beq.n	8003962 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e047      	b.n	80039f2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020e 	bic.w	r2, r2, #14
 8003970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f003 021f 	and.w	r2, r3, #31
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00c      	beq.n	80039d2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
    }
  }
  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d026      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x7a>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d021      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a54:	f003 021f 	and.w	r2, r3, #31
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d071      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a74:	e06c      	b.n	8003b50 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2202      	movs	r2, #2
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d029      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020a 	bic.w	r2, r2, #10
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	f003 021f 	and.w	r2, r3, #31
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8003acc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d038      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ae6:	e033      	b.n	8003b50 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2208      	movs	r2, #8
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d025      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 020e 	bic.w	r2, r2, #14
 8003b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 021f 	and.w	r2, r3, #31
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
}
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d802      	bhi.n	8003b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b70:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e001      	b.n	8003b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3b08      	subs	r3, #8
 8003b86:	4a12      	ldr	r2, [pc, #72]	@ (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	009a      	lsls	r2, r3, #2
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40020407 	.word	0x40020407
 8003bc8:	40020800 	.word	0x40020800
 8003bcc:	40020820 	.word	0x40020820
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020880 	.word	0x40020880

08003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a08      	ldr	r2, [pc, #32]	@ (8003c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bfa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2201      	movs	r2, #1
 8003c06:	409a      	lsls	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	1000823f 	.word	0x1000823f
 8003c1c:	40020940 	.word	0x40020940

08003c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c2e:	e15a      	b.n	8003ee6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 814c 	beq.w	8003ee0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d005      	beq.n	8003c60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d130      	bne.n	8003cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c96:	2201      	movs	r2, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 0201 	and.w	r2, r3, #1
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d017      	beq.n	8003cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d123      	bne.n	8003d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	220f      	movs	r2, #15
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	6939      	ldr	r1, [r7, #16]
 8003d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0203 	and.w	r2, r3, #3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80a6 	beq.w	8003ee0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d94:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <HAL_GPIO_Init+0x2e4>)
 8003d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d98:	4a5a      	ldr	r2, [pc, #360]	@ (8003f04 <HAL_GPIO_Init+0x2e4>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003da0:	4b58      	ldr	r3, [pc, #352]	@ (8003f04 <HAL_GPIO_Init+0x2e4>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dac:	4a56      	ldr	r2, [pc, #344]	@ (8003f08 <HAL_GPIO_Init+0x2e8>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dd6:	d01f      	beq.n	8003e18 <HAL_GPIO_Init+0x1f8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a4c      	ldr	r2, [pc, #304]	@ (8003f0c <HAL_GPIO_Init+0x2ec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d019      	beq.n	8003e14 <HAL_GPIO_Init+0x1f4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a4b      	ldr	r2, [pc, #300]	@ (8003f10 <HAL_GPIO_Init+0x2f0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_GPIO_Init+0x1f0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a4a      	ldr	r2, [pc, #296]	@ (8003f14 <HAL_GPIO_Init+0x2f4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00d      	beq.n	8003e0c <HAL_GPIO_Init+0x1ec>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a49      	ldr	r2, [pc, #292]	@ (8003f18 <HAL_GPIO_Init+0x2f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <HAL_GPIO_Init+0x1e8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <HAL_GPIO_Init+0x2fc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_GPIO_Init+0x1e4>
 8003e00:	2305      	movs	r3, #5
 8003e02:	e00a      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e04:	2306      	movs	r3, #6
 8003e06:	e008      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e006      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e004      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e002      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_GPIO_Init+0x1fa>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	f002 0203 	and.w	r2, r2, #3
 8003e20:	0092      	lsls	r2, r2, #2
 8003e22:	4093      	lsls	r3, r2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2a:	4937      	ldr	r1, [pc, #220]	@ (8003f08 <HAL_GPIO_Init+0x2e8>)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e38:	4b39      	ldr	r3, [pc, #228]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e5c:	4a30      	ldr	r2, [pc, #192]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e62:	4b2f      	ldr	r3, [pc, #188]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e86:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e8c:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eda:	4a11      	ldr	r2, [pc, #68]	@ (8003f20 <HAL_GPIO_Init+0x300>)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f47f ae9d 	bne.w	8003c30 <HAL_GPIO_Init+0x10>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	48000400 	.word	0x48000400
 8003f10:	48000800 	.word	0x48000800
 8003f14:	48000c00 	.word	0x48000c00
 8003f18:	48001000 	.word	0x48001000
 8003f1c:	48001400 	.word	0x48001400
 8003f20:	40010400 	.word	0x40010400

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f40:	e002      	b.n	8003f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43d9      	mvns	r1, r3
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	400b      	ands	r3, r1
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e08d      	b.n	80040b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd f852 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e006      	b.n	8004010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800400e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d108      	bne.n	800402a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e007      	b.n	800403a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800404c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800405c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	f040 80f9 	bne.w	80042da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x34>
 80040ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0ed      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2C_Mem_Write+0x4e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0e6      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004116:	f7ff f9cb 	bl	80034b0 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2319      	movs	r3, #25
 8004122:	2201      	movs	r2, #1
 8004124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f955 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d1      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2221      	movs	r2, #33	@ 0x21
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	@ 0x40
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004160:	88f8      	ldrh	r0, [r7, #6]
 8004162:	893a      	ldrh	r2, [r7, #8]
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4603      	mov	r3, r0
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f8b9 	bl	80042e8 <I2C_RequestMemoryWrite>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0a9      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2bff      	cmp	r3, #255	@ 0xff
 8004190:	d90e      	bls.n	80041b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22ff      	movs	r2, #255	@ 0xff
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fad9 	bl	8004760 <I2C_TransferConfig>
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fac8 	bl	8004760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f958 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e07b      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d034      	beq.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d130      	bne.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8d1 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04d      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2bff      	cmp	r3, #255	@ 0xff
 8004248:	d90e      	bls.n	8004268 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	@ 0xff
 800424e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fa7d 	bl	8004760 <I2C_TransferConfig>
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004276:	b2da      	uxtb	r2, r3
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	2300      	movs	r3, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fa6c 	bl	8004760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d19e      	bne.n	80041d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f93e 	bl	8004518 <I2C_WaitOnSTOPFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01a      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2220      	movs	r2, #32
 80042ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_I2C_Mem_Write+0x224>)
 80042ba:	400b      	ands	r3, r1
 80042bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	fe00e800 	.word	0xfe00e800

080042e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	817b      	strh	r3, [r7, #10]
 80042fa:	460b      	mov	r3, r1
 80042fc:	813b      	strh	r3, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	4b20      	ldr	r3, [pc, #128]	@ (800438c <I2C_RequestMemoryWrite+0xa4>)
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa25 	bl	8004760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f8b5 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02c      	b.n	8004384 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	893b      	ldrh	r3, [r7, #8]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	629a      	str	r2, [r3, #40]	@ 0x28
 800433a:	e015      	b.n	8004368 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	b29b      	uxth	r3, r3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	69b9      	ldr	r1, [r7, #24]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f89b 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e012      	b.n	8004384 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800435e:	893b      	ldrh	r3, [r7, #8]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	@ 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f830 	bl	80043d8 <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	80002000 	.word	0x80002000

08004390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d103      	bne.n	80043ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d007      	beq.n	80043cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	619a      	str	r2, [r3, #24]
  }
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e8:	e03b      	b.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8d6 	bl	80045a0 <I2C_IsErrorOccurred>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e041      	b.n	8004482 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d02d      	beq.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7ff f853 	bl	80034b0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d122      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	d113      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d0b4      	beq.n	80043ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004496:	e033      	b.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f87f 	bl	80045a0 <I2C_IsErrorOccurred>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e031      	b.n	8004510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d025      	beq.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b4:	f7fe fffc 	bl	80034b0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d302      	bcc.n	80044ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11a      	bne.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d013      	beq.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d1c4      	bne.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004524:	e02f      	b.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f838 	bl	80045a0 <I2C_IsErrorOccurred>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e02d      	b.n	8004596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe ffb9 	bl	80034b0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11a      	bne.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d013      	beq.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e007      	b.n	8004596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b20      	cmp	r3, #32
 8004592:	d1c8      	bne.n	8004526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d068      	beq.n	800469e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045d4:	e049      	b.n	800466a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d045      	beq.n	800466a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe ff67 	bl	80034b0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_IsErrorOccurred+0x54>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13a      	bne.n	800466a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004616:	d121      	bne.n	800465c <I2C_IsErrorOccurred+0xbc>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800461e:	d01d      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01a      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004636:	f7fe ff3b 	bl	80034b0 <HAL_GetTick>
 800463a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	e00e      	b.n	800465c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800463e:	f7fe ff37 	bl	80034b0 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b19      	cmp	r3, #25
 800464a:	d907      	bls.n	800465c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800465a:	e006      	b.n	800466a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d1e9      	bne.n	800463e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d003      	beq.n	8004680 <I2C_IsErrorOccurred+0xe0>
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0aa      	beq.n	80045d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fe3b 	bl	8004390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <I2C_IsErrorOccurred+0x1bc>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800474e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004752:	4618      	mov	r0, r3
 8004754:	3728      	adds	r7, #40	@ 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	fe00e800 	.word	0xfe00e800

08004760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	4613      	mov	r3, r2
 8004770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004778:	7a7b      	ldrb	r3, [r7, #9]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800478e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	0d5b      	lsrs	r3, r3, #21
 800479a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800479e:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <I2C_TransferConfig+0x60>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	43db      	mvns	r3, r3
 80047a4:	ea02 0103 	and.w	r1, r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	03ff63ff 	.word	0x03ff63ff

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	@ 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d139      	bne.n	80048e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800487a:	2302      	movs	r3, #2
 800487c:	e033      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	@ 0x24
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0d0      	b.n	8004aa8 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fc1e 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004936:	f023 030f 	bic.w	r3, r3, #15
 800493a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2202      	movs	r2, #2
 8004942:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d061      	beq.n	8004a10 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004954:	2310      	movs	r3, #16
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e001      	b.n	800495e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800495a:	2320      	movs	r3, #32
 800495c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b20      	cmp	r3, #32
 8004964:	d802      	bhi.n	800496c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800496c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004970:	f002 fee6 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8004974:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497e:	d125      	bne.n	80049cc <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	3305      	adds	r3, #5
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e01f      	b.n	80049ea <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	3305      	adds	r3, #5
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e00e      	b.n	80049ea <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	3305      	adds	r3, #5
 80049e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <HAL_I2S_Init+0x1bc>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	e003      	b.n	8004a18 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a10:	2302      	movs	r3, #2
 8004a12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d902      	bls.n	8004a24 <HAL_I2S_Init+0x130>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2bff      	cmp	r3, #255	@ 0xff
 8004a22:	d907      	bls.n	8004a34 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e039      	b.n	8004aa8 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	ea42 0103 	orr.w	r1, r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a52:	f023 030f 	bic.w	r3, r3, #15
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6851      	ldr	r1, [r2, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68d2      	ldr	r2, [r2, #12]
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6992      	ldr	r2, [r2, #24]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a76:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b30      	cmp	r3, #48	@ 0x30
 8004a7e:	d003      	beq.n	8004a88 <HAL_I2S_Init+0x194>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a86:	d107      	bne.n	8004a98 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	cccccccd 	.word	0xcccccccd

08004ab4 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_I2S_Transmit+0x1c>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d8      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0d0      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2S_Transmit+0x40>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0c8      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2203      	movs	r2, #3
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d002      	beq.n	8004b28 <HAL_I2S_Transmit+0x74>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	d10a      	bne.n	8004b3e <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	845a      	strh	r2, [r3, #34]	@ 0x22
 8004b3c:	e005      	b.n	8004b4a <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b60:	d007      	beq.n	8004b72 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b70:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	2102      	movs	r1, #2
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f888 	bl	8004c8e <I2S_WaitFlagStateUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d04e      	beq.n	8004c22 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e070      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	2102      	movs	r1, #2
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f85d 	bl	8004c8e <I2S_WaitFlagStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00f      	beq.n	8004bfa <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e045      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d10c      	bne.n	8004c22 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1bb      	bne.n	8004ba4 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c40:	d118      	bne.n	8004c74 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	@ 0x80
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f820 	bl	8004c8e <I2S_WaitFlagStateUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00f      	beq.n	8004c74 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e008      	b.n	8004c86 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b086      	sub	sp, #24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c9e:	f7fe fc07 	bl	80034b0 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004ca4:	e018      	b.n	8004cd8 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d014      	beq.n	8004cd8 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004cae:	f7fe fbff 	bl	80034b0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d902      	bls.n	8004cc4 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e00f      	b.n	8004cf8 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d1d7      	bne.n	8004ca6 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0c0      	b.n	8004e94 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f009 ffe2 	bl	800ecf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f006 fae6 	bl	800b30a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	e03e      	b.n	8004dc2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	3311      	adds	r3, #17
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	440b      	add	r3, r1
 8004d66:	3310      	adds	r3, #16
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	3313      	adds	r3, #19
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3320      	adds	r3, #32
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	3324      	adds	r3, #36	@ 0x24
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	440b      	add	r3, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	791b      	ldrb	r3, [r3, #4]
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3bb      	bcc.n	8004d44 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e044      	b.n	8004e5c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	440b      	add	r3, r1
 8004de0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d3b5      	bcc.n	8004dd2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004e72:	f006 fa65 	bl	800b340 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7a9b      	ldrb	r3, [r3, #10]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 fc0e 	bl	80066ae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_PCD_Start+0x16>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e012      	b.n	8004ed8 <HAL_PCD_Start+0x3c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f006 fa0c 	bl	800b2dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f007 ffe9 	bl	800cea0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f007 ffee 	bl	800cece <USB_ReadInterrupts>
 8004ef2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fb06 	bl	8005510 <PCD_EP_ISR_Handler>

    return;
 8004f04:	e110      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f22:	b292      	uxth	r2, r2
 8004f24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f009 ff72 	bl	800ee12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8fc 	bl	800512e <HAL_PCD_SetAddress>

    return;
 8004f36:	e0f7      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f54:	b292      	uxth	r2, r2
 8004f56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f5a:	e0e5      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004f7e:	e0d3      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d034      	beq.n	8004ff4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0204 	bic.w	r2, r2, #4
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0208 	bic.w	r2, r2, #8
 8004fb4:	b292      	uxth	r2, r2
 8004fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f00a f912 	bl	800f1f8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f009 ff55 	bl	800ee84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fec:	b292      	uxth	r2, r2
 8004fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ff2:	e099      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d027      	beq.n	800504e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	b292      	uxth	r2, r2
 8005012:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005028:	b292      	uxth	r2, r2
 800502a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0204 	orr.w	r2, r2, #4
 8005040:	b292      	uxth	r2, r2
 8005042:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f009 ff02 	bl	800ee50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800504c:	e06c      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005054:	2b00      	cmp	r3, #0
 8005056:	d040      	beq.n	80050da <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800506a:	b292      	uxth	r2, r2
 800506c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12b      	bne.n	80050d2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0204 	orr.w	r2, r2, #4
 800508c:	b292      	uxth	r2, r2
 800508e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0208 	orr.w	r2, r2, #8
 80050a4:	b292      	uxth	r2, r2
 80050a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	089b      	lsrs	r3, r3, #2
 80050be:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050c8:	2101      	movs	r1, #1
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f00a f894 	bl	800f1f8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050d0:	e02a      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f009 febc 	bl	800ee50 <HAL_PCD_SuspendCallback>
    return;
 80050d8:	e026      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00f      	beq.n	8005104 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050f6:	b292      	uxth	r2, r2
 80050f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f009 fe7a 	bl	800edf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005102:	e011      	b.n	8005128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005120:	b292      	uxth	r2, r2
 8005122:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005126:	bf00      	nop
  }
}
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_PCD_SetAddress+0x1a>
 8005144:	2302      	movs	r3, #2
 8005146:	e012      	b.n	800516e <HAL_PCD_SetAddress+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f007 fe8a 	bl	800ce78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	4608      	mov	r0, r1
 8005180:	4611      	mov	r1, r2
 8005182:	461a      	mov	r2, r3
 8005184:	4603      	mov	r3, r0
 8005186:	70fb      	strb	r3, [r7, #3]
 8005188:	460b      	mov	r3, r1
 800518a:	803b      	strh	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005198:	2b00      	cmp	r3, #0
 800519a:	da0e      	bge.n	80051ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	3310      	adds	r3, #16
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	705a      	strb	r2, [r3, #1]
 80051b8:	e00e      	b.n	80051d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	f003 0207 	and.w	r2, r3, #7
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80051e4:	883b      	ldrh	r3, [r7, #0]
 80051e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	78ba      	ldrb	r2, [r7, #2]
 80051f2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051f4:	78bb      	ldrb	r3, [r7, #2]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d102      	bne.n	8005200 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_PCD_EP_Open+0x98>
 800520a:	2302      	movs	r3, #2
 800520c:	e00e      	b.n	800522c <HAL_PCD_EP_Open+0xb6>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	4618      	mov	r0, r3
 800521e:	f006 f8ad 	bl	800b37c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800522a:	7afb      	ldrb	r3, [r7, #11]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da0e      	bge.n	8005266 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	3310      	adds	r3, #16
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	705a      	strb	r2, [r3, #1]
 8005264:	e00e      	b.n	8005284 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 0207 	and.w	r2, r3, #7
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4413      	add	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_PCD_EP_Close+0x6a>
 800529a:	2302      	movs	r3, #2
 800529c:	e00e      	b.n	80052bc <HAL_PCD_EP_Close+0x88>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f006 fd4d 	bl	800bd4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	460b      	mov	r3, r1
 80052d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	f003 0207 	and.w	r2, r3, #7
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005304:	7afb      	ldrb	r3, [r7, #11]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b2da      	uxtb	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6979      	ldr	r1, [r7, #20]
 8005316:	4618      	mov	r0, r3
 8005318:	f006 ff05 	bl	800c126 <USB_EPStartXfer>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	f003 0207 	and.w	r2, r3, #7
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005348:	681b      	ldr	r3, [r3, #0]
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	460b      	mov	r3, r1
 8005364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 0207 	and.w	r2, r3, #7
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	3310      	adds	r3, #16
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2201      	movs	r2, #1
 80053a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f006 feb6 	bl	800c126 <USB_EPStartXfer>

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	7912      	ldrb	r2, [r2, #4]
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03e      	b.n	8005460 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da0e      	bge.n	8005408 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	f003 0207 	and.w	r2, r3, #7
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	3310      	adds	r3, #16
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	705a      	strb	r2, [r3, #1]
 8005406:	e00c      	b.n	8005422 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_PCD_EP_SetStall+0x7e>
 800543e:	2302      	movs	r3, #2
 8005440:	e00e      	b.n	8005460 <HAL_PCD_EP_SetStall+0x9c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	4618      	mov	r0, r3
 8005452:	f007 fc17 	bl	800cc84 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	7912      	ldrb	r2, [r2, #4]
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e040      	b.n	8005508 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800548a:	2b00      	cmp	r3, #0
 800548c:	da0e      	bge.n	80054ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	f003 0207 	and.w	r2, r3, #7
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	3310      	adds	r3, #16
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	705a      	strb	r2, [r3, #1]
 80054aa:	e00e      	b.n	80054ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 0207 	and.w	r2, r3, #7
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_PCD_EP_ClrStall+0x82>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e00e      	b.n	8005508 <HAL_PCD_EP_ClrStall+0xa0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68f9      	ldr	r1, [r7, #12]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f007 fc14 	bl	800cd26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b092      	sub	sp, #72	@ 0x48
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005518:	e333      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005522:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005524:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005530:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8108 	bne.w	800574a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800553a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d14c      	bne.n	80055de <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005554:	813b      	strh	r3, [r7, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3310      	adds	r3, #16
 800556c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	4413      	add	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	4413      	add	r3, r2
 8005588:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005594:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	441a      	add	r2, r3
 80055a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055a4:	2100      	movs	r1, #0
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f009 fc0b 	bl	800edc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7b1b      	ldrb	r3, [r3, #12]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 82e5 	beq.w	8005b82 <PCD_EP_ISR_Handler+0x672>
 80055b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 82e0 	bne.w	8005b82 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	7b1b      	ldrb	r3, [r3, #12]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	731a      	strb	r2, [r3, #12]
 80055dc:	e2d1      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055e4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d032      	beq.n	800565e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005600:	b29b      	uxth	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	4413      	add	r3, r2
 8005612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800561c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800562a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800562e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005630:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005632:	b29b      	uxth	r3, r3
 8005634:	f007 fc9d 	bl	800cf72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29a      	uxth	r2, r3
 8005640:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005644:	4013      	ands	r3, r2
 8005646:	817b      	strh	r3, [r7, #10]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	897a      	ldrh	r2, [r7, #10]
 800564e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005652:	b292      	uxth	r2, r2
 8005654:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f009 fb86 	bl	800ed68 <HAL_PCD_SetupStageCallback>
 800565c:	e291      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800565e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005662:	2b00      	cmp	r3, #0
 8005664:	f280 828d 	bge.w	8005b82 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005674:	4013      	ands	r3, r2
 8005676:	81fb      	strh	r3, [r7, #14]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	89fa      	ldrh	r2, [r7, #14]
 800567e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005682:	b292      	uxth	r2, r2
 8005684:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4413      	add	r3, r2
 80056a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d019      	beq.n	80056ea <PCD_EP_ISR_Handler+0x1da>
 80056b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f007 fc4f 	bl	800cf72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	441a      	add	r2, r3
 80056de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056e2:	2100      	movs	r1, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f009 fb51 	bl	800ed8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80056f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8242 	bne.w	8005b82 <PCD_EP_ISR_Handler+0x672>
 80056fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005700:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005704:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005708:	f000 823b 	beq.w	8005b82 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	81bb      	strh	r3, [r7, #12]
 800571e:	89bb      	ldrh	r3, [r7, #12]
 8005720:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005724:	81bb      	strh	r3, [r7, #12]
 8005726:	89bb      	ldrh	r3, [r7, #12]
 8005728:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800572c:	81bb      	strh	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	89bb      	ldrh	r3, [r7, #12]
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e21b      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800575c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005760:	2b00      	cmp	r3, #0
 8005762:	f280 80f1 	bge.w	8005948 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29a      	uxth	r2, r3
 8005778:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800577c:	4013      	ands	r3, r2
 800577e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005794:	b292      	uxth	r2, r2
 8005796:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005798:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	4413      	add	r3, r2
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80057ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b0:	7b1b      	ldrb	r3, [r3, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d123      	bne.n	80057fe <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057be:	b29b      	uxth	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80057de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 808b 	beq.w	80058fe <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ee:	6959      	ldr	r1, [r3, #20]
 80057f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f2:	88da      	ldrh	r2, [r3, #6]
 80057f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80057f8:	f007 fbbb 	bl	800cf72 <USB_ReadPMA>
 80057fc:	e07f      	b.n	80058fe <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80057fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005800:	78db      	ldrb	r3, [r3, #3]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d109      	bne.n	800581a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005806:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005808:	461a      	mov	r2, r3
 800580a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9c6 	bl	8005b9e <HAL_PCD_EP_DB_Receive>
 8005812:	4603      	mov	r3, r0
 8005814:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005818:	e071      	b.n	80058fe <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005834:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800584e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005852:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005856:	b29b      	uxth	r3, r3
 8005858:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d022      	beq.n	80058ba <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4413      	add	r3, r2
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	4413      	add	r3, r2
 800588e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005898:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800589c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02c      	beq.n	80058fe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058aa:	6959      	ldr	r1, [r3, #20]
 80058ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ae:	891a      	ldrh	r2, [r3, #8]
 80058b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058b4:	f007 fb5d 	bl	800cf72 <USB_ReadPMA>
 80058b8:	e021      	b.n	80058fe <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4413      	add	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80058e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f0:	6959      	ldr	r1, [r3, #20]
 80058f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f4:	895a      	ldrh	r2, [r3, #10]
 80058f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058fa:	f007 fb3a 	bl	800cf72 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80058fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005906:	441a      	add	r2, r3
 8005908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800590c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005914:	441a      	add	r2, r3
 8005916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005918:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800591a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <PCD_EP_ISR_Handler+0x41e>
 8005922:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	429a      	cmp	r2, r3
 800592c:	d206      	bcs.n	800593c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800592e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f009 fa29 	bl	800ed8c <HAL_PCD_DataOutStageCallback>
 800593a:	e005      	b.n	8005948 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005942:	4618      	mov	r0, r3
 8005944:	f006 fbef 	bl	800c126 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005948:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8117 	beq.w	8005b82 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005954:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	3310      	adds	r3, #16
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800597e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005982:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80059a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f040 80a1 	bne.w	8005aec <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80059aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80059b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8092 	beq.w	8005ade <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d046      	beq.n	8005a52 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d126      	bne.n	8005a1a <PCD_EP_ISR_Handler+0x50a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	00da      	lsls	r2, r3, #3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e061      	b.n	8005ade <PCD_EP_ISR_Handler+0x5ce>
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d15d      	bne.n	8005ade <PCD_EP_ISR_Handler+0x5ce>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	00da      	lsls	r2, r3, #3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	e045      	b.n	8005ade <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d126      	bne.n	8005aae <PCD_EP_ISR_Handler+0x59e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	4413      	add	r3, r2
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a86:	623b      	str	r3, [r7, #32]
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e017      	b.n	8005ade <PCD_EP_ISR_Handler+0x5ce>
 8005aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d113      	bne.n	8005ade <PCD_EP_ISR_Handler+0x5ce>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	4413      	add	r3, r2
 8005ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	00da      	lsls	r2, r3, #3
 8005ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ada:	2200      	movs	r2, #0
 8005adc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f009 f96c 	bl	800edc2 <HAL_PCD_DataInStageCallback>
 8005aea:	e04a      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005aec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d13f      	bne.n	8005b76 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d906      	bls.n	8005b34 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b2c:	1ad2      	subs	r2, r2, r3
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	e002      	b.n	8005b3a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005b34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b36:	2200      	movs	r2, #0
 8005b38:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f009 f93a 	bl	800edc2 <HAL_PCD_DataInStageCallback>
 8005b4e:	e018      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b56:	441a      	add	r2, r3
 8005b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005b62:	441a      	add	r2, r3
 8005b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b66:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f006 fad9 	bl	800c126 <USB_EPStartXfer>
 8005b74:	e005      	b.n	8005b82 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f917 	bl	8005db0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f6ff acc3 	blt.w	800551a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3748      	adds	r7, #72	@ 0x48
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b088      	sub	sp, #32
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d07c      	beq.n	8005cb0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	8b7b      	ldrh	r3, [r7, #26]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d306      	bcc.n	8005bf4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	8b7b      	ldrh	r3, [r7, #26]
 8005bec:	1ad2      	subs	r2, r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	619a      	str	r2, [r3, #24]
 8005bf2:	e002      	b.n	8005bfa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d123      	bne.n	8005c4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1c:	833b      	strh	r3, [r7, #24]
 8005c1e:	8b3b      	ldrh	r3, [r7, #24]
 8005c20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c24:	833b      	strh	r3, [r7, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	8b3b      	ldrh	r3, [r7, #24]
 8005c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01f      	beq.n	8005c94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	82fb      	strh	r3, [r7, #22]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	8afb      	ldrh	r3, [r7, #22]
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c94:	8b7b      	ldrh	r3, [r7, #26]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8085 	beq.w	8005da6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6959      	ldr	r1, [r3, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	891a      	ldrh	r2, [r3, #8]
 8005ca8:	8b7b      	ldrh	r3, [r7, #26]
 8005caa:	f007 f962 	bl	800cf72 <USB_ReadPMA>
 8005cae:	e07a      	b.n	8005da6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	8b7b      	ldrh	r3, [r7, #26]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d306      	bcc.n	8005cee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	8b7b      	ldrh	r3, [r7, #26]
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	619a      	str	r2, [r3, #24]
 8005cec:	e002      	b.n	8005cf4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d123      	bne.n	8005d44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	83fb      	strh	r3, [r7, #30]
 8005d18:	8bfb      	ldrh	r3, [r7, #30]
 8005d1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d1e:	83fb      	strh	r3, [r7, #30]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	8bfb      	ldrh	r3, [r7, #30]
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11f      	bne.n	8005d8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d68:	83bb      	strh	r3, [r7, #28]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	8bbb      	ldrh	r3, [r7, #28]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d8e:	8b7b      	ldrh	r3, [r7, #26]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6959      	ldr	r1, [r3, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	895a      	ldrh	r2, [r3, #10]
 8005da0:	8b7b      	ldrh	r3, [r7, #26]
 8005da2:	f007 f8e6 	bl	800cf72 <USB_ReadPMA>
    }
  }

  return count;
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b0a6      	sub	sp, #152	@ 0x98
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 81f7 	beq.w	80061b8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d907      	bls.n	8005e0e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	619a      	str	r2, [r3, #24]
 8005e0c:	e002      	b.n	8005e14 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f040 80e1 	bne.w	8005fe0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d126      	bne.n	8005e74 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	4413      	add	r3, r2
 8005e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	4413      	add	r3, r2
 8005e48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e01a      	b.n	8005eaa <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d116      	bne.n	8005eaa <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	4413      	add	r3, r2
 8005e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	00da      	lsls	r2, r3, #3
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d126      	bne.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x156>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	4413      	add	r3, r2
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	e017      	b.n	8005f36 <HAL_PCD_EP_DB_Transmit+0x186>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d113      	bne.n	8005f36 <HAL_PCD_EP_DB_Transmit+0x186>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	4413      	add	r3, r2
 8005f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	00da      	lsls	r2, r3, #3
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	4413      	add	r3, r2
 8005f2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	2200      	movs	r2, #0
 8005f34:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d123      	bne.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f58:	837b      	strh	r3, [r7, #26]
 8005f5a:	8b7b      	ldrh	r3, [r7, #26]
 8005f5c:	f083 0320 	eor.w	r3, r3, #32
 8005f60:	837b      	strh	r3, [r7, #26]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8b7b      	ldrh	r3, [r7, #26]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f008 ff18 	bl	800edc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01f      	beq.n	8005fdc <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb6:	833b      	strh	r3, [r7, #24]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	8b3b      	ldrh	r3, [r7, #24]
 8005fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e31f      	b.n	8006620 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d021      	beq.n	800602e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006034:	2b01      	cmp	r3, #1
 8006036:	f040 82ca 	bne.w	80065ce <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006042:	441a      	add	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006050:	441a      	add	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6a1a      	ldr	r2, [r3, #32]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d309      	bcc.n	8006076 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6a1a      	ldr	r2, [r3, #32]
 800606c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	621a      	str	r2, [r3, #32]
 8006074:	e015      	b.n	80060a2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800607e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006082:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800608c:	e009      	b.n	80060a2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d15f      	bne.n	800616a <HAL_PCD_EP_DB_Transmit+0x3ba>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060be:	4413      	add	r3, r2
 80060c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	00da      	lsls	r2, r3, #3
 80060c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <HAL_PCD_EP_DB_Transmit+0x34e>
 80060e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e051      	b.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80060fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006100:	2b3e      	cmp	r3, #62	@ 0x3e
 8006102:	d816      	bhi.n	8006132 <HAL_PCD_EP_DB_Transmit+0x382>
 8006104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	653b      	str	r3, [r7, #80]	@ 0x50
 800610a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_PCD_EP_DB_Transmit+0x36a>
 8006114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006116:	3301      	adds	r3, #1
 8006118:	653b      	str	r3, [r7, #80]	@ 0x50
 800611a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29a      	uxth	r2, r3
 8006120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	b29a      	uxth	r2, r3
 800612c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e037      	b.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	653b      	str	r3, [r7, #80]	@ 0x50
 8006138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	2b00      	cmp	r3, #0
 8006140:	d102      	bne.n	8006148 <HAL_PCD_EP_DB_Transmit+0x398>
 8006142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006144:	3b01      	subs	r3, #1
 8006146:	653b      	str	r3, [r7, #80]	@ 0x50
 8006148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e01b      	b.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d117      	bne.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006186:	4413      	add	r3, r2
 8006188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006192:	4413      	add	r3, r2
 8006194:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006198:	647b      	str	r3, [r7, #68]	@ 0x44
 800619a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800619c:	b29a      	uxth	r2, r3
 800619e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6959      	ldr	r1, [r3, #20]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	891a      	ldrh	r2, [r3, #8]
 80061ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f006 fe9c 	bl	800ceee <USB_WritePMA>
 80061b6:	e20a      	b.n	80065ce <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061dc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d307      	bcc.n	80061fc <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	619a      	str	r2, [r3, #24]
 80061fa:	e002      	b.n	8006202 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 80f6 	bne.w	80063f8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d126      	bne.n	8006262 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	677b      	str	r3, [r7, #116]	@ 0x74
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006222:	b29b      	uxth	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006228:	4413      	add	r3, r2
 800622a:	677b      	str	r3, [r7, #116]	@ 0x74
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	00da      	lsls	r2, r3, #3
 8006232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006234:	4413      	add	r3, r2
 8006236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800623a:	673b      	str	r3, [r7, #112]	@ 0x70
 800623c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006246:	b29a      	uxth	r2, r3
 8006248:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625a:	b29a      	uxth	r2, r3
 800625c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e01a      	b.n	8006298 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d116      	bne.n	8006298 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800627e:	4413      	add	r3, r2
 8006280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	00da      	lsls	r2, r3, #3
 8006288:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800628a:	4413      	add	r3, r2
 800628c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006290:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006294:	2200      	movs	r2, #0
 8006296:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d12f      	bne.n	8006308 <HAL_PCD_EP_DB_Transmit+0x558>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c0:	4413      	add	r3, r2
 80062c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	00da      	lsls	r2, r3, #3
 80062cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e01c      	b.n	8006342 <HAL_PCD_EP_DB_Transmit+0x592>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d118      	bne.n	8006342 <HAL_PCD_EP_DB_Transmit+0x592>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006318:	b29b      	uxth	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006320:	4413      	add	r3, r2
 8006322:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00da      	lsls	r2, r3, #3
 800632c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006330:	4413      	add	r3, r2
 8006332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800633a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800633e:	2200      	movs	r2, #0
 8006340:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	78db      	ldrb	r3, [r3, #3]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d127      	bne.n	800639a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006364:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006368:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800636c:	f083 0320 	eor.w	r3, r3, #32
 8006370:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800638a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f008 fd0e 	bl	800edc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e113      	b.n	8006620 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d121      	bne.n	8006446 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 80be 	bne.w	80065ce <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800645a:	441a      	add	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006468:	441a      	add	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	429a      	cmp	r2, r3
 8006478:	d309      	bcc.n	800648e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6a1a      	ldr	r2, [r3, #32]
 8006484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	621a      	str	r2, [r3, #32]
 800648c:	e015      	b.n	80064ba <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d107      	bne.n	80064a6 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006496:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800649a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064a4:	e009      	b.n	80064ba <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d15f      	bne.n	8006588 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064dc:	4413      	add	r3, r2
 80064de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00da      	lsls	r2, r3, #3
 80064e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_PCD_EP_DB_Transmit+0x76c>
 8006506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006514:	b29a      	uxth	r2, r3
 8006516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e04e      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x80a>
 800651c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800651e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006520:	d816      	bhi.n	8006550 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	663b      	str	r3, [r7, #96]	@ 0x60
 8006528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_PCD_EP_DB_Transmit+0x788>
 8006532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006534:	3301      	adds	r3, #1
 8006536:	663b      	str	r3, [r7, #96]	@ 0x60
 8006538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29a      	uxth	r2, r3
 800653e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	4313      	orrs	r3, r2
 8006548:	b29a      	uxth	r2, r3
 800654a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e034      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x80a>
 8006550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	663b      	str	r3, [r7, #96]	@ 0x60
 8006556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006560:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006562:	3b01      	subs	r3, #1
 8006564:	663b      	str	r3, [r7, #96]	@ 0x60
 8006566:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29a      	uxth	r2, r3
 800656c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29a      	uxth	r2, r3
 8006582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	e018      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x80a>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d114      	bne.n	80065ba <HAL_PCD_EP_DB_Transmit+0x80a>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800659e:	4413      	add	r3, r2
 80065a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	00da      	lsls	r2, r3, #3
 80065a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6959      	ldr	r1, [r3, #20]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	895a      	ldrh	r2, [r3, #10]
 80065c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f006 fc90 	bl	800ceee <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e8:	82fb      	strh	r3, [r7, #22]
 80065ea:	8afb      	ldrh	r3, [r7, #22]
 80065ec:	f083 0310 	eor.w	r3, r3, #16
 80065f0:	82fb      	strh	r3, [r7, #22]
 80065f2:	8afb      	ldrh	r3, [r7, #22]
 80065f4:	f083 0320 	eor.w	r3, r3, #32
 80065f8:	82fb      	strh	r3, [r7, #22]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	441a      	add	r2, r3
 8006608:	8afb      	ldrh	r3, [r7, #22]
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3798      	adds	r7, #152	@ 0x98
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	607b      	str	r3, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	817b      	strh	r3, [r7, #10]
 8006636:	4613      	mov	r3, r2
 8006638:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800663a:	897b      	ldrh	r3, [r7, #10]
 800663c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006646:	897b      	ldrh	r3, [r7, #10]
 8006648:	f003 0207 	and.w	r2, r3, #7
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	3310      	adds	r3, #16
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e009      	b.n	8006672 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800665e:	897a      	ldrh	r2, [r7, #10]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006672:	893b      	ldrh	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d107      	bne.n	8006688 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	b29a      	uxth	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	80da      	strh	r2, [r3, #6]
 8006686:	e00b      	b.n	80066a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2201      	movs	r2, #1
 800668c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	b29a      	uxth	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	b29a      	uxth	r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f043 0302 	orr.w	r3, r3, #2
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d141      	bne.n	8006796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006712:	4b4b      	ldr	r3, [pc, #300]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800671e:	d131      	bne.n	8006784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006720:	4b47      	ldr	r3, [pc, #284]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006726:	4a46      	ldr	r2, [pc, #280]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006730:	4b43      	ldr	r3, [pc, #268]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006738:	4a41      	ldr	r2, [pc, #260]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800673a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800673e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006740:	4b40      	ldr	r3, [pc, #256]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2232      	movs	r2, #50	@ 0x32
 8006746:	fb02 f303 	mul.w	r3, r2, r3
 800674a:	4a3f      	ldr	r2, [pc, #252]	@ (8006848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800674c:	fba2 2303 	umull	r2, r3, r2, r3
 8006750:	0c9b      	lsrs	r3, r3, #18
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006756:	e002      	b.n	800675e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3b01      	subs	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800675e:	4b38      	ldr	r3, [pc, #224]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676a:	d102      	bne.n	8006772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f2      	bne.n	8006758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677e:	d158      	bne.n	8006832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e057      	b.n	8006834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006784:	4b2e      	ldr	r3, [pc, #184]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678a:	4a2d      	ldr	r2, [pc, #180]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006794:	e04d      	b.n	8006832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679c:	d141      	bne.n	8006822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800679e:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067aa:	d131      	bne.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067ac:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b2:	4a23      	ldr	r2, [pc, #140]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067bc:	4b20      	ldr	r3, [pc, #128]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2232      	movs	r2, #50	@ 0x32
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067d8:	fba2 2303 	umull	r2, r3, r2, r3
 80067dc:	0c9b      	lsrs	r3, r3, #18
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e2:	e002      	b.n	80067ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ea:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f6:	d102      	bne.n	80067fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f2      	bne.n	80067e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680a:	d112      	bne.n	8006832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e011      	b.n	8006834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006816:	4a0a      	ldr	r2, [pc, #40]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800681c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006820:	e007      	b.n	8006832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006822:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800682a:	4a05      	ldr	r2, [pc, #20]	@ (8006840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006830:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40007000 	.word	0x40007000
 8006844:	20000000 	.word	0x20000000
 8006848:	431bde83 	.word	0x431bde83

0800684c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a04      	ldr	r2, [pc, #16]	@ (8006868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800685a:	6093      	str	r3, [r2, #8]
}
 800685c:	bf00      	nop
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40007000 	.word	0x40007000

0800686c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e2fe      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d075      	beq.n	8006976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800688a:	4b97      	ldr	r3, [pc, #604]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006894:	4b94      	ldr	r3, [pc, #592]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b0c      	cmp	r3, #12
 80068a2:	d102      	bne.n	80068aa <HAL_RCC_OscConfig+0x3e>
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d002      	beq.n	80068b0 <HAL_RCC_OscConfig+0x44>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d10b      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	4b8d      	ldr	r3, [pc, #564]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05b      	beq.n	8006974 <HAL_RCC_OscConfig+0x108>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d157      	bne.n	8006974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e2d9      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d0:	d106      	bne.n	80068e0 <HAL_RCC_OscConfig+0x74>
 80068d2:	4b85      	ldr	r3, [pc, #532]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a84      	ldr	r2, [pc, #528]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e01d      	b.n	800691c <HAL_RCC_OscConfig+0xb0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0x98>
 80068ea:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a7b      	ldr	r2, [pc, #492]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0xb0>
 8006904:	4b78      	ldr	r3, [pc, #480]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a77      	ldr	r2, [pc, #476]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 800690a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b75      	ldr	r3, [pc, #468]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a74      	ldr	r2, [pc, #464]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800691a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fc fdc4 	bl	80034b0 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fc fdc0 	bl	80034b0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	@ 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e29e      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800693e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0xc0>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fc fdb0 	bl	80034b0 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006954:	f7fc fdac 	bl	80034b0 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	@ 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e28a      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006966:	4b60      	ldr	r3, [pc, #384]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0xe8>
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d075      	beq.n	8006a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006982:	4b59      	ldr	r3, [pc, #356]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800698c:	4b56      	ldr	r3, [pc, #344]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d102      	bne.n	80069a2 <HAL_RCC_OscConfig+0x136>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d002      	beq.n	80069a8 <HAL_RCC_OscConfig+0x13c>
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d11f      	bne.n	80069e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_RCC_OscConfig+0x154>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e25d      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	4b49      	ldr	r3, [pc, #292]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	061b      	lsls	r3, r3, #24
 80069ce:	4946      	ldr	r1, [pc, #280]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80069d4:	4b45      	ldr	r3, [pc, #276]	@ (8006aec <HAL_RCC_OscConfig+0x280>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fc fd1d 	bl	8003418 <HAL_InitTick>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d043      	beq.n	8006a6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e249      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d023      	beq.n	8006a38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 80069f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fc:	f7fc fd58 	bl	80034b0 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a04:	f7fc fd54 	bl	80034b0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e232      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a16:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	492d      	ldr	r1, [pc, #180]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	604b      	str	r3, [r1, #4]
 8006a36:	e01a      	b.n	8006a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a44:	f7fc fd34 	bl	80034b0 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a4c:	f7fc fd30 	bl	80034b0 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e20e      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a5e:	4b22      	ldr	r3, [pc, #136]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f0      	bne.n	8006a4c <HAL_RCC_OscConfig+0x1e0>
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d041      	beq.n	8006afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01c      	beq.n	8006abc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b19      	ldr	r3, [pc, #100]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a92:	f7fc fd0d 	bl	80034b0 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a9a:	f7fc fd09 	bl	80034b0 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e1e7      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aac:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0ef      	beq.n	8006a9a <HAL_RCC_OscConfig+0x22e>
 8006aba:	e020      	b.n	8006afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006abc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac2:	4a09      	ldr	r2, [pc, #36]	@ (8006ae8 <HAL_RCC_OscConfig+0x27c>)
 8006ac4:	f023 0301 	bic.w	r3, r3, #1
 8006ac8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006acc:	f7fc fcf0 	bl	80034b0 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ad2:	e00d      	b.n	8006af0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad4:	f7fc fcec 	bl	80034b0 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d906      	bls.n	8006af0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e1ca      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
 8006ae6:	bf00      	nop
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006af0:	4b8c      	ldr	r3, [pc, #560]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1ea      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80a6 	beq.w	8006c58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b10:	4b84      	ldr	r3, [pc, #528]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_RCC_OscConfig+0x2b4>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <HAL_RCC_OscConfig+0x2b6>
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b26:	4b7f      	ldr	r3, [pc, #508]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b32:	4b7c      	ldr	r3, [pc, #496]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b42:	4b79      	ldr	r3, [pc, #484]	@ (8006d28 <HAL_RCC_OscConfig+0x4bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d118      	bne.n	8006b80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b4e:	4b76      	ldr	r3, [pc, #472]	@ (8006d28 <HAL_RCC_OscConfig+0x4bc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a75      	ldr	r2, [pc, #468]	@ (8006d28 <HAL_RCC_OscConfig+0x4bc>)
 8006b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b5a:	f7fc fca9 	bl	80034b0 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b62:	f7fc fca5 	bl	80034b0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e183      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b74:	4b6c      	ldr	r3, [pc, #432]	@ (8006d28 <HAL_RCC_OscConfig+0x4bc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d108      	bne.n	8006b9a <HAL_RCC_OscConfig+0x32e>
 8006b88:	4b66      	ldr	r3, [pc, #408]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8e:	4a65      	ldr	r2, [pc, #404]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b98:	e024      	b.n	8006be4 <HAL_RCC_OscConfig+0x378>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d110      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x358>
 8006ba2:	4b60      	ldr	r3, [pc, #384]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006baa:	f043 0304 	orr.w	r3, r3, #4
 8006bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bc2:	e00f      	b.n	8006be4 <HAL_RCC_OscConfig+0x378>
 8006bc4:	4b57      	ldr	r3, [pc, #348]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bca:	4a56      	ldr	r2, [pc, #344]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bd4:	4b53      	ldr	r3, [pc, #332]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	4a52      	ldr	r2, [pc, #328]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006bdc:	f023 0304 	bic.w	r3, r3, #4
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d016      	beq.n	8006c1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bec:	f7fc fc60 	bl	80034b0 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf2:	e00a      	b.n	8006c0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf4:	f7fc fc5c 	bl	80034b0 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e138      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c0a:	4b46      	ldr	r3, [pc, #280]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ed      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x388>
 8006c18:	e015      	b.n	8006c46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1a:	f7fc fc49 	bl	80034b0 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c22:	f7fc fc45 	bl	80034b0 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e121      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c38:	4b3a      	ldr	r3, [pc, #232]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1ed      	bne.n	8006c22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c46:	7ffb      	ldrb	r3, [r7, #31]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d105      	bne.n	8006c58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4c:	4b35      	ldr	r3, [pc, #212]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c50:	4a34      	ldr	r2, [pc, #208]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03c      	beq.n	8006cde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01c      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c72:	4a2c      	ldr	r2, [pc, #176]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7fc fc18 	bl	80034b0 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c84:	f7fc fc14 	bl	80034b0 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e0f2      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c96:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ef      	beq.n	8006c84 <HAL_RCC_OscConfig+0x418>
 8006ca4:	e01b      	b.n	8006cde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cac:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb6:	f7fc fbfb 	bl	80034b0 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cbe:	f7fc fbf7 	bl	80034b0 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0d5      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cd0:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1ef      	bne.n	8006cbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80c9 	beq.w	8006e7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	f000 8083 	beq.w	8006dfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d15e      	bne.n	8006dbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a08      	ldr	r2, [pc, #32]	@ (8006d24 <HAL_RCC_OscConfig+0x4b8>)
 8006d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0a:	f7fc fbd1 	bl	80034b0 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d10:	e00c      	b.n	8006d2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d12:	f7fc fbcd 	bl	80034b0 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d905      	bls.n	8006d2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e0ab      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d2c:	4b55      	ldr	r3, [pc, #340]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1ec      	bne.n	8006d12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d38:	4b52      	ldr	r3, [pc, #328]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	4b52      	ldr	r3, [pc, #328]	@ (8006e88 <HAL_RCC_OscConfig+0x61c>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6a11      	ldr	r1, [r2, #32]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	4311      	orrs	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006d52:	0212      	lsls	r2, r2, #8
 8006d54:	4311      	orrs	r1, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d5a:	0852      	lsrs	r2, r2, #1
 8006d5c:	3a01      	subs	r2, #1
 8006d5e:	0552      	lsls	r2, r2, #21
 8006d60:	4311      	orrs	r1, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d66:	0852      	lsrs	r2, r2, #1
 8006d68:	3a01      	subs	r2, #1
 8006d6a:	0652      	lsls	r2, r2, #25
 8006d6c:	4311      	orrs	r1, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006d72:	06d2      	lsls	r2, r2, #27
 8006d74:	430a      	orrs	r2, r1
 8006d76:	4943      	ldr	r1, [pc, #268]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d7c:	4b41      	ldr	r3, [pc, #260]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a40      	ldr	r2, [pc, #256]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d88:	4b3e      	ldr	r3, [pc, #248]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fc fb8c 	bl	80034b0 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fc fb88 	bl	80034b0 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e066      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dae:	4b35      	ldr	r3, [pc, #212]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f0      	beq.n	8006d9c <HAL_RCC_OscConfig+0x530>
 8006dba:	e05e      	b.n	8006e7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbc:	4b31      	ldr	r3, [pc, #196]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a30      	ldr	r2, [pc, #192]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fc fb72 	bl	80034b0 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fc fb6e 	bl	80034b0 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04c      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de2:	4b28      	ldr	r3, [pc, #160]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006dee:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	4924      	ldr	r1, [pc, #144]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006df4:	4b25      	ldr	r3, [pc, #148]	@ (8006e8c <HAL_RCC_OscConfig+0x620>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	60cb      	str	r3, [r1, #12]
 8006dfa:	e03e      	b.n	8006e7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e039      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e08:	4b1e      	ldr	r3, [pc, #120]	@ (8006e84 <HAL_RCC_OscConfig+0x618>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 0203 	and.w	r2, r3, #3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d12c      	bne.n	8006e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	3b01      	subs	r3, #1
 8006e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d123      	bne.n	8006e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d11b      	bne.n	8006e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d113      	bne.n	8006e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d109      	bne.n	8006e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40021000 	.word	0x40021000
 8006e88:	019f800c 	.word	0x019f800c
 8006e8c:	feeefffc 	.word	0xfeeefffc

08006e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e11e      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea8:	4b91      	ldr	r3, [pc, #580]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d910      	bls.n	8006ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 020f 	bic.w	r2, r3, #15
 8006ebe:	498c      	ldr	r1, [pc, #560]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e106      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d073      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d129      	bne.n	8006f40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eec:	4b81      	ldr	r3, [pc, #516]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0f4      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006efc:	f000 f99e 	bl	800723c <RCC_GetSysClockFreqFromPLLSource>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4a7c      	ldr	r2, [pc, #496]	@ (80070f8 <HAL_RCC_ClockConfig+0x268>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d93f      	bls.n	8006f8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d033      	beq.n	8006f8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d12f      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f2a:	4b72      	ldr	r3, [pc, #456]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f32:	4a70      	ldr	r2, [pc, #448]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f3a:	2380      	movs	r3, #128	@ 0x80
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e024      	b.n	8006f8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d107      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f48:	4b6a      	ldr	r3, [pc, #424]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0c6      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f58:	4b66      	ldr	r3, [pc, #408]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0be      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f68:	f000 f8ce 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4a61      	ldr	r2, [pc, #388]	@ (80070f8 <HAL_RCC_ClockConfig+0x268>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d909      	bls.n	8006f8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f76:	4b5f      	ldr	r3, [pc, #380]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f86:	2380      	movs	r3, #128	@ 0x80
 8006f88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f023 0203 	bic.w	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4957      	ldr	r1, [pc, #348]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f9c:	f7fc fa88 	bl	80034b0 <HAL_GetTick>
 8006fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa2:	e00a      	b.n	8006fba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa4:	f7fc fa84 	bl	80034b0 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e095      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fba:	4b4e      	ldr	r3, [pc, #312]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 020c 	and.w	r2, r3, #12
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d1eb      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d023      	beq.n	8007020 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fe4:	4b43      	ldr	r3, [pc, #268]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4a42      	ldr	r2, [pc, #264]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006fee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007004:	4a3b      	ldr	r2, [pc, #236]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8007006:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800700a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800700c:	4b39      	ldr	r3, [pc, #228]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4936      	ldr	r1, [pc, #216]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
 800701e:	e008      	b.n	8007032 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b80      	cmp	r3, #128	@ 0x80
 8007024:	d105      	bne.n	8007032 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007026:	4b33      	ldr	r3, [pc, #204]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	4a32      	ldr	r2, [pc, #200]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 800702c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007030:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007032:	4b2f      	ldr	r3, [pc, #188]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d21d      	bcs.n	800707c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007040:	4b2b      	ldr	r3, [pc, #172]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 020f 	bic.w	r2, r3, #15
 8007048:	4929      	ldr	r1, [pc, #164]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	4313      	orrs	r3, r2
 800704e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007050:	f7fc fa2e 	bl	80034b0 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	e00a      	b.n	800706e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007058:	f7fc fa2a 	bl	80034b0 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007066:	4293      	cmp	r3, r2
 8007068:	d901      	bls.n	800706e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e03b      	b.n	80070e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b20      	ldr	r3, [pc, #128]	@ (80070f0 <HAL_RCC_ClockConfig+0x260>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d1ed      	bne.n	8007058 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007088:	4b1a      	ldr	r3, [pc, #104]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	4917      	ldr	r1, [pc, #92]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070a6:	4b13      	ldr	r3, [pc, #76]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	490f      	ldr	r1, [pc, #60]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ba:	f000 f825 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 80070be:	4602      	mov	r2, r0
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <HAL_RCC_ClockConfig+0x264>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	091b      	lsrs	r3, r3, #4
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	490c      	ldr	r1, [pc, #48]	@ (80070fc <HAL_RCC_ClockConfig+0x26c>)
 80070cc:	5ccb      	ldrb	r3, [r1, r3]
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	fa22 f303 	lsr.w	r3, r2, r3
 80070d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007100 <HAL_RCC_ClockConfig+0x270>)
 80070d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070da:	4b0a      	ldr	r3, [pc, #40]	@ (8007104 <HAL_RCC_ClockConfig+0x274>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fc f99a 	bl	8003418 <HAL_InitTick>
 80070e4:	4603      	mov	r3, r0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40021000 	.word	0x40021000
 80070f8:	04c4b400 	.word	0x04c4b400
 80070fc:	0800fd4c 	.word	0x0800fd4c
 8007100:	20000000 	.word	0x20000000
 8007104:	20000004 	.word	0x20000004

08007108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800710e:	4b2c      	ldr	r3, [pc, #176]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b04      	cmp	r3, #4
 8007118:	d102      	bne.n	8007120 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800711a:	4b2a      	ldr	r3, [pc, #168]	@ (80071c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	e047      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007120:	4b27      	ldr	r3, [pc, #156]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 030c 	and.w	r3, r3, #12
 8007128:	2b08      	cmp	r3, #8
 800712a:	d102      	bne.n	8007132 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800712c:	4b26      	ldr	r3, [pc, #152]	@ (80071c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	e03e      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007132:	4b23      	ldr	r3, [pc, #140]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d136      	bne.n	80071ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800713e:	4b20      	ldr	r3, [pc, #128]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007148:	4b1d      	ldr	r3, [pc, #116]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	3301      	adds	r3, #1
 8007154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d10c      	bne.n	8007176 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800715c:	4a1a      	ldr	r2, [pc, #104]	@ (80071c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	4a16      	ldr	r2, [pc, #88]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007166:	68d2      	ldr	r2, [r2, #12]
 8007168:	0a12      	lsrs	r2, r2, #8
 800716a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	617b      	str	r3, [r7, #20]
      break;
 8007174:	e00c      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007176:	4a13      	ldr	r2, [pc, #76]	@ (80071c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	4a10      	ldr	r2, [pc, #64]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007180:	68d2      	ldr	r2, [r2, #12]
 8007182:	0a12      	lsrs	r2, r2, #8
 8007184:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007188:	fb02 f303 	mul.w	r3, r2, r3
 800718c:	617b      	str	r3, [r7, #20]
      break;
 800718e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007190:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	0e5b      	lsrs	r3, r3, #25
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	3301      	adds	r3, #1
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	e001      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071b0:	693b      	ldr	r3, [r7, #16]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40021000 	.word	0x40021000
 80071c4:	00f42400 	.word	0x00f42400
 80071c8:	016e3600 	.word	0x016e3600

080071cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071d0:	4b03      	ldr	r3, [pc, #12]	@ (80071e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071d2:	681b      	ldr	r3, [r3, #0]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20000000 	.word	0x20000000

080071e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80071e8:	f7ff fff0 	bl	80071cc <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4904      	ldr	r1, [pc, #16]	@ (800720c <HAL_RCC_GetPCLK1Freq+0x28>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40021000 	.word	0x40021000
 800720c:	0800fd5c 	.word	0x0800fd5c

08007210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007214:	f7ff ffda 	bl	80071cc <HAL_RCC_GetHCLKFreq>
 8007218:	4602      	mov	r2, r0
 800721a:	4b06      	ldr	r3, [pc, #24]	@ (8007234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	0adb      	lsrs	r3, r3, #11
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	4904      	ldr	r1, [pc, #16]	@ (8007238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007226:	5ccb      	ldrb	r3, [r1, r3]
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000
 8007238:	0800fd5c 	.word	0x0800fd5c

0800723c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007242:	4b1e      	ldr	r3, [pc, #120]	@ (80072bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800724c:	4b1b      	ldr	r3, [pc, #108]	@ (80072bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d10c      	bne.n	800727a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007260:	4a17      	ldr	r2, [pc, #92]	@ (80072c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	fbb2 f3f3 	udiv	r3, r2, r3
 8007268:	4a14      	ldr	r2, [pc, #80]	@ (80072bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800726a:	68d2      	ldr	r2, [r2, #12]
 800726c:	0a12      	lsrs	r2, r2, #8
 800726e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007272:	fb02 f303 	mul.w	r3, r2, r3
 8007276:	617b      	str	r3, [r7, #20]
    break;
 8007278:	e00c      	b.n	8007294 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800727a:	4a12      	ldr	r2, [pc, #72]	@ (80072c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007282:	4a0e      	ldr	r2, [pc, #56]	@ (80072bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007284:	68d2      	ldr	r2, [r2, #12]
 8007286:	0a12      	lsrs	r2, r2, #8
 8007288:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	617b      	str	r3, [r7, #20]
    break;
 8007292:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007294:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	0e5b      	lsrs	r3, r3, #25
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	3301      	adds	r3, #1
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072ae:	687b      	ldr	r3, [r7, #4]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40021000 	.word	0x40021000
 80072c0:	016e3600 	.word	0x016e3600
 80072c4:	00f42400 	.word	0x00f42400

080072c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072d0:	2300      	movs	r3, #0
 80072d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072d4:	2300      	movs	r3, #0
 80072d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8098 	beq.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072e6:	2300      	movs	r3, #0
 80072e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ea:	4b43      	ldr	r3, [pc, #268]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10d      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072f6:	4b40      	ldr	r3, [pc, #256]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fa:	4a3f      	ldr	r2, [pc, #252]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007300:	6593      	str	r3, [r2, #88]	@ 0x58
 8007302:	4b3d      	ldr	r3, [pc, #244]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800730a:	60bb      	str	r3, [r7, #8]
 800730c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800730e:	2301      	movs	r3, #1
 8007310:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007312:	4b3a      	ldr	r3, [pc, #232]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a39      	ldr	r2, [pc, #228]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800731e:	f7fc f8c7 	bl	80034b0 <HAL_GetTick>
 8007322:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007324:	e009      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007326:	f7fc f8c3 	bl	80034b0 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d902      	bls.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	74fb      	strb	r3, [r7, #19]
        break;
 8007338:	e005      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800733a:	4b30      	ldr	r3, [pc, #192]	@ (80073fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0ef      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007346:	7cfb      	ldrb	r3, [r7, #19]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d159      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800734c:	4b2a      	ldr	r3, [pc, #168]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007356:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01e      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	429a      	cmp	r2, r3
 8007366:	d019      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007368:	4b23      	ldr	r3, [pc, #140]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007374:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	4a1f      	ldr	r2, [pc, #124]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007384:	4b1c      	ldr	r3, [pc, #112]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	4a1b      	ldr	r2, [pc, #108]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800738c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007394:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a6:	f7fc f883 	bl	80034b0 <HAL_GetTick>
 80073aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ac:	e00b      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ae:	f7fc f87f 	bl	80034b0 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073bc:	4293      	cmp	r3, r2
 80073be:	d902      	bls.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	74fb      	strb	r3, [r7, #19]
            break;
 80073c4:	e006      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073c6:	4b0c      	ldr	r3, [pc, #48]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0ec      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073da:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e8:	4903      	ldr	r1, [pc, #12]	@ (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80073f0:	e008      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	74bb      	strb	r3, [r7, #18]
 80073f6:	e005      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073f8:	40021000 	.word	0x40021000
 80073fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007400:	7cfb      	ldrb	r3, [r7, #19]
 8007402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007404:	7c7b      	ldrb	r3, [r7, #17]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d105      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800740a:	4ba7      	ldr	r3, [pc, #668]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800740e:	4aa6      	ldr	r2, [pc, #664]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007414:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007422:	4ba1      	ldr	r3, [pc, #644]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007428:	f023 0203 	bic.w	r2, r3, #3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	499d      	ldr	r1, [pc, #628]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007444:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800744a:	f023 020c 	bic.w	r2, r3, #12
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	4995      	ldr	r1, [pc, #596]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007466:	4b90      	ldr	r3, [pc, #576]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800746c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	498c      	ldr	r1, [pc, #560]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007488:	4b87      	ldr	r3, [pc, #540]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4984      	ldr	r1, [pc, #528]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007498:	4313      	orrs	r3, r2
 800749a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074aa:	4b7f      	ldr	r3, [pc, #508]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	497b      	ldr	r1, [pc, #492]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074cc:	4b76      	ldr	r3, [pc, #472]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	4973      	ldr	r1, [pc, #460]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074ee:	4b6e      	ldr	r3, [pc, #440]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	496a      	ldr	r1, [pc, #424]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007510:	4b65      	ldr	r3, [pc, #404]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007516:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	4962      	ldr	r1, [pc, #392]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007532:	4b5d      	ldr	r3, [pc, #372]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	4959      	ldr	r1, [pc, #356]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007554:	4b54      	ldr	r3, [pc, #336]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	4951      	ldr	r1, [pc, #324]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007572:	2b00      	cmp	r3, #0
 8007574:	d015      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007576:	4b4c      	ldr	r3, [pc, #304]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	4948      	ldr	r1, [pc, #288]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007594:	d105      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007596:	4b44      	ldr	r3, [pc, #272]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	4a43      	ldr	r2, [pc, #268]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a0:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d015      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075ae:	4b3e      	ldr	r3, [pc, #248]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075bc:	493a      	ldr	r1, [pc, #232]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075cc:	d105      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075ce:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	4a35      	ldr	r2, [pc, #212]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d015      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075e6:	4b30      	ldr	r3, [pc, #192]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f4:	492c      	ldr	r1, [pc, #176]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007606:	4b28      	ldr	r3, [pc, #160]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	4a27      	ldr	r2, [pc, #156]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007610:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800761e:	4b22      	ldr	r3, [pc, #136]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	491e      	ldr	r1, [pc, #120]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800763c:	d105      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800763e:	4b1a      	ldr	r3, [pc, #104]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	4a19      	ldr	r2, [pc, #100]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007648:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d015      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007656:	4b14      	ldr	r3, [pc, #80]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007664:	4910      	ldr	r1, [pc, #64]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007674:	d105      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007676:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4a0b      	ldr	r2, [pc, #44]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007680:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d018      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800768e:	4b06      	ldr	r3, [pc, #24]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007694:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	4902      	ldr	r1, [pc, #8]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	e001      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80076a8:	40021000 	.word	0x40021000
 80076ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076b2:	d105      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076b4:	4b21      	ldr	r3, [pc, #132]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4a20      	ldr	r2, [pc, #128]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d015      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80076cc:	4b1b      	ldr	r3, [pc, #108]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	4918      	ldr	r1, [pc, #96]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ea:	d105      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076ec:	4b13      	ldr	r3, [pc, #76]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a12      	ldr	r2, [pc, #72]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d015      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007704:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800770a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007712:	490a      	ldr	r1, [pc, #40]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007722:	d105      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007724:	4b05      	ldr	r3, [pc, #20]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4a04      	ldr	r2, [pc, #16]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800772a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007730:	7cbb      	ldrb	r3, [r7, #18]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000

08007740 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007752:	d136      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007754:	4bb3      	ldr	r3, [pc, #716]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007760:	4bb0      	ldr	r3, [pc, #704]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d108      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007774:	d104      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8007776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	f000 bce6 	b.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007780:	4ba8      	ldr	r3, [pc, #672]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b02      	cmp	r3, #2
 800778c:	d108      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007794:	d104      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8007796:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	f000 bcd6 	b.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80077a0:	4ba0      	ldr	r3, [pc, #640]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ac:	f040 84ce 	bne.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b6:	f040 84c9 	bne.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 80077ba:	4b9b      	ldr	r3, [pc, #620]	@ (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	f000 bcc5 	b.w	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80077c2:	4b98      	ldr	r3, [pc, #608]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d10c      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077ce:	4b95      	ldr	r3, [pc, #596]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077da:	d102      	bne.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80077dc:	4b93      	ldr	r3, [pc, #588]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e017      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	e014      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80077e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d10c      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077f4:	4b8b      	ldr	r3, [pc, #556]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007800:	d102      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8007802:	4b8b      	ldr	r3, [pc, #556]	@ (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	e004      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	e001      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007812:	4b84      	ldr	r3, [pc, #528]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	3301      	adds	r3, #1
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800782c:	f000 843c 	beq.w	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007836:	f200 8464 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007840:	f000 83f7 	beq.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784a:	f200 845a 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007854:	f000 83b0 	beq.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785e:	f200 8450 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007868:	f000 8378 	beq.w	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007872:	f200 8446 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800787c:	f000 8335 	beq.w	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007886:	f200 843c 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007890:	f000 82f6 	beq.w	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	f200 8432 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a4:	f000 82a8 	beq.w	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ae:	f200 8428 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b8:	f000 825a 	beq.w	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c2:	f200 841e 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078cc:	f000 8214 	beq.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d6:	f200 8414 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e0:	f000 81e0 	beq.w	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ea:	f200 840a 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b80      	cmp	r3, #128	@ 0x80
 80078f2:	f000 81b2 	beq.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b80      	cmp	r3, #128	@ 0x80
 80078fa:	f200 8402 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b20      	cmp	r3, #32
 8007902:	d84b      	bhi.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 83fb 	beq.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3b01      	subs	r3, #1
 8007910:	2b1f      	cmp	r3, #31
 8007912:	f200 83f6 	bhi.w	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007916:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	080079a7 	.word	0x080079a7
 8007920:	08007a09 	.word	0x08007a09
 8007924:	08008103 	.word	0x08008103
 8007928:	08007a7d 	.word	0x08007a7d
 800792c:	08008103 	.word	0x08008103
 8007930:	08008103 	.word	0x08008103
 8007934:	08008103 	.word	0x08008103
 8007938:	08007adf 	.word	0x08007adf
 800793c:	08008103 	.word	0x08008103
 8007940:	08008103 	.word	0x08008103
 8007944:	08008103 	.word	0x08008103
 8007948:	08008103 	.word	0x08008103
 800794c:	08008103 	.word	0x08008103
 8007950:	08008103 	.word	0x08008103
 8007954:	08008103 	.word	0x08008103
 8007958:	08007b41 	.word	0x08007b41
 800795c:	08008103 	.word	0x08008103
 8007960:	08008103 	.word	0x08008103
 8007964:	08008103 	.word	0x08008103
 8007968:	08008103 	.word	0x08008103
 800796c:	08008103 	.word	0x08008103
 8007970:	08008103 	.word	0x08008103
 8007974:	08008103 	.word	0x08008103
 8007978:	08008103 	.word	0x08008103
 800797c:	08008103 	.word	0x08008103
 8007980:	08008103 	.word	0x08008103
 8007984:	08008103 	.word	0x08008103
 8007988:	08008103 	.word	0x08008103
 800798c:	08008103 	.word	0x08008103
 8007990:	08008103 	.word	0x08008103
 8007994:	08008103 	.word	0x08008103
 8007998:	08007ba9 	.word	0x08007ba9
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	f000 8136 	beq.w	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 80079a4:	e3ad      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 80079b8:	f7ff fc2a 	bl	8007210 <HAL_RCC_GetPCLK2Freq>
 80079bc:	61f8      	str	r0, [r7, #28]
      break;
 80079be:	e3a2      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d103      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 80079c6:	f7ff fb9f 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 80079ca:	61f8      	str	r0, [r7, #28]
      break;
 80079cc:	e39b      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079da:	d105      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d102      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 80079e2:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80079e4:	61fb      	str	r3, [r7, #28]
      break;
 80079e6:	e38e      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80079e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	f040 8387 	bne.w	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	f040 8383 	bne.w	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 8007a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a04:	61fb      	str	r3, [r7, #28]
      break;
 8007a06:	e37e      	b.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0e:	f003 030c 	and.w	r3, r3, #12
 8007a12:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007a1a:	f7ff fbe3 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007a1e:	61f8      	str	r0, [r7, #28]
      break;
 8007a20:	e373      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007a22:	bf00      	nop
 8007a24:	40021000 	.word	0x40021000
 8007a28:	000b71b0 	.word	0x000b71b0
 8007a2c:	00f42400 	.word	0x00f42400
 8007a30:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d103      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7ff fb65 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007a3e:	61f8      	str	r0, [r7, #28]
      break;
 8007a40:	e363      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007a42:	4ba3      	ldr	r3, [pc, #652]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a4e:	d105      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 8007a56:	4b9f      	ldr	r3, [pc, #636]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007a58:	61fb      	str	r3, [r7, #28]
      break;
 8007a5a:	e356      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	f040 834f 	bne.w	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b0c      	cmp	r3, #12
 8007a70:	f040 834b 	bne.w	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 8007a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a78:	61fb      	str	r3, [r7, #28]
      break;
 8007a7a:	e346      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007a7c:	4b94      	ldr	r3, [pc, #592]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a86:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007a8e:	f7ff fba9 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007a92:	61f8      	str	r0, [r7, #28]
      break;
 8007a94:	e33b      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d103      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8007a9c:	f7ff fb34 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007aa0:	61f8      	str	r0, [r7, #28]
      break;
 8007aa2:	e334      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab0:	d105      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d102      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 8007ab8:	4b86      	ldr	r3, [pc, #536]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007aba:	61fb      	str	r3, [r7, #28]
      break;
 8007abc:	e327      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007abe:	4b84      	ldr	r3, [pc, #528]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f040 8320 	bne.w	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b30      	cmp	r3, #48	@ 0x30
 8007ad2:	f040 831c 	bne.w	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 8007ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ada:	61fb      	str	r3, [r7, #28]
      break;
 8007adc:	e317      	b.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ade:	4b7c      	ldr	r3, [pc, #496]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ae8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007af0:	f7ff fb78 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007af4:	61f8      	str	r0, [r7, #28]
      break;
 8007af6:	e30c      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b40      	cmp	r3, #64	@ 0x40
 8007afc:	d103      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8007afe:	f7ff fb03 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007b02:	61f8      	str	r0, [r7, #28]
      break;
 8007b04:	e305      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007b06:	4b72      	ldr	r3, [pc, #456]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b12:	d105      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d102      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 8007b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b1c:	61fb      	str	r3, [r7, #28]
      break;
 8007b1e:	e2f8      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007b20:	4b6b      	ldr	r3, [pc, #428]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	f040 82f1 	bne.w	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b34:	f040 82ed 	bne.w	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 8007b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b3c:	61fb      	str	r3, [r7, #28]
      break;
 8007b3e:	e2e8      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b40:	4b63      	ldr	r3, [pc, #396]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d103      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b52:	f7ff fb47 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007b56:	61f8      	str	r0, [r7, #28]
      break;
 8007b58:	e2dd      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b60:	d103      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 8007b62:	f7ff fad1 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007b66:	61f8      	str	r0, [r7, #28]
      break;
 8007b68:	e2d5      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007b6a:	4b59      	ldr	r3, [pc, #356]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b76:	d106      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7e:	d102      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8007b80:	4b54      	ldr	r3, [pc, #336]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b82:	61fb      	str	r3, [r7, #28]
      break;
 8007b84:	e2c7      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007b86:	4b52      	ldr	r3, [pc, #328]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	f040 82c0 	bne.w	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b9c:	f040 82bb 	bne.w	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8007ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ba4:	61fb      	str	r3, [r7, #28]
      break;
 8007ba6:	e2b6      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007ba8:	4b49      	ldr	r3, [pc, #292]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bb2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d103      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007bba:	f7ff fb13 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007bbe:	61f8      	str	r0, [r7, #28]
      break;
 8007bc0:	e2ab      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc8:	d103      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 8007bca:	f7ff fa9d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007bce:	61f8      	str	r0, [r7, #28]
      break;
 8007bd0:	e2a3      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bde:	d106      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be6:	d102      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 8007be8:	4b3a      	ldr	r3, [pc, #232]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007bea:	61fb      	str	r3, [r7, #28]
      break;
 8007bec:	e295      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007bee:	4b38      	ldr	r3, [pc, #224]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f040 828e 	bne.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c04:	f040 8289 	bne.w	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 8007c08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c0c:	61fb      	str	r3, [r7, #28]
      break;
 8007c0e:	e284      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c10:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c1a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c22:	f7ff fadf 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007c26:	61f8      	str	r0, [r7, #28]
      break;
 8007c28:	e279      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c30:	d103      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8007c32:	f7ff fa69 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007c36:	61f8      	str	r0, [r7, #28]
      break;
 8007c38:	e271      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c3a:	4b25      	ldr	r3, [pc, #148]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c46:	f040 826a 	bne.w	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c50:	f040 8265 	bne.w	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 8007c54:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c56:	61fb      	str	r3, [r7, #28]
      break;
 8007c58:	e261      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c64:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c6c:	f7ff faba 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007c70:	61f8      	str	r0, [r7, #28]
      break;
 8007c72:	e256      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c7a:	d103      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8007c7c:	f7ff fa44 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007c80:	61f8      	str	r0, [r7, #28]
      break;
 8007c82:	e24e      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007c84:	4b12      	ldr	r3, [pc, #72]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c90:	f040 8247 	bne.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c9a:	f040 8242 	bne.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ca0:	61fb      	str	r3, [r7, #28]
      break;
 8007ca2:	e23e      	b.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007caa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cae:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7ff fa95 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007cba:	61f8      	str	r0, [r7, #28]
      break;
 8007cbc:	e233      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	d108      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 8007cc6:	f7ff fa1f 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007cca:	61f8      	str	r0, [r7, #28]
      break;
 8007ccc:	e22b      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8007cce:	bf00      	nop
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007cd8:	4b9b      	ldr	r3, [pc, #620]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ce4:	f040 821f 	bne.w	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cee:	f040 821a 	bne.w	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8007cf2:	4b96      	ldr	r3, [pc, #600]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007cf4:	61fb      	str	r3, [r7, #28]
      break;
 8007cf6:	e216      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007cf8:	4b93      	ldr	r3, [pc, #588]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007d02:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d0a:	f7ff fa6b 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007d0e:	61f8      	str	r0, [r7, #28]
      break;
 8007d10:	e20b      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007d12:	4b8d      	ldr	r3, [pc, #564]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d107      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d26:	d103      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 8007d28:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	e01e      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007d30:	4b85      	ldr	r3, [pc, #532]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d3c:	d106      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d44:	d102      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 8007d46:	4b81      	ldr	r3, [pc, #516]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	e010      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	f040 81e7 	bne.w	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d62:	f040 81e2 	bne.w	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 8007d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d6a:	61fb      	str	r3, [r7, #28]
      break;
 8007d6c:	e1dd      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8007d6e:	e1dc      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007d70:	4b75      	ldr	r3, [pc, #468]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007d7a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8007d82:	f7ff f9c1 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007d86:	61f8      	str	r0, [r7, #28]
      break;
 8007d88:	e1d1      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d90:	d11b      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007d92:	4b6d      	ldr	r3, [pc, #436]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 81c7 	beq.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007da0:	4b69      	ldr	r3, [pc, #420]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007daa:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	fb03 f202 	mul.w	r2, r3, r2
 8007db4:	4b64      	ldr	r3, [pc, #400]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	0d5b      	lsrs	r3, r3, #21
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc6:	61fb      	str	r3, [r7, #28]
      break;
 8007dc8:	e1b1      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd0:	d102      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007dd4:	61fb      	str	r3, [r7, #28]
      break;
 8007dd6:	e1aa      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8007dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de4:	f040 81a3 	bne.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dee:	f040 819e 	bne.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8007df2:	4b56      	ldr	r3, [pc, #344]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007df4:	61fb      	str	r3, [r7, #28]
      break;
 8007df6:	e19a      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007df8:	4b53      	ldr	r3, [pc, #332]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfe:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007e02:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 8007e0a:	f7ff f97d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8007e0e:	61f8      	str	r0, [r7, #28]
      break;
 8007e10:	e18f      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e18:	d11b      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8185 	beq.w	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007e28:	4b47      	ldr	r3, [pc, #284]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e32:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	fb03 f202 	mul.w	r2, r3, r2
 8007e3c:	4b42      	ldr	r3, [pc, #264]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	0d5b      	lsrs	r3, r3, #21
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	3301      	adds	r3, #1
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4e:	61fb      	str	r3, [r7, #28]
      break;
 8007e50:	e16f      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e58:	d102      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007e5c:	61fb      	str	r3, [r7, #28]
      break;
 8007e5e:	e168      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8007e60:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e6c:	f040 8161 	bne.w	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007e76:	f040 815c 	bne.w	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 8007e7a:	4b34      	ldr	r3, [pc, #208]	@ (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007e7c:	61fb      	str	r3, [r7, #28]
      break;
 8007e7e:	e158      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e80:	4b31      	ldr	r3, [pc, #196]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e86:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007e8a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e92:	d103      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e94:	f7ff f9a6 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8007e98:	61f8      	str	r0, [r7, #28]
      break;
 8007e9a:	e14c      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8007ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007ea4:	61fb      	str	r3, [r7, #28]
      break;
 8007ea6:	e146      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eae:	f040 8142 	bne.w	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007eb2:	4b25      	ldr	r3, [pc, #148]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 813b 	beq.w	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ec0:	4b21      	ldr	r3, [pc, #132]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	0a1b      	lsrs	r3, r3, #8
 8007ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eca:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	fb03 f202 	mul.w	r2, r3, r2
 8007ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	0d5b      	lsrs	r3, r3, #21
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	61fb      	str	r3, [r7, #28]
      break;
 8007ee8:	e125      	b.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007eea:	4b17      	ldr	r3, [pc, #92]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ef0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007ef4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007efc:	d114      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007efe:	4b12      	ldr	r3, [pc, #72]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f08:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	fb03 f202 	mul.w	r2, r3, r2
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	0d5b      	lsrs	r3, r3, #21
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	61fb      	str	r3, [r7, #28]
      break;
 8007f26:	e108      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8007f28:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	f040 8101 	bne.w	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f040 80fd 	bne.w	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 8007f40:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f42:	61fb      	str	r3, [r7, #28]
      break;
 8007f44:	e0f9      	b.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007f46:	bf00      	nop
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	00f42400 	.word	0x00f42400
 8007f50:	00bb8000 	.word	0x00bb8000
 8007f54:	016e3600 	.word	0x016e3600
 8007f58:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007f66:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f6e:	d114      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f70:	4b79      	ldr	r3, [pc, #484]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f7a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	fb03 f202 	mul.w	r2, r3, r2
 8007f84:	4b74      	ldr	r3, [pc, #464]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	0d5b      	lsrs	r3, r3, #21
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	3301      	adds	r3, #1
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	61fb      	str	r3, [r7, #28]
      break;
 8007f98:	e0d1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8007f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	f040 80ca 	bne.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 80c6 	bne.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8007fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8007fb4:	61fb      	str	r3, [r7, #28]
      break;
 8007fb6:	e0c2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8007fb8:	4b67      	ldr	r3, [pc, #412]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fc2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fca:	d129      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8007fcc:	4b62      	ldr	r3, [pc, #392]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80b4 	beq.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007fda:	4b5f      	ldr	r3, [pc, #380]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe4:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	0edb      	lsrs	r3, r3, #27
 8007fec:	f003 031f 	and.w	r3, r3, #31
 8007ff0:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007ff8:	4b57      	ldr	r3, [pc, #348]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008004:	2311      	movs	r3, #17
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e001      	b.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 800800a:	2307      	movs	r3, #7
 800800c:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	fb03 f202 	mul.w	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	61fb      	str	r3, [r7, #28]
      break;
 800801e:	e090      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008026:	f040 808c 	bne.w	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 800802a:	f7ff f86d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 800802e:	61f8      	str	r0, [r7, #28]
      break;
 8008030:	e087      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8008032:	4b49      	ldr	r3, [pc, #292]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008038:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800803c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008044:	d128      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008046:	4b44      	ldr	r3, [pc, #272]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d079      	beq.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008052:	4b41      	ldr	r3, [pc, #260]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800805e:	4b3e      	ldr	r3, [pc, #248]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	0edb      	lsrs	r3, r3, #27
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008070:	4b39      	ldr	r3, [pc, #228]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 800807c:	2311      	movs	r3, #17
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e001      	b.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 8008082:	2307      	movs	r3, #7
 8008084:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	fb03 f202 	mul.w	r2, r3, r2
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	61fb      	str	r3, [r7, #28]
      break;
 8008096:	e056      	b.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800809e:	d152      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 80080a0:	f7ff f832 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 80080a4:	61f8      	str	r0, [r7, #28]
      break;
 80080a6:	e04e      	b.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80080a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80080b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ba:	d114      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80080bc:	4b26      	ldr	r3, [pc, #152]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c6:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	fb03 f202 	mul.w	r2, r3, r2
 80080d0:	4b21      	ldr	r3, [pc, #132]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	0d5b      	lsrs	r3, r3, #21
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	3301      	adds	r3, #1
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	61fb      	str	r3, [r7, #28]
      break;
 80080e4:	e031      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ec:	d102      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 80080ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 80080f0:	61fb      	str	r3, [r7, #28]
      break;
 80080f2:	e02a      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d127      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 80080fa:	f7ff f805 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 80080fe:	61f8      	str	r0, [r7, #28]
      break;
 8008100:	e023      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008102:	bf00      	nop
 8008104:	e022      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008106:	bf00      	nop
 8008108:	e020      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800810a:	bf00      	nop
 800810c:	e01e      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800810e:	bf00      	nop
 8008110:	e01c      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008112:	bf00      	nop
 8008114:	e01a      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008116:	bf00      	nop
 8008118:	e018      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800811a:	bf00      	nop
 800811c:	e016      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800811e:	bf00      	nop
 8008120:	e014      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008122:	bf00      	nop
 8008124:	e012      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008126:	bf00      	nop
 8008128:	e010      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800812a:	bf00      	nop
 800812c:	e00e      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800812e:	bf00      	nop
 8008130:	e00c      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008132:	bf00      	nop
 8008134:	e00a      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008136:	bf00      	nop
 8008138:	e008      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800813a:	bf00      	nop
 800813c:	e006      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800813e:	bf00      	nop
 8008140:	e004      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008142:	bf00      	nop
 8008144:	e002      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008146:	bf00      	nop
 8008148:	e000      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800814a:	bf00      	nop
    }
  }

  return(frequency);
 800814c:	69fb      	ldr	r3, [r7, #28]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40021000 	.word	0x40021000
 800815c:	02dc6c00 	.word	0x02dc6c00
 8008160:	00f42400 	.word	0x00f42400

08008164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e09d      	b.n	80082b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d108      	bne.n	8008190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008186:	d009      	beq.n	800819c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	61da      	str	r2, [r3, #28]
 800818e:	e005      	b.n	800819c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7fa fab0 	bl	800271c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081dc:	d902      	bls.n	80081e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e002      	b.n	80081ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80081f2:	d007      	beq.n	8008204 <HAL_SPI_Init+0xa0>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008214:	431a      	orrs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	431a      	orrs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008246:	ea42 0103 	orr.w	r1, r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	f003 0204 	and.w	r2, r3, #4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008280:	ea42 0103 	orr.w	r1, r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	4613      	mov	r3, r2
 80082c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ca:	f7fb f8f1 	bl	80034b0 <HAL_GetTick>
 80082ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d001      	beq.n	80082e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80082e0:	2302      	movs	r3, #2
 80082e2:	e15c      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_SPI_Transmit+0x36>
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e154      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_SPI_Transmit+0x48>
 80082fe:	2302      	movs	r3, #2
 8008300:	e14d      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2203      	movs	r2, #3
 800830e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008354:	d10f      	bne.n	8008376 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d007      	beq.n	8008394 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008392:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800839c:	d952      	bls.n	8008444 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_SPI_Transmit+0xf2>
 80083a6:	8b7b      	ldrh	r3, [r7, #26]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d145      	bne.n	8008438 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	881a      	ldrh	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	1c9a      	adds	r2, r3, #2
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083d0:	e032      	b.n	8008438 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d112      	bne.n	8008406 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	1c9a      	adds	r2, r3, #2
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008404:	e018      	b.n	8008438 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008406:	f7fb f853 	bl	80034b0 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d803      	bhi.n	800841e <HAL_SPI_Transmit+0x164>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d102      	bne.n	8008424 <HAL_SPI_Transmit+0x16a>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e0b2      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1c7      	bne.n	80083d2 <HAL_SPI_Transmit+0x118>
 8008442:	e083      	b.n	800854c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_SPI_Transmit+0x198>
 800844c:	8b7b      	ldrh	r3, [r7, #26]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d177      	bne.n	8008542 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	d912      	bls.n	8008482 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008460:	881a      	ldrh	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846c:	1c9a      	adds	r2, r3, #2
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b02      	subs	r3, #2
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008480:	e05f      	b.n	8008542 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800849e:	b29b      	uxth	r3, r3
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084a8:	e04b      	b.n	8008542 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d12b      	bne.n	8008510 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d912      	bls.n	80084e8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	881a      	ldrh	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	1c9a      	adds	r2, r3, #2
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b02      	subs	r3, #2
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80084e6:	e02c      	b.n	8008542 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	7812      	ldrb	r2, [r2, #0]
 80084f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800850e:	e018      	b.n	8008542 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008510:	f7fa ffce 	bl	80034b0 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d803      	bhi.n	8008528 <HAL_SPI_Transmit+0x26e>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008526:	d102      	bne.n	800852e <HAL_SPI_Transmit+0x274>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e02d      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008546:	b29b      	uxth	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ae      	bne.n	80084aa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f947 	bl	80087e4 <SPI_EndRxTxTransaction>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2220      	movs	r2, #32
 8008560:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800859c:	2300      	movs	r3, #0
  }
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085b8:	f7fa ff7a 	bl	80034b0 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4413      	add	r3, r2
 80085c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085c8:	f7fa ff72 	bl	80034b0 <HAL_GetTick>
 80085cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085ce:	4b39      	ldr	r3, [pc, #228]	@ (80086b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	015b      	lsls	r3, r3, #5
 80085d4:	0d1b      	lsrs	r3, r3, #20
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	fb02 f303 	mul.w	r3, r2, r3
 80085dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085de:	e054      	b.n	800868a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d050      	beq.n	800868a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085e8:	f7fa ff62 	bl	80034b0 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d902      	bls.n	80085fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d13d      	bne.n	800867a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800860c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008616:	d111      	bne.n	800863c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008620:	d004      	beq.n	800862c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800862a:	d107      	bne.n	800863c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800863a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008644:	d10f      	bne.n	8008666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e017      	b.n	80086aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3b01      	subs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4013      	ands	r3, r2
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	429a      	cmp	r2, r3
 8008698:	bf0c      	ite	eq
 800869a:	2301      	moveq	r3, #1
 800869c:	2300      	movne	r3, #0
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d19b      	bne.n	80085e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3720      	adds	r7, #32
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000000 	.word	0x20000000

080086b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	@ 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086ca:	f7fa fef1 	bl	80034b0 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4413      	add	r3, r2
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80086da:	f7fa fee9 	bl	80034b0 <HAL_GetTick>
 80086de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086e8:	4b3d      	ldr	r3, [pc, #244]	@ (80087e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	00da      	lsls	r2, r3, #3
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	0d1b      	lsrs	r3, r3, #20
 80086f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008700:	e060      	b.n	80087c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008708:	d107      	bne.n	800871a <SPI_WaitFifoStateUntilTimeout+0x62>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008718:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d050      	beq.n	80087c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008722:	f7fa fec5 	bl	80034b0 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800872e:	429a      	cmp	r2, r3
 8008730:	d902      	bls.n	8008738 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d13d      	bne.n	80087b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008746:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008750:	d111      	bne.n	8008776 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800875a:	d004      	beq.n	8008766 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008764:	d107      	bne.n	8008776 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008774:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800877e:	d10f      	bne.n	80087a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800879e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e010      	b.n	80087d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4013      	ands	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d196      	bne.n	8008702 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3728      	adds	r7, #40	@ 0x28
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000000 	.word	0x20000000

080087e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff ff5b 	bl	80086b8 <SPI_WaitFifoStateUntilTimeout>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880c:	f043 0220 	orr.w	r2, r3, #32
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e027      	b.n	8008868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	2180      	movs	r1, #128	@ 0x80
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fec0 	bl	80085a8 <SPI_WaitFlagStateUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008832:	f043 0220 	orr.w	r2, r3, #32
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e014      	b.n	8008868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff34 	bl	80086b8 <SPI_WaitFifoStateUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e000      	b.n	8008868 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e049      	b.n	8008916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fa fbb8 	bl	800300c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f000 fa4c 	bl	8008d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d001      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e04f      	b.n	80089d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0201 	orr.w	r2, r2, #1
 800894e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a23      	ldr	r2, [pc, #140]	@ (80089e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01d      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008962:	d018      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a1f      	ldr	r2, [pc, #124]	@ (80089e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1e      	ldr	r2, [pc, #120]	@ (80089ec <HAL_TIM_Base_Start_IT+0xcc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a1c      	ldr	r2, [pc, #112]	@ (80089f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0x76>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a19      	ldr	r2, [pc, #100]	@ (80089f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d115      	bne.n	80089c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <HAL_TIM_Base_Start_IT+0xdc>)
 800899e:	4013      	ands	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	d015      	beq.n	80089d4 <HAL_TIM_Base_Start_IT+0xb4>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ae:	d011      	beq.n	80089d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c0:	e008      	b.n	80089d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	e000      	b.n	80089d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40000400 	.word	0x40000400
 80089ec:	40000800 	.word	0x40000800
 80089f0:	40013400 	.word	0x40013400
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40015000 	.word	0x40015000
 80089fc:	00010007 	.word	0x00010007

08008a00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0201 	bic.w	r2, r2, #1
 8008a16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a22:	4013      	ands	r3, r2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10f      	bne.n	8008a48 <HAL_TIM_Base_Stop_IT+0x48>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6a1a      	ldr	r2, [r3, #32]
 8008a2e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d107      	bne.n	8008a48 <HAL_TIM_Base_Stop_IT+0x48>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01b      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f06f 0202 	mvn.w	r2, #2
 8008a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f931 	bl	8008d10 <HAL_TIM_IC_CaptureCallback>
 8008aae:	e005      	b.n	8008abc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f923 	bl	8008cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f934 	bl	8008d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d020      	beq.n	8008b0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01b      	beq.n	8008b0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f06f 0204 	mvn.w	r2, #4
 8008ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f90b 	bl	8008d10 <HAL_TIM_IC_CaptureCallback>
 8008afa:	e005      	b.n	8008b08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8fd 	bl	8008cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f90e 	bl	8008d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f003 0308 	and.w	r3, r3, #8
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d020      	beq.n	8008b5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01b      	beq.n	8008b5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f06f 0208 	mvn.w	r2, #8
 8008b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8e5 	bl	8008d10 <HAL_TIM_IC_CaptureCallback>
 8008b46:	e005      	b.n	8008b54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8d7 	bl	8008cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8e8 	bl	8008d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d020      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d01b      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f06f 0210 	mvn.w	r2, #16
 8008b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2208      	movs	r2, #8
 8008b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f8bf 	bl	8008d10 <HAL_TIM_IC_CaptureCallback>
 8008b92:	e005      	b.n	8008ba0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f8b1 	bl	8008cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f8c2 	bl	8008d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f06f 0201 	mvn.w	r2, #1
 8008bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7f9 fcf9 	bl	80025bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00c      	beq.n	8008bf8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f9ec 	bl	8008fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00c      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d007      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9e4 	bl	8008fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00c      	beq.n	8008c40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f87c 	bl	8008d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00c      	beq.n	8008c64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0220 	mvn.w	r2, #32
 8008c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9ac 	bl	8008fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00c      	beq.n	8008c88 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f9b8 	bl	8008ff8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00c      	beq.n	8008cac <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f9b0 	bl	800900c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00c      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9a8 	bl	8009020 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00c      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d007      	beq.n	8008cf4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f9a0 	bl	8009034 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a48      	ldr	r2, [pc, #288]	@ (8008e80 <TIM_Base_SetConfig+0x134>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d013      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6a:	d00f      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a45      	ldr	r2, [pc, #276]	@ (8008e84 <TIM_Base_SetConfig+0x138>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00b      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a44      	ldr	r2, [pc, #272]	@ (8008e88 <TIM_Base_SetConfig+0x13c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d007      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a43      	ldr	r2, [pc, #268]	@ (8008e8c <TIM_Base_SetConfig+0x140>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d003      	beq.n	8008d8c <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a42      	ldr	r2, [pc, #264]	@ (8008e90 <TIM_Base_SetConfig+0x144>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d108      	bne.n	8008d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a37      	ldr	r2, [pc, #220]	@ (8008e80 <TIM_Base_SetConfig+0x134>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d01f      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dac:	d01b      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a34      	ldr	r2, [pc, #208]	@ (8008e84 <TIM_Base_SetConfig+0x138>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d017      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a33      	ldr	r2, [pc, #204]	@ (8008e88 <TIM_Base_SetConfig+0x13c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a32      	ldr	r2, [pc, #200]	@ (8008e8c <TIM_Base_SetConfig+0x140>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00f      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a32      	ldr	r2, [pc, #200]	@ (8008e94 <TIM_Base_SetConfig+0x148>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00b      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a31      	ldr	r2, [pc, #196]	@ (8008e98 <TIM_Base_SetConfig+0x14c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d007      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a30      	ldr	r2, [pc, #192]	@ (8008e9c <TIM_Base_SetConfig+0x150>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_Base_SetConfig+0x9a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2b      	ldr	r2, [pc, #172]	@ (8008e90 <TIM_Base_SetConfig+0x144>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d108      	bne.n	8008df8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <TIM_Base_SetConfig+0x134>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d013      	beq.n	8008e4c <TIM_Base_SetConfig+0x100>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <TIM_Base_SetConfig+0x140>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00f      	beq.n	8008e4c <TIM_Base_SetConfig+0x100>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a19      	ldr	r2, [pc, #100]	@ (8008e94 <TIM_Base_SetConfig+0x148>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00b      	beq.n	8008e4c <TIM_Base_SetConfig+0x100>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a18      	ldr	r2, [pc, #96]	@ (8008e98 <TIM_Base_SetConfig+0x14c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d007      	beq.n	8008e4c <TIM_Base_SetConfig+0x100>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a17      	ldr	r2, [pc, #92]	@ (8008e9c <TIM_Base_SetConfig+0x150>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d003      	beq.n	8008e4c <TIM_Base_SetConfig+0x100>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a12      	ldr	r2, [pc, #72]	@ (8008e90 <TIM_Base_SetConfig+0x144>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d103      	bne.n	8008e54 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d105      	bne.n	8008e72 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f023 0201 	bic.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]
  }
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40013400 	.word	0x40013400
 8008e90:	40015000 	.word	0x40015000
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e06f      	b.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a31      	ldr	r2, [pc, #196]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d009      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a30      	ldr	r2, [pc, #192]	@ (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d004      	beq.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8008fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d108      	bne.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008efc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d01d      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f38:	d018      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00e      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a15      	ldr	r2, [pc, #84]	@ (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d009      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a16      	ldr	r2, [pc, #88]	@ (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a11      	ldr	r2, [pc, #68]	@ (8008fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d10c      	bne.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40013400 	.word	0x40013400
 8008fac:	40015000 	.word	0x40015000
 8008fb0:	40000400 	.word	0x40000400
 8008fb4:	40000800 	.word	0x40000800
 8008fb8:	40014000 	.word	0x40014000

08008fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e042      	b.n	80090e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fa f843 	bl	80030f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2224      	movs	r2, #36	@ 0x24
 8009076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0201 	bic.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 ff60 	bl	8009f58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc61 	bl	8009960 <UART_SetConfig>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e01b      	b.n	80090e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ffdf 	bl	800a09c <UART_CheckIdleState>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d17b      	bne.n	80091fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_UART_Transmit+0x26>
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e074      	b.n	80091fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2221      	movs	r2, #33	@ 0x21
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009122:	f7fa f9c5 	bl	80034b0 <HAL_GetTick>
 8009126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	88fa      	ldrh	r2, [r7, #6]
 8009134:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009140:	d108      	bne.n	8009154 <HAL_UART_Transmit+0x6c>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e003      	b.n	800915c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800915c:	e030      	b.n	80091c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	2180      	movs	r1, #128	@ 0x80
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f001 f841 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e03d      	b.n	80091fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009194:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	3302      	adds	r3, #2
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	e007      	b.n	80091ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	781a      	ldrb	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	3301      	adds	r3, #1
 80091ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1c8      	bne.n	800915e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2200      	movs	r2, #0
 80091d4:	2140      	movs	r1, #64	@ 0x40
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f001 f80a 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e006      	b.n	80091fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e000      	b.n	80091fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	@ 0x28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009218:	2b20      	cmp	r3, #32
 800921a:	d137      	bne.n	800928c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <HAL_UART_Receive_IT+0x24>
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e030      	b.n	800928e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a18      	ldr	r2, [pc, #96]	@ (8009298 <HAL_UART_Receive_IT+0x94>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d01f      	beq.n	800927c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d018      	beq.n	800927c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	613b      	str	r3, [r7, #16]
   return(result);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800925e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69f9      	ldr	r1, [r7, #28]
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	61bb      	str	r3, [r7, #24]
   return(result);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e6      	bne.n	800924a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	461a      	mov	r2, r3
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 f822 	bl	800a2cc <UART_Start_Receive_IT>
 8009288:	4603      	mov	r3, r0
 800928a:	e000      	b.n	800928e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3728      	adds	r7, #40	@ 0x28
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40008000 	.word	0x40008000

0800929c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b0ba      	sub	sp, #232	@ 0xe8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80092c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80092ca:	4013      	ands	r3, r2
 80092cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80092d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11b      	bne.n	8009310 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d015      	beq.n	8009310 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d105      	bne.n	80092fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8300 	beq.w	8009906 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
      }
      return;
 800930e:	e2fa      	b.n	8009906 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8123 	beq.w	8009560 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800931a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800931e:	4b8d      	ldr	r3, [pc, #564]	@ (8009554 <HAL_UART_IRQHandler+0x2b8>)
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800932a:	4b8b      	ldr	r3, [pc, #556]	@ (8009558 <HAL_UART_IRQHandler+0x2bc>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8116 	beq.w	8009560 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HAL_UART_IRQHandler+0xc8>
 8009340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2201      	movs	r2, #1
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	f043 0201 	orr.w	r2, r3, #1
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d011      	beq.n	8009394 <HAL_UART_IRQHandler+0xf8>
 8009370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2202      	movs	r2, #2
 8009382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938a:	f043 0204 	orr.w	r2, r3, #4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d011      	beq.n	80093c4 <HAL_UART_IRQHandler+0x128>
 80093a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2204      	movs	r2, #4
 80093b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d017      	beq.n	8009400 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d105      	bne.n	80093e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80093e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009554 <HAL_UART_IRQHandler+0x2b8>)
 80093e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2208      	movs	r2, #8
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	f043 0208 	orr.w	r2, r3, #8
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <HAL_UART_IRQHandler+0x196>
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00c      	beq.n	8009432 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f043 0220 	orr.w	r2, r3, #32
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 8266 	beq.w	800990a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800944a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800945a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009478:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d005      	beq.n	8009496 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800948a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800948e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009492:	2b00      	cmp	r3, #0
 8009494:	d054      	beq.n	8009540 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f83a 	bl	800a510 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d146      	bne.n	8009538 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1d9      	bne.n	80094aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d017      	beq.n	8009530 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009506:	4a15      	ldr	r2, [pc, #84]	@ (800955c <HAL_UART_IRQHandler+0x2c0>)
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009510:	4618      	mov	r0, r3
 8009512:	f7fa fa0c 	bl	800392e <HAL_DMA_Abort_IT>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d019      	beq.n	8009550 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800952a:	4610      	mov	r0, r2
 800952c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952e:	e00f      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f9ff 	bl	8009934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009536:	e00b      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9fb 	bl	8009934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953e:	e007      	b.n	8009550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f9f7 	bl	8009934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800954e:	e1dc      	b.n	800990a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	bf00      	nop
    return;
 8009552:	e1da      	b.n	800990a <HAL_UART_IRQHandler+0x66e>
 8009554:	10000001 	.word	0x10000001
 8009558:	04000120 	.word	0x04000120
 800955c:	0800a5dd 	.word	0x0800a5dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009564:	2b01      	cmp	r3, #1
 8009566:	f040 8170 	bne.w	800984a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8169 	beq.w	800984a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8162 	beq.w	800984a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2210      	movs	r2, #16
 800958c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009598:	2b40      	cmp	r3, #64	@ 0x40
 800959a:	f040 80d8 	bne.w	800974e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 80af 	beq.w	8009714 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095c0:	429a      	cmp	r2, r3
 80095c2:	f080 80a7 	bcs.w	8009714 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 8087 	bne.w	80096f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800960e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800961a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1da      	bne.n	80095e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800963e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800965a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800967a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800967c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800968e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800969c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e3      	bne.n	800966a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c0:	f023 0310 	bic.w	r3, r3, #16
 80096c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e4      	bne.n	80096b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fa f8c5 	bl	800387c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009704:	b29b      	uxth	r3, r3
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f91b 	bl	8009948 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009712:	e0fc      	b.n	800990e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800971a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800971e:	429a      	cmp	r2, r3
 8009720:	f040 80f5 	bne.w	800990e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b20      	cmp	r3, #32
 8009734:	f040 80eb 	bne.w	800990e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f8fe 	bl	8009948 <HAL_UARTEx_RxEventCallback>
      return;
 800974c:	e0df      	b.n	800990e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800975a:	b29b      	uxth	r3, r3
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80d1 	beq.w	8009912 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80cc 	beq.w	8009912 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800978a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800978e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800979c:	647b      	str	r3, [r7, #68]	@ 0x44
 800979e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e4      	bne.n	800977a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	623b      	str	r3, [r7, #32]
   return(result);
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097c6:	f023 0301 	bic.w	r3, r3, #1
 80097ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80097d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80097da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e1      	bne.n	80097b0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	60fb      	str	r3, [r7, #12]
   return(result);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f023 0310 	bic.w	r3, r3, #16
 8009814:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	617b      	str	r3, [r7, #20]
   return(result);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e4      	bne.n	8009800 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800983c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f880 	bl	8009948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009848:	e063      	b.n	8009912 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800984a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00e      	beq.n	8009874 <HAL_UART_IRQHandler+0x5d8>
 8009856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800985a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d008      	beq.n	8009874 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800986a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fc13 	bl	800b098 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009872:	e051      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800987c:	2b00      	cmp	r3, #0
 800987e:	d014      	beq.n	80098aa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800988c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d008      	beq.n	80098aa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800989c:	2b00      	cmp	r3, #0
 800989e:	d03a      	beq.n	8009916 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
    }
    return;
 80098a8:	e035      	b.n	8009916 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <HAL_UART_IRQHandler+0x62e>
 80098b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fe9c 	bl	800a600 <UART_EndTransmit_IT>
    return;
 80098c8:	e026      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <HAL_UART_IRQHandler+0x64e>
 80098d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 fbec 	bl	800b0c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098e8:	e016      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d010      	beq.n	8009918 <HAL_UART_IRQHandler+0x67c>
 80098f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	da0c      	bge.n	8009918 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fbd4 	bl	800b0ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009904:	e008      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
      return;
 8009906:	bf00      	nop
 8009908:	e006      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
    return;
 800990a:	bf00      	nop
 800990c:	e004      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
      return;
 800990e:	bf00      	nop
 8009910:	e002      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
      return;
 8009912:	bf00      	nop
 8009914:	e000      	b.n	8009918 <HAL_UART_IRQHandler+0x67c>
    return;
 8009916:	bf00      	nop
  }
}
 8009918:	37e8      	adds	r7, #232	@ 0xe8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop

08009920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009964:	b08c      	sub	sp, #48	@ 0x30
 8009966:	af00      	add	r7, sp, #0
 8009968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	431a      	orrs	r2, r3
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	431a      	orrs	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	4313      	orrs	r3, r2
 8009986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4baa      	ldr	r3, [pc, #680]	@ (8009c38 <UART_SetConfig+0x2d8>)
 8009990:	4013      	ands	r3, r2
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	6812      	ldr	r2, [r2, #0]
 8009996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009998:	430b      	orrs	r3, r1
 800999a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	68da      	ldr	r2, [r3, #12]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a9f      	ldr	r2, [pc, #636]	@ (8009c3c <UART_SetConfig+0x2dc>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d004      	beq.n	80099cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c8:	4313      	orrs	r3, r2
 80099ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80099d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	6812      	ldr	r2, [r2, #0]
 80099de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099e0:	430b      	orrs	r3, r1
 80099e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ea:	f023 010f 	bic.w	r1, r3, #15
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	430a      	orrs	r2, r1
 80099f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a90      	ldr	r2, [pc, #576]	@ (8009c40 <UART_SetConfig+0x2e0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d125      	bne.n	8009a50 <UART_SetConfig+0xf0>
 8009a04:	4b8f      	ldr	r3, [pc, #572]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d81a      	bhi.n	8009a48 <UART_SetConfig+0xe8>
 8009a12:	a201      	add	r2, pc, #4	@ (adr r2, 8009a18 <UART_SetConfig+0xb8>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a39 	.word	0x08009a39
 8009a20:	08009a31 	.word	0x08009a31
 8009a24:	08009a41 	.word	0x08009a41
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2e:	e116      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009a30:	2302      	movs	r3, #2
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a36:	e112      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3e:	e10e      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009a40:	2308      	movs	r3, #8
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a46:	e10a      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4e:	e106      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a7c      	ldr	r2, [pc, #496]	@ (8009c48 <UART_SetConfig+0x2e8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d138      	bne.n	8009acc <UART_SetConfig+0x16c>
 8009a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a60:	f003 030c 	and.w	r3, r3, #12
 8009a64:	2b0c      	cmp	r3, #12
 8009a66:	d82d      	bhi.n	8009ac4 <UART_SetConfig+0x164>
 8009a68:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <UART_SetConfig+0x110>)
 8009a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6e:	bf00      	nop
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009ac5 	.word	0x08009ac5
 8009a78:	08009ac5 	.word	0x08009ac5
 8009a7c:	08009ac5 	.word	0x08009ac5
 8009a80:	08009ab5 	.word	0x08009ab5
 8009a84:	08009ac5 	.word	0x08009ac5
 8009a88:	08009ac5 	.word	0x08009ac5
 8009a8c:	08009ac5 	.word	0x08009ac5
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009ac5 	.word	0x08009ac5
 8009a98:	08009ac5 	.word	0x08009ac5
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aaa:	e0d8      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009aac:	2302      	movs	r3, #2
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e0d4      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aba:	e0d0      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009abc:	2308      	movs	r3, #8
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e0cc      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e0c8      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8009c4c <UART_SetConfig+0x2ec>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d125      	bne.n	8009b22 <UART_SetConfig+0x1c2>
 8009ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ae0:	2b30      	cmp	r3, #48	@ 0x30
 8009ae2:	d016      	beq.n	8009b12 <UART_SetConfig+0x1b2>
 8009ae4:	2b30      	cmp	r3, #48	@ 0x30
 8009ae6:	d818      	bhi.n	8009b1a <UART_SetConfig+0x1ba>
 8009ae8:	2b20      	cmp	r3, #32
 8009aea:	d00a      	beq.n	8009b02 <UART_SetConfig+0x1a2>
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d814      	bhi.n	8009b1a <UART_SetConfig+0x1ba>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <UART_SetConfig+0x19a>
 8009af4:	2b10      	cmp	r3, #16
 8009af6:	d008      	beq.n	8009b0a <UART_SetConfig+0x1aa>
 8009af8:	e00f      	b.n	8009b1a <UART_SetConfig+0x1ba>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b00:	e0ad      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b02:	2302      	movs	r3, #2
 8009b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b08:	e0a9      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b0a:	2304      	movs	r3, #4
 8009b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b10:	e0a5      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b12:	2308      	movs	r3, #8
 8009b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b18:	e0a1      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b20:	e09d      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a4a      	ldr	r2, [pc, #296]	@ (8009c50 <UART_SetConfig+0x2f0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d125      	bne.n	8009b78 <UART_SetConfig+0x218>
 8009b2c:	4b45      	ldr	r3, [pc, #276]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b38:	d016      	beq.n	8009b68 <UART_SetConfig+0x208>
 8009b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b3c:	d818      	bhi.n	8009b70 <UART_SetConfig+0x210>
 8009b3e:	2b80      	cmp	r3, #128	@ 0x80
 8009b40:	d00a      	beq.n	8009b58 <UART_SetConfig+0x1f8>
 8009b42:	2b80      	cmp	r3, #128	@ 0x80
 8009b44:	d814      	bhi.n	8009b70 <UART_SetConfig+0x210>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <UART_SetConfig+0x1f0>
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d008      	beq.n	8009b60 <UART_SetConfig+0x200>
 8009b4e:	e00f      	b.n	8009b70 <UART_SetConfig+0x210>
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e082      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e07e      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b60:	2304      	movs	r3, #4
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e07a      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b68:	2308      	movs	r3, #8
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	e076      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b70:	2310      	movs	r3, #16
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b76:	e072      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a35      	ldr	r2, [pc, #212]	@ (8009c54 <UART_SetConfig+0x2f4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d12a      	bne.n	8009bd8 <UART_SetConfig+0x278>
 8009b82:	4b30      	ldr	r3, [pc, #192]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b90:	d01a      	beq.n	8009bc8 <UART_SetConfig+0x268>
 8009b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b96:	d81b      	bhi.n	8009bd0 <UART_SetConfig+0x270>
 8009b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b9c:	d00c      	beq.n	8009bb8 <UART_SetConfig+0x258>
 8009b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba2:	d815      	bhi.n	8009bd0 <UART_SetConfig+0x270>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <UART_SetConfig+0x250>
 8009ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bac:	d008      	beq.n	8009bc0 <UART_SetConfig+0x260>
 8009bae:	e00f      	b.n	8009bd0 <UART_SetConfig+0x270>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb6:	e052      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bbe:	e04e      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc6:	e04a      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bce:	e046      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd6:	e042      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a17      	ldr	r2, [pc, #92]	@ (8009c3c <UART_SetConfig+0x2dc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d13a      	bne.n	8009c58 <UART_SetConfig+0x2f8>
 8009be2:	4b18      	ldr	r3, [pc, #96]	@ (8009c44 <UART_SetConfig+0x2e4>)
 8009be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf0:	d01a      	beq.n	8009c28 <UART_SetConfig+0x2c8>
 8009bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf6:	d81b      	bhi.n	8009c30 <UART_SetConfig+0x2d0>
 8009bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bfc:	d00c      	beq.n	8009c18 <UART_SetConfig+0x2b8>
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c02:	d815      	bhi.n	8009c30 <UART_SetConfig+0x2d0>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <UART_SetConfig+0x2b0>
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c0c:	d008      	beq.n	8009c20 <UART_SetConfig+0x2c0>
 8009c0e:	e00f      	b.n	8009c30 <UART_SetConfig+0x2d0>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c16:	e022      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1e:	e01e      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c26:	e01a      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2e:	e016      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c36:	e012      	b.n	8009c5e <UART_SetConfig+0x2fe>
 8009c38:	cfff69f3 	.word	0xcfff69f3
 8009c3c:	40008000 	.word	0x40008000
 8009c40:	40013800 	.word	0x40013800
 8009c44:	40021000 	.word	0x40021000
 8009c48:	40004400 	.word	0x40004400
 8009c4c:	40004800 	.word	0x40004800
 8009c50:	40004c00 	.word	0x40004c00
 8009c54:	40005000 	.word	0x40005000
 8009c58:	2310      	movs	r3, #16
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4aae      	ldr	r2, [pc, #696]	@ (8009f1c <UART_SetConfig+0x5bc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	f040 8097 	bne.w	8009d98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	d823      	bhi.n	8009cba <UART_SetConfig+0x35a>
 8009c72:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <UART_SetConfig+0x318>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c9d 	.word	0x08009c9d
 8009c7c:	08009cbb 	.word	0x08009cbb
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cbb 	.word	0x08009cbb
 8009c88:	08009cab 	.word	0x08009cab
 8009c8c:	08009cbb 	.word	0x08009cbb
 8009c90:	08009cbb 	.word	0x08009cbb
 8009c94:	08009cbb 	.word	0x08009cbb
 8009c98:	08009cb3 	.word	0x08009cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c9c:	f7fd faa2 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8009ca0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca2:	e010      	b.n	8009cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca4:	4b9e      	ldr	r3, [pc, #632]	@ (8009f20 <UART_SetConfig+0x5c0>)
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca8:	e00d      	b.n	8009cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009caa:	f7fd fa2d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8009cae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cb0:	e009      	b.n	8009cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cb8:	e005      	b.n	8009cc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f000 8130 	beq.w	8009f2e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd2:	4a94      	ldr	r2, [pc, #592]	@ (8009f24 <UART_SetConfig+0x5c4>)
 8009cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4413      	add	r3, r2
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d305      	bcc.n	8009cfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d903      	bls.n	8009d06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d04:	e113      	b.n	8009f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	2200      	movs	r2, #0
 8009d0a:	60bb      	str	r3, [r7, #8]
 8009d0c:	60fa      	str	r2, [r7, #12]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	4a84      	ldr	r2, [pc, #528]	@ (8009f24 <UART_SetConfig+0x5c4>)
 8009d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	603b      	str	r3, [r7, #0]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d28:	f7f6 febc 	bl	8000aa4 <__aeabi_uldivmod>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4610      	mov	r0, r2
 8009d32:	4619      	mov	r1, r3
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	020b      	lsls	r3, r1, #8
 8009d3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d42:	0202      	lsls	r2, r0, #8
 8009d44:	6979      	ldr	r1, [r7, #20]
 8009d46:	6849      	ldr	r1, [r1, #4]
 8009d48:	0849      	lsrs	r1, r1, #1
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	4605      	mov	r5, r0
 8009d50:	eb12 0804 	adds.w	r8, r2, r4
 8009d54:	eb43 0905 	adc.w	r9, r3, r5
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	469a      	mov	sl, r3
 8009d60:	4693      	mov	fp, r2
 8009d62:	4652      	mov	r2, sl
 8009d64:	465b      	mov	r3, fp
 8009d66:	4640      	mov	r0, r8
 8009d68:	4649      	mov	r1, r9
 8009d6a:	f7f6 fe9b 	bl	8000aa4 <__aeabi_uldivmod>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4613      	mov	r3, r2
 8009d74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d7c:	d308      	bcc.n	8009d90 <UART_SetConfig+0x430>
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d84:	d204      	bcs.n	8009d90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6a3a      	ldr	r2, [r7, #32]
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e0ce      	b.n	8009f2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d96:	e0ca      	b.n	8009f2e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da0:	d166      	bne.n	8009e70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009da2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009da6:	2b08      	cmp	r3, #8
 8009da8:	d827      	bhi.n	8009dfa <UART_SetConfig+0x49a>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <UART_SetConfig+0x450>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009de5 	.word	0x08009de5
 8009dbc:	08009dfb 	.word	0x08009dfb
 8009dc0:	08009deb 	.word	0x08009deb
 8009dc4:	08009dfb 	.word	0x08009dfb
 8009dc8:	08009dfb 	.word	0x08009dfb
 8009dcc:	08009dfb 	.word	0x08009dfb
 8009dd0:	08009df3 	.word	0x08009df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd4:	f7fd fa06 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8009dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dda:	e014      	b.n	8009e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ddc:	f7fd fa18 	bl	8007210 <HAL_RCC_GetPCLK2Freq>
 8009de0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009de2:	e010      	b.n	8009e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009de4:	4b4e      	ldr	r3, [pc, #312]	@ (8009f20 <UART_SetConfig+0x5c0>)
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009de8:	e00d      	b.n	8009e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dea:	f7fd f98d 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8009dee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009df0:	e009      	b.n	8009e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009df8:	e005      	b.n	8009e06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8090 	beq.w	8009f2e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e12:	4a44      	ldr	r2, [pc, #272]	@ (8009f24 <UART_SetConfig+0x5c4>)
 8009e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e20:	005a      	lsls	r2, r3, #1
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	085b      	lsrs	r3, r3, #1
 8009e28:	441a      	add	r2, r3
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b0f      	cmp	r3, #15
 8009e38:	d916      	bls.n	8009e68 <UART_SetConfig+0x508>
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e40:	d212      	bcs.n	8009e68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f023 030f 	bic.w	r3, r3, #15
 8009e4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	8bfb      	ldrh	r3, [r7, #30]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	8bfa      	ldrh	r2, [r7, #30]
 8009e64:	60da      	str	r2, [r3, #12]
 8009e66:	e062      	b.n	8009f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e6e:	e05e      	b.n	8009f2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d828      	bhi.n	8009eca <UART_SetConfig+0x56a>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <UART_SetConfig+0x520>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	08009ecb 	.word	0x08009ecb
 8009e90:	08009ebb 	.word	0x08009ebb
 8009e94:	08009ecb 	.word	0x08009ecb
 8009e98:	08009ecb 	.word	0x08009ecb
 8009e9c:	08009ecb 	.word	0x08009ecb
 8009ea0:	08009ec3 	.word	0x08009ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ea4:	f7fd f99e 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8009ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eaa:	e014      	b.n	8009ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eac:	f7fd f9b0 	bl	8007210 <HAL_RCC_GetPCLK2Freq>
 8009eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eb2:	e010      	b.n	8009ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f20 <UART_SetConfig+0x5c0>)
 8009eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eb8:	e00d      	b.n	8009ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eba:	f7fd f925 	bl	8007108 <HAL_RCC_GetSysClockFreq>
 8009ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ec0:	e009      	b.n	8009ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ec8:	e005      	b.n	8009ed6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d028      	beq.n	8009f2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee0:	4a10      	ldr	r2, [pc, #64]	@ (8009f24 <UART_SetConfig+0x5c4>)
 8009ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	085b      	lsrs	r3, r3, #1
 8009ef4:	441a      	add	r2, r3
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	2b0f      	cmp	r3, #15
 8009f04:	d910      	bls.n	8009f28 <UART_SetConfig+0x5c8>
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0c:	d20c      	bcs.n	8009f28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60da      	str	r2, [r3, #12]
 8009f18:	e009      	b.n	8009f2e <UART_SetConfig+0x5ce>
 8009f1a:	bf00      	nop
 8009f1c:	40008000 	.word	0x40008000
 8009f20:	00f42400 	.word	0x00f42400
 8009f24:	0800fd64 	.word	0x0800fd64
      }
      else
      {
        ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2200      	movs	r2, #0
 8009f42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2200      	movs	r2, #0
 8009f48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3730      	adds	r7, #48	@ 0x30
 8009f52:	46bd      	mov	sp, r7
 8009f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01a      	beq.n	800a06e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a056:	d10a      	bne.n	800a06e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	605a      	str	r2, [r3, #4]
  }
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b098      	sub	sp, #96	@ 0x60
 800a0a0:	af02      	add	r7, sp, #8
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0ac:	f7f9 fa00 	bl	80034b0 <HAL_GetTick>
 800a0b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0308 	and.w	r3, r3, #8
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d12f      	bne.n	800a120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f88e 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d022      	beq.n	800a120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e6      	bne.n	800a0da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2220      	movs	r2, #32
 800a110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e063      	b.n	800a1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0304 	and.w	r3, r3, #4
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d149      	bne.n	800a1c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a12e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a136:	2200      	movs	r2, #0
 800a138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f857 	bl	800a1f0 <UART_WaitOnFlagUntilTimeout>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d03c      	beq.n	800a1c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	623b      	str	r3, [r7, #32]
   return(result);
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a166:	633b      	str	r3, [r7, #48]	@ 0x30
 800a168:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e6      	bne.n	800a148 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	60fb      	str	r3, [r7, #12]
   return(result);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f023 0301 	bic.w	r3, r3, #1
 800a190:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a19a:	61fa      	str	r2, [r7, #28]
 800a19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	69b9      	ldr	r1, [r7, #24]
 800a1a0:	69fa      	ldr	r2, [r7, #28]
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e5      	bne.n	800a17a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e012      	b.n	800a1e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3758      	adds	r7, #88	@ 0x58
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a200:	e04f      	b.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d04b      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20a:	f7f9 f951 	bl	80034b0 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	429a      	cmp	r2, r3
 800a218:	d302      	bcc.n	800a220 <UART_WaitOnFlagUntilTimeout+0x30>
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e04e      	b.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d037      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b80      	cmp	r3, #128	@ 0x80
 800a236:	d034      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b40      	cmp	r3, #64	@ 0x40
 800a23c:	d031      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	69db      	ldr	r3, [r3, #28]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d110      	bne.n	800a26e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2208      	movs	r2, #8
 800a252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 f95b 	bl	800a510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2208      	movs	r2, #8
 800a25e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e029      	b.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a27c:	d111      	bne.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 f941 	bl	800a510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e00f      	b.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	bf0c      	ite	eq
 800a2b2:	2301      	moveq	r3, #1
 800a2b4:	2300      	movne	r3, #0
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d0a0      	beq.n	800a202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b0a3      	sub	sp, #140	@ 0x8c
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	88fa      	ldrh	r2, [r7, #6]
 800a2e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	88fa      	ldrh	r2, [r7, #6]
 800a2ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fe:	d10e      	bne.n	800a31e <UART_Start_Receive_IT+0x52>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d105      	bne.n	800a314 <UART_Start_Receive_IT+0x48>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a30e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a312:	e02d      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	22ff      	movs	r2, #255	@ 0xff
 800a318:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a31c:	e028      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10d      	bne.n	800a342 <UART_Start_Receive_IT+0x76>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d104      	bne.n	800a338 <UART_Start_Receive_IT+0x6c>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	22ff      	movs	r2, #255	@ 0xff
 800a332:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a336:	e01b      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	227f      	movs	r2, #127	@ 0x7f
 800a33c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a340:	e016      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a34a:	d10d      	bne.n	800a368 <UART_Start_Receive_IT+0x9c>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <UART_Start_Receive_IT+0x92>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	227f      	movs	r2, #127	@ 0x7f
 800a358:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a35c:	e008      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	223f      	movs	r2, #63	@ 0x3f
 800a362:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a366:	e003      	b.n	800a370 <UART_Start_Receive_IT+0xa4>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2222      	movs	r2, #34	@ 0x22
 800a37c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a392:	f043 0301 	orr.w	r3, r3, #1
 800a396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a3a4:	673a      	str	r2, [r7, #112]	@ 0x70
 800a3a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a3aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a3b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e3      	bne.n	800a380 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c0:	d14f      	bne.n	800a462 <UART_Start_Receive_IT+0x196>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3c8:	88fa      	ldrh	r2, [r7, #6]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d349      	bcc.n	800a462 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d6:	d107      	bne.n	800a3e8 <UART_Start_Receive_IT+0x11c>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4a47      	ldr	r2, [pc, #284]	@ (800a500 <UART_Start_Receive_IT+0x234>)
 800a3e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3e6:	e002      	b.n	800a3ee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4a46      	ldr	r2, [pc, #280]	@ (800a504 <UART_Start_Receive_IT+0x238>)
 800a3ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01a      	beq.n	800a42c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3fe:	e853 3f00 	ldrex	r3, [r3]
 800a402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a40a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a41a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a41e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e4      	bne.n	800a3f6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3308      	adds	r3, #8
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a44c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a44e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e5      	bne.n	800a42c <UART_Start_Receive_IT+0x160>
 800a460:	e046      	b.n	800a4f0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46a:	d107      	bne.n	800a47c <UART_Start_Receive_IT+0x1b0>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a24      	ldr	r2, [pc, #144]	@ (800a508 <UART_Start_Receive_IT+0x23c>)
 800a478:	675a      	str	r2, [r3, #116]	@ 0x74
 800a47a:	e002      	b.n	800a482 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4a23      	ldr	r2, [pc, #140]	@ (800a50c <UART_Start_Receive_IT+0x240>)
 800a480:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d019      	beq.n	800a4be <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a49e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e6      	bne.n	800a48a <UART_Start_Receive_IT+0x1be>
 800a4bc:	e018      	b.n	800a4f0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f043 0320 	orr.w	r3, r3, #32
 800a4d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4dc:	623b      	str	r3, [r7, #32]
 800a4de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	6a3a      	ldr	r2, [r7, #32]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	378c      	adds	r7, #140	@ 0x8c
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	0800ad2d 	.word	0x0800ad2d
 800a504:	0800a9c9 	.word	0x0800a9c9
 800a508:	0800a811 	.word	0x0800a811
 800a50c:	0800a659 	.word	0x0800a659

0800a510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b095      	sub	sp, #84	@ 0x54
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a536:	643b      	str	r3, [r7, #64]	@ 0x40
 800a538:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a53c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	61fb      	str	r3, [r7, #28]
   return(result);
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3308      	adds	r3, #8
 800a56c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a56e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1e3      	bne.n	800a54a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a586:	2b01      	cmp	r3, #1
 800a588:	d118      	bne.n	800a5bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	e853 3f00 	ldrex	r3, [r3]
 800a596:	60bb      	str	r3, [r7, #8]
   return(result);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f023 0310 	bic.w	r3, r3, #16
 800a59e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	6979      	ldr	r1, [r7, #20]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	e841 2300 	strex	r3, r2, [r1]
 800a5b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e6      	bne.n	800a58a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5d0:	bf00      	nop
 800a5d2:	3754      	adds	r7, #84	@ 0x54
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f7ff f99e 	bl	8009934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	60bb      	str	r3, [r7, #8]
   return(result);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	61bb      	str	r3, [r7, #24]
 800a628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62a:	6979      	ldr	r1, [r7, #20]
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	613b      	str	r3, [r7, #16]
   return(result);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1e6      	bne.n	800a608 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff f969 	bl	8009920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a64e:	bf00      	nop
 800a650:	3720      	adds	r7, #32
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b09c      	sub	sp, #112	@ 0x70
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a666:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a670:	2b22      	cmp	r3, #34	@ 0x22
 800a672:	f040 80be 	bne.w	800a7f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a680:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a684:	b2d9      	uxtb	r1, r3
 800a686:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a690:	400a      	ands	r2, r1
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 80a1 	bne.w	800a802 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a6ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e6      	bne.n	800a6c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	667b      	str	r3, [r7, #100]	@ 0x64
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a712:	647a      	str	r2, [r7, #68]	@ 0x44
 800a714:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a33      	ldr	r2, [pc, #204]	@ (800a80c <UART_RxISR_8BIT+0x1b4>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d01f      	beq.n	800a784 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	623b      	str	r3, [r7, #32]
   return(result);
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a766:	663b      	str	r3, [r7, #96]	@ 0x60
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a770:	633b      	str	r3, [r7, #48]	@ 0x30
 800a772:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a778:	e841 2300 	strex	r3, r2, [r1]
 800a77c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e6      	bne.n	800a752 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d12e      	bne.n	800a7ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f023 0310 	bic.w	r3, r3, #16
 800a7a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7b0:	61fb      	str	r3, [r7, #28]
 800a7b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	69b9      	ldr	r1, [r7, #24]
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e6      	bne.n	800a792 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b10      	cmp	r3, #16
 800a7d0:	d103      	bne.n	800a7da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff f8b0 	bl	8009948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7e8:	e00b      	b.n	800a802 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7f6 fe76 	bl	80014dc <HAL_UART_RxCpltCallback>
}
 800a7f0:	e007      	b.n	800a802 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0208 	orr.w	r2, r2, #8
 800a800:	619a      	str	r2, [r3, #24]
}
 800a802:	bf00      	nop
 800a804:	3770      	adds	r7, #112	@ 0x70
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40008000 	.word	0x40008000

0800a810 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b09c      	sub	sp, #112	@ 0x70
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a81e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a828:	2b22      	cmp	r3, #34	@ 0x22
 800a82a:	f040 80be 	bne.w	800a9aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a834:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a83c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a83e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a842:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a846:	4013      	ands	r3, r2
 800a848:	b29a      	uxth	r2, r3
 800a84a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a84c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a852:	1c9a      	adds	r2, r3, #2
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a85e:	b29b      	uxth	r3, r3
 800a860:	3b01      	subs	r3, #1
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a870:	b29b      	uxth	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	f040 80a1 	bne.w	800a9ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a88c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a896:	657b      	str	r3, [r7, #84]	@ 0x54
 800a898:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a89c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a89e:	e841 2300 	strex	r3, r2, [r1]
 800a8a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e6      	bne.n	800a878 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8d2:	e841 2300 	strex	r3, r2, [r1]
 800a8d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1e5      	bne.n	800a8aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a33      	ldr	r2, [pc, #204]	@ (800a9c4 <UART_RxISR_16BIT+0x1b4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d01f      	beq.n	800a93c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d018      	beq.n	800a93c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	61fb      	str	r3, [r7, #28]
   return(result);
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a91e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a92a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a930:	e841 2300 	strex	r3, r2, [r1]
 800a934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e6      	bne.n	800a90a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a940:	2b01      	cmp	r3, #1
 800a942:	d12e      	bne.n	800a9a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	e853 3f00 	ldrex	r3, [r3]
 800a956:	60bb      	str	r3, [r7, #8]
   return(result);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f023 0310 	bic.w	r3, r3, #16
 800a95e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	6979      	ldr	r1, [r7, #20]
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	e841 2300 	strex	r3, r2, [r1]
 800a974:	613b      	str	r3, [r7, #16]
   return(result);
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e6      	bne.n	800a94a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	f003 0310 	and.w	r3, r3, #16
 800a986:	2b10      	cmp	r3, #16
 800a988:	d103      	bne.n	800a992 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2210      	movs	r2, #16
 800a990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7fe ffd4 	bl	8009948 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9a0:	e00b      	b.n	800a9ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7f6 fd9a 	bl	80014dc <HAL_UART_RxCpltCallback>
}
 800a9a8:	e007      	b.n	800a9ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	699a      	ldr	r2, [r3, #24]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0208 	orr.w	r2, r2, #8
 800a9b8:	619a      	str	r2, [r3, #24]
}
 800a9ba:	bf00      	nop
 800a9bc:	3770      	adds	r7, #112	@ 0x70
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	40008000 	.word	0x40008000

0800a9c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b0ac      	sub	sp, #176	@ 0xb0
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9fe:	2b22      	cmp	r3, #34	@ 0x22
 800aa00:	f040 8183 	bne.w	800ad0a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa0e:	e126      	b.n	800ac5e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aa1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aa1e:	b2d9      	uxtb	r1, r3
 800aa20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2a:	400a      	ands	r2, r1
 800aa2c:	b2d2      	uxtb	r2, r2
 800aa2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	3b01      	subs	r3, #1
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d053      	beq.n	800ab0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d011      	beq.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aa72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00b      	beq.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa88:	f043 0201 	orr.w	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa96:	f003 0302 	and.w	r3, r3, #2
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d011      	beq.n	800aac2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aa9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00b      	beq.n	800aac2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2202      	movs	r2, #2
 800aab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab8:	f043 0204 	orr.w	r2, r3, #4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d011      	beq.n	800aaf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2204      	movs	r2, #4
 800aae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae8:	f043 0202 	orr.w	r2, r3, #2
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d006      	beq.n	800ab0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7fe ff19 	bl	8009934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f040 80a3 	bne.w	800ac5e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ab26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ab40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ab48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e4      	bne.n	800ab18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ab5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab64:	f023 0301 	bic.w	r3, r3, #1
 800ab68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab76:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ab78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e1      	bne.n	800ab4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a60      	ldr	r2, [pc, #384]	@ (800ad24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d021      	beq.n	800abec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01a      	beq.n	800abec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abbe:	e853 3f00 	ldrex	r3, [r3]
 800abc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800abc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800abca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abd8:	657b      	str	r3, [r7, #84]	@ 0x54
 800abda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800abde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800abe0:	e841 2300 	strex	r3, r2, [r1]
 800abe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e4      	bne.n	800abb6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d130      	bne.n	800ac56 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	f023 0310 	bic.w	r3, r3, #16
 800ac0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e4      	bne.n	800abfa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	f003 0310 	and.w	r3, r3, #16
 800ac3a:	2b10      	cmp	r3, #16
 800ac3c:	d103      	bne.n	800ac46 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2210      	movs	r2, #16
 800ac44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7fe fe7a 	bl	8009948 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ac54:	e00e      	b.n	800ac74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f6 fc40 	bl	80014dc <HAL_UART_RxCpltCallback>
        break;
 800ac5c:	e00a      	b.n	800ac74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac5e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d006      	beq.n	800ac74 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800ac66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f47f aece 	bne.w	800aa10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d049      	beq.n	800ad1a <UART_RxISR_8BIT_FIFOEN+0x352>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac8c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d242      	bcs.n	800ad1a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3308      	adds	r3, #8
 800ac9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	e853 3f00 	ldrex	r3, [r3]
 800aca2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3308      	adds	r3, #8
 800acb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800acb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800acba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc0:	e841 2300 	strex	r3, r2, [r1]
 800acc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e3      	bne.n	800ac94 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a16      	ldr	r2, [pc, #88]	@ (800ad28 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800acd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	e853 3f00 	ldrex	r3, [r3]
 800acde:	60bb      	str	r3, [r7, #8]
   return(result);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f043 0320 	orr.w	r3, r3, #32
 800ace6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800acf4:	61bb      	str	r3, [r7, #24]
 800acf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	6979      	ldr	r1, [r7, #20]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	613b      	str	r3, [r7, #16]
   return(result);
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e4      	bne.n	800acd2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad08:	e007      	b.n	800ad1a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	699a      	ldr	r2, [r3, #24]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0208 	orr.w	r2, r2, #8
 800ad18:	619a      	str	r2, [r3, #24]
}
 800ad1a:	bf00      	nop
 800ad1c:	37b0      	adds	r7, #176	@ 0xb0
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40008000 	.word	0x40008000
 800ad28:	0800a659 	.word	0x0800a659

0800ad2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b0ae      	sub	sp, #184	@ 0xb8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ad3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad62:	2b22      	cmp	r3, #34	@ 0x22
 800ad64:	f040 8187 	bne.w	800b076 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad72:	e12a      	b.n	800afca <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ad8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ad8e:	4013      	ands	r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad9c:	1c9a      	adds	r2, r3, #2
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	b29a      	uxth	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800adbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d053      	beq.n	800ae72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d011      	beq.n	800adfa <UART_RxISR_16BIT_FIFOEN+0xce>
 800add6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00b      	beq.n	800adfa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2201      	movs	r2, #1
 800ade8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf0:	f043 0201 	orr.w	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d011      	beq.n	800ae2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ae06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00b      	beq.n	800ae2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2202      	movs	r2, #2
 800ae18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae20:	f043 0204 	orr.w	r2, r3, #4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d011      	beq.n	800ae5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ae36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00b      	beq.n	800ae5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2204      	movs	r2, #4
 800ae48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae50:	f043 0202 	orr.w	r2, r3, #2
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7fe fd65 	bl	8009934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f040 80a5 	bne.w	800afca <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aeb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e2      	bne.n	800ae80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3308      	adds	r3, #8
 800aec0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aeca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aed0:	f023 0301 	bic.w	r3, r3, #1
 800aed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3308      	adds	r3, #8
 800aede:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800aee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e1      	bne.n	800aeba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a60      	ldr	r2, [pc, #384]	@ (800b090 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d021      	beq.n	800af58 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01a      	beq.n	800af58 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af2a:	e853 3f00 	ldrex	r3, [r3]
 800af2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800af44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e4      	bne.n	800af22 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d130      	bne.n	800afc2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af76:	f023 0310 	bic.w	r3, r3, #16
 800af7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af88:	647b      	str	r3, [r7, #68]	@ 0x44
 800af8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af90:	e841 2300 	strex	r3, r2, [r1]
 800af94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1e4      	bne.n	800af66 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f003 0310 	and.w	r3, r3, #16
 800afa6:	2b10      	cmp	r3, #16
 800afa8:	d103      	bne.n	800afb2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2210      	movs	r2, #16
 800afb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fe fcc4 	bl	8009948 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800afc0:	e00e      	b.n	800afe0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7f6 fa8a 	bl	80014dc <HAL_UART_RxCpltCallback>
        break;
 800afc8:	e00a      	b.n	800afe0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800afd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f47f aeca 	bne.w	800ad74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afe6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d049      	beq.n	800b086 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aff8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800affc:	429a      	cmp	r2, r3
 800affe:	d242      	bcs.n	800b086 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3308      	adds	r3, #8
 800b006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00a:	e853 3f00 	ldrex	r3, [r3]
 800b00e:	623b      	str	r3, [r7, #32]
   return(result);
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3308      	adds	r3, #8
 800b020:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b024:	633a      	str	r2, [r7, #48]	@ 0x30
 800b026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e3      	bne.n	800b000 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a16      	ldr	r2, [pc, #88]	@ (800b094 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b03c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f043 0320 	orr.w	r3, r3, #32
 800b052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	617b      	str	r3, [r7, #20]
   return(result);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e4      	bne.n	800b03e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b074:	e007      	b.n	800b086 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f042 0208 	orr.w	r2, r2, #8
 800b084:	619a      	str	r2, [r3, #24]
}
 800b086:	bf00      	nop
 800b088:	37b8      	adds	r7, #184	@ 0xb8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	40008000 	.word	0x40008000
 800b094:	0800a811 	.word	0x0800a811

0800b098 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_UARTEx_DisableFifoMode+0x16>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e027      	b.n	800b13a <HAL_UARTEx_DisableFifoMode+0x66>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2224      	movs	r2, #36	@ 0x24
 800b0f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f022 0201 	bic.w	r2, r2, #1
 800b110:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b118:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e02d      	b.n	800b1ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2224      	movs	r2, #36	@ 0x24
 800b16a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	430a      	orrs	r2, r1
 800b198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f850 	bl	800b240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d101      	bne.n	800b1da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	e02d      	b.n	800b236 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2224      	movs	r2, #36	@ 0x24
 800b1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f022 0201 	bic.w	r2, r2, #1
 800b200:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f812 	bl	800b240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2220      	movs	r2, #32
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d108      	bne.n	800b262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b260:	e031      	b.n	800b2c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b262:	2308      	movs	r3, #8
 800b264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b266:	2308      	movs	r3, #8
 800b268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	0e5b      	lsrs	r3, r3, #25
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 0307 	and.w	r3, r3, #7
 800b278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	0f5b      	lsrs	r3, r3, #29
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0307 	and.w	r3, r3, #7
 800b288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	7b3a      	ldrb	r2, [r7, #12]
 800b28e:	4911      	ldr	r1, [pc, #68]	@ (800b2d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b290:	5c8a      	ldrb	r2, [r1, r2]
 800b292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b296:	7b3a      	ldrb	r2, [r7, #12]
 800b298:	490f      	ldr	r1, [pc, #60]	@ (800b2d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b29a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	7b7a      	ldrb	r2, [r7, #13]
 800b2ac:	4909      	ldr	r1, [pc, #36]	@ (800b2d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b2ae:	5c8a      	ldrb	r2, [r1, r2]
 800b2b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2b4:	7b7a      	ldrb	r2, [r7, #13]
 800b2b6:	4908      	ldr	r1, [pc, #32]	@ (800b2d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b2b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2c6:	bf00      	nop
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	0800fd7c 	.word	0x0800fd7c
 800b2d8:	0800fd84 	.word	0x0800fd84

0800b2dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b2ec:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b2f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b312:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b316:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b31e:	b29a      	uxth	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	b29b      	uxth	r3, r3
 800b324:	43db      	mvns	r3, r3
 800b326:	b29b      	uxth	r3, r3
 800b328:	4013      	ands	r3, r2
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	1d3b      	adds	r3, r7, #4
 800b34a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2201      	movs	r2, #1
 800b352:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b0a7      	sub	sp, #156	@ 0x9c
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b39e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3a2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	78db      	ldrb	r3, [r3, #3]
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d81f      	bhi.n	800b3ee <USB_ActivateEndpoint+0x72>
 800b3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b4 <USB_ActivateEndpoint+0x38>)
 800b3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b4:	0800b3c5 	.word	0x0800b3c5
 800b3b8:	0800b3e1 	.word	0x0800b3e1
 800b3bc:	0800b3f7 	.word	0x0800b3f7
 800b3c0:	0800b3d3 	.word	0x0800b3d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b3c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b3c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b3cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b3d0:	e012      	b.n	800b3f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b3d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b3d6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b3da:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b3de:	e00b      	b.n	800b3f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b3e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b3e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b3ec:	e004      	b.n	800b3f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b3f4:	e000      	b.n	800b3f8 <USB_ActivateEndpoint+0x7c>
      break;
 800b3f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	441a      	add	r2, r3
 800b402:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	b29b      	uxth	r3, r3
 800b428:	b21b      	sxth	r3, r3
 800b42a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b42e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b432:	b21a      	sxth	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	b21b      	sxth	r3, r3
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	441a      	add	r2, r3
 800b44c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b45c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b460:	b29b      	uxth	r3, r3
 800b462:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	7b1b      	ldrb	r3, [r3, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f040 8180 	bne.w	800b76e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	785b      	ldrb	r3, [r3, #1]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 8084 	beq.w	800b580 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	61bb      	str	r3, [r7, #24]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b482:	b29b      	uxth	r3, r3
 800b484:	461a      	mov	r2, r3
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	4413      	add	r3, r2
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	00da      	lsls	r2, r3, #3
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	085b      	lsrs	r3, r3, #1
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	827b      	strh	r3, [r7, #18]
 800b4ba:	8a7b      	ldrh	r3, [r7, #18]
 800b4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d01b      	beq.n	800b4fc <USB_ActivateEndpoint+0x180>
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4da:	823b      	strh	r3, [r7, #16]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	441a      	add	r2, r3
 800b4e6:	8a3b      	ldrh	r3, [r7, #16]
 800b4e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	78db      	ldrb	r3, [r3, #3]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d020      	beq.n	800b546 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b29b      	uxth	r3, r3
 800b512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b51a:	81bb      	strh	r3, [r7, #12]
 800b51c:	89bb      	ldrh	r3, [r7, #12]
 800b51e:	f083 0320 	eor.w	r3, r3, #32
 800b522:	81bb      	strh	r3, [r7, #12]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	441a      	add	r2, r3
 800b52e:	89bb      	ldrh	r3, [r7, #12]
 800b530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b53c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b540:	b29b      	uxth	r3, r3
 800b542:	8013      	strh	r3, [r2, #0]
 800b544:	e3f9      	b.n	800bd3a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	b29b      	uxth	r3, r3
 800b554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55c:	81fb      	strh	r3, [r7, #14]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	441a      	add	r2, r3
 800b568:	89fb      	ldrh	r3, [r7, #14]
 800b56a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b56e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	8013      	strh	r3, [r2, #0]
 800b57e:	e3dc      	b.n	800bd3a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	633b      	str	r3, [r7, #48]	@ 0x30
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	4413      	add	r3, r2
 800b592:	633b      	str	r3, [r7, #48]	@ 0x30
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	00da      	lsls	r2, r3, #3
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	4413      	add	r3, r2
 800b59e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	88db      	ldrh	r3, [r3, #6]
 800b5a8:	085b      	lsrs	r3, r3, #1
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c4:	4413      	add	r3, r2
 800b5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	00da      	lsls	r2, r3, #3
 800b5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	801a      	strh	r2, [r3, #0]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <USB_ActivateEndpoint+0x28a>
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	801a      	strh	r2, [r3, #0]
 800b604:	e041      	b.n	800b68a <USB_ActivateEndpoint+0x30e>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b60c:	d81c      	bhi.n	800b648 <USB_ActivateEndpoint+0x2cc>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	085b      	lsrs	r3, r3, #1
 800b614:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <USB_ActivateEndpoint+0x2b2>
 800b624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b628:	3301      	adds	r3, #1
 800b62a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	b29a      	uxth	r2, r3
 800b634:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b638:	b29b      	uxth	r3, r3
 800b63a:	029b      	lsls	r3, r3, #10
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	b29a      	uxth	r2, r3
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	801a      	strh	r2, [r3, #0]
 800b646:	e020      	b.n	800b68a <USB_ActivateEndpoint+0x30e>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	095b      	lsrs	r3, r3, #5
 800b64e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	691b      	ldr	r3, [r3, #16]
 800b656:	f003 031f 	and.w	r3, r3, #31
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d104      	bne.n	800b668 <USB_ActivateEndpoint+0x2ec>
 800b65e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b662:	3b01      	subs	r3, #1
 800b664:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b672:	b29b      	uxth	r3, r3
 800b674:	029b      	lsls	r3, r3, #10
 800b676:	b29b      	uxth	r3, r3
 800b678:	4313      	orrs	r3, r2
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b684:	b29a      	uxth	r2, r3
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b688:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b698:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b69a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d01b      	beq.n	800b6da <USB_ActivateEndpoint+0x35e>
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b8:	843b      	strh	r3, [r7, #32]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	441a      	add	r2, r3
 800b6c4:	8c3b      	ldrh	r3, [r7, #32]
 800b6c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d124      	bne.n	800b72c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6f8:	83bb      	strh	r3, [r7, #28]
 800b6fa:	8bbb      	ldrh	r3, [r7, #28]
 800b6fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b700:	83bb      	strh	r3, [r7, #28]
 800b702:	8bbb      	ldrh	r3, [r7, #28]
 800b704:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b708:	83bb      	strh	r3, [r7, #28]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	441a      	add	r2, r3
 800b714:	8bbb      	ldrh	r3, [r7, #28]
 800b716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b71a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b71e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b726:	b29b      	uxth	r3, r3
 800b728:	8013      	strh	r3, [r2, #0]
 800b72a:	e306      	b.n	800bd3a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	881b      	ldrh	r3, [r3, #0]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b73e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b742:	83fb      	strh	r3, [r7, #30]
 800b744:	8bfb      	ldrh	r3, [r7, #30]
 800b746:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b74a:	83fb      	strh	r3, [r7, #30]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	441a      	add	r2, r3
 800b756:	8bfb      	ldrh	r3, [r7, #30]
 800b758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b75c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b768:	b29b      	uxth	r3, r3
 800b76a:	8013      	strh	r3, [r2, #0]
 800b76c:	e2e5      	b.n	800bd3a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	78db      	ldrb	r3, [r3, #3]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d11e      	bne.n	800b7b4 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b78c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	441a      	add	r2, r3
 800b79a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800b79e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	8013      	strh	r3, [r2, #0]
 800b7b2:	e01d      	b.n	800b7f0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7ca:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	441a      	add	r2, r3
 800b7d8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b7dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b800:	4413      	add	r3, r2
 800b802:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	00da      	lsls	r2, r3, #3
 800b80a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b812:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	891b      	ldrh	r3, [r3, #8]
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	677b      	str	r3, [r7, #116]	@ 0x74
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b82e:	b29b      	uxth	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b834:	4413      	add	r3, r2
 800b836:	677b      	str	r3, [r7, #116]	@ 0x74
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	00da      	lsls	r2, r3, #3
 800b83e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b840:	4413      	add	r3, r2
 800b842:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b846:	673b      	str	r3, [r7, #112]	@ 0x70
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	895b      	ldrh	r3, [r3, #10]
 800b84c:	085b      	lsrs	r3, r3, #1
 800b84e:	b29b      	uxth	r3, r3
 800b850:	005b      	lsls	r3, r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b856:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	785b      	ldrb	r3, [r3, #1]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f040 81af 	bne.w	800bbc0 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800b872:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800b876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d01d      	beq.n	800b8ba <USB_ActivateEndpoint+0x53e>
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b894:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	441a      	add	r2, r3
 800b8a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4413      	add	r3, r2
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800b8ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b8ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01d      	beq.n	800b912 <USB_ActivateEndpoint+0x596>
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ec:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	441a      	add	r2, r3
 800b8fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800b8fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b90a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b90e:	b29b      	uxth	r3, r3
 800b910:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d16b      	bne.n	800b9f2 <USB_ActivateEndpoint+0x676>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b924:	b29b      	uxth	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92a:	4413      	add	r3, r2
 800b92c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	00da      	lsls	r2, r3, #3
 800b934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b936:	4413      	add	r3, r2
 800b938:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b93c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b93e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b948:	b29a      	uxth	r2, r3
 800b94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b94c:	801a      	strh	r2, [r3, #0]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <USB_ActivateEndpoint+0x5f0>
 800b956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b958:	881b      	ldrh	r3, [r3, #0]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b964:	b29a      	uxth	r2, r3
 800b966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b968:	801a      	strh	r2, [r3, #0]
 800b96a:	e05d      	b.n	800ba28 <USB_ActivateEndpoint+0x6ac>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	2b3e      	cmp	r3, #62	@ 0x3e
 800b972:	d81c      	bhi.n	800b9ae <USB_ActivateEndpoint+0x632>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <USB_ActivateEndpoint+0x618>
 800b98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b98e:	3301      	adds	r3, #1
 800b990:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	b29a      	uxth	r2, r3
 800b99a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	029b      	lsls	r3, r3, #10
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9aa:	801a      	strh	r2, [r3, #0]
 800b9ac:	e03c      	b.n	800ba28 <USB_ActivateEndpoint+0x6ac>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	f003 031f 	and.w	r3, r3, #31
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d104      	bne.n	800b9ce <USB_ActivateEndpoint+0x652>
 800b9c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b9ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	029b      	lsls	r3, r3, #10
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9ee:	801a      	strh	r2, [r3, #0]
 800b9f0:	e01a      	b.n	800ba28 <USB_ActivateEndpoint+0x6ac>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d116      	bne.n	800ba28 <USB_ActivateEndpoint+0x6ac>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	461a      	mov	r2, r3
 800ba08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba0a:	4413      	add	r3, r2
 800ba0c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	00da      	lsls	r2, r3, #3
 800ba14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba16:	4413      	add	r3, r2
 800ba18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba26:	801a      	strh	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d16b      	bne.n	800bb0c <USB_ActivateEndpoint+0x790>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba44:	4413      	add	r3, r2
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	00da      	lsls	r2, r3, #3
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba50:	4413      	add	r3, r2
 800ba52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba56:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	801a      	strh	r2, [r3, #0]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <USB_ActivateEndpoint+0x70a>
 800ba70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba82:	801a      	strh	r2, [r3, #0]
 800ba84:	e05b      	b.n	800bb3e <USB_ActivateEndpoint+0x7c2>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba8c:	d81c      	bhi.n	800bac8 <USB_ActivateEndpoint+0x74c>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	085b      	lsrs	r3, r3, #1
 800ba94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <USB_ActivateEndpoint+0x732>
 800baa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800baa8:	3301      	adds	r3, #1
 800baaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bab8:	b29b      	uxth	r3, r3
 800baba:	029b      	lsls	r3, r3, #10
 800babc:	b29b      	uxth	r3, r3
 800babe:	4313      	orrs	r3, r2
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac4:	801a      	strh	r2, [r3, #0]
 800bac6:	e03a      	b.n	800bb3e <USB_ActivateEndpoint+0x7c2>
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	095b      	lsrs	r3, r3, #5
 800bace:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f003 031f 	and.w	r3, r3, #31
 800bada:	2b00      	cmp	r3, #0
 800badc:	d104      	bne.n	800bae8 <USB_ActivateEndpoint+0x76c>
 800bade:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bae2:	3b01      	subs	r3, #1
 800bae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	b29a      	uxth	r2, r3
 800baee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	029b      	lsls	r3, r3, #10
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	4313      	orrs	r3, r2
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	801a      	strh	r2, [r3, #0]
 800bb0a:	e018      	b.n	800bb3e <USB_ActivateEndpoint+0x7c2>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	785b      	ldrb	r3, [r3, #1]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d114      	bne.n	800bb3e <USB_ActivateEndpoint+0x7c2>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb20:	4413      	add	r3, r2
 800bb22:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	00da      	lsls	r2, r3, #3
 800bb2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb3c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb54:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bb56:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bb5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bb5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bb64:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	441a      	add	r2, r3
 800bb70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb9c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	441a      	add	r2, r3
 800bba8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bbaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	8013      	strh	r3, [r2, #0]
 800bbbe:	e0bc      	b.n	800bd3a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	881b      	ldrh	r3, [r3, #0]
 800bbcc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800bbd0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bbd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01d      	beq.n	800bc18 <USB_ActivateEndpoint+0x89c>
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbf2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	441a      	add	r2, r3
 800bc00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800bc28:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800bc2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01d      	beq.n	800bc70 <USB_ActivateEndpoint+0x8f4>
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc4a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	441a      	add	r2, r3
 800bc58:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800bc5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	78db      	ldrb	r3, [r3, #3]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d024      	beq.n	800bcc2 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc8e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bc92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bc96:	f083 0320 	eor.w	r3, r3, #32
 800bc9a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	441a      	add	r2, r3
 800bca8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bcac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	8013      	strh	r3, [r2, #0]
 800bcc0:	e01d      	b.n	800bcfe <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcd8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	441a      	add	r2, r3
 800bce6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bcea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd14:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	441a      	add	r2, r3
 800bd22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bd26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bd3a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	379c      	adds	r7, #156	@ 0x9c
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop

0800bd4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b08d      	sub	sp, #52	@ 0x34
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	7b1b      	ldrb	r3, [r3, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f040 808e 	bne.w	800be7c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	785b      	ldrb	r3, [r3, #1]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d044      	beq.n	800bdf2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	81bb      	strh	r3, [r7, #12]
 800bd76:	89bb      	ldrh	r3, [r7, #12]
 800bd78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01b      	beq.n	800bdb8 <USB_DeactivateEndpoint+0x6c>
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	881b      	ldrh	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd96:	817b      	strh	r3, [r7, #10]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	441a      	add	r2, r3
 800bda2:	897b      	ldrh	r3, [r7, #10]
 800bda4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bda8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdce:	813b      	strh	r3, [r7, #8]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	441a      	add	r2, r3
 800bdda:	893b      	ldrh	r3, [r7, #8]
 800bddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bde0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bde4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bde8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	8013      	strh	r3, [r2, #0]
 800bdf0:	e192      	b.n	800c118 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	827b      	strh	r3, [r7, #18]
 800be00:	8a7b      	ldrh	r3, [r7, #18]
 800be02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01b      	beq.n	800be42 <USB_DeactivateEndpoint+0xf6>
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	881b      	ldrh	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be20:	823b      	strh	r3, [r7, #16]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	441a      	add	r2, r3
 800be2c:	8a3b      	ldrh	r3, [r7, #16]
 800be2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be3e:	b29b      	uxth	r3, r3
 800be40:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be58:	81fb      	strh	r3, [r7, #14]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	441a      	add	r2, r3
 800be64:	89fb      	ldrh	r3, [r7, #14]
 800be66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be76:	b29b      	uxth	r3, r3
 800be78:	8013      	strh	r3, [r2, #0]
 800be7a:	e14d      	b.n	800c118 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f040 80a5 	bne.w	800bfd0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	843b      	strh	r3, [r7, #32]
 800be94:	8c3b      	ldrh	r3, [r7, #32]
 800be96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01b      	beq.n	800bed6 <USB_DeactivateEndpoint+0x18a>
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb4:	83fb      	strh	r3, [r7, #30]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	441a      	add	r2, r3
 800bec0:	8bfb      	ldrh	r3, [r7, #30]
 800bec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	83bb      	strh	r3, [r7, #28]
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beea:	2b00      	cmp	r3, #0
 800beec:	d01b      	beq.n	800bf26 <USB_DeactivateEndpoint+0x1da>
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	b29b      	uxth	r3, r3
 800befc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf04:	837b      	strh	r3, [r7, #26]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	441a      	add	r2, r3
 800bf10:	8b7b      	ldrh	r3, [r7, #26]
 800bf12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf3c:	833b      	strh	r3, [r7, #24]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	441a      	add	r2, r3
 800bf48:	8b3b      	ldrh	r3, [r7, #24]
 800bf4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf74:	82fb      	strh	r3, [r7, #22]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	441a      	add	r2, r3
 800bf80:	8afb      	ldrh	r3, [r7, #22]
 800bf82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfac:	82bb      	strh	r3, [r7, #20]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	441a      	add	r2, r3
 800bfb8:	8abb      	ldrh	r3, [r7, #20]
 800bfba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	8013      	strh	r3, [r2, #0]
 800bfce:	e0a3      	b.n	800c118 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bfde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bfe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01b      	beq.n	800c020 <USB_DeactivateEndpoint+0x2d4>
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bffe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	441a      	add	r2, r3
 800c00a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c014:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c02e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01b      	beq.n	800c070 <USB_DeactivateEndpoint+0x324>
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	b29b      	uxth	r3, r3
 800c046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c04e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	441a      	add	r2, r3
 800c05a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c086:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	441a      	add	r2, r3
 800c092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c09c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	441a      	add	r2, r3
 800c0ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c0cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	441a      	add	r2, r3
 800c102:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c114:	b29b      	uxth	r3, r3
 800c116:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3734      	adds	r7, #52	@ 0x34
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b0ac      	sub	sp, #176	@ 0xb0
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	2b01      	cmp	r3, #1
 800c136:	f040 84ca 	bne.w	800cace <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	699a      	ldr	r2, [r3, #24]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	429a      	cmp	r2, r3
 800c144:	d904      	bls.n	800c150 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c14e:	e003      	b.n	800c158 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	7b1b      	ldrb	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d122      	bne.n	800c1a6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	6959      	ldr	r1, [r3, #20]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	88da      	ldrh	r2, [r3, #6]
 800c168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 febd 	bl	800ceee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c17e:	b29b      	uxth	r3, r3
 800c180:	461a      	mov	r2, r3
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	4413      	add	r3, r2
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	00da      	lsls	r2, r3, #3
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	4413      	add	r3, r2
 800c192:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	801a      	strh	r2, [r3, #0]
 800c1a2:	f000 bc6f 	b.w	800ca84 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	78db      	ldrb	r3, [r3, #3]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	f040 831e 	bne.w	800c7ec <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	6a1a      	ldr	r2, [r3, #32]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	f240 82cf 	bls.w	800c75c <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	441a      	add	r2, r3
 800c1e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c1e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	6a1a      	ldr	r2, [r3, #32]
 800c1fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c202:	1ad2      	subs	r2, r2, r3
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	b29b      	uxth	r3, r3
 800c216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 814f 	beq.w	800c4be <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	633b      	str	r3, [r7, #48]	@ 0x30
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	785b      	ldrb	r3, [r3, #1]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d16b      	bne.n	800c304 <USB_EPStartXfer+0x1de>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c236:	b29b      	uxth	r3, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	4413      	add	r3, r2
 800c23e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	00da      	lsls	r2, r3, #3
 800c246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c248:	4413      	add	r3, r2
 800c24a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c24e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	b29b      	uxth	r3, r3
 800c256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10a      	bne.n	800c27e <USB_EPStartXfer+0x158>
 800c268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26a:	881b      	ldrh	r3, [r3, #0]
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c276:	b29a      	uxth	r2, r3
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27a:	801a      	strh	r2, [r3, #0]
 800c27c:	e05b      	b.n	800c336 <USB_EPStartXfer+0x210>
 800c27e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c282:	2b3e      	cmp	r3, #62	@ 0x3e
 800c284:	d81c      	bhi.n	800c2c0 <USB_EPStartXfer+0x19a>
 800c286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c28a:	085b      	lsrs	r3, r3, #1
 800c28c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d004      	beq.n	800c2a6 <USB_EPStartXfer+0x180>
 800c29c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	029b      	lsls	r3, r3, #10
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	801a      	strh	r2, [r3, #0]
 800c2be:	e03a      	b.n	800c336 <USB_EPStartXfer+0x210>
 800c2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2c4:	095b      	lsrs	r3, r3, #5
 800c2c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2ce:	f003 031f 	and.w	r3, r3, #31
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d104      	bne.n	800c2e0 <USB_EPStartXfer+0x1ba>
 800c2d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	029b      	lsls	r3, r3, #10
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	e018      	b.n	800c336 <USB_EPStartXfer+0x210>
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	785b      	ldrb	r3, [r3, #1]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d114      	bne.n	800c336 <USB_EPStartXfer+0x210>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c312:	b29b      	uxth	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	4413      	add	r3, r2
 800c31a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	00da      	lsls	r2, r3, #3
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	4413      	add	r3, r2
 800c326:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c330:	b29a      	uxth	r2, r3
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	895b      	ldrh	r3, [r3, #10]
 800c33a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	6959      	ldr	r1, [r3, #20]
 800c342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c346:	b29b      	uxth	r3, r3
 800c348:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fdce 	bl	800ceee <USB_WritePMA>
            ep->xfer_buff += len;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	695a      	ldr	r2, [r3, #20]
 800c356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c35a:	441a      	add	r2, r3
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	6a1a      	ldr	r2, [r3, #32]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d907      	bls.n	800c37c <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	6a1a      	ldr	r2, [r3, #32]
 800c370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c374:	1ad2      	subs	r2, r2, r3
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	621a      	str	r2, [r3, #32]
 800c37a:	e006      	b.n	800c38a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d16b      	bne.n	800c46a <USB_EPStartXfer+0x344>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	61bb      	str	r3, [r7, #24]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	61bb      	str	r3, [r7, #24]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	00da      	lsls	r2, r3, #3
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	801a      	strh	r2, [r3, #0]
 800c3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <USB_EPStartXfer+0x2be>
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	801a      	strh	r2, [r3, #0]
 800c3e2:	e05d      	b.n	800c4a0 <USB_EPStartXfer+0x37a>
 800c3e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3ea:	d81c      	bhi.n	800c426 <USB_EPStartXfer+0x300>
 800c3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3f0:	085b      	lsrs	r3, r3, #1
 800c3f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d004      	beq.n	800c40c <USB_EPStartXfer+0x2e6>
 800c402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c406:	3301      	adds	r3, #1
 800c408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	b29a      	uxth	r2, r3
 800c412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c416:	b29b      	uxth	r3, r3
 800c418:	029b      	lsls	r3, r3, #10
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	4313      	orrs	r3, r2
 800c41e:	b29a      	uxth	r2, r3
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	801a      	strh	r2, [r3, #0]
 800c424:	e03c      	b.n	800c4a0 <USB_EPStartXfer+0x37a>
 800c426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c42a:	095b      	lsrs	r3, r3, #5
 800c42c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c434:	f003 031f 	and.w	r3, r3, #31
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d104      	bne.n	800c446 <USB_EPStartXfer+0x320>
 800c43c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c440:	3b01      	subs	r3, #1
 800c442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c450:	b29b      	uxth	r3, r3
 800c452:	029b      	lsls	r3, r3, #10
 800c454:	b29b      	uxth	r3, r3
 800c456:	4313      	orrs	r3, r2
 800c458:	b29b      	uxth	r3, r3
 800c45a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c45e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c462:	b29a      	uxth	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e01a      	b.n	800c4a0 <USB_EPStartXfer+0x37a>
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d116      	bne.n	800c4a0 <USB_EPStartXfer+0x37a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	623b      	str	r3, [r7, #32]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	461a      	mov	r2, r3
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	4413      	add	r3, r2
 800c484:	623b      	str	r3, [r7, #32]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	00da      	lsls	r2, r3, #3
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	4413      	add	r3, r2
 800c490:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c494:	61fb      	str	r3, [r7, #28]
 800c496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	891b      	ldrh	r3, [r3, #8]
 800c4a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	6959      	ldr	r1, [r3, #20]
 800c4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fd19 	bl	800ceee <USB_WritePMA>
 800c4bc:	e2e2      	b.n	800ca84 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d16b      	bne.n	800c59e <USB_EPStartXfer+0x478>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4d6:	4413      	add	r3, r2
 800c4d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	00da      	lsls	r2, r3, #3
 800c4e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f8:	801a      	strh	r2, [r3, #0]
 800c4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <USB_EPStartXfer+0x3f2>
 800c502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29b      	uxth	r3, r3
 800c508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c510:	b29a      	uxth	r2, r3
 800c512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c514:	801a      	strh	r2, [r3, #0]
 800c516:	e05d      	b.n	800c5d4 <USB_EPStartXfer+0x4ae>
 800c518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c51c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c51e:	d81c      	bhi.n	800c55a <USB_EPStartXfer+0x434>
 800c520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c524:	085b      	lsrs	r3, r3, #1
 800c526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <USB_EPStartXfer+0x41a>
 800c536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c53a:	3301      	adds	r3, #1
 800c53c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	b29a      	uxth	r2, r3
 800c546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	029b      	lsls	r3, r3, #10
 800c54e:	b29b      	uxth	r3, r3
 800c550:	4313      	orrs	r3, r2
 800c552:	b29a      	uxth	r2, r3
 800c554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c556:	801a      	strh	r2, [r3, #0]
 800c558:	e03c      	b.n	800c5d4 <USB_EPStartXfer+0x4ae>
 800c55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c55e:	095b      	lsrs	r3, r3, #5
 800c560:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d104      	bne.n	800c57a <USB_EPStartXfer+0x454>
 800c570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c574:	3b01      	subs	r3, #1
 800c576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	b29a      	uxth	r2, r3
 800c580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c584:	b29b      	uxth	r3, r3
 800c586:	029b      	lsls	r3, r3, #10
 800c588:	b29b      	uxth	r3, r3
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c596:	b29a      	uxth	r2, r3
 800c598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	e01a      	b.n	800c5d4 <USB_EPStartXfer+0x4ae>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d116      	bne.n	800c5d4 <USB_EPStartXfer+0x4ae>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5b6:	4413      	add	r3, r2
 800c5b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	00da      	lsls	r2, r3, #3
 800c5c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	891b      	ldrh	r3, [r3, #8]
 800c5d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	6959      	ldr	r1, [r3, #20]
 800c5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fc7f 	bl	800ceee <USB_WritePMA>
            ep->xfer_buff += len;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	695a      	ldr	r2, [r3, #20]
 800c5f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5f8:	441a      	add	r2, r3
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	6a1a      	ldr	r2, [r3, #32]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	429a      	cmp	r2, r3
 800c608:	d907      	bls.n	800c61a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	6a1a      	ldr	r2, [r3, #32]
 800c60e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c612:	1ad2      	subs	r2, r2, r3
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	621a      	str	r2, [r3, #32]
 800c618:	e006      	b.n	800c628 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2200      	movs	r2, #0
 800c626:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d16b      	bne.n	800c70c <USB_EPStartXfer+0x5e6>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c63e:	b29b      	uxth	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c644:	4413      	add	r3, r2
 800c646:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	00da      	lsls	r2, r3, #3
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	4413      	add	r3, r2
 800c652:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c656:	637b      	str	r3, [r7, #52]	@ 0x34
 800c658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c662:	b29a      	uxth	r2, r3
 800c664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c666:	801a      	strh	r2, [r3, #0]
 800c668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10a      	bne.n	800c686 <USB_EPStartXfer+0x560>
 800c670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	b29b      	uxth	r3, r3
 800c676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c67a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c67e:	b29a      	uxth	r2, r3
 800c680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c682:	801a      	strh	r2, [r3, #0]
 800c684:	e05b      	b.n	800c73e <USB_EPStartXfer+0x618>
 800c686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c68a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c68c:	d81c      	bhi.n	800c6c8 <USB_EPStartXfer+0x5a2>
 800c68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c692:	085b      	lsrs	r3, r3, #1
 800c694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <USB_EPStartXfer+0x588>
 800c6a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	029b      	lsls	r3, r3, #10
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c4:	801a      	strh	r2, [r3, #0]
 800c6c6:	e03a      	b.n	800c73e <USB_EPStartXfer+0x618>
 800c6c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6cc:	095b      	lsrs	r3, r3, #5
 800c6ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d104      	bne.n	800c6e8 <USB_EPStartXfer+0x5c2>
 800c6de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	029b      	lsls	r3, r3, #10
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c704:	b29a      	uxth	r2, r3
 800c706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c708:	801a      	strh	r2, [r3, #0]
 800c70a:	e018      	b.n	800c73e <USB_EPStartXfer+0x618>
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	785b      	ldrb	r3, [r3, #1]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d114      	bne.n	800c73e <USB_EPStartXfer+0x618>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	461a      	mov	r2, r3
 800c71e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c720:	4413      	add	r3, r2
 800c722:	643b      	str	r3, [r7, #64]	@ 0x40
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	00da      	lsls	r2, r3, #3
 800c72a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c72c:	4413      	add	r3, r2
 800c72e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c738:	b29a      	uxth	r2, r3
 800c73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c73c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	895b      	ldrh	r3, [r3, #10]
 800c742:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	6959      	ldr	r1, [r3, #20]
 800c74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c74e:	b29b      	uxth	r3, r3
 800c750:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fbca 	bl	800ceee <USB_WritePMA>
 800c75a:	e193      	b.n	800ca84 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	b29b      	uxth	r3, r3
 800c772:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c77a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	441a      	add	r2, r3
 800c788:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c78c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c790:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7b0:	4413      	add	r3, r2
 800c7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	00da      	lsls	r2, r3, #3
 800c7ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7bc:	4413      	add	r3, r2
 800c7be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	891b      	ldrh	r3, [r3, #8]
 800c7d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	6959      	ldr	r1, [r3, #20]
 800c7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fb82 	bl	800ceee <USB_WritePMA>
 800c7ea:	e14b      	b.n	800ca84 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	6a1a      	ldr	r2, [r3, #32]
 800c7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7f4:	1ad2      	subs	r2, r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4413      	add	r3, r2
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	b29b      	uxth	r3, r3
 800c808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 809a 	beq.w	800c946 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	673b      	str	r3, [r7, #112]	@ 0x70
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	785b      	ldrb	r3, [r3, #1]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d16b      	bne.n	800c8f6 <USB_EPStartXfer+0x7d0>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c828:	b29b      	uxth	r3, r3
 800c82a:	461a      	mov	r2, r3
 800c82c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c82e:	4413      	add	r3, r2
 800c830:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	00da      	lsls	r2, r3, #3
 800c838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c83a:	4413      	add	r3, r2
 800c83c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c840:	667b      	str	r3, [r7, #100]	@ 0x64
 800c842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	b29b      	uxth	r3, r3
 800c848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c850:	801a      	strh	r2, [r3, #0]
 800c852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10a      	bne.n	800c870 <USB_EPStartXfer+0x74a>
 800c85a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c868:	b29a      	uxth	r2, r3
 800c86a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c86c:	801a      	strh	r2, [r3, #0]
 800c86e:	e05b      	b.n	800c928 <USB_EPStartXfer+0x802>
 800c870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c874:	2b3e      	cmp	r3, #62	@ 0x3e
 800c876:	d81c      	bhi.n	800c8b2 <USB_EPStartXfer+0x78c>
 800c878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <USB_EPStartXfer+0x772>
 800c88e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c892:	3301      	adds	r3, #1
 800c894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	029b      	lsls	r3, r3, #10
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8ae:	801a      	strh	r2, [r3, #0]
 800c8b0:	e03a      	b.n	800c928 <USB_EPStartXfer+0x802>
 800c8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8b6:	095b      	lsrs	r3, r3, #5
 800c8b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c8bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8c0:	f003 031f 	and.w	r3, r3, #31
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d104      	bne.n	800c8d2 <USB_EPStartXfer+0x7ac>
 800c8c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c8d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	029b      	lsls	r3, r3, #10
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8f2:	801a      	strh	r2, [r3, #0]
 800c8f4:	e018      	b.n	800c928 <USB_EPStartXfer+0x802>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	785b      	ldrb	r3, [r3, #1]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d114      	bne.n	800c928 <USB_EPStartXfer+0x802>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c904:	b29b      	uxth	r3, r3
 800c906:	461a      	mov	r2, r3
 800c908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c90a:	4413      	add	r3, r2
 800c90c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	00da      	lsls	r2, r3, #3
 800c914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c916:	4413      	add	r3, r2
 800c918:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c91c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c91e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c922:	b29a      	uxth	r2, r3
 800c924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c926:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	895b      	ldrh	r3, [r3, #10]
 800c92c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	6959      	ldr	r1, [r3, #20]
 800c934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fad5 	bl	800ceee <USB_WritePMA>
 800c944:	e09e      	b.n	800ca84 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d16b      	bne.n	800ca26 <USB_EPStartXfer+0x900>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c958:	b29b      	uxth	r3, r3
 800c95a:	461a      	mov	r2, r3
 800c95c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c95e:	4413      	add	r3, r2
 800c960:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	00da      	lsls	r2, r3, #3
 800c968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c96a:	4413      	add	r3, r2
 800c96c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c970:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	b29b      	uxth	r3, r3
 800c978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10a      	bne.n	800c9a0 <USB_EPStartXfer+0x87a>
 800c98a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c998:	b29a      	uxth	r2, r3
 800c99a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c99c:	801a      	strh	r2, [r3, #0]
 800c99e:	e063      	b.n	800ca68 <USB_EPStartXfer+0x942>
 800c9a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9a6:	d81c      	bhi.n	800c9e2 <USB_EPStartXfer+0x8bc>
 800c9a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ac:	085b      	lsrs	r3, r3, #1
 800c9ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d004      	beq.n	800c9c8 <USB_EPStartXfer+0x8a2>
 800c9be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	029b      	lsls	r3, r3, #10
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9de:	801a      	strh	r2, [r3, #0]
 800c9e0:	e042      	b.n	800ca68 <USB_EPStartXfer+0x942>
 800c9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9e6:	095b      	lsrs	r3, r3, #5
 800c9e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9f0:	f003 031f 	and.w	r3, r3, #31
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d104      	bne.n	800ca02 <USB_EPStartXfer+0x8dc>
 800c9f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	029b      	lsls	r3, r3, #10
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	4313      	orrs	r3, r2
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca22:	801a      	strh	r2, [r3, #0]
 800ca24:	e020      	b.n	800ca68 <USB_EPStartXfer+0x942>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d11c      	bne.n	800ca68 <USB_EPStartXfer+0x942>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca42:	4413      	add	r3, r2
 800ca44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	00da      	lsls	r2, r3, #3
 800ca4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca52:	4413      	add	r3, r2
 800ca54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ca5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ca66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	891b      	ldrh	r3, [r3, #8]
 800ca6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	6959      	ldr	r1, [r3, #20]
 800ca74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 fa35 	bl	800ceee <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca9a:	817b      	strh	r3, [r7, #10]
 800ca9c:	897b      	ldrh	r3, [r7, #10]
 800ca9e:	f083 0310 	eor.w	r3, r3, #16
 800caa2:	817b      	strh	r3, [r7, #10]
 800caa4:	897b      	ldrh	r3, [r7, #10]
 800caa6:	f083 0320 	eor.w	r3, r3, #32
 800caaa:	817b      	strh	r3, [r7, #10]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	441a      	add	r2, r3
 800cab6:	897b      	ldrh	r3, [r7, #10]
 800cab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cabc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac8:	b29b      	uxth	r3, r3
 800caca:	8013      	strh	r3, [r2, #0]
 800cacc:	e0d5      	b.n	800cc7a <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	7b1b      	ldrb	r3, [r3, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d156      	bne.n	800cb84 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d122      	bne.n	800cb24 <USB_EPStartXfer+0x9fe>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	78db      	ldrb	r3, [r3, #3]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d11e      	bne.n	800cb24 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cafc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	441a      	add	r2, r3
 800cb0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cb0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cb1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	8013      	strh	r3, [r2, #0]
 800cb22:	e01d      	b.n	800cb60 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cb36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb3a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	441a      	add	r2, r3
 800cb48:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800cb4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	699a      	ldr	r2, [r3, #24]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d907      	bls.n	800cb7c <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	699a      	ldr	r2, [r3, #24]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	1ad2      	subs	r2, r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	619a      	str	r2, [r3, #24]
 800cb7a:	e054      	b.n	800cc26 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	619a      	str	r2, [r3, #24]
 800cb82:	e050      	b.n	800cc26 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	78db      	ldrb	r3, [r3, #3]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d142      	bne.n	800cc12 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d048      	beq.n	800cc26 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cba4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <USB_EPStartXfer+0xa96>
 800cbb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10b      	bne.n	800cbd4 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbbc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d12e      	bne.n	800cc26 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cbc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d128      	bne.n	800cc26 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbea:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	441a      	add	r2, r3
 800cbf8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800cbfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	8013      	strh	r3, [r2, #0]
 800cc10:	e009      	b.n	800cc26 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	78db      	ldrb	r3, [r3, #3]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d103      	bne.n	800cc22 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	619a      	str	r2, [r3, #24]
 800cc20:	e001      	b.n	800cc26 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e02a      	b.n	800cc7c <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	441a      	add	r2, r3
 800cc62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	37b0      	adds	r7, #176	@ 0xb0
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	785b      	ldrb	r3, [r3, #1]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d020      	beq.n	800ccd8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccac:	81bb      	strh	r3, [r7, #12]
 800ccae:	89bb      	ldrh	r3, [r7, #12]
 800ccb0:	f083 0310 	eor.w	r3, r3, #16
 800ccb4:	81bb      	strh	r3, [r7, #12]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	441a      	add	r2, r3
 800ccc0:	89bb      	ldrh	r3, [r7, #12]
 800ccc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	8013      	strh	r3, [r2, #0]
 800ccd6:	e01f      	b.n	800cd18 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccee:	81fb      	strh	r3, [r7, #14]
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
 800ccf2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ccf6:	81fb      	strh	r3, [r7, #14]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	441a      	add	r2, r3
 800cd02:	89fb      	ldrh	r3, [r7, #14]
 800cd04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	785b      	ldrb	r3, [r3, #1]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d04c      	beq.n	800cdd2 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	823b      	strh	r3, [r7, #16]
 800cd46:	8a3b      	ldrh	r3, [r7, #16]
 800cd48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01b      	beq.n	800cd88 <USB_EPClearStall+0x62>
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd66:	81fb      	strh	r3, [r7, #14]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	441a      	add	r2, r3
 800cd72:	89fb      	ldrh	r3, [r7, #14]
 800cd74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	78db      	ldrb	r3, [r3, #3]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d06c      	beq.n	800ce6a <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cda2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cda6:	81bb      	strh	r3, [r7, #12]
 800cda8:	89bb      	ldrh	r3, [r7, #12]
 800cdaa:	f083 0320 	eor.w	r3, r3, #32
 800cdae:	81bb      	strh	r3, [r7, #12]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	441a      	add	r2, r3
 800cdba:	89bb      	ldrh	r3, [r7, #12]
 800cdbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	8013      	strh	r3, [r2, #0]
 800cdd0:	e04b      	b.n	800ce6a <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	82fb      	strh	r3, [r7, #22]
 800cde0:	8afb      	ldrh	r3, [r7, #22]
 800cde2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d01b      	beq.n	800ce22 <USB_EPClearStall+0xfc>
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce00:	82bb      	strh	r3, [r7, #20]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	441a      	add	r2, r3
 800ce0c:	8abb      	ldrh	r3, [r7, #20]
 800ce0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce38:	827b      	strh	r3, [r7, #18]
 800ce3a:	8a7b      	ldrh	r3, [r7, #18]
 800ce3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce40:	827b      	strh	r3, [r7, #18]
 800ce42:	8a7b      	ldrh	r3, [r7, #18]
 800ce44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ce48:	827b      	strh	r3, [r7, #18]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	441a      	add	r2, r3
 800ce54:	8a7b      	ldrh	r3, [r7, #18]
 800ce56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	371c      	adds	r7, #28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d103      	bne.n	800ce92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2280      	movs	r2, #128	@ 0x80
 800ce8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cece:	b480      	push	{r7}
 800ced0:	b085      	sub	sp, #20
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cedc:	b29b      	uxth	r3, r3
 800cede:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cee0:	68fb      	ldr	r3, [r7, #12]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b08b      	sub	sp, #44	@ 0x2c
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	4611      	mov	r1, r2
 800cefa:	461a      	mov	r2, r3
 800cefc:	460b      	mov	r3, r1
 800cefe:	80fb      	strh	r3, [r7, #6]
 800cf00:	4613      	mov	r3, r2
 800cf02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf04:	88bb      	ldrh	r3, [r7, #4]
 800cf06:	3301      	adds	r3, #1
 800cf08:	085b      	lsrs	r3, r3, #1
 800cf0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf14:	88fa      	ldrh	r2, [r7, #6]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	4413      	add	r3, r2
 800cf1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf1e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf24:	e01b      	b.n	800cf5e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	021b      	lsls	r3, r3, #8
 800cf34:	b21a      	sxth	r2, r3
 800cf36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	b21b      	sxth	r3, r3
 800cf3e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	8a7a      	ldrh	r2, [r7, #18]
 800cf44:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	3302      	adds	r3, #2
 800cf4a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	3301      	adds	r3, #1
 800cf56:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e0      	bne.n	800cf26 <USB_WritePMA+0x38>
  }
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop
 800cf68:	372c      	adds	r7, #44	@ 0x2c
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b08b      	sub	sp, #44	@ 0x2c
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	461a      	mov	r2, r3
 800cf80:	460b      	mov	r3, r1
 800cf82:	80fb      	strh	r3, [r7, #6]
 800cf84:	4613      	mov	r3, r2
 800cf86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cf88:	88bb      	ldrh	r3, [r7, #4]
 800cf8a:	085b      	lsrs	r3, r3, #1
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf98:	88fa      	ldrh	r2, [r7, #6]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cfa2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfa8:	e018      	b.n	800cfdc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	3302      	adds	r3, #2
 800cfb6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	0a1b      	lsrs	r3, r3, #8
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1e3      	bne.n	800cfaa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cfe2:	88bb      	ldrh	r3, [r7, #4]
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d007      	beq.n	800cffe <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	881b      	ldrh	r3, [r3, #0]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	701a      	strb	r2, [r3, #0]
  }
}
 800cffe:	bf00      	nop
 800d000:	372c      	adds	r7, #44	@ 0x2c
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	460b      	mov	r3, r1
 800d014:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d016:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d01a:	f002 f923 	bl	800f264 <USBD_static_malloc>
 800d01e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d02e:	2302      	movs	r3, #2
 800d030:	e066      	b.n	800d100 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7c1b      	ldrb	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d119      	bne.n	800d076 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d046:	2202      	movs	r2, #2
 800d048:	2181      	movs	r1, #129	@ 0x81
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 ffb1 	bl	800efb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d05a:	2202      	movs	r2, #2
 800d05c:	2101      	movs	r1, #1
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f001 ffa7 	bl	800efb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2210      	movs	r2, #16
 800d070:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d074:	e016      	b.n	800d0a4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d076:	2340      	movs	r3, #64	@ 0x40
 800d078:	2202      	movs	r2, #2
 800d07a:	2181      	movs	r1, #129	@ 0x81
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f001 ff98 	bl	800efb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2201      	movs	r2, #1
 800d086:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d088:	2340      	movs	r3, #64	@ 0x40
 800d08a:	2202      	movs	r2, #2
 800d08c:	2101      	movs	r1, #1
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f001 ff8f 	bl	800efb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2210      	movs	r2, #16
 800d0a0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0a4:	2308      	movs	r3, #8
 800d0a6:	2203      	movs	r2, #3
 800d0a8:	2182      	movs	r1, #130	@ 0x82
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f001 ff81 	bl	800efb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7c1b      	ldrb	r3, [r3, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d109      	bne.n	800d0ee <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d0e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f002 f852 	bl	800f190 <USBD_LL_PrepareReceive>
 800d0ec:	e007      	b.n	800d0fe <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d0f4:	2340      	movs	r3, #64	@ 0x40
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f002 f849 	bl	800f190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d114:	2181      	movs	r1, #129	@ 0x81
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f001 ff71 	bl	800effe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d122:	2101      	movs	r1, #1
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 ff6a 	bl	800effe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d132:	2182      	movs	r1, #130	@ 0x82
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 ff62 	bl	800effe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00e      	beq.n	800d172 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d164:	4618      	mov	r0, r3
 800d166:	f002 f88b 	bl	800f280 <USBD_static_free>
    pdev->pClassData = NULL;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d18c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e0af      	b.n	800d304 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d03f      	beq.n	800d230 <USBD_CDC_Setup+0xb4>
 800d1b0:	2b20      	cmp	r3, #32
 800d1b2:	f040 809f 	bne.w	800d2f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d02e      	beq.n	800d21c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	b25b      	sxtb	r3, r3
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	da16      	bge.n	800d1f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d1d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	88d2      	ldrh	r2, [r2, #6]
 800d1da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	88db      	ldrh	r3, [r3, #6]
 800d1e0:	2b07      	cmp	r3, #7
 800d1e2:	bf28      	it	cs
 800d1e4:	2307      	movcs	r3, #7
 800d1e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	89fa      	ldrh	r2, [r7, #14]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 facd 	bl	800e78e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d1f4:	e085      	b.n	800d302 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	785a      	ldrb	r2, [r3, #1]
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	88db      	ldrh	r3, [r3, #6]
 800d204:	b2da      	uxtb	r2, r3
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d20c:	6939      	ldr	r1, [r7, #16]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	88db      	ldrh	r3, [r3, #6]
 800d212:	461a      	mov	r2, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 fae6 	bl	800e7e6 <USBD_CtlPrepareRx>
      break;
 800d21a:	e072      	b.n	800d302 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	7850      	ldrb	r0, [r2, #1]
 800d228:	2200      	movs	r2, #0
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	4798      	blx	r3
      break;
 800d22e:	e068      	b.n	800d302 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	785b      	ldrb	r3, [r3, #1]
 800d234:	2b0b      	cmp	r3, #11
 800d236:	d852      	bhi.n	800d2de <USBD_CDC_Setup+0x162>
 800d238:	a201      	add	r2, pc, #4	@ (adr r2, 800d240 <USBD_CDC_Setup+0xc4>)
 800d23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23e:	bf00      	nop
 800d240:	0800d271 	.word	0x0800d271
 800d244:	0800d2ed 	.word	0x0800d2ed
 800d248:	0800d2df 	.word	0x0800d2df
 800d24c:	0800d2df 	.word	0x0800d2df
 800d250:	0800d2df 	.word	0x0800d2df
 800d254:	0800d2df 	.word	0x0800d2df
 800d258:	0800d2df 	.word	0x0800d2df
 800d25c:	0800d2df 	.word	0x0800d2df
 800d260:	0800d2df 	.word	0x0800d2df
 800d264:	0800d2df 	.word	0x0800d2df
 800d268:	0800d29b 	.word	0x0800d29b
 800d26c:	0800d2c5 	.word	0x0800d2c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b03      	cmp	r3, #3
 800d27a:	d107      	bne.n	800d28c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d27c:	f107 030a 	add.w	r3, r7, #10
 800d280:	2202      	movs	r2, #2
 800d282:	4619      	mov	r1, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 fa82 	bl	800e78e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d28a:	e032      	b.n	800d2f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fa0c 	bl	800e6ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	75fb      	strb	r3, [r7, #23]
          break;
 800d298:	e02b      	b.n	800d2f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d107      	bne.n	800d2b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2a6:	f107 030d 	add.w	r3, r7, #13
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 fa6d 	bl	800e78e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2b4:	e01d      	b.n	800d2f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f001 f9f7 	bl	800e6ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	75fb      	strb	r3, [r7, #23]
          break;
 800d2c2:	e016      	b.n	800d2f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b03      	cmp	r3, #3
 800d2ce:	d00f      	beq.n	800d2f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f001 f9ea 	bl	800e6ac <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2dc:	e008      	b.n	800d2f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 f9e3 	bl	800e6ac <USBD_CtlError>
          ret = USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	75fb      	strb	r3, [r7, #23]
          break;
 800d2ea:	e002      	b.n	800d2f2 <USBD_CDC_Setup+0x176>
          break;
 800d2ec:	bf00      	nop
 800d2ee:	e008      	b.n	800d302 <USBD_CDC_Setup+0x186>
          break;
 800d2f0:	bf00      	nop
      }
      break;
 800d2f2:	e006      	b.n	800d302 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d2f4:	6839      	ldr	r1, [r7, #0]
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 f9d8 	bl	800e6ac <USBD_CtlError>
      ret = USBD_FAIL;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800d300:	bf00      	nop
  }

  return (uint8_t)ret;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d31e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e04f      	b.n	800d3ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d334:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d336:	78fa      	ldrb	r2, [r7, #3]
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	4613      	mov	r3, r2
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4413      	add	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	440b      	add	r3, r1
 800d344:	3318      	adds	r3, #24
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d029      	beq.n	800d3a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d34c:	78fa      	ldrb	r2, [r7, #3]
 800d34e:	6879      	ldr	r1, [r7, #4]
 800d350:	4613      	mov	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	440b      	add	r3, r1
 800d35a:	3318      	adds	r3, #24
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	78f9      	ldrb	r1, [r7, #3]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	460b      	mov	r3, r1
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	440b      	add	r3, r1
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	4403      	add	r3, r0
 800d36c:	3320      	adds	r3, #32
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	fbb2 f1f3 	udiv	r1, r2, r3
 800d374:	fb01 f303 	mul.w	r3, r1, r3
 800d378:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d110      	bne.n	800d3a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d37e:	78fa      	ldrb	r2, [r7, #3]
 800d380:	6879      	ldr	r1, [r7, #4]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	440b      	add	r3, r1
 800d38c:	3318      	adds	r3, #24
 800d38e:	2200      	movs	r2, #0
 800d390:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d392:	78f9      	ldrb	r1, [r7, #3]
 800d394:	2300      	movs	r3, #0
 800d396:	2200      	movs	r2, #0
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f001 fed8 	bl	800f14e <USBD_LL_Transmit>
 800d39e:	e015      	b.n	800d3cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00b      	beq.n	800d3cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	e015      	b.n	800d424 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d3f8:	78fb      	ldrb	r3, [r7, #3]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f001 fee8 	bl	800f1d2 <USBD_LL_GetRxDataSize>
 800d402:	4602      	mov	r2, r0
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d41e:	4611      	mov	r1, r2
 800d420:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d43a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d442:	2303      	movs	r3, #3
 800d444:	e01a      	b.n	800d47c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d014      	beq.n	800d47a <USBD_CDC_EP0_RxReady+0x4e>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d456:	2bff      	cmp	r3, #255	@ 0xff
 800d458:	d00f      	beq.n	800d47a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d468:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d470:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	22ff      	movs	r2, #255	@ 0xff
 800d476:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2243      	movs	r2, #67	@ 0x43
 800d490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d492:	4b03      	ldr	r3, [pc, #12]	@ (800d4a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	20000094 	.word	0x20000094

0800d4a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2243      	movs	r2, #67	@ 0x43
 800d4b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d4b2:	4b03      	ldr	r3, [pc, #12]	@ (800d4c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	20000050 	.word	0x20000050

0800d4c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2243      	movs	r2, #67	@ 0x43
 800d4d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d4d2:	4b03      	ldr	r3, [pc, #12]	@ (800d4e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	200000d8 	.word	0x200000d8

0800d4e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	220a      	movs	r2, #10
 800d4f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d4f2:	4b03      	ldr	r3, [pc, #12]	@ (800d500 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	2000000c 	.word	0x2000000c

0800d504 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d514:	2303      	movs	r3, #3
 800d516:	e004      	b.n	800d522 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	683a      	ldr	r2, [r7, #0]
 800d51c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d52e:	b480      	push	{r7}
 800d530:	b087      	sub	sp, #28
 800d532:	af00      	add	r7, sp, #0
 800d534:	60f8      	str	r0, [r7, #12]
 800d536:	60b9      	str	r1, [r7, #8]
 800d538:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d540:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d548:	2303      	movs	r3, #3
 800d54a:	e008      	b.n	800d55e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d56a:	b480      	push	{r7}
 800d56c:	b085      	sub	sp, #20
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d57a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d582:	2303      	movs	r3, #3
 800d584:	e004      	b.n	800d590 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	683a      	ldr	r2, [r7, #0]
 800d58a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d5aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d101      	bne.n	800d5be <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e01a      	b.n	800d5f4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d114      	bne.n	800d5f2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d5e6:	2181      	movs	r1, #129	@ 0x81
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 fdb0 	bl	800f14e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d60a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	e016      	b.n	800d648 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	7c1b      	ldrb	r3, [r3, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d628:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d62c:	2101      	movs	r1, #1
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f001 fdae 	bl	800f190 <USBD_LL_PrepareReceive>
 800d634:	e007      	b.n	800d646 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d63c:	2340      	movs	r3, #64	@ 0x40
 800d63e:	2101      	movs	r1, #1
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f001 fda5 	bl	800f190 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	4613      	mov	r3, r2
 800d65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d664:	2303      	movs	r3, #3
 800d666:	e01f      	b.n	800d6a8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	79fa      	ldrb	r2, [r7, #7]
 800d69a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f001 fc0d 	bl	800eebc <USBD_LL_Init>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e016      	b.n	800d6f6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e4:	f107 020e 	add.w	r2, r7, #14
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b082      	sub	sp, #8
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f001 fc38 	bl	800ef7c <USBD_LL_Start>
 800d70c:	4603      	mov	r3, r0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d738:	2303      	movs	r3, #3
 800d73a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	4611      	mov	r1, r2
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	4798      	blx	r3
 800d756:	4603      	mov	r3, r0
 800d758:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d776:	2b00      	cmp	r3, #0
 800d778:	d007      	beq.n	800d78a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	78fa      	ldrb	r2, [r7, #3]
 800d784:	4611      	mov	r1, r2
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	4798      	blx	r3
  }

  return USBD_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 ff46 	bl	800e638 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	d01a      	beq.n	800d806 <USBD_LL_SetupStage+0x72>
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d822      	bhi.n	800d81a <USBD_LL_SetupStage+0x86>
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <USBD_LL_SetupStage+0x4a>
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d00a      	beq.n	800d7f2 <USBD_LL_SetupStage+0x5e>
 800d7dc:	e01d      	b.n	800d81a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f9ee 	bl	800dbc8 <USBD_StdDevReq>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f0:	e020      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 fa52 	bl	800dca4 <USBD_StdItfReq>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]
      break;
 800d804:	e016      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa91 	bl	800dd36 <USBD_StdEPReq>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
      break;
 800d818:	e00c      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d820:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d824:	b2db      	uxtb	r3, r3
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 fc07 	bl	800f03c <USBD_LL_StallEP>
 800d82e:	4603      	mov	r3, r0
 800d830:	73fb      	strb	r3, [r7, #15]
      break;
 800d832:	bf00      	nop
  }

  return ret;
 800d834:	7bfb      	ldrb	r3, [r7, #15]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b086      	sub	sp, #24
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	460b      	mov	r3, r1
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d138      	bne.n	800d8c4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d858:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d860:	2b03      	cmp	r3, #3
 800d862:	d14a      	bne.n	800d8fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d913      	bls.n	800d898 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	1ad2      	subs	r2, r2, r3
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	4293      	cmp	r3, r2
 800d888:	bf28      	it	cs
 800d88a:	4613      	movcs	r3, r2
 800d88c:	461a      	mov	r2, r3
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 ffc5 	bl	800e820 <USBD_CtlContinueRx>
 800d896:	e030      	b.n	800d8fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	d10b      	bne.n	800d8bc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 ffc0 	bl	800e842 <USBD_CtlSendStatus>
 800d8c2:	e01a      	b.n	800d8fa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d114      	bne.n	800d8fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	7afa      	ldrb	r2, [r7, #11]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	4798      	blx	r3
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	e000      	b.n	800d8fc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	460b      	mov	r3, r1
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d912:	7afb      	ldrb	r3, [r7, #11]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d16b      	bne.n	800d9f0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3314      	adds	r3, #20
 800d91c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d924:	2b02      	cmp	r3, #2
 800d926:	d156      	bne.n	800d9d6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	689a      	ldr	r2, [r3, #8]
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	429a      	cmp	r2, r3
 800d932:	d914      	bls.n	800d95e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	1ad2      	subs	r2, r2, r3
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	461a      	mov	r2, r3
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 ff3a 	bl	800e7c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d950:	2300      	movs	r3, #0
 800d952:	2200      	movs	r2, #0
 800d954:	2100      	movs	r1, #0
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f001 fc1a 	bl	800f190 <USBD_LL_PrepareReceive>
 800d95c:	e03b      	b.n	800d9d6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	429a      	cmp	r2, r3
 800d968:	d11c      	bne.n	800d9a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d972:	429a      	cmp	r2, r3
 800d974:	d316      	bcc.n	800d9a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	685a      	ldr	r2, [r3, #4]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d980:	429a      	cmp	r2, r3
 800d982:	d20f      	bcs.n	800d9a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d984:	2200      	movs	r2, #0
 800d986:	2100      	movs	r1, #0
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 ff1b 	bl	800e7c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d996:	2300      	movs	r3, #0
 800d998:	2200      	movs	r2, #0
 800d99a:	2100      	movs	r1, #0
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f001 fbf7 	bl	800f190 <USBD_LL_PrepareReceive>
 800d9a2:	e018      	b.n	800d9d6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d10b      	bne.n	800d9c8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d005      	beq.n	800d9c8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9c8:	2180      	movs	r1, #128	@ 0x80
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f001 fb36 	bl	800f03c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f000 ff49 	bl	800e868 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d122      	bne.n	800da26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7ff fe98 	bl	800d716 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d9ee:	e01a      	b.n	800da26 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d114      	bne.n	800da26 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da02:	695b      	ldr	r3, [r3, #20]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00e      	beq.n	800da26 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	7afa      	ldrb	r2, [r7, #11]
 800da12:	4611      	mov	r1, r2
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	4798      	blx	r3
 800da18:	4603      	mov	r3, r0
 800da1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	e000      	b.n	800da28 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800da60:	2303      	movs	r3, #3
 800da62:	e02f      	b.n	800dac4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00f      	beq.n	800da8e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d009      	beq.n	800da8e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	6852      	ldr	r2, [r2, #4]
 800da86:	b2d2      	uxtb	r2, r2
 800da88:	4611      	mov	r1, r2
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da8e:	2340      	movs	r3, #64	@ 0x40
 800da90:	2200      	movs	r2, #0
 800da92:	2100      	movs	r1, #0
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f001 fa8c 	bl	800efb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2240      	movs	r2, #64	@ 0x40
 800daa6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800daaa:	2340      	movs	r3, #64	@ 0x40
 800daac:	2200      	movs	r2, #0
 800daae:	2180      	movs	r1, #128	@ 0x80
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 fa7e 	bl	800efb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2240      	movs	r2, #64	@ 0x40
 800dac0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	78fa      	ldrb	r2, [r7, #3]
 800dadc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dade:	2300      	movs	r3, #0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2204      	movs	r2, #4
 800db06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db26:	b2db      	uxtb	r3, r3
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d106      	bne.n	800db3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800db32:	b2da      	uxtb	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800db5a:	2303      	movs	r3, #3
 800db5c:	e012      	b.n	800db84 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b03      	cmp	r3, #3
 800db68:	d10b      	bne.n	800db82 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d005      	beq.n	800db82 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	3301      	adds	r3, #1
 800dba2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbaa:	8a3b      	ldrh	r3, [r7, #16]
 800dbac:	021b      	lsls	r3, r3, #8
 800dbae:	b21a      	sxth	r2, r3
 800dbb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	b21b      	sxth	r3, r3
 800dbb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dbba:	89fb      	ldrh	r3, [r7, #14]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	371c      	adds	r7, #28
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbde:	2b40      	cmp	r3, #64	@ 0x40
 800dbe0:	d005      	beq.n	800dbee <USBD_StdDevReq+0x26>
 800dbe2:	2b40      	cmp	r3, #64	@ 0x40
 800dbe4:	d853      	bhi.n	800dc8e <USBD_StdDevReq+0xc6>
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00b      	beq.n	800dc02 <USBD_StdDevReq+0x3a>
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	d14f      	bne.n	800dc8e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	4798      	blx	r3
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	73fb      	strb	r3, [r7, #15]
      break;
 800dc00:	e04a      	b.n	800dc98 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	785b      	ldrb	r3, [r3, #1]
 800dc06:	2b09      	cmp	r3, #9
 800dc08:	d83b      	bhi.n	800dc82 <USBD_StdDevReq+0xba>
 800dc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc10 <USBD_StdDevReq+0x48>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc65 	.word	0x0800dc65
 800dc14:	0800dc79 	.word	0x0800dc79
 800dc18:	0800dc83 	.word	0x0800dc83
 800dc1c:	0800dc6f 	.word	0x0800dc6f
 800dc20:	0800dc83 	.word	0x0800dc83
 800dc24:	0800dc43 	.word	0x0800dc43
 800dc28:	0800dc39 	.word	0x0800dc39
 800dc2c:	0800dc83 	.word	0x0800dc83
 800dc30:	0800dc5b 	.word	0x0800dc5b
 800dc34:	0800dc4d 	.word	0x0800dc4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f9de 	bl	800dffc <USBD_GetDescriptor>
          break;
 800dc40:	e024      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fb6d 	bl	800e324 <USBD_SetAddress>
          break;
 800dc4a:	e01f      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fbac 	bl	800e3ac <USBD_SetConfig>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
          break;
 800dc58:	e018      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc5a:	6839      	ldr	r1, [r7, #0]
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fc4b 	bl	800e4f8 <USBD_GetConfig>
          break;
 800dc62:	e013      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fc7c 	bl	800e564 <USBD_GetStatus>
          break;
 800dc6c:	e00e      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fcab 	bl	800e5cc <USBD_SetFeature>
          break;
 800dc76:	e009      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 fcba 	bl	800e5f4 <USBD_ClrFeature>
          break;
 800dc80:	e004      	b.n	800dc8c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fd11 	bl	800e6ac <USBD_CtlError>
          break;
 800dc8a:	bf00      	nop
      }
      break;
 800dc8c:	e004      	b.n	800dc98 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fd0b 	bl	800e6ac <USBD_CtlError>
      break;
 800dc96:	bf00      	nop
  }

  return ret;
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop

0800dca4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dcba:	2b40      	cmp	r3, #64	@ 0x40
 800dcbc:	d005      	beq.n	800dcca <USBD_StdItfReq+0x26>
 800dcbe:	2b40      	cmp	r3, #64	@ 0x40
 800dcc0:	d82f      	bhi.n	800dd22 <USBD_StdItfReq+0x7e>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <USBD_StdItfReq+0x26>
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	d12b      	bne.n	800dd22 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d81d      	bhi.n	800dd14 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	889b      	ldrh	r3, [r3, #4]
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d813      	bhi.n	800dd0a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	4798      	blx	r3
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	88db      	ldrh	r3, [r3, #6]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d110      	bne.n	800dd1e <USBD_StdItfReq+0x7a>
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10d      	bne.n	800dd1e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fd9d 	bl	800e842 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd08:	e009      	b.n	800dd1e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fccd 	bl	800e6ac <USBD_CtlError>
          break;
 800dd12:	e004      	b.n	800dd1e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dd14:	6839      	ldr	r1, [r7, #0]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fcc8 	bl	800e6ac <USBD_CtlError>
          break;
 800dd1c:	e000      	b.n	800dd20 <USBD_StdItfReq+0x7c>
          break;
 800dd1e:	bf00      	nop
      }
      break;
 800dd20:	e004      	b.n	800dd2c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fcc1 	bl	800e6ac <USBD_CtlError>
      break;
 800dd2a:	bf00      	nop
  }

  return ret;
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	889b      	ldrh	r3, [r3, #4]
 800dd48:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd52:	2b40      	cmp	r3, #64	@ 0x40
 800dd54:	d007      	beq.n	800dd66 <USBD_StdEPReq+0x30>
 800dd56:	2b40      	cmp	r3, #64	@ 0x40
 800dd58:	f200 8145 	bhi.w	800dfe6 <USBD_StdEPReq+0x2b0>
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00c      	beq.n	800dd7a <USBD_StdEPReq+0x44>
 800dd60:	2b20      	cmp	r3, #32
 800dd62:	f040 8140 	bne.w	800dfe6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	6839      	ldr	r1, [r7, #0]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	4798      	blx	r3
 800dd74:	4603      	mov	r3, r0
 800dd76:	73fb      	strb	r3, [r7, #15]
      break;
 800dd78:	e13a      	b.n	800dff0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	785b      	ldrb	r3, [r3, #1]
 800dd7e:	2b03      	cmp	r3, #3
 800dd80:	d007      	beq.n	800dd92 <USBD_StdEPReq+0x5c>
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	f300 8129 	bgt.w	800dfda <USBD_StdEPReq+0x2a4>
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d07f      	beq.n	800de8c <USBD_StdEPReq+0x156>
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d03c      	beq.n	800de0a <USBD_StdEPReq+0xd4>
 800dd90:	e123      	b.n	800dfda <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d002      	beq.n	800dda4 <USBD_StdEPReq+0x6e>
 800dd9e:	2b03      	cmp	r3, #3
 800dda0:	d016      	beq.n	800ddd0 <USBD_StdEPReq+0x9a>
 800dda2:	e02c      	b.n	800ddfe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00d      	beq.n	800ddc6 <USBD_StdEPReq+0x90>
 800ddaa:	7bbb      	ldrb	r3, [r7, #14]
 800ddac:	2b80      	cmp	r3, #128	@ 0x80
 800ddae:	d00a      	beq.n	800ddc6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f001 f941 	bl	800f03c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddba:	2180      	movs	r1, #128	@ 0x80
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f001 f93d 	bl	800f03c <USBD_LL_StallEP>
 800ddc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddc4:	e020      	b.n	800de08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fc6f 	bl	800e6ac <USBD_CtlError>
              break;
 800ddce:	e01b      	b.n	800de08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	885b      	ldrh	r3, [r3, #2]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10e      	bne.n	800ddf6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ddd8:	7bbb      	ldrb	r3, [r7, #14]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00b      	beq.n	800ddf6 <USBD_StdEPReq+0xc0>
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
 800dde0:	2b80      	cmp	r3, #128	@ 0x80
 800dde2:	d008      	beq.n	800ddf6 <USBD_StdEPReq+0xc0>
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	88db      	ldrh	r3, [r3, #6]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d104      	bne.n	800ddf6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f001 f923 	bl	800f03c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fd23 	bl	800e842 <USBD_CtlSendStatus>

              break;
 800ddfc:	e004      	b.n	800de08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fc53 	bl	800e6ac <USBD_CtlError>
              break;
 800de06:	bf00      	nop
          }
          break;
 800de08:	e0ec      	b.n	800dfe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b02      	cmp	r3, #2
 800de14:	d002      	beq.n	800de1c <USBD_StdEPReq+0xe6>
 800de16:	2b03      	cmp	r3, #3
 800de18:	d016      	beq.n	800de48 <USBD_StdEPReq+0x112>
 800de1a:	e030      	b.n	800de7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de1c:	7bbb      	ldrb	r3, [r7, #14]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00d      	beq.n	800de3e <USBD_StdEPReq+0x108>
 800de22:	7bbb      	ldrb	r3, [r7, #14]
 800de24:	2b80      	cmp	r3, #128	@ 0x80
 800de26:	d00a      	beq.n	800de3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f001 f905 	bl	800f03c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de32:	2180      	movs	r1, #128	@ 0x80
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f001 f901 	bl	800f03c <USBD_LL_StallEP>
 800de3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de3c:	e025      	b.n	800de8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fc33 	bl	800e6ac <USBD_CtlError>
              break;
 800de46:	e020      	b.n	800de8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	885b      	ldrh	r3, [r3, #2]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d11b      	bne.n	800de88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de50:	7bbb      	ldrb	r3, [r7, #14]
 800de52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de56:	2b00      	cmp	r3, #0
 800de58:	d004      	beq.n	800de64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
 800de5c:	4619      	mov	r1, r3
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f001 f90b 	bl	800f07a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fcec 	bl	800e842 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	4798      	blx	r3
 800de78:	4603      	mov	r3, r0
 800de7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800de7c:	e004      	b.n	800de88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 fc13 	bl	800e6ac <USBD_CtlError>
              break;
 800de86:	e000      	b.n	800de8a <USBD_StdEPReq+0x154>
              break;
 800de88:	bf00      	nop
          }
          break;
 800de8a:	e0ab      	b.n	800dfe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b02      	cmp	r3, #2
 800de96:	d002      	beq.n	800de9e <USBD_StdEPReq+0x168>
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d032      	beq.n	800df02 <USBD_StdEPReq+0x1cc>
 800de9c:	e097      	b.n	800dfce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de9e:	7bbb      	ldrb	r3, [r7, #14]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d007      	beq.n	800deb4 <USBD_StdEPReq+0x17e>
 800dea4:	7bbb      	ldrb	r3, [r7, #14]
 800dea6:	2b80      	cmp	r3, #128	@ 0x80
 800dea8:	d004      	beq.n	800deb4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fbfd 	bl	800e6ac <USBD_CtlError>
                break;
 800deb2:	e091      	b.n	800dfd8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da0b      	bge.n	800ded4 <USBD_StdEPReq+0x19e>
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	3310      	adds	r3, #16
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4413      	add	r3, r2
 800ded0:	3304      	adds	r3, #4
 800ded2:	e00b      	b.n	800deec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	4413      	add	r3, r2
 800deea:	3304      	adds	r3, #4
 800deec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	2202      	movs	r2, #2
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fc47 	bl	800e78e <USBD_CtlSendData>
              break;
 800df00:	e06a      	b.n	800dfd8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df06:	2b00      	cmp	r3, #0
 800df08:	da11      	bge.n	800df2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	f003 020f 	and.w	r2, r3, #15
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	4613      	mov	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	4413      	add	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	440b      	add	r3, r1
 800df1c:	3324      	adds	r3, #36	@ 0x24
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d117      	bne.n	800df54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df24:	6839      	ldr	r1, [r7, #0]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 fbc0 	bl	800e6ac <USBD_CtlError>
                  break;
 800df2c:	e054      	b.n	800dfd8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	f003 020f 	and.w	r2, r3, #15
 800df34:	6879      	ldr	r1, [r7, #4]
 800df36:	4613      	mov	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	440b      	add	r3, r1
 800df40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d104      	bne.n	800df54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fbad 	bl	800e6ac <USBD_CtlError>
                  break;
 800df52:	e041      	b.n	800dfd8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	da0b      	bge.n	800df74 <USBD_StdEPReq+0x23e>
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800df62:	4613      	mov	r3, r2
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	4413      	add	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	3310      	adds	r3, #16
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	4413      	add	r3, r2
 800df70:	3304      	adds	r3, #4
 800df72:	e00b      	b.n	800df8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df7a:	4613      	mov	r3, r2
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	4413      	add	r3, r2
 800df8a:	3304      	adds	r3, #4
 800df8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <USBD_StdEPReq+0x264>
 800df94:	7bbb      	ldrb	r3, [r7, #14]
 800df96:	2b80      	cmp	r3, #128	@ 0x80
 800df98:	d103      	bne.n	800dfa2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	e00e      	b.n	800dfc0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f001 f886 	bl	800f0b8 <USBD_LL_IsStallEP>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	e002      	b.n	800dfc0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fbe1 	bl	800e78e <USBD_CtlSendData>
              break;
 800dfcc:	e004      	b.n	800dfd8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dfce:	6839      	ldr	r1, [r7, #0]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fb6b 	bl	800e6ac <USBD_CtlError>
              break;
 800dfd6:	bf00      	nop
          }
          break;
 800dfd8:	e004      	b.n	800dfe4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fb65 	bl	800e6ac <USBD_CtlError>
          break;
 800dfe2:	bf00      	nop
      }
      break;
 800dfe4:	e004      	b.n	800dff0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fb5f 	bl	800e6ac <USBD_CtlError>
      break;
 800dfee:	bf00      	nop
  }

  return ret;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e006:	2300      	movs	r3, #0
 800e008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e00e:	2300      	movs	r3, #0
 800e010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	885b      	ldrh	r3, [r3, #2]
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	b29b      	uxth	r3, r3
 800e01a:	3b01      	subs	r3, #1
 800e01c:	2b0e      	cmp	r3, #14
 800e01e:	f200 8152 	bhi.w	800e2c6 <USBD_GetDescriptor+0x2ca>
 800e022:	a201      	add	r2, pc, #4	@ (adr r2, 800e028 <USBD_GetDescriptor+0x2c>)
 800e024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e028:	0800e099 	.word	0x0800e099
 800e02c:	0800e0b1 	.word	0x0800e0b1
 800e030:	0800e0f1 	.word	0x0800e0f1
 800e034:	0800e2c7 	.word	0x0800e2c7
 800e038:	0800e2c7 	.word	0x0800e2c7
 800e03c:	0800e267 	.word	0x0800e267
 800e040:	0800e293 	.word	0x0800e293
 800e044:	0800e2c7 	.word	0x0800e2c7
 800e048:	0800e2c7 	.word	0x0800e2c7
 800e04c:	0800e2c7 	.word	0x0800e2c7
 800e050:	0800e2c7 	.word	0x0800e2c7
 800e054:	0800e2c7 	.word	0x0800e2c7
 800e058:	0800e2c7 	.word	0x0800e2c7
 800e05c:	0800e2c7 	.word	0x0800e2c7
 800e060:	0800e065 	.word	0x0800e065
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	7c12      	ldrb	r2, [r2, #16]
 800e07c:	f107 0108 	add.w	r1, r7, #8
 800e080:	4610      	mov	r0, r2
 800e082:	4798      	blx	r3
 800e084:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e086:	e126      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fb0e 	bl	800e6ac <USBD_CtlError>
        err++;
 800e090:	7afb      	ldrb	r3, [r7, #11]
 800e092:	3301      	adds	r3, #1
 800e094:	72fb      	strb	r3, [r7, #11]
      break;
 800e096:	e11e      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	7c12      	ldrb	r2, [r2, #16]
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
 800e0ac:	60f8      	str	r0, [r7, #12]
      break;
 800e0ae:	e112      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7c1b      	ldrb	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10d      	bne.n	800e0d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c0:	f107 0208 	add.w	r2, r7, #8
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e0d2:	e100      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0dc:	f107 0208 	add.w	r2, r7, #8
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
 800e0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	2202      	movs	r2, #2
 800e0ec:	701a      	strb	r2, [r3, #0]
      break;
 800e0ee:	e0f2      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	885b      	ldrh	r3, [r3, #2]
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b05      	cmp	r3, #5
 800e0f8:	f200 80ac 	bhi.w	800e254 <USBD_GetDescriptor+0x258>
 800e0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e104 <USBD_GetDescriptor+0x108>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e11d 	.word	0x0800e11d
 800e108:	0800e151 	.word	0x0800e151
 800e10c:	0800e185 	.word	0x0800e185
 800e110:	0800e1b9 	.word	0x0800e1b9
 800e114:	0800e1ed 	.word	0x0800e1ed
 800e118:	0800e221 	.word	0x0800e221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00b      	beq.n	800e140 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	7c12      	ldrb	r2, [r2, #16]
 800e134:	f107 0108 	add.w	r1, r7, #8
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3
 800e13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e13e:	e091      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fab2 	bl	800e6ac <USBD_CtlError>
            err++;
 800e148:	7afb      	ldrb	r3, [r7, #11]
 800e14a:	3301      	adds	r3, #1
 800e14c:	72fb      	strb	r3, [r7, #11]
          break;
 800e14e:	e089      	b.n	800e264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00b      	beq.n	800e174 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	7c12      	ldrb	r2, [r2, #16]
 800e168:	f107 0108 	add.w	r1, r7, #8
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
 800e170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e172:	e077      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fa98 	bl	800e6ac <USBD_CtlError>
            err++;
 800e17c:	7afb      	ldrb	r3, [r7, #11]
 800e17e:	3301      	adds	r3, #1
 800e180:	72fb      	strb	r3, [r7, #11]
          break;
 800e182:	e06f      	b.n	800e264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00b      	beq.n	800e1a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	7c12      	ldrb	r2, [r2, #16]
 800e19c:	f107 0108 	add.w	r1, r7, #8
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	4798      	blx	r3
 800e1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1a6:	e05d      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fa7e 	bl	800e6ac <USBD_CtlError>
            err++;
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1b6:	e055      	b.n	800e264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00b      	beq.n	800e1dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	7c12      	ldrb	r2, [r2, #16]
 800e1d0:	f107 0108 	add.w	r1, r7, #8
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	4798      	blx	r3
 800e1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1da:	e043      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fa64 	bl	800e6ac <USBD_CtlError>
            err++;
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1ea:	e03b      	b.n	800e264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00b      	beq.n	800e210 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	7c12      	ldrb	r2, [r2, #16]
 800e204:	f107 0108 	add.w	r1, r7, #8
 800e208:	4610      	mov	r0, r2
 800e20a:	4798      	blx	r3
 800e20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e20e:	e029      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 fa4a 	bl	800e6ac <USBD_CtlError>
            err++;
 800e218:	7afb      	ldrb	r3, [r7, #11]
 800e21a:	3301      	adds	r3, #1
 800e21c:	72fb      	strb	r3, [r7, #11]
          break;
 800e21e:	e021      	b.n	800e264 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e232:	699b      	ldr	r3, [r3, #24]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	7c12      	ldrb	r2, [r2, #16]
 800e238:	f107 0108 	add.w	r1, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e242:	e00f      	b.n	800e264 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fa30 	bl	800e6ac <USBD_CtlError>
            err++;
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	3301      	adds	r3, #1
 800e250:	72fb      	strb	r3, [r7, #11]
          break;
 800e252:	e007      	b.n	800e264 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fa28 	bl	800e6ac <USBD_CtlError>
          err++;
 800e25c:	7afb      	ldrb	r3, [r7, #11]
 800e25e:	3301      	adds	r3, #1
 800e260:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e262:	bf00      	nop
      }
      break;
 800e264:	e037      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7c1b      	ldrb	r3, [r3, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d109      	bne.n	800e282 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e276:	f107 0208 	add.w	r2, r7, #8
 800e27a:	4610      	mov	r0, r2
 800e27c:	4798      	blx	r3
 800e27e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e280:	e029      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fa11 	bl	800e6ac <USBD_CtlError>
        err++;
 800e28a:	7afb      	ldrb	r3, [r7, #11]
 800e28c:	3301      	adds	r3, #1
 800e28e:	72fb      	strb	r3, [r7, #11]
      break;
 800e290:	e021      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7c1b      	ldrb	r3, [r3, #16]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10d      	bne.n	800e2b6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2a2:	f107 0208 	add.w	r2, r7, #8
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4798      	blx	r3
 800e2aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	2207      	movs	r2, #7
 800e2b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2b4:	e00f      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f9f7 	bl	800e6ac <USBD_CtlError>
        err++;
 800e2be:	7afb      	ldrb	r3, [r7, #11]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800e2c4:	e007      	b.n	800e2d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 f9ef 	bl	800e6ac <USBD_CtlError>
      err++;
 800e2ce:	7afb      	ldrb	r3, [r7, #11]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800e2d4:	bf00      	nop
  }

  if (err != 0U)
 800e2d6:	7afb      	ldrb	r3, [r7, #11]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d11e      	bne.n	800e31a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	88db      	ldrh	r3, [r3, #6]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d016      	beq.n	800e312 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e2e4:	893b      	ldrh	r3, [r7, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00e      	beq.n	800e308 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	88da      	ldrh	r2, [r3, #6]
 800e2ee:	893b      	ldrh	r3, [r7, #8]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	bf28      	it	cs
 800e2f4:	4613      	movcs	r3, r2
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2fa:	893b      	ldrh	r3, [r7, #8]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fa44 	bl	800e78e <USBD_CtlSendData>
 800e306:	e009      	b.n	800e31c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f9ce 	bl	800e6ac <USBD_CtlError>
 800e310:	e004      	b.n	800e31c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fa95 	bl	800e842 <USBD_CtlSendStatus>
 800e318:	e000      	b.n	800e31c <USBD_GetDescriptor+0x320>
    return;
 800e31a:	bf00      	nop
  }
}
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop

0800e324 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	889b      	ldrh	r3, [r3, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d131      	bne.n	800e39a <USBD_SetAddress+0x76>
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	88db      	ldrh	r3, [r3, #6]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d12d      	bne.n	800e39a <USBD_SetAddress+0x76>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	885b      	ldrh	r3, [r3, #2]
 800e342:	2b7f      	cmp	r3, #127	@ 0x7f
 800e344:	d829      	bhi.n	800e39a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	885b      	ldrh	r3, [r3, #2]
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d104      	bne.n	800e368 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f9a3 	bl	800e6ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e366:	e01d      	b.n	800e3a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	7bfa      	ldrb	r2, [r7, #15]
 800e36c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e370:	7bfb      	ldrb	r3, [r7, #15]
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fecb 	bl	800f110 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fa61 	bl	800e842 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d004      	beq.n	800e390 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2202      	movs	r2, #2
 800e38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e38e:	e009      	b.n	800e3a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e398:	e004      	b.n	800e3a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f985 	bl	800e6ac <USBD_CtlError>
  }
}
 800e3a2:	bf00      	nop
 800e3a4:	bf00      	nop
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	885b      	ldrh	r3, [r3, #2]
 800e3be:	b2da      	uxtb	r2, r3
 800e3c0:	4b4c      	ldr	r3, [pc, #304]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e3c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3c4:	4b4b      	ldr	r3, [pc, #300]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d905      	bls.n	800e3d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e3cc:	6839      	ldr	r1, [r7, #0]
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f96c 	bl	800e6ac <USBD_CtlError>
    return USBD_FAIL;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e088      	b.n	800e4ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b02      	cmp	r3, #2
 800e3e2:	d002      	beq.n	800e3ea <USBD_SetConfig+0x3e>
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d025      	beq.n	800e434 <USBD_SetConfig+0x88>
 800e3e8:	e071      	b.n	800e4ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e3ea:	4b42      	ldr	r3, [pc, #264]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d01c      	beq.n	800e42c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e3f2:	4b40      	ldr	r3, [pc, #256]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3fc:	4b3d      	ldr	r3, [pc, #244]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff f992 	bl	800d72c <USBD_SetClassConfig>
 800e408:	4603      	mov	r3, r0
 800e40a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d004      	beq.n	800e41c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f949 	bl	800e6ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e41a:	e065      	b.n	800e4e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fa10 	bl	800e842 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2203      	movs	r2, #3
 800e426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e42a:	e05d      	b.n	800e4e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fa08 	bl	800e842 <USBD_CtlSendStatus>
      break;
 800e432:	e059      	b.n	800e4e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e434:	4b2f      	ldr	r3, [pc, #188]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d112      	bne.n	800e462 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e444:	4b2b      	ldr	r3, [pc, #172]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	461a      	mov	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e44e:	4b29      	ldr	r3, [pc, #164]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff f985 	bl	800d764 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f9f1 	bl	800e842 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e460:	e042      	b.n	800e4e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e462:	4b24      	ldr	r3, [pc, #144]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d02a      	beq.n	800e4c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	b2db      	uxtb	r3, r3
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff f973 	bl	800d764 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e47e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e488:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff f94c 	bl	800d72c <USBD_SetClassConfig>
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00f      	beq.n	800e4be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f903 	bl	800e6ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7ff f958 	bl	800d764 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e4bc:	e014      	b.n	800e4e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f9bf 	bl	800e842 <USBD_CtlSendStatus>
      break;
 800e4c4:	e010      	b.n	800e4e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f9bb 	bl	800e842 <USBD_CtlSendStatus>
      break;
 800e4cc:	e00c      	b.n	800e4e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f8eb 	bl	800e6ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e4d6:	4b07      	ldr	r3, [pc, #28]	@ (800e4f4 <USBD_SetConfig+0x148>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7ff f941 	bl	800d764 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e4e6:	bf00      	nop
  }

  return ret;
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000560 	.word	0x20000560

0800e4f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	88db      	ldrh	r3, [r3, #6]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d004      	beq.n	800e514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f8cd 	bl	800e6ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e512:	e023      	b.n	800e55c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	dc02      	bgt.n	800e526 <USBD_GetConfig+0x2e>
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc03      	bgt.n	800e52c <USBD_GetConfig+0x34>
 800e524:	e015      	b.n	800e552 <USBD_GetConfig+0x5a>
 800e526:	2b03      	cmp	r3, #3
 800e528:	d00b      	beq.n	800e542 <USBD_GetConfig+0x4a>
 800e52a:	e012      	b.n	800e552 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3308      	adds	r3, #8
 800e536:	2201      	movs	r2, #1
 800e538:	4619      	mov	r1, r3
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f927 	bl	800e78e <USBD_CtlSendData>
        break;
 800e540:	e00c      	b.n	800e55c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3304      	adds	r3, #4
 800e546:	2201      	movs	r2, #1
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f91f 	bl	800e78e <USBD_CtlSendData>
        break;
 800e550:	e004      	b.n	800e55c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e552:	6839      	ldr	r1, [r7, #0]
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 f8a9 	bl	800e6ac <USBD_CtlError>
        break;
 800e55a:	bf00      	nop
}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e574:	b2db      	uxtb	r3, r3
 800e576:	3b01      	subs	r3, #1
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d81e      	bhi.n	800e5ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	88db      	ldrh	r3, [r3, #6]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d004      	beq.n	800e58e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f890 	bl	800e6ac <USBD_CtlError>
        break;
 800e58c:	e01a      	b.n	800e5c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d005      	beq.n	800e5aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	f043 0202 	orr.w	r2, r3, #2
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	330c      	adds	r3, #12
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f8eb 	bl	800e78e <USBD_CtlSendData>
      break;
 800e5b8:	e004      	b.n	800e5c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f875 	bl	800e6ac <USBD_CtlError>
      break;
 800e5c2:	bf00      	nop
  }
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	885b      	ldrh	r3, [r3, #2]
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d106      	bne.n	800e5ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f92b 	bl	800e842 <USBD_CtlSendStatus>
  }
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e604:	b2db      	uxtb	r3, r3
 800e606:	3b01      	subs	r3, #1
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d80b      	bhi.n	800e624 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	885b      	ldrh	r3, [r3, #2]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d10c      	bne.n	800e62e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f910 	bl	800e842 <USBD_CtlSendStatus>
      }
      break;
 800e622:	e004      	b.n	800e62e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f840 	bl	800e6ac <USBD_CtlError>
      break;
 800e62c:	e000      	b.n	800e630 <USBD_ClrFeature+0x3c>
      break;
 800e62e:	bf00      	nop
  }
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	781a      	ldrb	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3301      	adds	r3, #1
 800e660:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff fa92 	bl	800db8c <SWAPBYTE>
 800e668:	4603      	mov	r3, r0
 800e66a:	461a      	mov	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	3301      	adds	r3, #1
 800e674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f7ff fa85 	bl	800db8c <SWAPBYTE>
 800e682:	4603      	mov	r3, r0
 800e684:	461a      	mov	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3301      	adds	r3, #1
 800e68e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3301      	adds	r3, #1
 800e694:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7ff fa78 	bl	800db8c <SWAPBYTE>
 800e69c:	4603      	mov	r3, r0
 800e69e:	461a      	mov	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	80da      	strh	r2, [r3, #6]
}
 800e6a4:	bf00      	nop
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6b6:	2180      	movs	r1, #128	@ 0x80
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fcbf 	bl	800f03c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e6be:	2100      	movs	r1, #0
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fcbb 	bl	800f03c <USBD_LL_StallEP>
}
 800e6c6:	bf00      	nop
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b086      	sub	sp, #24
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d036      	beq.n	800e752 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e6e8:	6938      	ldr	r0, [r7, #16]
 800e6ea:	f000 f836 	bl	800e75a <USBD_GetLen>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	4413      	add	r3, r2
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	7812      	ldrb	r2, [r2, #0]
 800e706:	701a      	strb	r2, [r3, #0]
  idx++;
 800e708:	7dfb      	ldrb	r3, [r7, #23]
 800e70a:	3301      	adds	r3, #1
 800e70c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	4413      	add	r3, r2
 800e714:	2203      	movs	r2, #3
 800e716:	701a      	strb	r2, [r3, #0]
  idx++;
 800e718:	7dfb      	ldrb	r3, [r7, #23]
 800e71a:	3301      	adds	r3, #1
 800e71c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e71e:	e013      	b.n	800e748 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e720:	7dfb      	ldrb	r3, [r7, #23]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	4413      	add	r3, r2
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	7812      	ldrb	r2, [r2, #0]
 800e72a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	3301      	adds	r3, #1
 800e730:	613b      	str	r3, [r7, #16]
    idx++;
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	3301      	adds	r3, #1
 800e736:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e738:	7dfb      	ldrb	r3, [r7, #23]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	4413      	add	r3, r2
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
    idx++;
 800e742:	7dfb      	ldrb	r3, [r7, #23]
 800e744:	3301      	adds	r3, #1
 800e746:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d1e7      	bne.n	800e720 <USBD_GetString+0x52>
 800e750:	e000      	b.n	800e754 <USBD_GetString+0x86>
    return;
 800e752:	bf00      	nop
  }
}
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b085      	sub	sp, #20
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e762:	2300      	movs	r3, #0
 800e764:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e76a:	e005      	b.n	800e778 <USBD_GetLen+0x1e>
  {
    len++;
 800e76c:	7bfb      	ldrb	r3, [r7, #15]
 800e76e:	3301      	adds	r3, #1
 800e770:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	3301      	adds	r3, #1
 800e776:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1f5      	bne.n	800e76c <USBD_GetLen+0x12>
  }

  return len;
 800e780:	7bfb      	ldrb	r3, [r7, #15]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2202      	movs	r2, #2
 800e79e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 fcca 	bl	800f14e <USBD_LL_Transmit>

  return USBD_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	f000 fcb9 	bl	800f14e <USBD_LL_Transmit>

  return USBD_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2203      	movs	r2, #3
 800e7f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	2100      	movs	r1, #0
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f000 fcbd 	bl	800f190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	2100      	movs	r1, #0
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f000 fcac 	bl	800f190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b082      	sub	sp, #8
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2204      	movs	r2, #4
 800e84e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e852:	2300      	movs	r3, #0
 800e854:	2200      	movs	r2, #0
 800e856:	2100      	movs	r1, #0
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 fc78 	bl	800f14e <USBD_LL_Transmit>

  return USBD_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2205      	movs	r2, #5
 800e874:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e878:	2300      	movs	r3, #0
 800e87a:	2200      	movs	r2, #0
 800e87c:	2100      	movs	r1, #0
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 fc86 	bl	800f190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
	...

0800e890 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800e894:	2200      	movs	r2, #0
 800e896:	2120      	movs	r1, #32
 800e898:	4818      	ldr	r0, [pc, #96]	@ (800e8fc <MX_USB_Device_Init+0x6c>)
 800e89a:	f7f5 fb43 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800e89e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e8a2:	f7f4 fe11 	bl	80034c8 <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	2120      	movs	r1, #32
 800e8aa:	4814      	ldr	r0, [pc, #80]	@ (800e8fc <MX_USB_Device_Init+0x6c>)
 800e8ac:	f7f5 fb3a 	bl	8003f24 <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4913      	ldr	r1, [pc, #76]	@ (800e900 <MX_USB_Device_Init+0x70>)
 800e8b4:	4813      	ldr	r0, [pc, #76]	@ (800e904 <MX_USB_Device_Init+0x74>)
 800e8b6:	f7fe fecb 	bl	800d650 <USBD_Init>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800e8c0:	f7f2 fda9 	bl	8001416 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e8c4:	4910      	ldr	r1, [pc, #64]	@ (800e908 <MX_USB_Device_Init+0x78>)
 800e8c6:	480f      	ldr	r0, [pc, #60]	@ (800e904 <MX_USB_Device_Init+0x74>)
 800e8c8:	f7fe fef2 	bl	800d6b0 <USBD_RegisterClass>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <MX_USB_Device_Init+0x46>
    Error_Handler();
 800e8d2:	f7f2 fda0 	bl	8001416 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e8d6:	490d      	ldr	r1, [pc, #52]	@ (800e90c <MX_USB_Device_Init+0x7c>)
 800e8d8:	480a      	ldr	r0, [pc, #40]	@ (800e904 <MX_USB_Device_Init+0x74>)
 800e8da:	f7fe fe13 	bl	800d504 <USBD_CDC_RegisterInterface>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <MX_USB_Device_Init+0x58>
    Error_Handler();
 800e8e4:	f7f2 fd97 	bl	8001416 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e8e8:	4806      	ldr	r0, [pc, #24]	@ (800e904 <MX_USB_Device_Init+0x74>)
 800e8ea:	f7fe ff08 	bl	800d6fe <USBD_Start>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <MX_USB_Device_Init+0x68>
    Error_Handler();
 800e8f4:	f7f2 fd8f 	bl	8001416 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e8f8:	bf00      	nop
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	48000400 	.word	0x48000400
 800e900:	20000130 	.word	0x20000130
 800e904:	20000564 	.word	0x20000564
 800e908:	20000018 	.word	0x20000018
 800e90c:	2000011c 	.word	0x2000011c

0800e910 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e914:	2200      	movs	r2, #0
 800e916:	4905      	ldr	r1, [pc, #20]	@ (800e92c <CDC_Init_FS+0x1c>)
 800e918:	4805      	ldr	r0, [pc, #20]	@ (800e930 <CDC_Init_FS+0x20>)
 800e91a:	f7fe fe08 	bl	800d52e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e91e:	4905      	ldr	r1, [pc, #20]	@ (800e934 <CDC_Init_FS+0x24>)
 800e920:	4803      	ldr	r0, [pc, #12]	@ (800e930 <CDC_Init_FS+0x20>)
 800e922:	f7fe fe22 	bl	800d56a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e926:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e928:	4618      	mov	r0, r3
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20001034 	.word	0x20001034
 800e930:	20000564 	.word	0x20000564
 800e934:	20000834 	.word	0x20000834

0800e938 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e938:	b480      	push	{r7}
 800e93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e93c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e93e:	4618      	mov	r0, r3
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	4603      	mov	r3, r0
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	71fb      	strb	r3, [r7, #7]
 800e954:	4613      	mov	r3, r2
 800e956:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	2b23      	cmp	r3, #35	@ 0x23
 800e95c:	d84a      	bhi.n	800e9f4 <CDC_Control_FS+0xac>
 800e95e:	a201      	add	r2, pc, #4	@ (adr r2, 800e964 <CDC_Control_FS+0x1c>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9f5 	.word	0x0800e9f5
 800e968:	0800e9f5 	.word	0x0800e9f5
 800e96c:	0800e9f5 	.word	0x0800e9f5
 800e970:	0800e9f5 	.word	0x0800e9f5
 800e974:	0800e9f5 	.word	0x0800e9f5
 800e978:	0800e9f5 	.word	0x0800e9f5
 800e97c:	0800e9f5 	.word	0x0800e9f5
 800e980:	0800e9f5 	.word	0x0800e9f5
 800e984:	0800e9f5 	.word	0x0800e9f5
 800e988:	0800e9f5 	.word	0x0800e9f5
 800e98c:	0800e9f5 	.word	0x0800e9f5
 800e990:	0800e9f5 	.word	0x0800e9f5
 800e994:	0800e9f5 	.word	0x0800e9f5
 800e998:	0800e9f5 	.word	0x0800e9f5
 800e99c:	0800e9f5 	.word	0x0800e9f5
 800e9a0:	0800e9f5 	.word	0x0800e9f5
 800e9a4:	0800e9f5 	.word	0x0800e9f5
 800e9a8:	0800e9f5 	.word	0x0800e9f5
 800e9ac:	0800e9f5 	.word	0x0800e9f5
 800e9b0:	0800e9f5 	.word	0x0800e9f5
 800e9b4:	0800e9f5 	.word	0x0800e9f5
 800e9b8:	0800e9f5 	.word	0x0800e9f5
 800e9bc:	0800e9f5 	.word	0x0800e9f5
 800e9c0:	0800e9f5 	.word	0x0800e9f5
 800e9c4:	0800e9f5 	.word	0x0800e9f5
 800e9c8:	0800e9f5 	.word	0x0800e9f5
 800e9cc:	0800e9f5 	.word	0x0800e9f5
 800e9d0:	0800e9f5 	.word	0x0800e9f5
 800e9d4:	0800e9f5 	.word	0x0800e9f5
 800e9d8:	0800e9f5 	.word	0x0800e9f5
 800e9dc:	0800e9f5 	.word	0x0800e9f5
 800e9e0:	0800e9f5 	.word	0x0800e9f5
 800e9e4:	0800e9f5 	.word	0x0800e9f5
 800e9e8:	0800e9f5 	.word	0x0800e9f5
 800e9ec:	0800e9f5 	.word	0x0800e9f5
 800e9f0:	0800e9f5 	.word	0x0800e9f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e9f4:	bf00      	nop
  }

  return (USBD_OK);
 800e9f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea0e:	6879      	ldr	r1, [r7, #4]
 800ea10:	4810      	ldr	r0, [pc, #64]	@ (800ea54 <CDC_Receive_FS+0x50>)
 800ea12:	f7fe fdaa 	bl	800d56a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea16:	480f      	ldr	r0, [pc, #60]	@ (800ea54 <CDC_Receive_FS+0x50>)
 800ea18:	f7fe fdf0 	bl	800d5fc <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800ea1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ea58 <CDC_Receive_FS+0x54>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	669a      	str	r2, [r3, #104]	@ 0x68

  uint8_t len = (uint8_t) *Len;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800ea28:	2240      	movs	r2, #64	@ 0x40
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	480b      	ldr	r0, [pc, #44]	@ (800ea5c <CDC_Receive_FS+0x58>)
 800ea2e:	f000 fca9 	bl	800f384 <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	461a      	mov	r2, r3
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	4808      	ldr	r0, [pc, #32]	@ (800ea5c <CDC_Receive_FS+0x58>)
 800ea3a:	f000 fcd5 	bl	800f3e8 <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800ea3e:	2240      	movs	r2, #64	@ 0x40
 800ea40:	2100      	movs	r1, #0
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fc9e 	bl	800f384 <memset>

  return (USBD_OK);
 800ea48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20000564 	.word	0x20000564
 800ea58:	200003f8 	.word	0x200003f8
 800ea5c:	20000414 	.word	0x20000414

0800ea60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea70:	4b0d      	ldr	r3, [pc, #52]	@ (800eaa8 <CDC_Transmit_FS+0x48>)
 800ea72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea82:	2301      	movs	r3, #1
 800ea84:	e00b      	b.n	800ea9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea86:	887b      	ldrh	r3, [r7, #2]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	6879      	ldr	r1, [r7, #4]
 800ea8c:	4806      	ldr	r0, [pc, #24]	@ (800eaa8 <CDC_Transmit_FS+0x48>)
 800ea8e:	f7fe fd4e 	bl	800d52e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea92:	4805      	ldr	r0, [pc, #20]	@ (800eaa8 <CDC_Transmit_FS+0x48>)
 800ea94:	f7fe fd82 	bl	800d59c <USBD_CDC_TransmitPacket>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	20000564 	.word	0x20000564

0800eaac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b087      	sub	sp, #28
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	4613      	mov	r3, r2
 800eab8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eabe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	371c      	adds	r7, #28
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	4603      	mov	r3, r0
 800ead8:	6039      	str	r1, [r7, #0]
 800eada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2212      	movs	r2, #18
 800eae0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800eae2:	4b03      	ldr	r3, [pc, #12]	@ (800eaf0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	20000150 	.word	0x20000150

0800eaf4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	4603      	mov	r3, r0
 800eafc:	6039      	str	r1, [r7, #0]
 800eafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2204      	movs	r2, #4
 800eb04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb06:	4b03      	ldr	r3, [pc, #12]	@ (800eb14 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	20000164 	.word	0x20000164

0800eb18 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	6039      	str	r1, [r7, #0]
 800eb22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d105      	bne.n	800eb36 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	4907      	ldr	r1, [pc, #28]	@ (800eb4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb2e:	4808      	ldr	r0, [pc, #32]	@ (800eb50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb30:	f7ff fdcd 	bl	800e6ce <USBD_GetString>
 800eb34:	e004      	b.n	800eb40 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eb36:	683a      	ldr	r2, [r7, #0]
 800eb38:	4904      	ldr	r1, [pc, #16]	@ (800eb4c <USBD_CDC_ProductStrDescriptor+0x34>)
 800eb3a:	4805      	ldr	r0, [pc, #20]	@ (800eb50 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eb3c:	f7ff fdc7 	bl	800e6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb40:	4b02      	ldr	r3, [pc, #8]	@ (800eb4c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20001834 	.word	0x20001834
 800eb50:	0800fd08 	.word	0x0800fd08

0800eb54 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	4904      	ldr	r1, [pc, #16]	@ (800eb74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800eb64:	4804      	ldr	r0, [pc, #16]	@ (800eb78 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800eb66:	f7ff fdb2 	bl	800e6ce <USBD_GetString>
  return USBD_StrDesc;
 800eb6a:	4b02      	ldr	r3, [pc, #8]	@ (800eb74 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20001834 	.word	0x20001834
 800eb78:	0800fd1c 	.word	0x0800fd1c

0800eb7c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	6039      	str	r1, [r7, #0]
 800eb86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	221a      	movs	r2, #26
 800eb8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb8e:	f000 f843 	bl	800ec18 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800eb92:	4b02      	ldr	r3, [pc, #8]	@ (800eb9c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	20000168 	.word	0x20000168

0800eba0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	6039      	str	r1, [r7, #0]
 800ebaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebac:	79fb      	ldrb	r3, [r7, #7]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d105      	bne.n	800ebbe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	4907      	ldr	r1, [pc, #28]	@ (800ebd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ebb6:	4808      	ldr	r0, [pc, #32]	@ (800ebd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ebb8:	f7ff fd89 	bl	800e6ce <USBD_GetString>
 800ebbc:	e004      	b.n	800ebc8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	4904      	ldr	r1, [pc, #16]	@ (800ebd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ebc2:	4805      	ldr	r0, [pc, #20]	@ (800ebd8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ebc4:	f7ff fd83 	bl	800e6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebc8:	4b02      	ldr	r3, [pc, #8]	@ (800ebd4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20001834 	.word	0x20001834
 800ebd8:	0800fd30 	.word	0x0800fd30

0800ebdc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	6039      	str	r1, [r7, #0]
 800ebe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d105      	bne.n	800ebfa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	4907      	ldr	r1, [pc, #28]	@ (800ec10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ebf2:	4808      	ldr	r0, [pc, #32]	@ (800ec14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ebf4:	f7ff fd6b 	bl	800e6ce <USBD_GetString>
 800ebf8:	e004      	b.n	800ec04 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4904      	ldr	r1, [pc, #16]	@ (800ec10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ebfe:	4805      	ldr	r0, [pc, #20]	@ (800ec14 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ec00:	f7ff fd65 	bl	800e6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec04:	4b02      	ldr	r3, [pc, #8]	@ (800ec10 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20001834 	.word	0x20001834
 800ec14:	0800fd3c 	.word	0x0800fd3c

0800ec18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec1e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec5c <Get_SerialNum+0x44>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec24:	4b0e      	ldr	r3, [pc, #56]	@ (800ec60 <Get_SerialNum+0x48>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec64 <Get_SerialNum+0x4c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4413      	add	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d009      	beq.n	800ec52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec3e:	2208      	movs	r2, #8
 800ec40:	4909      	ldr	r1, [pc, #36]	@ (800ec68 <Get_SerialNum+0x50>)
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f000 f814 	bl	800ec70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec48:	2204      	movs	r2, #4
 800ec4a:	4908      	ldr	r1, [pc, #32]	@ (800ec6c <Get_SerialNum+0x54>)
 800ec4c:	68b8      	ldr	r0, [r7, #8]
 800ec4e:	f000 f80f 	bl	800ec70 <IntToUnicode>
  }
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	1fff7590 	.word	0x1fff7590
 800ec60:	1fff7594 	.word	0x1fff7594
 800ec64:	1fff7598 	.word	0x1fff7598
 800ec68:	2000016a 	.word	0x2000016a
 800ec6c:	2000017a 	.word	0x2000017a

0800ec70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b087      	sub	sp, #28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec82:	2300      	movs	r3, #0
 800ec84:	75fb      	strb	r3, [r7, #23]
 800ec86:	e027      	b.n	800ecd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	0f1b      	lsrs	r3, r3, #28
 800ec8c:	2b09      	cmp	r3, #9
 800ec8e:	d80b      	bhi.n	800eca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	0f1b      	lsrs	r3, r3, #28
 800ec94:	b2da      	uxtb	r2, r3
 800ec96:	7dfb      	ldrb	r3, [r7, #23]
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	440b      	add	r3, r1
 800eca0:	3230      	adds	r2, #48	@ 0x30
 800eca2:	b2d2      	uxtb	r2, r2
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	e00a      	b.n	800ecbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	0f1b      	lsrs	r3, r3, #28
 800ecac:	b2da      	uxtb	r2, r3
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	440b      	add	r3, r1
 800ecb8:	3237      	adds	r2, #55	@ 0x37
 800ecba:	b2d2      	uxtb	r2, r2
 800ecbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	011b      	lsls	r3, r3, #4
 800ecc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecc4:	7dfb      	ldrb	r3, [r7, #23]
 800ecc6:	005b      	lsls	r3, r3, #1
 800ecc8:	3301      	adds	r3, #1
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	4413      	add	r3, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecd2:	7dfb      	ldrb	r3, [r7, #23]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	75fb      	strb	r3, [r7, #23]
 800ecd8:	7dfa      	ldrb	r2, [r7, #23]
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d3d3      	bcc.n	800ec88 <IntToUnicode+0x18>
  }
}
 800ece0:	bf00      	nop
 800ece2:	bf00      	nop
 800ece4:	371c      	adds	r7, #28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
	...

0800ecf0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b098      	sub	sp, #96	@ 0x60
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ecf8:	f107 0310 	add.w	r3, r7, #16
 800ecfc:	2250      	movs	r2, #80	@ 0x50
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 fb3f 	bl	800f384 <memset>
  if(pcdHandle->Instance==USB)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a15      	ldr	r2, [pc, #84]	@ (800ed60 <HAL_PCD_MspInit+0x70>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d122      	bne.n	800ed56 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ed10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ed14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ed16:	2300      	movs	r3, #0
 800ed18:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ed1a:	f107 0310 	add.w	r3, r7, #16
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7f8 fad2 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ed2a:	f7f2 fb74 	bl	8001416 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed64 <HAL_PCD_MspInit+0x74>)
 800ed30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed32:	4a0c      	ldr	r2, [pc, #48]	@ (800ed64 <HAL_PCD_MspInit+0x74>)
 800ed34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed38:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ed64 <HAL_PCD_MspInit+0x74>)
 800ed3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed42:	60fb      	str	r3, [r7, #12]
 800ed44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ed46:	2200      	movs	r2, #0
 800ed48:	2100      	movs	r1, #0
 800ed4a:	2014      	movs	r0, #20
 800ed4c:	f7f4 fcb9 	bl	80036c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ed50:	2014      	movs	r0, #20
 800ed52:	f7f4 fcd0 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ed56:	bf00      	nop
 800ed58:	3760      	adds	r7, #96	@ 0x60
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	40005c00 	.word	0x40005c00
 800ed64:	40021000 	.word	0x40021000

0800ed68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4610      	mov	r0, r2
 800ed80:	f7fe fd08 	bl	800d794 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ed84:	bf00      	nop
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ed9e:	78fa      	ldrb	r2, [r7, #3]
 800eda0:	6879      	ldr	r1, [r7, #4]
 800eda2:	4613      	mov	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	4413      	add	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	440b      	add	r3, r1
 800edac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	4619      	mov	r1, r3
 800edb6:	f7fe fd42 	bl	800d83e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800edba:	bf00      	nop
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b082      	sub	sp, #8
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	460b      	mov	r3, r1
 800edcc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800edd4:	78fa      	ldrb	r2, [r7, #3]
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	440b      	add	r3, r1
 800ede2:	3324      	adds	r3, #36	@ 0x24
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	4619      	mov	r1, r3
 800edea:	f7fe fd8b 	bl	800d904 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800edee:	bf00      	nop
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fe9f 	bl	800db48 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ee0a:	bf00      	nop
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b084      	sub	sp, #16
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	795b      	ldrb	r3, [r3, #5]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d001      	beq.n	800ee2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee26:	f7f2 faf6 	bl	8001416 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee30:	7bfa      	ldrb	r2, [r7, #15]
 800ee32:	4611      	mov	r1, r2
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe fe49 	bl	800dacc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fe fdf5 	bl	800da30 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ee46:	bf00      	nop
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
	...

0800ee50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe fe44 	bl	800daec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	7a5b      	ldrb	r3, [r3, #9]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee6c:	4b04      	ldr	r3, [pc, #16]	@ (800ee80 <HAL_PCD_SuspendCallback+0x30>)
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	4a03      	ldr	r2, [pc, #12]	@ (800ee80 <HAL_PCD_SuspendCallback+0x30>)
 800ee72:	f043 0306 	orr.w	r3, r3, #6
 800ee76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ee78:	bf00      	nop
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	e000ed00 	.word	0xe000ed00

0800ee84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	7a5b      	ldrb	r3, [r3, #9]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d007      	beq.n	800eea4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee94:	4b08      	ldr	r3, [pc, #32]	@ (800eeb8 <HAL_PCD_ResumeCallback+0x34>)
 800ee96:	691b      	ldr	r3, [r3, #16]
 800ee98:	4a07      	ldr	r2, [pc, #28]	@ (800eeb8 <HAL_PCD_ResumeCallback+0x34>)
 800ee9a:	f023 0306 	bic.w	r3, r3, #6
 800ee9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800eea0:	f000 f9f8 	bl	800f294 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe fe34 	bl	800db18 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	e000ed00 	.word	0xe000ed00

0800eebc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800eec4:	4a2b      	ldr	r2, [pc, #172]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a29      	ldr	r2, [pc, #164]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eed0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800eed4:	4b27      	ldr	r3, [pc, #156]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eed6:	4a28      	ldr	r2, [pc, #160]	@ (800ef78 <USBD_LL_Init+0xbc>)
 800eed8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800eeda:	4b26      	ldr	r3, [pc, #152]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eedc:	2208      	movs	r2, #8
 800eede:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800eee0:	4b24      	ldr	r3, [pc, #144]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eee2:	2202      	movs	r2, #2
 800eee4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eee6:	4b23      	ldr	r3, [pc, #140]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eee8:	2202      	movs	r2, #2
 800eeea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800eeec:	4b21      	ldr	r3, [pc, #132]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800eef2:	4b20      	ldr	r3, [pc, #128]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800eef8:	4b1e      	ldr	r3, [pc, #120]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800eefe:	4b1d      	ldr	r3, [pc, #116]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ef04:	481b      	ldr	r0, [pc, #108]	@ (800ef74 <USBD_LL_Init+0xb8>)
 800ef06:	f7f5 fefb 	bl	8004d00 <HAL_PCD_Init>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ef10:	f7f2 fa81 	bl	8001416 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef1a:	2318      	movs	r3, #24
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	2100      	movs	r1, #0
 800ef20:	f7f7 fb82 	bl	8006628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef2a:	2358      	movs	r3, #88	@ 0x58
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2180      	movs	r1, #128	@ 0x80
 800ef30:	f7f7 fb7a 	bl	8006628 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef3a:	23c0      	movs	r3, #192	@ 0xc0
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	2181      	movs	r1, #129	@ 0x81
 800ef40:	f7f7 fb72 	bl	8006628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2101      	movs	r1, #1
 800ef52:	f7f7 fb69 	bl	8006628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef60:	2200      	movs	r2, #0
 800ef62:	2182      	movs	r1, #130	@ 0x82
 800ef64:	f7f7 fb60 	bl	8006628 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20001a34 	.word	0x20001a34
 800ef78:	40005c00 	.word	0x40005c00

0800ef7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7f5 ff82 	bl	8004e9c <HAL_PCD_Start>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f97e 	bl	800f2a0 <USBD_Get_USB_Status>
 800efa4:	4603      	mov	r3, r0
 800efa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b084      	sub	sp, #16
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	4608      	mov	r0, r1
 800efbc:	4611      	mov	r1, r2
 800efbe:	461a      	mov	r2, r3
 800efc0:	4603      	mov	r3, r0
 800efc2:	70fb      	strb	r3, [r7, #3]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70bb      	strb	r3, [r7, #2]
 800efc8:	4613      	mov	r3, r2
 800efca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800efda:	78bb      	ldrb	r3, [r7, #2]
 800efdc:	883a      	ldrh	r2, [r7, #0]
 800efde:	78f9      	ldrb	r1, [r7, #3]
 800efe0:	f7f6 f8c9 	bl	8005176 <HAL_PCD_EP_Open>
 800efe4:	4603      	mov	r3, r0
 800efe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	4618      	mov	r0, r3
 800efec:	f000 f958 	bl	800f2a0 <USBD_Get_USB_Status>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eff4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b084      	sub	sp, #16
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
 800f006:	460b      	mov	r3, r1
 800f008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f018:	78fa      	ldrb	r2, [r7, #3]
 800f01a:	4611      	mov	r1, r2
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f6 f909 	bl	8005234 <HAL_PCD_EP_Close>
 800f022:	4603      	mov	r3, r0
 800f024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	4618      	mov	r0, r3
 800f02a:	f000 f939 	bl	800f2a0 <USBD_Get_USB_Status>
 800f02e:	4603      	mov	r3, r0
 800f030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f032:	7bbb      	ldrb	r3, [r7, #14]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f056:	78fa      	ldrb	r2, [r7, #3]
 800f058:	4611      	mov	r1, r2
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f6 f9b2 	bl	80053c4 <HAL_PCD_EP_SetStall>
 800f060:	4603      	mov	r3, r0
 800f062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	4618      	mov	r0, r3
 800f068:	f000 f91a 	bl	800f2a0 <USBD_Get_USB_Status>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f070:	7bbb      	ldrb	r3, [r7, #14]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b084      	sub	sp, #16
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	460b      	mov	r3, r1
 800f084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f094:	78fa      	ldrb	r2, [r7, #3]
 800f096:	4611      	mov	r1, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f7f6 f9e5 	bl	8005468 <HAL_PCD_EP_ClrStall>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 f8fb 	bl	800f2a0 <USBD_Get_USB_Status>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f0ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	da0b      	bge.n	800f0ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0da:	68f9      	ldr	r1, [r7, #12]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	4413      	add	r3, r2
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	440b      	add	r3, r1
 800f0e6:	3312      	adds	r3, #18
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	e00b      	b.n	800f104 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f0ec:	78fb      	ldrb	r3, [r7, #3]
 800f0ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0f2:	68f9      	ldr	r1, [r7, #12]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	440b      	add	r3, r1
 800f0fe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f102:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f12a:	78fa      	ldrb	r2, [r7, #3]
 800f12c:	4611      	mov	r1, r2
 800f12e:	4618      	mov	r0, r3
 800f130:	f7f5 fffd 	bl	800512e <HAL_PCD_SetAddress>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 f8b0 	bl	800f2a0 <USBD_Get_USB_Status>
 800f140:	4603      	mov	r3, r0
 800f142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f144:	7bbb      	ldrb	r3, [r7, #14]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b086      	sub	sp, #24
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
 800f15a:	460b      	mov	r3, r1
 800f15c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f16c:	7af9      	ldrb	r1, [r7, #11]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	f7f6 f8f0 	bl	8005356 <HAL_PCD_EP_Transmit>
 800f176:	4603      	mov	r3, r0
 800f178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17a:	7dfb      	ldrb	r3, [r7, #23]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 f88f 	bl	800f2a0 <USBD_Get_USB_Status>
 800f182:	4603      	mov	r3, r0
 800f184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f186:	7dbb      	ldrb	r3, [r7, #22]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	607a      	str	r2, [r7, #4]
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	460b      	mov	r3, r1
 800f19e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f1ae:	7af9      	ldrb	r1, [r7, #11]
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	f7f6 f886 	bl	80052c4 <HAL_PCD_EP_Receive>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 f86e 	bl	800f2a0 <USBD_Get_USB_Status>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f1e4:	78fa      	ldrb	r2, [r7, #3]
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7f6 f89c 	bl	8005326 <HAL_PCD_EP_GetRxCount>
 800f1ee:	4603      	mov	r3, r0
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <HAL_PCDEx_LPM_Callback+0x18>
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d013      	beq.n	800f236 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f20e:	e023      	b.n	800f258 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7a5b      	ldrb	r3, [r3, #9]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f218:	f000 f83c 	bl	800f294 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f21c:	4b10      	ldr	r3, [pc, #64]	@ (800f260 <HAL_PCDEx_LPM_Callback+0x68>)
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	4a0f      	ldr	r2, [pc, #60]	@ (800f260 <HAL_PCDEx_LPM_Callback+0x68>)
 800f222:	f023 0306 	bic.w	r3, r3, #6
 800f226:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fe fc72 	bl	800db18 <USBD_LL_Resume>
    break;
 800f234:	e010      	b.n	800f258 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe fc55 	bl	800daec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	7a5b      	ldrb	r3, [r3, #9]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d005      	beq.n	800f256 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f24a:	4b05      	ldr	r3, [pc, #20]	@ (800f260 <HAL_PCDEx_LPM_Callback+0x68>)
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	4a04      	ldr	r2, [pc, #16]	@ (800f260 <HAL_PCDEx_LPM_Callback+0x68>)
 800f250:	f043 0306 	orr.w	r3, r3, #6
 800f254:	6113      	str	r3, [r2, #16]
    break;
 800f256:	bf00      	nop
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	e000ed00 	.word	0xe000ed00

0800f264 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f26c:	4b03      	ldr	r3, [pc, #12]	@ (800f27c <USBD_static_malloc+0x18>)
}
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	20001d10 	.word	0x20001d10

0800f280 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f298:	f7f2 f872 	bl	8001380 <SystemClock_Config>
}
 800f29c:	bf00      	nop
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d817      	bhi.n	800f2e4 <USBD_Get_USB_Status+0x44>
 800f2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f2bc <USBD_Get_USB_Status+0x1c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f2d3 	.word	0x0800f2d3
 800f2c4:	0800f2d9 	.word	0x0800f2d9
 800f2c8:	0800f2df 	.word	0x0800f2df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d0:	e00b      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d6:	e008      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	e005      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e002      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e8:	bf00      	nop
  }
  return usb_status;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <arm_sin_f32>:
 800f2f8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f378 <arm_sin_f32+0x80>
 800f2fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f300:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f308:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f30c:	d504      	bpl.n	800f318 <arm_sin_f32+0x20>
 800f30e:	ee17 3a90 	vmov	r3, s15
 800f312:	3b01      	subs	r3, #1
 800f314:	ee07 3a90 	vmov	s15, r3
 800f318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f31c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800f37c <arm_sin_f32+0x84>
 800f320:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f324:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f328:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f32c:	ee17 3a90 	vmov	r3, s15
 800f330:	b29b      	uxth	r3, r3
 800f332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f336:	d21a      	bcs.n	800f36e <arm_sin_f32+0x76>
 800f338:	ee07 3a90 	vmov	s15, r3
 800f33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f340:	1c59      	adds	r1, r3, #1
 800f342:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f346:	4a0e      	ldr	r2, [pc, #56]	@ (800f380 <arm_sin_f32+0x88>)
 800f348:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f34c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f350:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f354:	ed93 7a00 	vldr	s14, [r3]
 800f358:	edd2 6a00 	vldr	s13, [r2]
 800f35c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f360:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f364:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f368:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f36c:	4770      	bx	lr
 800f36e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f372:	2101      	movs	r1, #1
 800f374:	2300      	movs	r3, #0
 800f376:	e7e6      	b.n	800f346 <arm_sin_f32+0x4e>
 800f378:	3e22f983 	.word	0x3e22f983
 800f37c:	44000000 	.word	0x44000000
 800f380:	0800fd8c 	.word	0x0800fd8c

0800f384 <memset>:
 800f384:	4402      	add	r2, r0
 800f386:	4603      	mov	r3, r0
 800f388:	4293      	cmp	r3, r2
 800f38a:	d100      	bne.n	800f38e <memset+0xa>
 800f38c:	4770      	bx	lr
 800f38e:	f803 1b01 	strb.w	r1, [r3], #1
 800f392:	e7f9      	b.n	800f388 <memset+0x4>

0800f394 <__errno>:
 800f394:	4b01      	ldr	r3, [pc, #4]	@ (800f39c <__errno+0x8>)
 800f396:	6818      	ldr	r0, [r3, #0]
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	20000184 	.word	0x20000184

0800f3a0 <__libc_init_array>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	4d0d      	ldr	r5, [pc, #52]	@ (800f3d8 <__libc_init_array+0x38>)
 800f3a4:	4c0d      	ldr	r4, [pc, #52]	@ (800f3dc <__libc_init_array+0x3c>)
 800f3a6:	1b64      	subs	r4, r4, r5
 800f3a8:	10a4      	asrs	r4, r4, #2
 800f3aa:	2600      	movs	r6, #0
 800f3ac:	42a6      	cmp	r6, r4
 800f3ae:	d109      	bne.n	800f3c4 <__libc_init_array+0x24>
 800f3b0:	4d0b      	ldr	r5, [pc, #44]	@ (800f3e0 <__libc_init_array+0x40>)
 800f3b2:	4c0c      	ldr	r4, [pc, #48]	@ (800f3e4 <__libc_init_array+0x44>)
 800f3b4:	f000 fc92 	bl	800fcdc <_init>
 800f3b8:	1b64      	subs	r4, r4, r5
 800f3ba:	10a4      	asrs	r4, r4, #2
 800f3bc:	2600      	movs	r6, #0
 800f3be:	42a6      	cmp	r6, r4
 800f3c0:	d105      	bne.n	800f3ce <__libc_init_array+0x2e>
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3c8:	4798      	blx	r3
 800f3ca:	3601      	adds	r6, #1
 800f3cc:	e7ee      	b.n	800f3ac <__libc_init_array+0xc>
 800f3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3d2:	4798      	blx	r3
 800f3d4:	3601      	adds	r6, #1
 800f3d6:	e7f2      	b.n	800f3be <__libc_init_array+0x1e>
 800f3d8:	080105b8 	.word	0x080105b8
 800f3dc:	080105b8 	.word	0x080105b8
 800f3e0:	080105b8 	.word	0x080105b8
 800f3e4:	080105bc 	.word	0x080105bc

0800f3e8 <memcpy>:
 800f3e8:	440a      	add	r2, r1
 800f3ea:	4291      	cmp	r1, r2
 800f3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3f0:	d100      	bne.n	800f3f4 <memcpy+0xc>
 800f3f2:	4770      	bx	lr
 800f3f4:	b510      	push	{r4, lr}
 800f3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3fe:	4291      	cmp	r1, r2
 800f400:	d1f9      	bne.n	800f3f6 <memcpy+0xe>
 800f402:	bd10      	pop	{r4, pc}

0800f404 <fmodf>:
 800f404:	b508      	push	{r3, lr}
 800f406:	ed2d 8b02 	vpush	{d8}
 800f40a:	eef0 8a40 	vmov.f32	s17, s0
 800f40e:	eeb0 8a60 	vmov.f32	s16, s1
 800f412:	f000 f879 	bl	800f508 <__ieee754_fmodf>
 800f416:	eef4 8a48 	vcmp.f32	s17, s16
 800f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41e:	d60c      	bvs.n	800f43a <fmodf+0x36>
 800f420:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f440 <fmodf+0x3c>
 800f424:	eeb4 8a68 	vcmp.f32	s16, s17
 800f428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42c:	d105      	bne.n	800f43a <fmodf+0x36>
 800f42e:	f7ff ffb1 	bl	800f394 <__errno>
 800f432:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f436:	2321      	movs	r3, #33	@ 0x21
 800f438:	6003      	str	r3, [r0, #0]
 800f43a:	ecbd 8b02 	vpop	{d8}
 800f43e:	bd08      	pop	{r3, pc}
 800f440:	00000000 	.word	0x00000000

0800f444 <powf>:
 800f444:	b508      	push	{r3, lr}
 800f446:	ed2d 8b04 	vpush	{d8-d9}
 800f44a:	eeb0 8a60 	vmov.f32	s16, s1
 800f44e:	eeb0 9a40 	vmov.f32	s18, s0
 800f452:	f000 f8db 	bl	800f60c <__ieee754_powf>
 800f456:	eeb4 8a48 	vcmp.f32	s16, s16
 800f45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45e:	eef0 8a40 	vmov.f32	s17, s0
 800f462:	d63e      	bvs.n	800f4e2 <powf+0x9e>
 800f464:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46c:	d112      	bne.n	800f494 <powf+0x50>
 800f46e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	d039      	beq.n	800f4ec <powf+0xa8>
 800f478:	eeb0 0a48 	vmov.f32	s0, s16
 800f47c:	f000 f839 	bl	800f4f2 <finitef>
 800f480:	b378      	cbz	r0, 800f4e2 <powf+0x9e>
 800f482:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48a:	d52a      	bpl.n	800f4e2 <powf+0x9e>
 800f48c:	f7ff ff82 	bl	800f394 <__errno>
 800f490:	2322      	movs	r3, #34	@ 0x22
 800f492:	e014      	b.n	800f4be <powf+0x7a>
 800f494:	f000 f82d 	bl	800f4f2 <finitef>
 800f498:	b998      	cbnz	r0, 800f4c2 <powf+0x7e>
 800f49a:	eeb0 0a49 	vmov.f32	s0, s18
 800f49e:	f000 f828 	bl	800f4f2 <finitef>
 800f4a2:	b170      	cbz	r0, 800f4c2 <powf+0x7e>
 800f4a4:	eeb0 0a48 	vmov.f32	s0, s16
 800f4a8:	f000 f823 	bl	800f4f2 <finitef>
 800f4ac:	b148      	cbz	r0, 800f4c2 <powf+0x7e>
 800f4ae:	eef4 8a68 	vcmp.f32	s17, s17
 800f4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b6:	d7e9      	bvc.n	800f48c <powf+0x48>
 800f4b8:	f7ff ff6c 	bl	800f394 <__errno>
 800f4bc:	2321      	movs	r3, #33	@ 0x21
 800f4be:	6003      	str	r3, [r0, #0]
 800f4c0:	e00f      	b.n	800f4e2 <powf+0x9e>
 800f4c2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	d10a      	bne.n	800f4e2 <powf+0x9e>
 800f4cc:	eeb0 0a49 	vmov.f32	s0, s18
 800f4d0:	f000 f80f 	bl	800f4f2 <finitef>
 800f4d4:	b128      	cbz	r0, 800f4e2 <powf+0x9e>
 800f4d6:	eeb0 0a48 	vmov.f32	s0, s16
 800f4da:	f000 f80a 	bl	800f4f2 <finitef>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d1d4      	bne.n	800f48c <powf+0x48>
 800f4e2:	eeb0 0a68 	vmov.f32	s0, s17
 800f4e6:	ecbd 8b04 	vpop	{d8-d9}
 800f4ea:	bd08      	pop	{r3, pc}
 800f4ec:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f4f0:	e7f7      	b.n	800f4e2 <powf+0x9e>

0800f4f2 <finitef>:
 800f4f2:	ee10 3a10 	vmov	r3, s0
 800f4f6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f4fa:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f4fe:	bfac      	ite	ge
 800f500:	2000      	movge	r0, #0
 800f502:	2001      	movlt	r0, #1
 800f504:	4770      	bx	lr
	...

0800f508 <__ieee754_fmodf>:
 800f508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f50a:	ee10 5a90 	vmov	r5, s1
 800f50e:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800f512:	1e43      	subs	r3, r0, #1
 800f514:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f518:	d206      	bcs.n	800f528 <__ieee754_fmodf+0x20>
 800f51a:	ee10 3a10 	vmov	r3, s0
 800f51e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800f522:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800f526:	d304      	bcc.n	800f532 <__ieee754_fmodf+0x2a>
 800f528:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f52c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f532:	4286      	cmp	r6, r0
 800f534:	dbfc      	blt.n	800f530 <__ieee754_fmodf+0x28>
 800f536:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800f53a:	d105      	bne.n	800f548 <__ieee754_fmodf+0x40>
 800f53c:	4b32      	ldr	r3, [pc, #200]	@ (800f608 <__ieee754_fmodf+0x100>)
 800f53e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800f542:	ed93 0a00 	vldr	s0, [r3]
 800f546:	e7f3      	b.n	800f530 <__ieee754_fmodf+0x28>
 800f548:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f54c:	d140      	bne.n	800f5d0 <__ieee754_fmodf+0xc8>
 800f54e:	0232      	lsls	r2, r6, #8
 800f550:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800f554:	2a00      	cmp	r2, #0
 800f556:	dc38      	bgt.n	800f5ca <__ieee754_fmodf+0xc2>
 800f558:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800f55c:	d13e      	bne.n	800f5dc <__ieee754_fmodf+0xd4>
 800f55e:	0207      	lsls	r7, r0, #8
 800f560:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800f564:	2f00      	cmp	r7, #0
 800f566:	da36      	bge.n	800f5d6 <__ieee754_fmodf+0xce>
 800f568:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800f56c:	bfb9      	ittee	lt
 800f56e:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800f572:	1a5b      	sublt	r3, r3, r1
 800f574:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800f578:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800f57c:	bfb8      	it	lt
 800f57e:	fa06 f303 	lsllt.w	r3, r6, r3
 800f582:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f586:	bfb5      	itete	lt
 800f588:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800f58c:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800f590:	1aad      	sublt	r5, r5, r2
 800f592:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800f596:	bfb8      	it	lt
 800f598:	40a8      	lsllt	r0, r5
 800f59a:	1a89      	subs	r1, r1, r2
 800f59c:	1a1d      	subs	r5, r3, r0
 800f59e:	bb01      	cbnz	r1, 800f5e2 <__ieee754_fmodf+0xda>
 800f5a0:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800f5a4:	bf38      	it	cc
 800f5a6:	462b      	movcc	r3, r5
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d0c7      	beq.n	800f53c <__ieee754_fmodf+0x34>
 800f5ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f5b0:	db1f      	blt.n	800f5f2 <__ieee754_fmodf+0xea>
 800f5b2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f5b6:	db1f      	blt.n	800f5f8 <__ieee754_fmodf+0xf0>
 800f5b8:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800f5bc:	327f      	adds	r2, #127	@ 0x7f
 800f5be:	4323      	orrs	r3, r4
 800f5c0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f5c4:	ee00 3a10 	vmov	s0, r3
 800f5c8:	e7b2      	b.n	800f530 <__ieee754_fmodf+0x28>
 800f5ca:	3901      	subs	r1, #1
 800f5cc:	0052      	lsls	r2, r2, #1
 800f5ce:	e7c1      	b.n	800f554 <__ieee754_fmodf+0x4c>
 800f5d0:	15f1      	asrs	r1, r6, #23
 800f5d2:	397f      	subs	r1, #127	@ 0x7f
 800f5d4:	e7c0      	b.n	800f558 <__ieee754_fmodf+0x50>
 800f5d6:	3a01      	subs	r2, #1
 800f5d8:	007f      	lsls	r7, r7, #1
 800f5da:	e7c3      	b.n	800f564 <__ieee754_fmodf+0x5c>
 800f5dc:	15c2      	asrs	r2, r0, #23
 800f5de:	3a7f      	subs	r2, #127	@ 0x7f
 800f5e0:	e7c2      	b.n	800f568 <__ieee754_fmodf+0x60>
 800f5e2:	2d00      	cmp	r5, #0
 800f5e4:	da02      	bge.n	800f5ec <__ieee754_fmodf+0xe4>
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	3901      	subs	r1, #1
 800f5ea:	e7d7      	b.n	800f59c <__ieee754_fmodf+0x94>
 800f5ec:	d0a6      	beq.n	800f53c <__ieee754_fmodf+0x34>
 800f5ee:	006b      	lsls	r3, r5, #1
 800f5f0:	e7fa      	b.n	800f5e8 <__ieee754_fmodf+0xe0>
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	e7d9      	b.n	800f5ac <__ieee754_fmodf+0xa4>
 800f5f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800f5fc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f600:	3282      	adds	r2, #130	@ 0x82
 800f602:	4113      	asrs	r3, r2
 800f604:	4323      	orrs	r3, r4
 800f606:	e7dd      	b.n	800f5c4 <__ieee754_fmodf+0xbc>
 800f608:	08010590 	.word	0x08010590

0800f60c <__ieee754_powf>:
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	ee10 4a90 	vmov	r4, s1
 800f614:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f618:	ed2d 8b02 	vpush	{d8}
 800f61c:	ee10 6a10 	vmov	r6, s0
 800f620:	eeb0 8a40 	vmov.f32	s16, s0
 800f624:	eef0 8a60 	vmov.f32	s17, s1
 800f628:	d10c      	bne.n	800f644 <__ieee754_powf+0x38>
 800f62a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f62e:	0076      	lsls	r6, r6, #1
 800f630:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f634:	f240 829c 	bls.w	800fb70 <__ieee754_powf+0x564>
 800f638:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f63c:	ecbd 8b02 	vpop	{d8}
 800f640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f644:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f648:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f64c:	d802      	bhi.n	800f654 <__ieee754_powf+0x48>
 800f64e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f652:	d908      	bls.n	800f666 <__ieee754_powf+0x5a>
 800f654:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f658:	d1ee      	bne.n	800f638 <__ieee754_powf+0x2c>
 800f65a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f65e:	0064      	lsls	r4, r4, #1
 800f660:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f664:	e7e6      	b.n	800f634 <__ieee754_powf+0x28>
 800f666:	2e00      	cmp	r6, #0
 800f668:	da1e      	bge.n	800f6a8 <__ieee754_powf+0x9c>
 800f66a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f66e:	d22b      	bcs.n	800f6c8 <__ieee754_powf+0xbc>
 800f670:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f674:	d332      	bcc.n	800f6dc <__ieee754_powf+0xd0>
 800f676:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f67a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f67e:	fa49 f503 	asr.w	r5, r9, r3
 800f682:	fa05 f303 	lsl.w	r3, r5, r3
 800f686:	454b      	cmp	r3, r9
 800f688:	d126      	bne.n	800f6d8 <__ieee754_powf+0xcc>
 800f68a:	f005 0501 	and.w	r5, r5, #1
 800f68e:	f1c5 0502 	rsb	r5, r5, #2
 800f692:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f696:	d122      	bne.n	800f6de <__ieee754_powf+0xd2>
 800f698:	2c00      	cmp	r4, #0
 800f69a:	f280 826f 	bge.w	800fb7c <__ieee754_powf+0x570>
 800f69e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f6a2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f6a6:	e7c9      	b.n	800f63c <__ieee754_powf+0x30>
 800f6a8:	2500      	movs	r5, #0
 800f6aa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f6ae:	d1f0      	bne.n	800f692 <__ieee754_powf+0x86>
 800f6b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f6b4:	f000 825c 	beq.w	800fb70 <__ieee754_powf+0x564>
 800f6b8:	d908      	bls.n	800f6cc <__ieee754_powf+0xc0>
 800f6ba:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800fa1c <__ieee754_powf+0x410>
 800f6be:	2c00      	cmp	r4, #0
 800f6c0:	bfa8      	it	ge
 800f6c2:	eeb0 0a68 	vmovge.f32	s0, s17
 800f6c6:	e7b9      	b.n	800f63c <__ieee754_powf+0x30>
 800f6c8:	2502      	movs	r5, #2
 800f6ca:	e7ee      	b.n	800f6aa <__ieee754_powf+0x9e>
 800f6cc:	2c00      	cmp	r4, #0
 800f6ce:	f280 8252 	bge.w	800fb76 <__ieee754_powf+0x56a>
 800f6d2:	eeb1 0a68 	vneg.f32	s0, s17
 800f6d6:	e7b1      	b.n	800f63c <__ieee754_powf+0x30>
 800f6d8:	2500      	movs	r5, #0
 800f6da:	e7da      	b.n	800f692 <__ieee754_powf+0x86>
 800f6dc:	2500      	movs	r5, #0
 800f6de:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f6e2:	d102      	bne.n	800f6ea <__ieee754_powf+0xde>
 800f6e4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f6e8:	e7a8      	b.n	800f63c <__ieee754_powf+0x30>
 800f6ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f6ee:	d109      	bne.n	800f704 <__ieee754_powf+0xf8>
 800f6f0:	2e00      	cmp	r6, #0
 800f6f2:	db07      	blt.n	800f704 <__ieee754_powf+0xf8>
 800f6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f6f8:	ecbd 8b02 	vpop	{d8}
 800f6fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f700:	f000 bae8 	b.w	800fcd4 <__ieee754_sqrtf>
 800f704:	eeb0 0a48 	vmov.f32	s0, s16
 800f708:	f000 fa50 	bl	800fbac <fabsf>
 800f70c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f710:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f714:	4647      	mov	r7, r8
 800f716:	d002      	beq.n	800f71e <__ieee754_powf+0x112>
 800f718:	f1b8 0f00 	cmp.w	r8, #0
 800f71c:	d117      	bne.n	800f74e <__ieee754_powf+0x142>
 800f71e:	2c00      	cmp	r4, #0
 800f720:	bfbc      	itt	lt
 800f722:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f726:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f72a:	2e00      	cmp	r6, #0
 800f72c:	da86      	bge.n	800f63c <__ieee754_powf+0x30>
 800f72e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f732:	ea58 0805 	orrs.w	r8, r8, r5
 800f736:	d104      	bne.n	800f742 <__ieee754_powf+0x136>
 800f738:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f73c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f740:	e77c      	b.n	800f63c <__ieee754_powf+0x30>
 800f742:	2d01      	cmp	r5, #1
 800f744:	f47f af7a 	bne.w	800f63c <__ieee754_powf+0x30>
 800f748:	eeb1 0a40 	vneg.f32	s0, s0
 800f74c:	e776      	b.n	800f63c <__ieee754_powf+0x30>
 800f74e:	0ff0      	lsrs	r0, r6, #31
 800f750:	3801      	subs	r0, #1
 800f752:	ea55 0300 	orrs.w	r3, r5, r0
 800f756:	d104      	bne.n	800f762 <__ieee754_powf+0x156>
 800f758:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f75c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f760:	e76c      	b.n	800f63c <__ieee754_powf+0x30>
 800f762:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f766:	d973      	bls.n	800f850 <__ieee754_powf+0x244>
 800f768:	4bad      	ldr	r3, [pc, #692]	@ (800fa20 <__ieee754_powf+0x414>)
 800f76a:	4598      	cmp	r8, r3
 800f76c:	d808      	bhi.n	800f780 <__ieee754_powf+0x174>
 800f76e:	2c00      	cmp	r4, #0
 800f770:	da0b      	bge.n	800f78a <__ieee754_powf+0x17e>
 800f772:	2000      	movs	r0, #0
 800f774:	ecbd 8b02 	vpop	{d8}
 800f778:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f77c:	f000 baa4 	b.w	800fcc8 <__math_oflowf>
 800f780:	4ba8      	ldr	r3, [pc, #672]	@ (800fa24 <__ieee754_powf+0x418>)
 800f782:	4598      	cmp	r8, r3
 800f784:	d908      	bls.n	800f798 <__ieee754_powf+0x18c>
 800f786:	2c00      	cmp	r4, #0
 800f788:	dcf3      	bgt.n	800f772 <__ieee754_powf+0x166>
 800f78a:	2000      	movs	r0, #0
 800f78c:	ecbd 8b02 	vpop	{d8}
 800f790:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f794:	f000 ba92 	b.w	800fcbc <__math_uflowf>
 800f798:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f79c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7a0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800fa28 <__ieee754_powf+0x41c>
 800f7a4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f7a8:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f7ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f7b0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f7b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f7b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7bc:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800fa2c <__ieee754_powf+0x420>
 800f7c0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f7c4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800fa30 <__ieee754_powf+0x424>
 800f7c8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f7cc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800fa34 <__ieee754_powf+0x428>
 800f7d0:	eef0 6a67 	vmov.f32	s13, s15
 800f7d4:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f7d8:	ee16 3a90 	vmov	r3, s13
 800f7dc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f7e0:	f023 030f 	bic.w	r3, r3, #15
 800f7e4:	ee06 3a90 	vmov	s13, r3
 800f7e8:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f7ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7f0:	3d01      	subs	r5, #1
 800f7f2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f7f6:	4305      	orrs	r5, r0
 800f7f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7fc:	f024 040f 	bic.w	r4, r4, #15
 800f800:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f804:	bf18      	it	ne
 800f806:	eeb0 8a47 	vmovne.f32	s16, s14
 800f80a:	ee07 4a10 	vmov	s14, r4
 800f80e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f812:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f816:	ee07 3a90 	vmov	s15, r3
 800f81a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f81e:	ee07 4a10 	vmov	s14, r4
 800f822:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f826:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f82a:	ee17 1a10 	vmov	r1, s14
 800f82e:	2900      	cmp	r1, #0
 800f830:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f834:	f340 80dd 	ble.w	800f9f2 <__ieee754_powf+0x3e6>
 800f838:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f83c:	f240 80ca 	bls.w	800f9d4 <__ieee754_powf+0x3c8>
 800f840:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f848:	bf4c      	ite	mi
 800f84a:	2001      	movmi	r0, #1
 800f84c:	2000      	movpl	r0, #0
 800f84e:	e791      	b.n	800f774 <__ieee754_powf+0x168>
 800f850:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f854:	bf01      	itttt	eq
 800f856:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fa38 <__ieee754_powf+0x42c>
 800f85a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f85e:	f06f 0317 	mvneq.w	r3, #23
 800f862:	ee17 7a90 	vmoveq	r7, s15
 800f866:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f86a:	bf18      	it	ne
 800f86c:	2300      	movne	r3, #0
 800f86e:	3a7f      	subs	r2, #127	@ 0x7f
 800f870:	441a      	add	r2, r3
 800f872:	4b72      	ldr	r3, [pc, #456]	@ (800fa3c <__ieee754_powf+0x430>)
 800f874:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f878:	429f      	cmp	r7, r3
 800f87a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f87e:	dd06      	ble.n	800f88e <__ieee754_powf+0x282>
 800f880:	4b6f      	ldr	r3, [pc, #444]	@ (800fa40 <__ieee754_powf+0x434>)
 800f882:	429f      	cmp	r7, r3
 800f884:	f340 80a4 	ble.w	800f9d0 <__ieee754_powf+0x3c4>
 800f888:	3201      	adds	r2, #1
 800f88a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f88e:	2600      	movs	r6, #0
 800f890:	4b6c      	ldr	r3, [pc, #432]	@ (800fa44 <__ieee754_powf+0x438>)
 800f892:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f896:	ee07 1a10 	vmov	s14, r1
 800f89a:	edd3 5a00 	vldr	s11, [r3]
 800f89e:	4b6a      	ldr	r3, [pc, #424]	@ (800fa48 <__ieee754_powf+0x43c>)
 800f8a0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f8a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8a8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f8ac:	1049      	asrs	r1, r1, #1
 800f8ae:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f8b2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f8b6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f8ba:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f8be:	ee07 1a90 	vmov	s15, r1
 800f8c2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f8c6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f8ca:	ee15 7a10 	vmov	r7, s10
 800f8ce:	401f      	ands	r7, r3
 800f8d0:	ee06 7a90 	vmov	s13, r7
 800f8d4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f8d8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f8dc:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f8e0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f8e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fa4c <__ieee754_powf+0x440>
 800f8e8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fa50 <__ieee754_powf+0x444>
 800f8ec:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f8f0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fa54 <__ieee754_powf+0x448>
 800f8f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f8f8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fa28 <__ieee754_powf+0x41c>
 800f8fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f900:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fa58 <__ieee754_powf+0x44c>
 800f904:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f908:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fa5c <__ieee754_powf+0x450>
 800f90c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f910:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f914:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f918:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f91c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f920:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f924:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f928:	eef0 5a67 	vmov.f32	s11, s15
 800f92c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f930:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f934:	ee15 1a90 	vmov	r1, s11
 800f938:	4019      	ands	r1, r3
 800f93a:	ee05 1a90 	vmov	s11, r1
 800f93e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f942:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f94a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f94e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f952:	eeb0 6a67 	vmov.f32	s12, s15
 800f956:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f95a:	ee16 1a10 	vmov	r1, s12
 800f95e:	4019      	ands	r1, r3
 800f960:	ee06 1a10 	vmov	s12, r1
 800f964:	eeb0 7a46 	vmov.f32	s14, s12
 800f968:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f96c:	493c      	ldr	r1, [pc, #240]	@ (800fa60 <__ieee754_powf+0x454>)
 800f96e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f976:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fa64 <__ieee754_powf+0x458>
 800f97a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fa68 <__ieee754_powf+0x45c>
 800f97e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f982:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fa6c <__ieee754_powf+0x460>
 800f986:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f98a:	ed91 7a00 	vldr	s14, [r1]
 800f98e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f992:	ee07 2a10 	vmov	s14, r2
 800f996:	eef0 6a67 	vmov.f32	s13, s15
 800f99a:	4a35      	ldr	r2, [pc, #212]	@ (800fa70 <__ieee754_powf+0x464>)
 800f99c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f9a0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f9a4:	ed92 5a00 	vldr	s10, [r2]
 800f9a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f9ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f9b0:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f9b4:	ee16 2a90 	vmov	r2, s13
 800f9b8:	4013      	ands	r3, r2
 800f9ba:	ee06 3a90 	vmov	s13, r3
 800f9be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f9c2:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f9c6:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9ce:	e70f      	b.n	800f7f0 <__ieee754_powf+0x1e4>
 800f9d0:	2601      	movs	r6, #1
 800f9d2:	e75d      	b.n	800f890 <__ieee754_powf+0x284>
 800f9d4:	d152      	bne.n	800fa7c <__ieee754_powf+0x470>
 800f9d6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fa74 <__ieee754_powf+0x468>
 800f9da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9de:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f9e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ea:	f73f af29 	bgt.w	800f840 <__ieee754_powf+0x234>
 800f9ee:	2386      	movs	r3, #134	@ 0x86
 800f9f0:	e048      	b.n	800fa84 <__ieee754_powf+0x478>
 800f9f2:	4a21      	ldr	r2, [pc, #132]	@ (800fa78 <__ieee754_powf+0x46c>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d907      	bls.n	800fa08 <__ieee754_powf+0x3fc>
 800f9f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa00:	bf4c      	ite	mi
 800fa02:	2001      	movmi	r0, #1
 800fa04:	2000      	movpl	r0, #0
 800fa06:	e6c1      	b.n	800f78c <__ieee754_powf+0x180>
 800fa08:	d138      	bne.n	800fa7c <__ieee754_powf+0x470>
 800fa0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa0e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fa12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa16:	dbea      	blt.n	800f9ee <__ieee754_powf+0x3e2>
 800fa18:	e7ee      	b.n	800f9f8 <__ieee754_powf+0x3ec>
 800fa1a:	bf00      	nop
 800fa1c:	00000000 	.word	0x00000000
 800fa20:	3f7ffff3 	.word	0x3f7ffff3
 800fa24:	3f800007 	.word	0x3f800007
 800fa28:	3eaaaaab 	.word	0x3eaaaaab
 800fa2c:	3fb8aa3b 	.word	0x3fb8aa3b
 800fa30:	36eca570 	.word	0x36eca570
 800fa34:	3fb8aa00 	.word	0x3fb8aa00
 800fa38:	4b800000 	.word	0x4b800000
 800fa3c:	001cc471 	.word	0x001cc471
 800fa40:	005db3d6 	.word	0x005db3d6
 800fa44:	080105a8 	.word	0x080105a8
 800fa48:	fffff000 	.word	0xfffff000
 800fa4c:	3e6c3255 	.word	0x3e6c3255
 800fa50:	3e53f142 	.word	0x3e53f142
 800fa54:	3e8ba305 	.word	0x3e8ba305
 800fa58:	3edb6db7 	.word	0x3edb6db7
 800fa5c:	3f19999a 	.word	0x3f19999a
 800fa60:	08010598 	.word	0x08010598
 800fa64:	3f76384f 	.word	0x3f76384f
 800fa68:	3f763800 	.word	0x3f763800
 800fa6c:	369dc3a0 	.word	0x369dc3a0
 800fa70:	080105a0 	.word	0x080105a0
 800fa74:	3338aa3c 	.word	0x3338aa3c
 800fa78:	43160000 	.word	0x43160000
 800fa7c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800fa80:	d971      	bls.n	800fb66 <__ieee754_powf+0x55a>
 800fa82:	15db      	asrs	r3, r3, #23
 800fa84:	3b7e      	subs	r3, #126	@ 0x7e
 800fa86:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800fa8a:	4118      	asrs	r0, r3
 800fa8c:	4408      	add	r0, r1
 800fa8e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fa92:	4a3c      	ldr	r2, [pc, #240]	@ (800fb84 <__ieee754_powf+0x578>)
 800fa94:	3b7f      	subs	r3, #127	@ 0x7f
 800fa96:	411a      	asrs	r2, r3
 800fa98:	4002      	ands	r2, r0
 800fa9a:	ee07 2a10 	vmov	s14, r2
 800fa9e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800faa2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800faa6:	f1c3 0317 	rsb	r3, r3, #23
 800faaa:	4118      	asrs	r0, r3
 800faac:	2900      	cmp	r1, #0
 800faae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fab2:	bfb8      	it	lt
 800fab4:	4240      	neglt	r0, r0
 800fab6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800faba:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800fb88 <__ieee754_powf+0x57c>
 800fabe:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800fb8c <__ieee754_powf+0x580>
 800fac2:	ee17 3a10 	vmov	r3, s14
 800fac6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800faca:	f023 030f 	bic.w	r3, r3, #15
 800face:	ee07 3a10 	vmov	s14, r3
 800fad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fad6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fada:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fade:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800fb90 <__ieee754_powf+0x584>
 800fae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fae6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800faea:	eef0 6a67 	vmov.f32	s13, s15
 800faee:	eee7 6a06 	vfma.f32	s13, s14, s12
 800faf2:	eef0 5a66 	vmov.f32	s11, s13
 800faf6:	eee7 5a46 	vfms.f32	s11, s14, s12
 800fafa:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fafe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fb02:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800fb94 <__ieee754_powf+0x588>
 800fb06:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800fb98 <__ieee754_powf+0x58c>
 800fb0a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fb0e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800fb9c <__ieee754_powf+0x590>
 800fb12:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fb16:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800fba0 <__ieee754_powf+0x594>
 800fb1a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fb1e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fba4 <__ieee754_powf+0x598>
 800fb22:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fb26:	eeb0 6a66 	vmov.f32	s12, s13
 800fb2a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800fb2e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fb32:	ee66 5a86 	vmul.f32	s11, s13, s12
 800fb36:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fb3a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800fb3e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fb42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb4e:	ee10 3a10 	vmov	r3, s0
 800fb52:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fb56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb5a:	da06      	bge.n	800fb6a <__ieee754_powf+0x55e>
 800fb5c:	f000 f82e 	bl	800fbbc <scalbnf>
 800fb60:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fb64:	e56a      	b.n	800f63c <__ieee754_powf+0x30>
 800fb66:	2000      	movs	r0, #0
 800fb68:	e7a5      	b.n	800fab6 <__ieee754_powf+0x4aa>
 800fb6a:	ee00 3a10 	vmov	s0, r3
 800fb6e:	e7f7      	b.n	800fb60 <__ieee754_powf+0x554>
 800fb70:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fb74:	e562      	b.n	800f63c <__ieee754_powf+0x30>
 800fb76:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fba8 <__ieee754_powf+0x59c>
 800fb7a:	e55f      	b.n	800f63c <__ieee754_powf+0x30>
 800fb7c:	eeb0 0a48 	vmov.f32	s0, s16
 800fb80:	e55c      	b.n	800f63c <__ieee754_powf+0x30>
 800fb82:	bf00      	nop
 800fb84:	ff800000 	.word	0xff800000
 800fb88:	3f317218 	.word	0x3f317218
 800fb8c:	3f317200 	.word	0x3f317200
 800fb90:	35bfbe8c 	.word	0x35bfbe8c
 800fb94:	b5ddea0e 	.word	0xb5ddea0e
 800fb98:	3331bb4c 	.word	0x3331bb4c
 800fb9c:	388ab355 	.word	0x388ab355
 800fba0:	bb360b61 	.word	0xbb360b61
 800fba4:	3e2aaaab 	.word	0x3e2aaaab
 800fba8:	00000000 	.word	0x00000000

0800fbac <fabsf>:
 800fbac:	ee10 3a10 	vmov	r3, s0
 800fbb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbb4:	ee00 3a10 	vmov	s0, r3
 800fbb8:	4770      	bx	lr
	...

0800fbbc <scalbnf>:
 800fbbc:	ee10 3a10 	vmov	r3, s0
 800fbc0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fbc4:	d02b      	beq.n	800fc1e <scalbnf+0x62>
 800fbc6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fbca:	d302      	bcc.n	800fbd2 <scalbnf+0x16>
 800fbcc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbd0:	4770      	bx	lr
 800fbd2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fbd6:	d123      	bne.n	800fc20 <scalbnf+0x64>
 800fbd8:	4b24      	ldr	r3, [pc, #144]	@ (800fc6c <scalbnf+0xb0>)
 800fbda:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fc70 <scalbnf+0xb4>
 800fbde:	4298      	cmp	r0, r3
 800fbe0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbe4:	db17      	blt.n	800fc16 <scalbnf+0x5a>
 800fbe6:	ee10 3a10 	vmov	r3, s0
 800fbea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fbee:	3a19      	subs	r2, #25
 800fbf0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fbf4:	4288      	cmp	r0, r1
 800fbf6:	dd15      	ble.n	800fc24 <scalbnf+0x68>
 800fbf8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fc74 <scalbnf+0xb8>
 800fbfc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fc78 <scalbnf+0xbc>
 800fc00:	ee10 3a10 	vmov	r3, s0
 800fc04:	eeb0 7a67 	vmov.f32	s14, s15
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	bfb8      	it	lt
 800fc0c:	eef0 7a66 	vmovlt.f32	s15, s13
 800fc10:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fc14:	4770      	bx	lr
 800fc16:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fc7c <scalbnf+0xc0>
 800fc1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc1e:	4770      	bx	lr
 800fc20:	0dd2      	lsrs	r2, r2, #23
 800fc22:	e7e5      	b.n	800fbf0 <scalbnf+0x34>
 800fc24:	4410      	add	r0, r2
 800fc26:	28fe      	cmp	r0, #254	@ 0xfe
 800fc28:	dce6      	bgt.n	800fbf8 <scalbnf+0x3c>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	dd06      	ble.n	800fc3c <scalbnf+0x80>
 800fc2e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc32:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc36:	ee00 3a10 	vmov	s0, r3
 800fc3a:	4770      	bx	lr
 800fc3c:	f110 0f16 	cmn.w	r0, #22
 800fc40:	da09      	bge.n	800fc56 <scalbnf+0x9a>
 800fc42:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fc7c <scalbnf+0xc0>
 800fc46:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fc80 <scalbnf+0xc4>
 800fc4a:	ee10 3a10 	vmov	r3, s0
 800fc4e:	eeb0 7a67 	vmov.f32	s14, s15
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	e7d9      	b.n	800fc0a <scalbnf+0x4e>
 800fc56:	3019      	adds	r0, #25
 800fc58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc5c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc60:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fc84 <scalbnf+0xc8>
 800fc64:	ee07 3a90 	vmov	s15, r3
 800fc68:	e7d7      	b.n	800fc1a <scalbnf+0x5e>
 800fc6a:	bf00      	nop
 800fc6c:	ffff3cb0 	.word	0xffff3cb0
 800fc70:	4c000000 	.word	0x4c000000
 800fc74:	7149f2ca 	.word	0x7149f2ca
 800fc78:	f149f2ca 	.word	0xf149f2ca
 800fc7c:	0da24260 	.word	0x0da24260
 800fc80:	8da24260 	.word	0x8da24260
 800fc84:	33000000 	.word	0x33000000

0800fc88 <with_errnof>:
 800fc88:	b510      	push	{r4, lr}
 800fc8a:	ed2d 8b02 	vpush	{d8}
 800fc8e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc92:	4604      	mov	r4, r0
 800fc94:	f7ff fb7e 	bl	800f394 <__errno>
 800fc98:	eeb0 0a48 	vmov.f32	s0, s16
 800fc9c:	ecbd 8b02 	vpop	{d8}
 800fca0:	6004      	str	r4, [r0, #0]
 800fca2:	bd10      	pop	{r4, pc}

0800fca4 <xflowf>:
 800fca4:	b130      	cbz	r0, 800fcb4 <xflowf+0x10>
 800fca6:	eef1 7a40 	vneg.f32	s15, s0
 800fcaa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fcae:	2022      	movs	r0, #34	@ 0x22
 800fcb0:	f7ff bfea 	b.w	800fc88 <with_errnof>
 800fcb4:	eef0 7a40 	vmov.f32	s15, s0
 800fcb8:	e7f7      	b.n	800fcaa <xflowf+0x6>
	...

0800fcbc <__math_uflowf>:
 800fcbc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fcc4 <__math_uflowf+0x8>
 800fcc0:	f7ff bff0 	b.w	800fca4 <xflowf>
 800fcc4:	10000000 	.word	0x10000000

0800fcc8 <__math_oflowf>:
 800fcc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fcd0 <__math_oflowf+0x8>
 800fccc:	f7ff bfea 	b.w	800fca4 <xflowf>
 800fcd0:	70000000 	.word	0x70000000

0800fcd4 <__ieee754_sqrtf>:
 800fcd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fcd8:	4770      	bx	lr
	...

0800fcdc <_init>:
 800fcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcde:	bf00      	nop
 800fce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fce2:	bc08      	pop	{r3}
 800fce4:	469e      	mov	lr, r3
 800fce6:	4770      	bx	lr

0800fce8 <_fini>:
 800fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcea:	bf00      	nop
 800fcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcee:	bc08      	pop	{r3}
 800fcf0:	469e      	mov	lr, r3
 800fcf2:	4770      	bx	lr
