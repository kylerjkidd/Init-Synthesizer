
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffa0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  08010178  08010178  00011178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a34  08010a34  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  08010a34  08010a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a3c  08010a3c  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a3c  08010a3c  00011a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a40  08010a40  00011a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08010a44  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200001d4  08010c18  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002068  08010c18  00013068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d3c0  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000663a  00000000  00000000  0003f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002038  00000000  00000000  00045c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000189f  00000000  00000000  00047c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262b9  00000000  00000000  000494d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e334  00000000  00000000  0006f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db56e  00000000  00000000  0009dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00179032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e8  00000000  00000000  001790ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001819d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00181a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00181b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010160 	.word	0x08010160

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	08010160 	.word	0x08010160

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f002 feb9 	bl	8003b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f002 fed0 	bl	8003b7a <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 fa87 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 fa80 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 fa7a 	bl	80043a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 fa75 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f003 f8e4 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f003 f8d7 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f003 f8ca 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f003 f8bc 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f003 f8ac 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f003 f89d 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f003 f890 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f003 f882 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f003 f874 	bl	80040a4 <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f003 f9fa 	bl	800440c <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9e2 	bl	80013e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f003 fe0f 	bl	8004c48 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9d9 	bl	80013e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f003 fe51 	bl	8004cde <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9d0 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e fbc5 	bl	800f808 <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fb58 	bl	800774c <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9a0 	bl	80013e6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f002 ffe2 	bl	80040a4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f003 fe19 	bl	8004d78 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f94b 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e fb43 	bl	800f808 <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fad6 	bl	800774c <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f91e 	bl	80013e6 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f002 ff48 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f002 ff38 	bl	80040a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 fc9d 	bl	8003bb0 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8b3 	bl	80013e6 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 fadb 	bl	800386c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f84b 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 fadb 	bl	8002884 <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00d fd21 	bl	800ed14 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f002 f903 	bl	80034dc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f002 f8a3 	bl	8003420 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4818      	ldr	r0, [pc, #96]	@ (800133c <main+0x90>)
 80012dc:	f007 fd62 	bl	8008da4 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f001 fed8 	bl	8003094 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 fc56 	bl	8002b94 <Synth_Reset_Initialize>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 80012e8:	2201      	movs	r2, #1
 80012ea:	4915      	ldr	r1, [pc, #84]	@ (8001340 <main+0x94>)
 80012ec:	4815      	ldr	r0, [pc, #84]	@ (8001344 <main+0x98>)
 80012ee:	f008 f9cb 	bl	8009688 <HAL_UART_Receive_IT>

  uint8_t data[] = "INIT-READY\n";
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <main+0x9c>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	220a      	movs	r2, #10
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <main+0x98>)
 8001306:	f008 f931 	bl	800956c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(sys.midi_data_present == 1){
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <main+0xa0>)
 800130c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <main+0x6a>
		  MIDI_Decode_Handler();
 8001312:	f000 f86f 	bl	80013f4 <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <main+0xa0>)
 8001318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <main+0x76>
		  Serial_Command_Handler();
 800131e:	f000 fc93 	bl	8001c48 <Serial_Command_Handler>
	  }

	  //Gate_Control();

	  if((sys.note_status_bit == 1)){
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <main+0xa0>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1ef      	bne.n	800130a <main+0x5e>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <main+0xa0>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800132e:	4a07      	ldr	r2, [pc, #28]	@ (800134c <main+0xa0>)
 8001330:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fa89 	bl	800184c <Waveform_Synthesis_Handler>
	  if(sys.midi_data_present == 1){
 800133a:	e7e6      	b.n	800130a <main+0x5e>
 800133c:	2000047c 	.word	0x2000047c
 8001340:	20000453 	.word	0x20000453
 8001344:	200004c8 	.word	0x200004c8
 8001348:	08010178 	.word	0x08010178
 800134c:	200003f4 	.word	0x200003f4

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	@ 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2238      	movs	r2, #56	@ 0x38
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00e fa52 	bl	800f808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001372:	2000      	movs	r0, #0
 8001374:	f005 fc08 	bl	8006b88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001378:	2321      	movs	r3, #33	@ 0x21
 800137a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	2303      	movs	r3, #3
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8001392:	231c      	movs	r3, #28
 8001394:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0318 	add.w	r3, r7, #24
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fca2 	bl	8006cf0 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b2:	f000 f818 	bl	80013e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2303      	movs	r3, #3
 80013bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2104      	movs	r1, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 ffa0 	bl	8007314 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013da:	f000 f804 	bl	80013e6 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ea:	b672      	cpsid	i
}
 80013ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ee:	bf00      	nop
 80013f0:	e7fd      	b.n	80013ee <Error_Handler+0x8>
	...

080013f4 <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0

	int status_byte = sys.midi_buf[0];
 80013fa:	4b2f      	ldr	r3, [pc, #188]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 80013fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001400:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 8001402:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001404:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001408:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 800140c:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001410:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b7f      	cmp	r3, #127	@ 0x7f
 8001416:	dc0a      	bgt.n	800142e <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 8001418:	f000 fc16 	bl	8001c48 <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 800141e:	2200      	movs	r2, #0
 8001420:	665a      	str	r2, [r3, #100]	@ 0x64
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 8001422:	2203      	movs	r2, #3
 8001424:	2100      	movs	r1, #0
 8001426:	4825      	ldr	r0, [pc, #148]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 8001428:	f00e f9ee 	bl	800f808 <memset>

	    return;
 800142c:	e040      	b.n	80014b0 <MIDI_Decode_Handler+0xbc>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001430:	2200      	movs	r2, #0
 8001432:	66da      	str	r2, [r3, #108]	@ 0x6c

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800143a:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b80      	cmp	r3, #128	@ 0x80
 8001440:	d111      	bne.n	8001466 <MIDI_Decode_Handler+0x72>
    	sys.note_status_bit    =  0; // note off
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001444:	2200      	movs	r2, #0
 8001446:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 8001448:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 800144e:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6793      	str	r3, [r2, #120]	@ 0x78

    	sys.gate = 0;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001456:	2200      	movs	r2, #0
 8001458:	67da      	str	r2, [r3, #124]	@ 0x7c
    	Gate_Control();
 800145a:	f001 fe87 	bl	800316c <Gate_Control>
    	Command_Blink_Status_LED(0); // report no error
 800145e:	2000      	movs	r0, #0
 8001460:	f001 ff68 	bl	8003334 <Command_Blink_Status_LED>
 8001464:	e01b      	b.n	800149e <MIDI_Decode_Handler+0xaa>
    }
    else if(status_byte == 0x90){
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b90      	cmp	r3, #144	@ 0x90
 800146a:	d111      	bne.n	8001490 <MIDI_Decode_Handler+0x9c>
    	sys.note_status_bit    =  1; // note on
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 800146e:	2201      	movs	r2, #1
 8001470:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6793      	str	r3, [r2, #120]	@ 0x78

    	sys.gate = 1;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001480:	2201      	movs	r2, #1
 8001482:	67da      	str	r2, [r3, #124]	@ 0x7c
    	Gate_Control();
 8001484:	f001 fe72 	bl	800316c <Gate_Control>
    	Command_Blink_Status_LED(0);
 8001488:	2000      	movs	r0, #0
 800148a:	f001 ff53 	bl	8003334 <Command_Blink_Status_LED>
 800148e:	e006      	b.n	800149e <MIDI_Decode_Handler+0xaa>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	671a      	str	r2, [r3, #112]	@ 0x70
    	Command_Blink_Status_LED(1); // report an error;
 8001498:	2001      	movs	r0, #1
 800149a:	f001 ff4b 	bl	8003334 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MIDI_Decode_Handler+0xc4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	665a      	str	r2, [r3, #100]	@ 0x64
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014a4:	2203      	movs	r2, #3
 80014a6:	2100      	movs	r1, #0
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MIDI_Decode_Handler+0xc8>)
 80014aa:	f00e f9ad 	bl	800f808 <memset>

    return;
 80014ae:	bf00      	nop
}
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200003f4 	.word	0x200003f4
 80014bc:	20000450 	.word	0x20000450

080014c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014cc:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014ce:	f892 105f 	ldrb.w	r1, [r2, #95]	@ 0x5f
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014d4:	4413      	add	r3, r2
 80014d6:	460a      	mov	r2, r1
 80014d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014e4:	6653      	str	r3, [r2, #100]	@ 0x64
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	dd05      	ble.n	80014fa <HAL_UART_RxCpltCallback+0x3a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	665a      	str	r2, [r3, #100]	@ 0x64
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <HAL_UART_RxCpltCallback+0x4c>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	4904      	ldr	r1, [pc, #16]	@ (8001510 <HAL_UART_RxCpltCallback+0x50>)
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_UART_RxCpltCallback+0x54>)
 8001500:	f008 f8c2 	bl	8009688 <HAL_UART_Receive_IT>

}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200003f4 	.word	0x200003f4
 8001510:	20000453 	.word	0x20000453
 8001514:	200004c8 	.word	0x200004c8

08001518 <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe ffdc 	bl	80004e0 <__aeabi_f2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <Calculate_Frequency+0x78>)
 800152e:	f7fe fe77 	bl	8000220 <__aeabi_dsub>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <Calculate_Frequency+0x7c>)
 8001540:	f7ff f950 	bl	80007e4 <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa5a 	bl	8000a04 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	ee00 3a90 	vmov	s1, r3
 8001556:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800155a:	f00e f9b5 	bl	800f8c8 <powf>
 800155e:	ee10 3a10 	vmov	r3, s0
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffbc 	bl	80004e0 <__aeabi_f2d>
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <Calculate_Frequency+0x80>)
 800156e:	f7ff f80f 	bl	8000590 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fa43 	bl	8000a04 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	ee07 3a90 	vmov	s15, r3
}
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40514000 	.word	0x40514000
 8001594:	40280000 	.word	0x40280000
 8001598:	407b8000 	.word	0x407b8000
 800159c:	00000000 	.word	0x00000000

080015a0 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015aa:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f7fe ff96 	bl	80004e0 <__aeabi_f2d>
 80015b4:	a317      	add	r3, pc, #92	@ (adr r3, 8001614 <Synthesize_Sine_Wave+0x74>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ffe9 	bl	8000590 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7fe ff8a 	bl	80004e0 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa10 	bl	8000a04 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee00 3a10 	vmov	s0, r3
 80015ea:	f00e f8c7 	bl	800f77c <arm_sin_f32>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001610 <Synthesize_Sine_Wave+0x70>
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 3a90 	vmov	r3, s15
 8001602:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bdb0      	pop	{r4, r5, r7, pc}
 8001610:	46fffe00 	.word	0x46fffe00
 8001614:	54442d18 	.word	0x54442d18
 8001618:	401921fb 	.word	0x401921fb
 800161c:	00000000 	.word	0x00000000

08001620 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a03 	vstr	s0, [r7, #12]
 800162a:	edc7 0a02 	vstr	s1, [r7, #8]
 800162e:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 8001632:	ed97 7a03 	vldr	s14, [r7, #12]
 8001636:	edd7 7a02 	vldr	s15, [r7, #8]
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f00e f91f 	bl	800f888 <fmodf>
 800164a:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 800164e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001652:	edd7 7a01 	vldr	s15, [r7, #4]
 8001656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d503      	bpl.n	8001668 <Synthesize_Pulse_Wave+0x48>
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <Synthesize_Pulse_Wave+0x80>)
 8001666:	e002      	b.n	800166e <Synthesize_Pulse_Wave+0x4e>
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <Synthesize_Pulse_Wave+0x84>)
 800166e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001698 <Synthesize_Pulse_Wave+0x78>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ff8c 	bl	8000590 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff f998 	bl	80009b4 <__aeabi_d2iz>
 8001684:	4603      	mov	r3, r0
 8001686:	827b      	strh	r3, [r7, #18]

	return sample;
 8001688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40dfffc0 	.word	0x40dfffc0
 80016a0:	3ff00000 	.word	0x3ff00000
 80016a4:	bff00000 	.word	0xbff00000

080016a8 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80016b2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f00e f8dd 	bl	800f888 <fmodf>
 80016ce:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	d519      	bpl.n	8001718 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7fe fefb 	bl	80004e0 <__aeabi_f2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b36      	ldr	r3, [pc, #216]	@ (80017c8 <Synthesize_Triangle_Wave+0x120>)
 80016f0:	f7fe ff4e 	bl	8000590 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a330      	add	r3, pc, #192	@ (adr r3, 80017c0 <Synthesize_Triangle_Wave+0x118>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff45 	bl	8000590 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f951 	bl	80009b4 <__aeabi_d2iz>
 8001712:	4603      	mov	r3, r0
 8001714:	81fb      	strh	r3, [r7, #14]
 8001716:	e04c      	b.n	80017b2 <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d521      	bpl.n	800176e <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 800172a:	68b8      	ldr	r0, [r7, #8]
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <Synthesize_Triangle_Wave+0x120>)
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	f04f 0000 	mov.w	r0, #0
 8001742:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001746:	f7fe fd6b 	bl	8000220 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	a31b      	add	r3, pc, #108	@ (adr r3, 80017c0 <Synthesize_Triangle_Wave+0x118>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff1a 	bl	8000590 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff f926 	bl	80009b4 <__aeabi_d2iz>
 8001768:	4603      	mov	r3, r0
 800176a:	81fb      	strh	r3, [r7, #14]
 800176c:	e021      	b.n	80017b2 <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f7fe feb6 	bl	80004e0 <__aeabi_f2d>
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <Synthesize_Triangle_Wave+0x124>)
 800177a:	f7fe fd51 	bl	8000220 <__aeabi_dsub>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <Synthesize_Triangle_Wave+0x120>)
 800178c:	f7fe ff00 	bl	8000590 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a309      	add	r3, pc, #36	@ (adr r3, 80017c0 <Synthesize_Triangle_Wave+0x118>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fef7 	bl	8000590 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f903 	bl	80009b4 <__aeabi_d2iz>
 80017ae:	4603      	mov	r3, r0
 80017b0:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40dfffc0 	.word	0x40dfffc0
 80017c8:	40100000 	.word	0x40100000
 80017cc:	3ff00000 	.word	0x3ff00000

080017d0 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017da:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017de:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e2:	edd7 7a00 	vldr	s15, [r7]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	f00e f849 	bl	800f888 <fmodf>
 80017f6:	eef0 7a40 	vmov.f32	s15, s0
 80017fa:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001848 <Synthesize_Sawtooth_Wave+0x78>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	ee17 0a90 	vmov	r0, s15
 8001806:	f7fe fe6b 	bl	80004e0 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	f7fe fd09 	bl	8000224 <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	a309      	add	r3, pc, #36	@ (adr r3, 8001840 <Synthesize_Sawtooth_Wave+0x70>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fcfe 	bl	8000220 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f8c2 	bl	80009b4 <__aeabi_d2iz>
 8001830:	4603      	mov	r3, r0
 8001832:	81fb      	strh	r3, [r7, #14]

	return sample;
 8001834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	00000000 	.word	0x00000000
 8001844:	40dfffc0 	.word	0x40dfffc0
 8001848:	46fffe00 	.word	0x46fffe00

0800184c <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800185a:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800185e:	6018      	str	r0, [r3, #0]
 8001860:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001864:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001868:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 800186a:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800186e:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001872:	f102 0218 	add.w	r2, r2, #24
 8001876:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001878:	4bcb      	ldr	r3, [pc, #812]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	f1a3 020c 	sub.w	r2, r3, #12
 8001880:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001884:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	f7ff fe3e 	bl	8001518 <Calculate_Frequency>
 800189c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018a0:	f103 0314 	add.w	r3, r3, #20
 80018a4:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018a8:	4bbf      	ldr	r3, [pc, #764]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	f1a3 020c 	sub.w	r2, r3, #12
 80018b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018b4:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f7ff fe26 	bl	8001518 <Calculate_Frequency>
 80018cc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018d0:	f103 0310 	add.w	r3, r3, #16
 80018d4:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018de:	f102 021c 	add.w	r2, r2, #28
 80018e2:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018e4:	e152      	b.n	8001b8c <Waveform_Synthesis_Handler+0x340>
        float t = ((float)i/2.0)/((float)nsamples);
 80018e6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018ea:	f103 031c 	add.w	r3, r3, #28
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fdf0 	bl	80004e0 <__aeabi_f2d>
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001908:	f7fe ff6c 	bl	80007e4 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001918:	f103 0318 	add.w	r3, r3, #24
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	ee17 0a90 	vmov	r0, s15
 800192a:	f7fe fdd9 	bl	80004e0 <__aeabi_f2d>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4620      	mov	r0, r4
 8001934:	4629      	mov	r1, r5
 8001936:	f7fe ff55 	bl	80007e4 <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f85f 	bl	8000a04 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800194c:	f102 0208 	add.w	r2, r2, #8
 8001950:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 8001952:	4b95      	ldr	r3, [pc, #596]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d11b      	bne.n	8001992 <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 800195a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800195e:	f103 0314 	add.w	r3, r3, #20
 8001962:	edd3 0a00 	vldr	s1, [r3]
 8001966:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800196a:	f103 0308 	add.w	r3, r3, #8
 800196e:	ed93 0a00 	vldr	s0, [r3]
 8001972:	f7ff fe15 	bl	80015a0 <Synthesize_Sine_Wave>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800197e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001982:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001986:	f102 021c 	add.w	r2, r2, #28
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001990:	e066      	b.n	8001a60 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 8001992:	4b85      	ldr	r3, [pc, #532]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d120      	bne.n	80019dc <Waveform_Synthesis_Handler+0x190>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 800199a:	4b83      	ldr	r3, [pc, #524]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 800199c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80019a0:	eeb0 1a67 	vmov.f32	s2, s15
 80019a4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019a8:	f103 0314 	add.w	r3, r3, #20
 80019ac:	edd3 0a00 	vldr	s1, [r3]
 80019b0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019b4:	f103 0308 	add.w	r3, r3, #8
 80019b8:	ed93 0a00 	vldr	s0, [r3]
 80019bc:	f7ff fe30 	bl	8001620 <Synthesize_Pulse_Wave>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4619      	mov	r1, r3
 80019c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019c8:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019cc:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019d0:	f102 021c 	add.w	r2, r2, #28
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019da:	e041      	b.n	8001a60 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019dc:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d11b      	bne.n	8001a1c <Waveform_Synthesis_Handler+0x1d0>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019e4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019e8:	f103 0314 	add.w	r3, r3, #20
 80019ec:	edd3 0a00 	vldr	s1, [r3]
 80019f0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019f4:	f103 0308 	add.w	r3, r3, #8
 80019f8:	ed93 0a00 	vldr	s0, [r3]
 80019fc:	f7ff fe54 	bl	80016a8 <Synthesize_Triangle_Wave>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a08:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a0c:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a10:	f102 021c 	add.w	r2, r2, #28
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a1a:	e021      	b.n	8001a60 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d11b      	bne.n	8001a5c <Waveform_Synthesis_Handler+0x210>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a24:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a28:	f103 0314 	add.w	r3, r3, #20
 8001a2c:	edd3 0a00 	vldr	s1, [r3]
 8001a30:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a34:	f103 0308 	add.w	r3, r3, #8
 8001a38:	ed93 0a00 	vldr	s0, [r3]
 8001a3c:	f7ff fec8 	bl	80017d0 <Synthesize_Sawtooth_Wave>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4619      	mov	r1, r3
 8001a44:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a48:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a4c:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a50:	f102 021c 	add.w	r2, r2, #28
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a5a:	e001      	b.n	8001a60 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0d3      	b.n	8001c08 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a60:	4b51      	ldr	r3, [pc, #324]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d11c      	bne.n	8001aa2 <Waveform_Synthesis_Handler+0x256>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a68:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a6c:	f103 031c 	add.w	r3, r3, #28
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1c5c      	adds	r4, r3, #1
 8001a74:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a78:	f103 0310 	add.w	r3, r3, #16
 8001a7c:	edd3 0a00 	vldr	s1, [r3]
 8001a80:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a84:	f103 0308 	add.w	r3, r3, #8
 8001a88:	ed93 0a00 	vldr	s0, [r3]
 8001a8c:	f7ff fd88 	bl	80015a0 <Synthesize_Sine_Wave>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a98:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a9c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001aa0:	e069      	b.n	8001b76 <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d121      	bne.n	8001aee <Waveform_Synthesis_Handler+0x2a2>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001aac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ab0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ab4:	f103 031c 	add.w	r3, r3, #28
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c5c      	adds	r4, r3, #1
 8001abc:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ac4:	f103 0310 	add.w	r3, r3, #16
 8001ac8:	edd3 0a00 	vldr	s1, [r3]
 8001acc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ad0:	f103 0308 	add.w	r3, r3, #8
 8001ad4:	ed93 0a00 	vldr	s0, [r3]
 8001ad8:	f7ff fda2 	bl	8001620 <Synthesize_Pulse_Wave>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ae4:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001ae8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001aec:	e043      	b.n	8001b76 <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001aee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d11c      	bne.n	8001b30 <Waveform_Synthesis_Handler+0x2e4>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001af6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001afa:	f103 031c 	add.w	r3, r3, #28
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c5c      	adds	r4, r3, #1
 8001b02:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b06:	f103 0310 	add.w	r3, r3, #16
 8001b0a:	edd3 0a00 	vldr	s1, [r3]
 8001b0e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b12:	f103 0308 	add.w	r3, r3, #8
 8001b16:	ed93 0a00 	vldr	s0, [r3]
 8001b1a:	f7ff fdc5 	bl	80016a8 <Synthesize_Triangle_Wave>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b26:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b2a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b2e:	e022      	b.n	8001b76 <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <Waveform_Synthesis_Handler+0x35c>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d11c      	bne.n	8001b72 <Waveform_Synthesis_Handler+0x326>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b38:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b3c:	f103 031c 	add.w	r3, r3, #28
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1c5c      	adds	r4, r3, #1
 8001b44:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b48:	f103 0310 	add.w	r3, r3, #16
 8001b4c:	edd3 0a00 	vldr	s1, [r3]
 8001b50:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b54:	f103 0308 	add.w	r3, r3, #8
 8001b58:	ed93 0a00 	vldr	s0, [r3]
 8001b5c:	f7ff fe38 	bl	80017d0 <Synthesize_Sawtooth_Wave>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b68:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b6c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b70:	e001      	b.n	8001b76 <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e048      	b.n	8001c08 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b76:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b7a:	f103 031c 	add.w	r3, r3, #28
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3302      	adds	r3, #2
 8001b82:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001b86:	f102 021c 	add.w	r2, r2, #28
 8001b8a:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001b8c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b90:	f103 031c 	add.w	r3, r3, #28
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b9a:	f103 0318 	add.w	r3, r3, #24
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f6ff aea0 	blt.w	80018e6 <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001ba6:	e02a      	b.n	8001bfe <Waveform_Synthesis_Handler+0x3b2>
 8001ba8:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bac:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bb0:	f103 0318 	add.w	r3, r3, #24
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f107 0120 	add.w	r1, r7, #32
 8001bbc:	3918      	subs	r1, #24
 8001bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc2:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <Waveform_Synthesis_Handler+0x3c8>)
 8001bc4:	f003 f9b8 	bl	8004f38 <HAL_I2S_Transmit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001bce:	f102 020f 	add.w	r2, r2, #15
 8001bd2:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001bd4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bd8:	f103 030f 	add.w	r3, r3, #15
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <Waveform_Synthesis_Handler+0x3a6>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bec:	f002 fbdc 	bl	80043a8 <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001bf0:	e009      	b.n	8001c06 <Waveform_Synthesis_Handler+0x3ba>
        }

        if((sys.midi_data_present == 1)){
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <Waveform_Synthesis_Handler+0x3cc>)
 8001bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <Waveform_Synthesis_Handler+0x3b2>
        	MIDI_Decode_Handler();
 8001bfa:	f7ff fbfb 	bl	80013f4 <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <Waveform_Synthesis_Handler+0x3cc>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d0d2      	beq.n	8001bac <Waveform_Synthesis_Handler+0x360>
        }
    }

    return 0;
 8001c06:	2300      	movs	r3, #0

}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	20000244 	.word	0x20000244
 8001c18:	200003f4 	.word	0x200003f4

08001c1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c20:	f3bf 8f4f 	dsb	sy
}
 8001c24:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <__NVIC_SystemReset+0x24>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c2e:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <__NVIC_SystemReset+0x24>)
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_SystemReset+0x28>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c36:	f3bf 8f4f 	dsb	sy
}
 8001c3a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <__NVIC_SystemReset+0x20>
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	05fa0004 	.word	0x05fa0004

08001c48 <Serial_Command_Handler>:
#include "serial.h"
#include "system.h"

extern System sys;

void Serial_Command_Handler(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

	int error_check = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]

	int command_byte;
	int address_byte;
	int data_byte;

	sys.value_returned = 0;
 8001c52:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]

    if(sys.usb_data_present == 1){
 8001c58:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d10b      	bne.n	8001c78 <Serial_Command_Handler+0x30>
    	sys.usb_data_present = 0;
 8001c60:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	669a      	str	r2, [r3, #104]	@ 0x68

        command_byte = sys.usb_vcp_buffer[0];
 8001c66:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c68:	7f1b      	ldrb	r3, [r3, #28]
 8001c6a:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8001c6c:	4b58      	ldr	r3, [pc, #352]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c6e:	7f5b      	ldrb	r3, [r3, #29]
 8001c70:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 8001c72:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c74:	7f9b      	ldrb	r3, [r3, #30]
 8001c76:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8001c78:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10e      	bne.n	8001c9e <Serial_Command_Handler+0x56>
    	sys.midi_data_present = 0;
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	66da      	str	r2, [r3, #108]	@ 0x6c

        command_byte = sys.midi_buf[0];
 8001c86:	4b52      	ldr	r3, [pc, #328]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c8c:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 8001c8e:	4b50      	ldr	r3, [pc, #320]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c94:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8001c96:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd0 <Serial_Command_Handler+0x188>)
 8001c98:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001c9c:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	3b41      	subs	r3, #65	@ 0x41
 8001ca2:	2b19      	cmp	r3, #25
 8001ca4:	d87e      	bhi.n	8001da4 <Serial_Command_Handler+0x15c>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <Serial_Command_Handler+0x64>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d15 	.word	0x08001d15
 8001cb0:	08001da5 	.word	0x08001da5
 8001cb4:	08001d21 	.word	0x08001d21
 8001cb8:	08001da5 	.word	0x08001da5
 8001cbc:	08001d2d 	.word	0x08001d2d
 8001cc0:	08001d39 	.word	0x08001d39
 8001cc4:	08001da5 	.word	0x08001da5
 8001cc8:	08001da5 	.word	0x08001da5
 8001ccc:	08001d45 	.word	0x08001d45
 8001cd0:	08001da5 	.word	0x08001da5
 8001cd4:	08001da5 	.word	0x08001da5
 8001cd8:	08001da5 	.word	0x08001da5
 8001cdc:	08001d4d 	.word	0x08001d4d
 8001ce0:	08001da5 	.word	0x08001da5
 8001ce4:	08001d59 	.word	0x08001d59
 8001ce8:	08001d65 	.word	0x08001d65
 8001cec:	08001da5 	.word	0x08001da5
 8001cf0:	08001d71 	.word	0x08001d71
 8001cf4:	08001da5 	.word	0x08001da5
 8001cf8:	08001da5 	.word	0x08001da5
 8001cfc:	08001da5 	.word	0x08001da5
 8001d00:	08001da5 	.word	0x08001da5
 8001d04:	08001da5 	.word	0x08001da5
 8001d08:	08001da5 	.word	0x08001da5
 8001d0c:	08001da5 	.word	0x08001da5
 8001d10:	08001da5 	.word	0x08001da5
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f85e 	bl	8001dd8 <VCA_Command_Handler>
 8001d1c:	6178      	str	r0, [r7, #20]

            break;
 8001d1e:	e042      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'C': // communication settings command

        	error_check = Communication_Command_Handler(address_byte, data_byte);
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f96c 	bl	8002000 <Communication_Command_Handler>
 8001d28:	6178      	str	r0, [r7, #20]

            break;
 8001d2a:	e03c      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f9be 	bl	80020b0 <Envelope_Command_Handler>
 8001d34:	6178      	str	r0, [r7, #20]

            break;
 8001d36:	e036      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fb04 	bl	8002348 <Filter_Command_Handler>
 8001d40:	6178      	str	r0, [r7, #20]

            break;
 8001d42:	e030      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8001d44:	f000 ff76 	bl	8002c34 <Synth_Initialize_Preset>
 8001d48:	6178      	str	r0, [r7, #20]

            break;
 8001d4a:	e02c      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'L': // load preset command

            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 fc00 	bl	8002554 <Mixer_Command_Handler>
 8001d54:	6178      	str	r0, [r7, #20]

            break;
 8001d56:	e026      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fcb2 	bl	80026c4 <LFO_Command_Handler>
 8001d60:	6178      	str	r0, [r7, #20]

            break;
 8001d62:	e020      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fd74 	bl	8002854 <Preset_Command_Handler>
 8001d6c:	6178      	str	r0, [r7, #20]

            break;
 8001d6e:	e01a      	b.n	8001da6 <Serial_Command_Handler+0x15e>
        case 'R': // reset command

        	for(int i=0; i <6 ; i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	e011      	b.n	8001d9a <Serial_Command_Handler+0x152>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8001d76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7e:	f002 fb2b 	bl	80043d8 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8001d82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8a:	f002 fb25 	bl	80043d8 <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8001d8e:	207d      	movs	r0, #125	@ 0x7d
 8001d90:	f001 fddc 	bl	800394c <HAL_Delay>
        	for(int i=0; i <6 ; i++){
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	ddea      	ble.n	8001d76 <Serial_Command_Handler+0x12e>
        	}

			NVIC_SystemReset();
 8001da0:	f7ff ff3c 	bl	8001c1c <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

            break;
 8001da4:	bf00      	nop
    }

    Command_Blink_Status_LED(error_check);
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f001 fac4 	bl	8003334 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b2d9      	uxtb	r1, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f001 fa17 	bl	80031ec <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <Serial_Command_Handler+0x18c>)
 8001dc4:	f00d fd20 	bl	800f808 <memset>

}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200003f4 	.word	0x200003f4
 8001dd4:	20000410 	.word	0x20000410

08001dd8 <VCA_Command_Handler>:

// ===========================================================================================================
// A - VCA functions

int VCA_Command_Handler(int address, int data){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3b31      	subs	r3, #49	@ 0x31
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d87d      	bhi.n	8001eea <VCA_Command_Handler+0x112>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <VCA_Command_Handler+0x1c>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e09 	.word	0x08001e09
 8001df8:	08001e33 	.word	0x08001e33
 8001dfc:	08001e5d 	.word	0x08001e5d
 8001e00:	08001e8f 	.word	0x08001e8f
 8001e04:	08001ec1 	.word	0x08001ec1
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e08:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e0c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e10:	22ff      	movs	r2, #255	@ 0xff
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 fa3d 	bl	8003294 <Command_Error_Check>
 8001e1a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <VCA_Command_Handler+0x56>
                SynthParameters.vca_offset = data;
 8001e22:	4a35      	ldr	r2, [pc, #212]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                VCA_Digital_Pot_Control();
 8001e2a:	f001 f82d 	bl	8002e88 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	e05c      	b.n	8001eec <VCA_Command_Handler+0x114>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e32:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e36:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e3a:	22ff      	movs	r2, #255	@ 0xff
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f001 fa28 	bl	8003294 <Command_Error_Check>
 8001e44:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <VCA_Command_Handler+0x80>
                SynthParameters.vca_cv_intensity = data;
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                VCA_Digital_Pot_Control();
 8001e54:	f001 f818 	bl	8002e88 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	e047      	b.n	8001eec <VCA_Command_Handler+0x114>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8001e5c:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e60:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e64:	2203      	movs	r2, #3
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f001 fa13 	bl	8003294 <Command_Error_Check>
 8001e6e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <VCA_Command_Handler+0xb2>
                SynthParameters.vca_mod_source = data;
 8001e76:	4a20      	ldr	r2, [pc, #128]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6013      	str	r3, [r2, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f83d 	bl	8001f00 <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8001e86:	f000 ff9b 	bl	8002dc0 <VCA_Mod_Source_Control>
            }

        	return error_check;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	e02e      	b.n	8001eec <VCA_Command_Handler+0x114>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8001e8e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e92:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001e96:	2201      	movs	r2, #1
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f001 f9fa 	bl	8003294 <Command_Error_Check>
 8001ea0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <VCA_Command_Handler+0xe4>
                SynthParameters.vca_bypass = data;
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6053      	str	r3, [r2, #4]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <VCA_Command_Handler+0x120>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f824 	bl	8001f00 <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8001eb8:	f000 ffb4 	bl	8002e24 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	e015      	b.n	8001eec <VCA_Command_Handler+0x114>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8001ec0:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001ec4:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001ef4 <VCA_Command_Handler+0x11c>
 8001ec8:	2204      	movs	r2, #4
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f001 f9e1 	bl	8003294 <Command_Error_Check>
 8001ed2:	60f8      	str	r0, [r7, #12]

        	//VCA_Value_Query(data);
            if (error_check == 0) {
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <VCA_Command_Handler+0x10e>
            	VCA_Value_Query(data);
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	f000 f842 	bl	8001f64 <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <VCA_Command_Handler+0x124>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	e000      	b.n	8001eec <VCA_Command_Handler+0x114>
        default:
            // do nothing on invalid command

        	return error_check;
 8001eea:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	20000344 	.word	0x20000344
 8001efc:	200003f4 	.word	0x200003f4

08001f00 <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <VCA_Mod_Source_Decode+0x3e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	dc1d      	bgt.n	8001f50 <VCA_Mod_Source_Decode+0x50>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <VCA_Mod_Source_Decode+0x22>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d005      	beq.n	8001f2c <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8001f20:	e016      	b.n	8001f50 <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <VCA_Mod_Source_Decode+0x60>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            break;
 8001f2a:	e012      	b.n	8001f52 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <VCA_Mod_Source_Decode+0x60>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 1;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <VCA_Mod_Source_Decode+0x60>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8001f3c:	e009      	b.n	8001f52 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <VCA_Mod_Source_Decode+0x60>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 0;
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <VCA_Mod_Source_Decode+0x60>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8001f4e:	e000      	b.n	8001f52 <VCA_Mod_Source_Decode+0x52>
            break;
 8001f50:	bf00      	nop
    }

	return;
 8001f52:	bf00      	nop
}
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000344 	.word	0x20000344

08001f64 <VCA_Value_Query>:
    }

	return;
}

void VCA_Value_Query(int data){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8001f6c:	2341      	movs	r3, #65	@ 0x41
 8001f6e:	733b      	strb	r3, [r7, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	737b      	strb	r3, [r7, #13]
 8001f76:	2300      	movs	r3, #0
 8001f78:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3b31      	subs	r3, #49	@ 0x31
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d820      	bhi.n	8001fc4 <VCA_Value_Query+0x60>
 8001f82:	a201      	add	r2, pc, #4	@ (adr r2, 8001f88 <VCA_Value_Query+0x24>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fb1 	.word	0x08001fb1
 8001f94:	08001fbb 	.word	0x08001fbb
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8001f98:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <VCA_Value_Query+0x90>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fa2:	e010      	b.n	8001fc6 <VCA_Value_Query+0x62>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <VCA_Value_Query+0x90>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73bb      	strb	r3, [r7, #14]
            break;
 8001fae:	e00a      	b.n	8001fc6 <VCA_Value_Query+0x62>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <VCA_Value_Query+0x90>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	73bb      	strb	r3, [r7, #14]
            break;
 8001fb8:	e005      	b.n	8001fc6 <VCA_Value_Query+0x62>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <VCA_Value_Query+0x90>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fc2:	e000      	b.n	8001fc6 <VCA_Value_Query+0x62>
        default:  // do nothing on invalid command

            break;
 8001fc4:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2103      	movs	r1, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00c ff89 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <VCA_Value_Query+0x94>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <VCA_Value_Query+0x88>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8001fda:	f107 010c 	add.w	r1, r7, #12
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <VCA_Value_Query+0x98>)
 8001fe6:	f007 fac1 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
}
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000344 	.word	0x20000344
 8001ff8:	200003f4 	.word	0x200003f4
 8001ffc:	200004c8 	.word	0x200004c8

08002000 <Communication_Command_Handler>:

// ===========================================================================================================
// C - communication settings function

int Communication_Command_Handler(int address, int data){
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b33      	cmp	r3, #51	@ 0x33
 8002012:	d02f      	beq.n	8002074 <Communication_Command_Handler+0x74>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b33      	cmp	r3, #51	@ 0x33
 8002018:	dc40      	bgt.n	800209c <Communication_Command_Handler+0x9c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b31      	cmp	r3, #49	@ 0x31
 800201e:	d003      	beq.n	8002028 <Communication_Command_Handler+0x28>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b32      	cmp	r3, #50	@ 0x32
 8002024:	d012      	beq.n	800204c <Communication_Command_Handler+0x4c>
 8002026:	e039      	b.n	800209c <Communication_Command_Handler+0x9c>
        case '1': // echo command/acknowledge response setting; true = echo, false = acknowledge

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002028:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80020a8 <Communication_Command_Handler+0xa8>
 800202c:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80020a8 <Communication_Command_Handler+0xa8>
 8002030:	2201      	movs	r2, #1
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	2000      	movs	r0, #0
 8002036:	f001 f92d 	bl	8003294 <Command_Error_Check>
 800203a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <Communication_Command_Handler+0x48>
            	sys.serial_cmd_echo = data;
 8002042:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <Communication_Command_Handler+0xac>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	e028      	b.n	800209e <Communication_Command_Handler+0x9e>
        case '2': // MIDI transmit enable setting; true = enabled, false = disabled

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800204c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80020a8 <Communication_Command_Handler+0xa8>
 8002050:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80020a8 <Communication_Command_Handler+0xa8>
 8002054:	2201      	movs	r2, #1
 8002056:	6839      	ldr	r1, [r7, #0]
 8002058:	2000      	movs	r0, #0
 800205a:	f001 f91b 	bl	8003294 <Command_Error_Check>
 800205e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <Communication_Command_Handler+0x70>
            	sys.midi_tx_en = data;
 8002066:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <Communication_Command_Handler+0xac>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6093      	str	r3, [r2, #8]
            	MIDI_Port_Control();
 800206c:	f001 f894 	bl	8003198 <MIDI_Port_Control>
            }

        	return error_check;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	e014      	b.n	800209e <Communication_Command_Handler+0x9e>
        case '3': // MIDI transmit output polarity setting; true = inverted, false = non-inverted

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002074:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80020a8 <Communication_Command_Handler+0xa8>
 8002078:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80020a8 <Communication_Command_Handler+0xa8>
 800207c:	2201      	movs	r2, #1
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	2000      	movs	r0, #0
 8002082:	f001 f907 	bl	8003294 <Command_Error_Check>
 8002086:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d104      	bne.n	8002098 <Communication_Command_Handler+0x98>
            	sys.midi_tx_pol = data;
 800208e:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <Communication_Command_Handler+0xac>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6053      	str	r3, [r2, #4]
            	MIDI_Port_Control();
 8002094:	f001 f880 	bl	8003198 <MIDI_Port_Control>
            }

        	return error_check;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	e000      	b.n	800209e <Communication_Command_Handler+0x9e>
        default:
            // do nothing on invalid command

        	return error_check;
 800209c:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	00000000 	.word	0x00000000
 80020ac:	200003f4 	.word	0x200003f4

080020b0 <Envelope_Command_Handler>:

// ===========================================================================================================
// E - envelope functions

int Envelope_Command_Handler(int address, int data){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3b31      	subs	r3, #49	@ 0x31
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	f200 8096 	bhi.w	80021f4 <Envelope_Command_Handler+0x144>
 80020c8:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <Envelope_Command_Handler+0x20>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e9 	.word	0x080020e9
 80020d4:	08002113 	.word	0x08002113
 80020d8:	0800213d 	.word	0x0800213d
 80020dc:	08002167 	.word	0x08002167
 80020e0:	08002199 	.word	0x08002199
 80020e4:	080021cb 	.word	0x080021cb
        case '1': // envelope attack rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80020e8:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8002200 <Envelope_Command_Handler+0x150>
 80020ec:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8002200 <Envelope_Command_Handler+0x150>
 80020f0:	22ff      	movs	r2, #255	@ 0xff
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	2000      	movs	r0, #0
 80020f6:	f001 f8cd 	bl	8003294 <Command_Error_Check>
 80020fa:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <Envelope_Command_Handler+0x5e>
                SynthParameters.env_attack_rate = data;
 8002102:	4a40      	ldr	r2, [pc, #256]	@ (8002204 <Envelope_Command_Handler+0x154>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                Envelope_Digital_Pot_Control();
 800210a:	f000 ffa5 	bl	8003058 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	e071      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002112:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8002200 <Envelope_Command_Handler+0x150>
 8002116:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002200 <Envelope_Command_Handler+0x150>
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	2000      	movs	r0, #0
 8002120:	f001 f8b8 	bl	8003294 <Command_Error_Check>
 8002124:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <Envelope_Command_Handler+0x88>
                SynthParameters.env_decay_rate = data;
 800212c:	4a35      	ldr	r2, [pc, #212]	@ (8002204 <Envelope_Command_Handler+0x154>)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
                Envelope_Digital_Pot_Control();
 8002134:	f000 ff90 	bl	8003058 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e05c      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        case '3': // envelope release rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 800213c:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8002200 <Envelope_Command_Handler+0x150>
 8002140:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002200 <Envelope_Command_Handler+0x150>
 8002144:	22ff      	movs	r2, #255	@ 0xff
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	2000      	movs	r0, #0
 800214a:	f001 f8a3 	bl	8003294 <Command_Error_Check>
 800214e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <Envelope_Command_Handler+0xb2>
                SynthParameters.env_release_rate = data;
 8002156:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <Envelope_Command_Handler+0x154>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
                Envelope_Digital_Pot_Control();
 800215e:	f000 ff7b 	bl	8003058 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	e047      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        case '4': // envelope output polarity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002166:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002200 <Envelope_Command_Handler+0x150>
 800216a:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002200 <Envelope_Command_Handler+0x150>
 800216e:	2201      	movs	r2, #1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	2000      	movs	r0, #0
 8002174:	f001 f88e 	bl	8003294 <Command_Error_Check>
 8002178:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <Envelope_Command_Handler+0xe4>
                SynthParameters.env_invert_mode = data;
 8002180:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <Envelope_Command_Handler+0x154>)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6153      	str	r3, [r2, #20]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 8002186:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <Envelope_Command_Handler+0x154>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f83e 	bl	800220c <Envelope_Output_Polarity_Decode>
                Envelope_Mode_Control();
 8002190:	f000 ff1a 	bl	8002fc8 <Envelope_Mode_Control>
            }

        	return error_check;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	e02e      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        case '5': // envelope loop mode control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002198:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002200 <Envelope_Command_Handler+0x150>
 800219c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002200 <Envelope_Command_Handler+0x150>
 80021a0:	2201      	movs	r2, #1
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	2000      	movs	r0, #0
 80021a6:	f001 f875 	bl	8003294 <Command_Error_Check>
 80021aa:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <Envelope_Command_Handler+0x116>
                SynthParameters.env_loop_mode = data;
 80021b2:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <Envelope_Command_Handler+0x154>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6193      	str	r3, [r2, #24]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <Envelope_Command_Handler+0x154>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f849 	bl	8002254 <Envelope_Loop_Mode_Decode>
                Envelope_Mode_Control();
 80021c2:	f000 ff01 	bl	8002fc8 <Envelope_Mode_Control>
            }

        	return error_check;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	e015      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        case '6': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 5, 0, 0);
 80021ca:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002200 <Envelope_Command_Handler+0x150>
 80021ce:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002200 <Envelope_Command_Handler+0x150>
 80021d2:	2205      	movs	r2, #5
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	2002      	movs	r0, #2
 80021d8:	f001 f85c 	bl	8003294 <Command_Error_Check>
 80021dc:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <Envelope_Command_Handler+0x140>
            	Envelope_Value_Query(data);
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f000 f859 	bl	800229c <Envelope_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <Envelope_Command_Handler+0x158>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	e000      	b.n	80021f6 <Envelope_Command_Handler+0x146>
        default:
            // do nothing on invalid command

        	return error_check;
 80021f4:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	00000000 	.word	0x00000000
 8002204:	20000344 	.word	0x20000344
 8002208:	200003f4 	.word	0x200003f4

0800220c <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <Envelope_Output_Polarity_Decode+0x44>)
 800221c:	2201      	movs	r2, #1
 800221e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 1;
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <Envelope_Output_Polarity_Decode+0x44>)
 8002224:	2201      	movs	r2, #1
 8002226:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 800222a:	e00b      	b.n	8002244 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <Envelope_Output_Polarity_Decode+0x44>)
 8002234:	2201      	movs	r2, #1
 8002236:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 0;
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <Envelope_Output_Polarity_Decode+0x44>)
 800223c:	2200      	movs	r2, #0
 800223e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	return;
 8002242:	bf00      	nop
 8002244:	bf00      	nop
}
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000344 	.word	0x20000344

08002254 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <Envelope_Loop_Mode_Decode+0x44>)
 8002264:	2201      	movs	r2, #1
 8002266:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 1;
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <Envelope_Loop_Mode_Decode+0x44>)
 800226c:	2201      	movs	r2, #1
 800226e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 8002272:	e00b      	b.n	800228c <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <Envelope_Loop_Mode_Decode+0x44>)
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 0;
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <Envelope_Loop_Mode_Decode+0x44>)
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	return;
 800228a:	bf00      	nop
 800228c:	bf00      	nop
}
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	20000344 	.word	0x20000344

0800229c <Envelope_Value_Query>:

void Envelope_Value_Query(int data){
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'E', data , 0};
 80022a4:	2345      	movs	r3, #69	@ 0x45
 80022a6:	733b      	strb	r3, [r7, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	737b      	strb	r3, [r7, #13]
 80022ae:	2300      	movs	r3, #0
 80022b0:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3b31      	subs	r3, #49	@ 0x31
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d828      	bhi.n	800230c <Envelope_Value_Query+0x70>
 80022ba:	a201      	add	r2, pc, #4	@ (adr r2, 80022c0 <Envelope_Value_Query+0x24>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	080022d5 	.word	0x080022d5
 80022c4:	080022e1 	.word	0x080022e1
 80022c8:	080022ed 	.word	0x080022ed
 80022cc:	080022f9 	.word	0x080022f9
 80022d0:	08002303 	.word	0x08002303
        case '1': // envelope attack rate
        	return_data[2] = SynthParameters.env_attack_rate;
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <Envelope_Value_Query+0xa0>)
 80022d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	73bb      	strb	r3, [r7, #14]
            break;
 80022de:	e016      	b.n	800230e <Envelope_Value_Query+0x72>
        case '2': // envelope sustain level/decay rate
        	return_data[2] = SynthParameters.env_decay_rate;
 80022e0:	4b16      	ldr	r3, [pc, #88]	@ (800233c <Envelope_Value_Query+0xa0>)
 80022e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	73bb      	strb	r3, [r7, #14]
            break;
 80022ea:	e010      	b.n	800230e <Envelope_Value_Query+0x72>
        case '3': // envelope release rate
        	return_data[2] = SynthParameters.env_release_rate;
 80022ec:	4b13      	ldr	r3, [pc, #76]	@ (800233c <Envelope_Value_Query+0xa0>)
 80022ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73bb      	strb	r3, [r7, #14]
            break;
 80022f6:	e00a      	b.n	800230e <Envelope_Value_Query+0x72>
        case '4': // envelope output polarity
        	return_data[2] = SynthParameters.env_invert_mode;
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <Envelope_Value_Query+0xa0>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	73bb      	strb	r3, [r7, #14]
            break;
 8002300:	e005      	b.n	800230e <Envelope_Value_Query+0x72>
        case '5': // envelope loop mode control
        	return_data[2] = SynthParameters.env_loop_mode;
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <Envelope_Value_Query+0xa0>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	73bb      	strb	r3, [r7, #14]
            break;
 800230a:	e000      	b.n	800230e <Envelope_Value_Query+0x72>
        default:  // do nothing on invalid command

            break;
 800230c:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f00c fde5 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <Envelope_Value_Query+0xa4>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <Envelope_Value_Query+0x98>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002322:	f107 010c 	add.w	r1, r7, #12
 8002326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232a:	2203      	movs	r2, #3
 800232c:	4805      	ldr	r0, [pc, #20]	@ (8002344 <Envelope_Value_Query+0xa8>)
 800232e:	f007 f91d 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 8002332:	bf00      	nop
 8002334:	bf00      	nop
}
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000344 	.word	0x20000344
 8002340:	200003f4 	.word	0x200003f4
 8002344:	200004c8 	.word	0x200004c8

08002348 <Filter_Command_Handler>:

// ===========================================================================================================
// F - filter functions

int Filter_Command_Handler(int address, int data){
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3b31      	subs	r3, #49	@ 0x31
 800235a:	2b04      	cmp	r3, #4
 800235c:	d876      	bhi.n	800244c <Filter_Command_Handler+0x104>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <Filter_Command_Handler+0x1c>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002379 	.word	0x08002379
 8002368:	080023a1 	.word	0x080023a1
 800236c:	080023c9 	.word	0x080023c9
 8002370:	080023f1 	.word	0x080023f1
 8002374:	08002423 	.word	0x08002423
        case '1': // filter cutoff

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002378:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002458 <Filter_Command_Handler+0x110>
 800237c:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8002458 <Filter_Command_Handler+0x110>
 8002380:	22ff      	movs	r2, #255	@ 0xff
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	2000      	movs	r0, #0
 8002386:	f000 ff85 	bl	8003294 <Command_Error_Check>
 800238a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <Filter_Command_Handler+0x54>
                SynthParameters.vcf_cutoff = data;
 8002392:	4a32      	ldr	r2, [pc, #200]	@ (800245c <Filter_Command_Handler+0x114>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	66d3      	str	r3, [r2, #108]	@ 0x6c
                Filter_Digital_Pot_Control();
 8002398:	f000 fdbc 	bl	8002f14 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	e056      	b.n	800244e <Filter_Command_Handler+0x106>
        case '2': // filter resonance intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023a0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002458 <Filter_Command_Handler+0x110>
 80023a4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002458 <Filter_Command_Handler+0x110>
 80023a8:	22ff      	movs	r2, #255	@ 0xff
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	2000      	movs	r0, #0
 80023ae:	f000 ff71 	bl	8003294 <Command_Error_Check>
 80023b2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <Filter_Command_Handler+0x7c>
                SynthParameters.vcf_resonance = data;
 80023ba:	4a28      	ldr	r2, [pc, #160]	@ (800245c <Filter_Command_Handler+0x114>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6713      	str	r3, [r2, #112]	@ 0x70
                Filter_Digital_Pot_Control();
 80023c0:	f000 fda8 	bl	8002f14 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	e042      	b.n	800244e <Filter_Command_Handler+0x106>
        case '3': // filter modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023c8:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8002458 <Filter_Command_Handler+0x110>
 80023cc:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002458 <Filter_Command_Handler+0x110>
 80023d0:	22ff      	movs	r2, #255	@ 0xff
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 ff5d 	bl	8003294 <Command_Error_Check>
 80023da:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d104      	bne.n	80023ec <Filter_Command_Handler+0xa4>
                SynthParameters.vcf_cv_intensity = data;
 80023e2:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <Filter_Command_Handler+0x114>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6693      	str	r3, [r2, #104]	@ 0x68
                Filter_Digital_Pot_Control();
 80023e8:	f000 fd94 	bl	8002f14 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	e02e      	b.n	800244e <Filter_Command_Handler+0x106>
        case '4': // filter modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 80023f0:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002458 <Filter_Command_Handler+0x110>
 80023f4:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002458 <Filter_Command_Handler+0x110>
 80023f8:	2203      	movs	r2, #3
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	2001      	movs	r0, #1
 80023fe:	f000 ff49 	bl	8003294 <Command_Error_Check>
 8002402:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <Filter_Command_Handler+0xd6>
                SynthParameters.vcf_mod_source = data;
 800240a:	4a14      	ldr	r2, [pc, #80]	@ (800245c <Filter_Command_Handler+0x114>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6093      	str	r3, [r2, #8]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <Filter_Command_Handler+0x114>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f825 	bl	8002464 <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 800241a:	f000 fd4b 	bl	8002eb4 <Filter_Mod_Source_Control>
            }

        	return error_check;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	e015      	b.n	800244e <Filter_Command_Handler+0x106>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8002422:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002458 <Filter_Command_Handler+0x110>
 8002426:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002458 <Filter_Command_Handler+0x110>
 800242a:	2204      	movs	r2, #4
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	2002      	movs	r0, #2
 8002430:	f000 ff30 	bl	8003294 <Command_Error_Check>
 8002434:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <Filter_Command_Handler+0x100>
            	Filter_Value_Query(data);
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f000 f83d 	bl	80024bc <Filter_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <Filter_Command_Handler+0x118>)
 8002444:	2201      	movs	r2, #1
 8002446:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	e000      	b.n	800244e <Filter_Command_Handler+0x106>
        default:
            // do nothing on invalid command

        	return error_check;
 800244c:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	00000000 	.word	0x00000000
 800245c:	20000344 	.word	0x20000344
 8002460:	200003f4 	.word	0x200003f4

08002464 <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

    switch(data) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d014      	beq.n	800249c <Filter_Mod_Source_Decode+0x38>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b03      	cmp	r3, #3
 8002476:	dc18      	bgt.n	80024aa <Filter_Mod_Source_Decode+0x46>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <Filter_Mod_Source_Decode+0x22>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d004      	beq.n	800248e <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8002484:	e011      	b.n	80024aa <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <Filter_Mod_Source_Decode+0x54>)
 8002488:	2200      	movs	r2, #0
 800248a:	661a      	str	r2, [r3, #96]	@ 0x60
            break;
 800248c:	e00e      	b.n	80024ac <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <Filter_Mod_Source_Decode+0x54>)
 8002490:	2201      	movs	r2, #1
 8002492:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 1;
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <Filter_Mod_Source_Decode+0x54>)
 8002496:	2201      	movs	r2, #1
 8002498:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 800249a:	e007      	b.n	80024ac <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <Filter_Mod_Source_Decode+0x54>)
 800249e:	2201      	movs	r2, #1
 80024a0:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 0;
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <Filter_Mod_Source_Decode+0x54>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 80024a8:	e000      	b.n	80024ac <Filter_Mod_Source_Decode+0x48>
            break;
 80024aa:	bf00      	nop
    }

	return;
 80024ac:	bf00      	nop
}
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000344 	.word	0x20000344

080024bc <Filter_Value_Query>:

void Filter_Value_Query(int data){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'F', data , 0};
 80024c4:	2346      	movs	r3, #70	@ 0x46
 80024c6:	733b      	strb	r3, [r7, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	737b      	strb	r3, [r7, #13]
 80024ce:	2300      	movs	r3, #0
 80024d0:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3b31      	subs	r3, #49	@ 0x31
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d81e      	bhi.n	8002518 <Filter_Value_Query+0x5c>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <Filter_Value_Query+0x24>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024fb 	.word	0x080024fb
 80024e8:	08002505 	.word	0x08002505
 80024ec:	0800250f 	.word	0x0800250f
        case '1': // filter cutoff
        	return_data[2] = SynthParameters.vcf_cutoff;
 80024f0:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <Filter_Value_Query+0x8c>)
 80024f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	73bb      	strb	r3, [r7, #14]
            break;
 80024f8:	e00f      	b.n	800251a <Filter_Value_Query+0x5e>
        case '2': // filter resonance intensity
        	return_data[2] = SynthParameters.vcf_resonance;
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <Filter_Value_Query+0x8c>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	73bb      	strb	r3, [r7, #14]
            break;
 8002502:	e00a      	b.n	800251a <Filter_Value_Query+0x5e>
        case '3': // filter modulation intensity
        	return_data[2] = SynthParameters.vcf_cv_intensity;
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <Filter_Value_Query+0x8c>)
 8002506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002508:	b2db      	uxtb	r3, r3
 800250a:	73bb      	strb	r3, [r7, #14]
            break;
 800250c:	e005      	b.n	800251a <Filter_Value_Query+0x5e>
        case '4': // filter modulation control
        	return_data[2] = SynthParameters.vcf_mod_source;
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <Filter_Value_Query+0x8c>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	73bb      	strb	r3, [r7, #14]
            break;
 8002516:	e000      	b.n	800251a <Filter_Value_Query+0x5e>
        default:  // do nothing on invalid command

            break;
 8002518:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	2103      	movs	r1, #3
 8002520:	4618      	mov	r0, r3
 8002522:	f00c fcdf 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <Filter_Value_Query+0x90>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <Filter_Value_Query+0x84>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 800252e:	f107 010c 	add.w	r1, r7, #12
 8002532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002536:	2203      	movs	r2, #3
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <Filter_Value_Query+0x94>)
 800253a:	f007 f817 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 800253e:	bf00      	nop
 8002540:	bf00      	nop
}
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000344 	.word	0x20000344
 800254c:	200003f4 	.word	0x200003f4
 8002550:	200004c8 	.word	0x200004c8

08002554 <Mixer_Command_Handler>:

// ===========================================================================================================
// M - mixer function

int Mixer_Command_Handler(int address, int data){
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3b31      	subs	r3, #49	@ 0x31
 8002566:	2b03      	cmp	r3, #3
 8002568:	d85a      	bhi.n	8002620 <Mixer_Command_Handler+0xcc>
 800256a:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <Mixer_Command_Handler+0x1c>)
 800256c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002570:	08002581 	.word	0x08002581
 8002574:	080025a9 	.word	0x080025a9
 8002578:	080025d1 	.word	0x080025d1
 800257c:	080025f7 	.word	0x080025f7
        case '1': // DAC output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002580:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800262c <Mixer_Command_Handler+0xd8>
 8002584:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800262c <Mixer_Command_Handler+0xd8>
 8002588:	22ff      	movs	r2, #255	@ 0xff
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	2000      	movs	r0, #0
 800258e:	f000 fe81 	bl	8003294 <Command_Error_Check>
 8002592:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <Mixer_Command_Handler+0x50>
                SynthParameters.dac_mixer_level = data;
 800259a:	4a25      	ldr	r2, [pc, #148]	@ (8002630 <Mixer_Command_Handler+0xdc>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
                Mixer_Digital_Pot_Control();
 80025a0:	f000 fbfa 	bl	8002d98 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e03c      	b.n	8002622 <Mixer_Command_Handler+0xce>
        case '2': // filter output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80025a8:	eddf 0a20 	vldr	s1, [pc, #128]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025ac:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 fe6d 	bl	8003294 <Command_Error_Check>
 80025ba:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <Mixer_Command_Handler+0x78>
                SynthParameters.filter_out_level = data;
 80025c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <Mixer_Command_Handler+0xdc>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
                Mixer_Digital_Pot_Control();
 80025c8:	f000 fbe6 	bl	8002d98 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e028      	b.n	8002622 <Mixer_Command_Handler+0xce>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80025d0:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025d4:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025d8:	2201      	movs	r2, #1
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	2000      	movs	r0, #0
 80025de:	f000 fe59 	bl	8003294 <Command_Error_Check>
 80025e2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <Mixer_Command_Handler+0x9e>
            	sys.velocity_enable = data;
 80025ea:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <Mixer_Command_Handler+0xe0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            }

        	return error_check;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	e015      	b.n	8002622 <Mixer_Command_Handler+0xce>
        case '4': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 3, 0, 0);
 80025f6:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025fa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800262c <Mixer_Command_Handler+0xd8>
 80025fe:	2203      	movs	r2, #3
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	2002      	movs	r0, #2
 8002604:	f000 fe46 	bl	8003294 <Command_Error_Check>
 8002608:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <Mixer_Command_Handler+0xc8>
            	Mixer_Value_Query(data);
 8002610:	6838      	ldr	r0, [r7, #0]
 8002612:	f000 f811 	bl	8002638 <Mixer_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002616:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <Mixer_Command_Handler+0xe0>)
 8002618:	2201      	movs	r2, #1
 800261a:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	e000      	b.n	8002622 <Mixer_Command_Handler+0xce>
        default:
            // do nothing on invalid command

        	return error_check;
 8002620:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00000000 	.word	0x00000000
 8002630:	20000344 	.word	0x20000344
 8002634:	200003f4 	.word	0x200003f4

08002638 <Mixer_Value_Query>:

void Mixer_Value_Query(int data){
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'M', data , 0};
 8002640:	234d      	movs	r3, #77	@ 0x4d
 8002642:	733b      	strb	r3, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	737b      	strb	r3, [r7, #13]
 800264a:	2300      	movs	r3, #0
 800264c:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b33      	cmp	r3, #51	@ 0x33
 8002652:	d013      	beq.n	800267c <Mixer_Value_Query+0x44>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b33      	cmp	r3, #51	@ 0x33
 8002658:	dc16      	bgt.n	8002688 <Mixer_Value_Query+0x50>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b31      	cmp	r3, #49	@ 0x31
 800265e:	d003      	beq.n	8002668 <Mixer_Value_Query+0x30>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b32      	cmp	r3, #50	@ 0x32
 8002664:	d005      	beq.n	8002672 <Mixer_Value_Query+0x3a>
        case '3': // enable/disable MIDI velocity
        	return_data[2] = sys.velocity_enable;
            break;
        default:  // do nothing on invalid command

            break;
 8002666:	e00f      	b.n	8002688 <Mixer_Value_Query+0x50>
        	return_data[2] = SynthParameters.dac_mixer_level;
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <Mixer_Value_Query+0x80>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73bb      	strb	r3, [r7, #14]
            break;
 8002670:	e00b      	b.n	800268a <Mixer_Value_Query+0x52>
        	return_data[2] = SynthParameters.filter_out_level;
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <Mixer_Value_Query+0x80>)
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	b2db      	uxtb	r3, r3
 8002678:	73bb      	strb	r3, [r7, #14]
            break;
 800267a:	e006      	b.n	800268a <Mixer_Value_Query+0x52>
        	return_data[2] = sys.velocity_enable;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <Mixer_Value_Query+0x84>)
 800267e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002682:	b2db      	uxtb	r3, r3
 8002684:	73bb      	strb	r3, [r7, #14]
            break;
 8002686:	e000      	b.n	800268a <Mixer_Value_Query+0x52>
            break;
 8002688:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	2103      	movs	r1, #3
 8002690:	4618      	mov	r0, r3
 8002692:	f00c fc27 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <Mixer_Value_Query+0x84>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <Mixer_Value_Query+0x78>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 800269e:	f107 010c 	add.w	r1, r7, #12
 80026a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026a6:	2203      	movs	r2, #3
 80026a8:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <Mixer_Value_Query+0x88>)
 80026aa:	f006 ff5f 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
}
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000344 	.word	0x20000344
 80026bc:	200003f4 	.word	0x200003f4
 80026c0:	200004c8 	.word	0x200004c8

080026c4 <LFO_Command_Handler>:

// ===========================================================================================================
// O - LFO functions

int LFO_Command_Handler(int address, int data){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b33      	cmp	r3, #51	@ 0x33
 80026d6:	d036      	beq.n	8002746 <LFO_Command_Handler+0x82>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b33      	cmp	r3, #51	@ 0x33
 80026dc:	dc48      	bgt.n	8002770 <LFO_Command_Handler+0xac>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b31      	cmp	r3, #49	@ 0x31
 80026e2:	d003      	beq.n	80026ec <LFO_Command_Handler+0x28>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b32      	cmp	r3, #50	@ 0x32
 80026e8:	d014      	beq.n	8002714 <LFO_Command_Handler+0x50>
 80026ea:	e041      	b.n	8002770 <LFO_Command_Handler+0xac>
        case '1': // LFO frequency/rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80026ec:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800277c <LFO_Command_Handler+0xb8>
 80026f0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800277c <LFO_Command_Handler+0xb8>
 80026f4:	22ff      	movs	r2, #255	@ 0xff
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 fdcb 	bl	8003294 <Command_Error_Check>
 80026fe:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <LFO_Command_Handler+0x4c>
                SynthParameters.lfo_frequency = data;
 8002706:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <LFO_Command_Handler+0xbc>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	67d3      	str	r3, [r2, #124]	@ 0x7c
                LFO_Digital_Pot_Control();
 800270c:	f000 fc4e 	bl	8002fac <LFO_Digital_Pot_Control>
            }

        	return error_check;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	e02e      	b.n	8002772 <LFO_Command_Handler+0xae>
        case '2': // LFO output waveform

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8002714:	eddf 0a19 	vldr	s1, [pc, #100]	@ 800277c <LFO_Command_Handler+0xb8>
 8002718:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800277c <LFO_Command_Handler+0xb8>
 800271c:	2203      	movs	r2, #3
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	2001      	movs	r0, #1
 8002722:	f000 fdb7 	bl	8003294 <Command_Error_Check>
 8002726:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <LFO_Command_Handler+0x7e>
                SynthParameters.lfo_waveform = data;
 800272e:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <LFO_Command_Handler+0xbc>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	61d3      	str	r3, [r2, #28]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <LFO_Command_Handler+0xbc>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f825 	bl	8002788 <LFO_Waveform_Decode>
                LFO_Output_Control();
 800273e:	f000 fc05 	bl	8002f4c <LFO_Output_Control>
            }

        	return error_check;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e015      	b.n	8002772 <LFO_Command_Handler+0xae>
        case '3': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 2, 0, 0);
 8002746:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800277c <LFO_Command_Handler+0xb8>
 800274a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800277c <LFO_Command_Handler+0xb8>
 800274e:	2202      	movs	r2, #2
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	2002      	movs	r0, #2
 8002754:	f000 fd9e 	bl	8003294 <Command_Error_Check>
 8002758:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <LFO_Command_Handler+0xa8>
            	LFO_Value_Query(data);
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f000 f83d 	bl	80027e0 <LFO_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <LFO_Command_Handler+0xc0>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	e000      	b.n	8002772 <LFO_Command_Handler+0xae>
        default:
            // do nothing on invalid command

        	return error_check;
 8002770:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	00000000 	.word	0x00000000
 8002780:	20000344 	.word	0x20000344
 8002784:	200003f4 	.word	0x200003f4

08002788 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d014      	beq.n	80027c0 <LFO_Waveform_Decode+0x38>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b03      	cmp	r3, #3
 800279a:	dc18      	bgt.n	80027ce <LFO_Waveform_Decode+0x46>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d003      	beq.n	80027aa <LFO_Waveform_Decode+0x22>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d004      	beq.n	80027b2 <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80027a8:	e011      	b.n	80027ce <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <LFO_Waveform_Decode+0x54>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	675a      	str	r2, [r3, #116]	@ 0x74
            break;
 80027b0:	e00e      	b.n	80027d0 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <LFO_Waveform_Decode+0x54>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 1;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <LFO_Waveform_Decode+0x54>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80027be:	e007      	b.n	80027d0 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <LFO_Waveform_Decode+0x54>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 0;
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <LFO_Waveform_Decode+0x54>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80027cc:	e000      	b.n	80027d0 <LFO_Waveform_Decode+0x48>
            break;
 80027ce:	bf00      	nop
    }

	return;
 80027d0:	bf00      	nop
}
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	20000344 	.word	0x20000344

080027e0 <LFO_Value_Query>:

void LFO_Value_Query(int data){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'O', data , 0};
 80027e8:	234f      	movs	r3, #79	@ 0x4f
 80027ea:	733b      	strb	r3, [r7, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	737b      	strb	r3, [r7, #13]
 80027f2:	2300      	movs	r3, #0
 80027f4:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b31      	cmp	r3, #49	@ 0x31
 80027fa:	d003      	beq.n	8002804 <LFO_Value_Query+0x24>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b32      	cmp	r3, #50	@ 0x32
 8002800:	d005      	beq.n	800280e <LFO_Value_Query+0x2e>
        case '2': // LFO output waveform
        	return_data[2] = SynthParameters.lfo_waveform;
            break;
        default:  // do nothing on invalid command

            break;
 8002802:	e009      	b.n	8002818 <LFO_Value_Query+0x38>
        	return_data[2] = SynthParameters.lfo_frequency;
 8002804:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <LFO_Value_Query+0x68>)
 8002806:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002808:	b2db      	uxtb	r3, r3
 800280a:	73bb      	strb	r3, [r7, #14]
            break;
 800280c:	e004      	b.n	8002818 <LFO_Value_Query+0x38>
        	return_data[2] = SynthParameters.lfo_waveform;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <LFO_Value_Query+0x68>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	73bb      	strb	r3, [r7, #14]
            break;
 8002816:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	2103      	movs	r1, #3
 800281e:	4618      	mov	r0, r3
 8002820:	f00c fb60 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <LFO_Value_Query+0x6c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d108      	bne.n	800283e <LFO_Value_Query+0x5e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 800282c:	f107 010c 	add.w	r1, r7, #12
 8002830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002834:	2203      	movs	r2, #3
 8002836:	4806      	ldr	r0, [pc, #24]	@ (8002850 <LFO_Value_Query+0x70>)
 8002838:	f006 fe98 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 800283c:	bf00      	nop
 800283e:	bf00      	nop
}
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000344 	.word	0x20000344
 800284c:	200003f4 	.word	0x200003f4
 8002850:	200004c8 	.word	0x200004c8

08002854 <Preset_Command_Handler>:

// ===========================================================================================================
// P preset function

int Preset_Command_Handler(int address, int data){
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]

    switch(address) {
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b31      	cmp	r3, #49	@ 0x31
 8002862:	d003      	beq.n	800286c <Preset_Command_Handler+0x18>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b32      	cmp	r3, #50	@ 0x32
 8002868:	d002      	beq.n	8002870 <Preset_Command_Handler+0x1c>
 800286a:	e003      	b.n	8002874 <Preset_Command_Handler+0x20>
        case '1': // preset save function

        	// preset save function

        	return 0;
 800286c:	2300      	movs	r3, #0
 800286e:	e002      	b.n	8002876 <Preset_Command_Handler+0x22>
        case '2': // preset load function

        	// preset load function

        	return 0;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <Preset_Command_Handler+0x22>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return 1;
 8002874:	2301      	movs	r3, #1
    }

    return 1;
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <MX_SPI3_Init+0x74>)
 800288a:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <MX_SPI3_Init+0x78>)
 800288c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <MX_SPI3_Init+0x74>)
 8002890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002894:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <MX_SPI3_Init+0x74>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_SPI3_Init+0x74>)
 800289e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028ba:	2228      	movs	r2, #40	@ 0x28
 80028bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028d2:	2207      	movs	r2, #7
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028de:	2208      	movs	r2, #8
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <MX_SPI3_Init+0x74>)
 80028e4:	f005 fe80 	bl	80085e8 <HAL_SPI_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80028ee:	f7fe fd7a 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002e0 	.word	0x200002e0
 80028fc:	40003c00 	.word	0x40003c00

08002900 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a17      	ldr	r2, [pc, #92]	@ (800297c <HAL_SPI_MspInit+0x7c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d128      	bne.n	8002974 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002926:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 8002928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292c:	6593      	str	r3, [r2, #88]	@ 0x58
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_SPI_MspInit+0x80>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002952:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002964:	2306      	movs	r3, #6
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	4805      	ldr	r0, [pc, #20]	@ (8002984 <HAL_SPI_MspInit+0x84>)
 8002970:	f001 fb98 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002974:	bf00      	nop
 8002976:	3728      	adds	r7, #40	@ 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40003c00 	.word	0x40003c00
 8002980:	40021000 	.word	0x40021000
 8002984:	48000800 	.word	0x48000800

08002988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_MspInit+0x44>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002992:	4a0e      	ldr	r2, [pc, #56]	@ (80029cc <HAL_MspInit+0x44>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6613      	str	r3, [r2, #96]	@ 0x60
 800299a:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <HAL_MspInit+0x44>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_MspInit+0x44>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_MspInit+0x44>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_MspInit+0x44>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029be:	f004 f987 	bl	8006cd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <NMI_Handler+0x4>

080029d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <HardFault_Handler+0x4>

080029e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <MemManage_Handler+0x4>

080029e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a26:	f000 ff73 	bl	8003910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <DMA1_Channel1_IRQHandler+0x10>)
 8002a36:	f001 fa23 	bl	8003e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000280 	.word	0x20000280

08002a44 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <USB_LP_IRQHandler+0x10>)
 8002a4a:	f002 fc8b 	bl	8005364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20001a34 	.word	0x20001a34

08002a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <USART2_IRQHandler+0x10>)
 8002a5e:	f006 fe5f 	bl	8009720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004c8 	.word	0x200004c8

08002a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <TIM6_DAC_IRQHandler+0x10>)
 8002a72:	f006 fa36 	bl	8008ee2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000047c 	.word	0x2000047c

08002a80 <Digital_Pot_Wiper_Set>:

extern System sys;

Synth SynthParameters;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <Digital_Pot_Wiper_Set+0x1c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e001      	b.n	8002aa0 <Digital_Pot_Wiper_Set+0x20>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b0a      	cmp	r3, #10
 8002aa6:	d854      	bhi.n	8002b52 <Digital_Pot_Wiper_Set+0xd2>
 8002aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <Digital_Pot_Wiper_Set+0x30>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002add 	.word	0x08002add
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002af3 	.word	0x08002af3
 8002abc:	08002afd 	.word	0x08002afd
 8002ac0:	08002b09 	.word	0x08002b09
 8002ac4:	08002b13 	.word	0x08002b13
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b27 	.word	0x08002b27
 8002ad0:	08002b33 	.word	0x08002b33
 8002ad4:	08002b3f 	.word	0x08002b3f
 8002ad8:	08002b49 	.word	0x08002b49
        case 0:
            CSn_PORT = CS0_PORT;
 8002adc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002ae0:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	827b      	strh	r3, [r7, #18]
            break;
 8002ae6:	e035      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 8002ae8:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <Digital_Pot_Wiper_Set+0x104>)
 8002aea:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 8002aec:	2302      	movs	r3, #2
 8002aee:	827b      	strh	r3, [r7, #18]
            break;
 8002af0:	e030      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 8002af2:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <Digital_Pot_Wiper_Set+0x108>)
 8002af4:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 8002af6:	2304      	movs	r3, #4
 8002af8:	827b      	strh	r3, [r7, #18]
            break;
 8002afa:	e02b      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 8002afc:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <Digital_Pot_Wiper_Set+0x104>)
 8002afe:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 8002b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b04:	827b      	strh	r3, [r7, #18]
            break;
 8002b06:	e025      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <Digital_Pot_Wiper_Set+0x104>)
 8002b0a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 8002b0c:	2340      	movs	r3, #64	@ 0x40
 8002b0e:	827b      	strh	r3, [r7, #18]
            break;
 8002b10:	e020      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <Digital_Pot_Wiper_Set+0x10c>)
 8002b14:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 8002b16:	2320      	movs	r3, #32
 8002b18:	827b      	strh	r3, [r7, #18]
            break;
 8002b1a:	e01b      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <Digital_Pot_Wiper_Set+0x104>)
 8002b1e:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	827b      	strh	r3, [r7, #18]
            break;
 8002b24:	e016      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 8002b26:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <Digital_Pot_Wiper_Set+0x10c>)
 8002b28:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 8002b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b2e:	827b      	strh	r3, [r7, #18]
            break;
 8002b30:	e010      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 8002b32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b36:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	827b      	strh	r3, [r7, #18]
            break;
 8002b3c:	e00a      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 8002b3e:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <Digital_Pot_Wiper_Set+0x10c>)
 8002b40:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 8002b42:	2310      	movs	r3, #16
 8002b44:	827b      	strh	r3, [r7, #18]
            break;
 8002b46:	e005      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <Digital_Pot_Wiper_Set+0x104>)
 8002b4a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	827b      	strh	r3, [r7, #18]
            break;
 8002b50:	e000      	b.n	8002b54 <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 8002b52:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8002b54:	8a7b      	ldrh	r3, [r7, #18]
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f001 fc24 	bl	80043a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8002b60:	f107 0110 	add.w	r1, r7, #16
 8002b64:	230a      	movs	r3, #10
 8002b66:	2201      	movs	r2, #1
 8002b68:	4809      	ldr	r0, [pc, #36]	@ (8002b90 <Digital_Pot_Wiper_Set+0x110>)
 8002b6a:	f005 fde8 	bl	800873e <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 8002b6e:	8a7b      	ldrh	r3, [r7, #18]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4619      	mov	r1, r3
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f001 fc17 	bl	80043a8 <HAL_GPIO_WritePin>

	return;
 8002b7a:	bf00      	nop
}
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	48000400 	.word	0x48000400
 8002b88:	48000c00 	.word	0x48000c00
 8002b8c:	48000800 	.word	0x48000800
 8002b90:	200002e0 	.word	0x200002e0

08002b94 <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2120      	movs	r1, #32
 8002b9c:	4822      	ldr	r0, [pc, #136]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002b9e:	f001 fc03 	bl	80043a8 <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002baa:	f001 fbfd 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	481d      	ldr	r0, [pc, #116]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002bb4:	f001 fbf8 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2104      	movs	r1, #4
 8002bbc:	481b      	ldr	r0, [pc, #108]	@ (8002c2c <Synth_Reset_Initialize+0x98>)
 8002bbe:	f001 fbf3 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bc8:	4817      	ldr	r0, [pc, #92]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002bca:	f001 fbed 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2140      	movs	r1, #64	@ 0x40
 8002bd2:	4815      	ldr	r0, [pc, #84]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002bd4:	f001 fbe8 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2120      	movs	r1, #32
 8002bdc:	4814      	ldr	r0, [pc, #80]	@ (8002c30 <Synth_Reset_Initialize+0x9c>)
 8002bde:	f001 fbe3 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002be8:	f001 fbde 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 8002bec:	2201      	movs	r2, #1
 8002bee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bf2:	480f      	ldr	r0, [pc, #60]	@ (8002c30 <Synth_Reset_Initialize+0x9c>)
 8002bf4:	f001 fbd8 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2180      	movs	r1, #128	@ 0x80
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c00:	f001 fbd2 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 8002c04:	2201      	movs	r2, #1
 8002c06:	2110      	movs	r1, #16
 8002c08:	4809      	ldr	r0, [pc, #36]	@ (8002c30 <Synth_Reset_Initialize+0x9c>)
 8002c0a:	f001 fbcd 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2101      	movs	r1, #1
 8002c12:	4805      	ldr	r0, [pc, #20]	@ (8002c28 <Synth_Reset_Initialize+0x94>)
 8002c14:	f001 fbc8 	bl	80043a8 <HAL_GPIO_WritePin>

	// set gate low
	Gate_Control(0);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f000 faa7 	bl	800316c <Gate_Control>

	Synth_Initialize_Preset();
 8002c1e:	f000 f809 	bl	8002c34 <Synth_Initialize_Preset>

	return;
 8002c22:	bf00      	nop
}
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	48000400 	.word	0x48000400
 8002c2c:	48000c00 	.word	0x48000c00
 8002c30:	48000800 	.word	0x48000800

08002c34 <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source = 1;
 8002c38:	4b56      	ldr	r3, [pc, #344]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
	SynthParameters.vca_bypass = 1;
 8002c3e:	4b55      	ldr	r3, [pc, #340]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	605a      	str	r2, [r3, #4]
	SynthParameters.vcf_mod_source = 1;
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	609a      	str	r2, [r3, #8]
	SynthParameters.fm1_enable = 0;
 8002c4a:	4b52      	ldr	r3, [pc, #328]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	60da      	str	r2, [r3, #12]
	SynthParameters.fm2_enable = 0;
 8002c50:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
	SynthParameters.env_invert_mode = 0;
 8002c56:	4b4f      	ldr	r3, [pc, #316]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	615a      	str	r2, [r3, #20]
	SynthParameters.env_loop_mode = 0;
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
	SynthParameters.lfo_waveform = 1;
 8002c62:	4b4c      	ldr	r3, [pc, #304]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	61da      	str	r2, [r3, #28]

	// waveform synthesis settings
	SynthParameters.oscillator1 = 4;
 8002c68:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	621a      	str	r2, [r3, #32]
	SynthParameters.oscillator2 = 4;
 8002c6e:	4b49      	ldr	r3, [pc, #292]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c70:	2204      	movs	r2, #4
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24
	SynthParameters.note_offset1 = 12;
 8002c74:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c76:	220c      	movs	r2, #12
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
	SynthParameters.note_offset2 = 12;
 8002c7a:	4b46      	ldr	r3, [pc, #280]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	SynthParameters.detune_osc1 = 100;
 8002c80:	4b44      	ldr	r3, [pc, #272]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c82:	2264      	movs	r2, #100	@ 0x64
 8002c84:	631a      	str	r2, [r3, #48]	@ 0x30
	SynthParameters.detune_osc2 = 100;
 8002c86:	4b43      	ldr	r3, [pc, #268]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c88:	2264      	movs	r2, #100	@ 0x64
 8002c8a:	635a      	str	r2, [r3, #52]	@ 0x34
	SynthParameters.fm_intensity1 = 0.5;
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c8e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
	SynthParameters.fm_intensity2 = 0.5;
 8002c94:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c96:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	SynthParameters.fm_harmonic1 = 1.0;
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002c9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40
	SynthParameters.fm_harmonic2 = 1.0;
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002ca6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
	SynthParameters.duty_cycle1 = 0.5;
 8002cac:	4b39      	ldr	r3, [pc, #228]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002cb2:	649a      	str	r2, [r3, #72]	@ 0x48
	SynthParameters.duty_cycle2 = 0.5;
 8002cb4:	4b37      	ldr	r3, [pc, #220]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cb6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002cba:	64da      	str	r2, [r3, #76]	@ 0x4c
	SynthParameters.volume_osc1 = 100;
 8002cbc:	4b35      	ldr	r3, [pc, #212]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cbe:	2264      	movs	r2, #100	@ 0x64
 8002cc0:	651a      	str	r2, [r3, #80]	@ 0x50
	SynthParameters.volume_osc2 = 100;
 8002cc2:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cc4:	2264      	movs	r2, #100	@ 0x64
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54

	// mixer output level settings
	SynthParameters.dac_mixer_level = 127;
 8002cc8:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cca:	227f      	movs	r2, #127	@ 0x7f
 8002ccc:	659a      	str	r2, [r3, #88]	@ 0x58
	SynthParameters.filter_out_level = 127;
 8002cce:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cd0:	227f      	movs	r2, #127	@ 0x7f
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

	// filter modulation source settings
	SynthParameters.vcf_cv_en = 0;
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	661a      	str	r2, [r3, #96]	@ 0x60
	SynthParameters.vcf_cv_sel = 0;
 8002cda:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	665a      	str	r2, [r3, #100]	@ 0x64

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity = 127;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002ce2:	227f      	movs	r2, #127	@ 0x7f
 8002ce4:	669a      	str	r2, [r3, #104]	@ 0x68
	SynthParameters.vcf_cutoff = 127;
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002ce8:	227f      	movs	r2, #127	@ 0x7f
 8002cea:	66da      	str	r2, [r3, #108]	@ 0x6c
	SynthParameters.vcf_resonance = 127;
 8002cec:	4b29      	ldr	r3, [pc, #164]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cee:	227f      	movs	r2, #127	@ 0x7f
 8002cf0:	671a      	str	r2, [r3, #112]	@ 0x70

	// LFO output settings
	SynthParameters.lfo_output_en = 0;
 8002cf2:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	675a      	str	r2, [r3, #116]	@ 0x74
	SynthParameters.lfo_output_waveform = 0;
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	679a      	str	r2, [r3, #120]	@ 0x78

	// LFO output frequency setting
	SynthParameters.lfo_frequency = 127;
 8002cfe:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d00:	227f      	movs	r2, #127	@ 0x7f
 8002d02:	67da      	str	r2, [r3, #124]	@ 0x7c

	// VCA modulation source settings
	SynthParameters.vca_cv_en = 0;
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	SynthParameters.vca_cv_sel = 0;
 8002d0c:	4b21      	ldr	r3, [pc, #132]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en = 1;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	SynthParameters.vca_output_sel = 1;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity = 127;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d26:	227f      	movs	r2, #127	@ 0x7f
 8002d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	SynthParameters.vca_offset = 127;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d2e:	227f      	movs	r2, #127	@ 0x7f
 8002d30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	// envelope output settings
	SynthParameters.env_en = 1;
 8002d34:	4b17      	ldr	r3, [pc, #92]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	SynthParameters.env_loop = 0;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SynthParameters.env_invert = 0;
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	// envelope timing settings
	//SynthParameters.env_attack_rate = 0;
	SynthParameters.env_attack_rate = 127;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d4e:	227f      	movs	r2, #127	@ 0x7f
 8002d50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	SynthParameters.env_release_rate = 127;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d56:	227f      	movs	r2, #127	@ 0x7f
 8002d58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	//SynthParameters.env_release_rate = 255;
	SynthParameters.env_decay_rate = 127;
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <Synth_Initialize_Preset+0x160>)
 8002d5e:	227f      	movs	r2, #127	@ 0x7f
 8002d60:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//SynthParameters.env_decay_rate = 0;

	Mixer_Digital_Pot_Control();
 8002d64:	f000 f818 	bl	8002d98 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8002d68:	f000 f8a4 	bl	8002eb4 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8002d6c:	f000 f8d2 	bl	8002f14 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8002d70:	f000 f8ec 	bl	8002f4c <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8002d74:	f000 f91a 	bl	8002fac <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8002d78:	f000 f822 	bl	8002dc0 <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8002d7c:	f000 f852 	bl	8002e24 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8002d80:	f000 f882 	bl	8002e88 <VCA_Digital_Pot_Control>

	Envelope_Mode_Control();
 8002d84:	f000 f920 	bl	8002fc8 <Envelope_Mode_Control>
	Envelope_Digital_Pot_Control();
 8002d88:	f000 f966 	bl	8003058 <Envelope_Digital_Pot_Control>

	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000344 	.word	0x20000344

08002d98 <Mixer_Digital_Pot_Control>:
//	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, gate_state);
//
//	return;
//}

void Mixer_Digital_Pot_Control(){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8002d9c:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <Mixer_Digital_Pot_Control+0x24>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff fe6b 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8002daa:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <Mixer_Digital_Pot_Control+0x24>)
 8002dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dae:	2200      	movs	r2, #0
 8002db0:	4619      	mov	r1, r3
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7ff fe64 	bl	8002a80 <Digital_Pot_Wiper_Set>

    return;
 8002db8:	bf00      	nop
}
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000344 	.word	0x20000344

08002dc0 <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, sys.gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8002dc4:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <VCA_Mod_Source_Control+0x5c>)
 8002dc6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <VCA_Mod_Source_Control+0x60>)
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2207      	movs	r2, #7
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 fcde 	bl	80037a0 <GPIO_State_Change>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <VCA_Mod_Source_Control+0x5c>)
 8002dea:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select modulation source
    sys.gpio_reg = GPIO_State_Change(VCA_SEL_PORT, sys.gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 8002dee:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <VCA_Mod_Source_Control+0x5c>)
 8002df0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002df4:	4619      	mov	r1, r3
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <VCA_Mod_Source_Control+0x60>)
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f000 fcc9 	bl	80037a0 <GPIO_State_Change>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b02      	ldr	r3, [pc, #8]	@ (8002e1c <VCA_Mod_Source_Control+0x5c>)
 8002e14:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002e18:	bf00      	nop
}
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200003f4 	.word	0x200003f4
 8002e20:	20000344 	.word	0x20000344

08002e24 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, sys.gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <VCA_Bypass_Switch_Control+0x5c>)
 8002e2a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <VCA_Bypass_Switch_Control+0x60>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2206      	movs	r2, #6
 8002e42:	2000      	movs	r0, #0
 8002e44:	f000 fcac 	bl	80037a0 <GPIO_State_Change>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <VCA_Bypass_Switch_Control+0x5c>)
 8002e4e:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // update output source selection; true = bypass VCA, false = output through VCA
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_PORT, sys.gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <VCA_Bypass_Switch_Control+0x5c>)
 8002e54:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <VCA_Bypass_Switch_Control+0x60>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f000 fc97 	bl	80037a0 <GPIO_State_Change>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	4b02      	ldr	r3, [pc, #8]	@ (8002e80 <VCA_Bypass_Switch_Control+0x5c>)
 8002e78:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002e7c:	bf00      	nop
}
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200003f4 	.word	0x200003f4
 8002e84:	20000344 	.word	0x20000344

08002e88 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <VCA_Digital_Pot_Control+0x28>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	2006      	movs	r0, #6
 8002e98:	f7ff fdf2 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <VCA_Digital_Pot_Control+0x28>)
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2007      	movs	r0, #7
 8002ea8:	f7ff fdea 	bl	8002a80 <Digital_Pot_Wiper_Set>

    return;
 8002eac:	bf00      	nop
}
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000344 	.word	0x20000344

08002eb4 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, sys.gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <Filter_Mod_Source_Control+0x58>)
 8002eba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <Filter_Mod_Source_Control+0x5c>)
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2202      	movs	r2, #2
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f000 fc65 	bl	80037a0 <GPIO_State_Change>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <Filter_Mod_Source_Control+0x58>)
 8002edc:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select modulation source; true = LFO, false = envelope
    sys.gpio_reg = GPIO_State_Change(VCF_SEL_PORT, sys.gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <Filter_Mod_Source_Control+0x58>)
 8002ee2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <Filter_Mod_Source_Control+0x5c>)
 8002eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f000 fc51 	bl	80037a0 <GPIO_State_Change>
 8002efe:	4603      	mov	r3, r0
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b02      	ldr	r3, [pc, #8]	@ (8002f0c <Filter_Mod_Source_Control+0x58>)
 8002f04:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002f08:	bf00      	nop
}
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200003f4 	.word	0x200003f4
 8002f10:	20000344 	.word	0x20000344

08002f14 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <Filter_Digital_Pot_Control+0x34>)
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	2004      	movs	r0, #4
 8002f22:	f7ff fdad 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <Filter_Digital_Pot_Control+0x34>)
 8002f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f7ff fda6 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8002f34:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <Filter_Digital_Pot_Control+0x34>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7ff fd9f 	bl	8002a80 <Digital_Pot_Wiper_Set>

    return;
 8002f42:	bf00      	nop
}
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000344 	.word	0x20000344

08002f4c <LFO_Output_Control>:

void LFO_Output_Control() {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(LFO_EN_PORT, sys.gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8002f50:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <LFO_Output_Control+0x58>)
 8002f52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002f56:	4619      	mov	r1, r3
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <LFO_Output_Control+0x5c>)
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2207      	movs	r2, #7
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f000 fc19 	bl	80037a0 <GPIO_State_Change>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <LFO_Output_Control+0x58>)
 8002f74:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select LFO output waveform; true = square wave, false = triangle wave
    sys.gpio_reg = GPIO_State_Change(LFO_SEL_PORT, sys.gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <LFO_Output_Control+0x58>)
 8002f7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <LFO_Output_Control+0x5c>)
 8002f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2206      	movs	r2, #6
 8002f90:	2001      	movs	r0, #1
 8002f92:	f000 fc05 	bl	80037a0 <GPIO_State_Change>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b02      	ldr	r3, [pc, #8]	@ (8002fa4 <LFO_Output_Control+0x58>)
 8002f9c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002fa0:	bf00      	nop
}
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200003f4 	.word	0x200003f4
 8002fa8:	20000344 	.word	0x20000344

08002fac <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <LFO_Digital_Pot_Control+0x18>)
 8002fb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	2005      	movs	r0, #5
 8002fba:	f7ff fd61 	bl	8002a80 <Digital_Pot_Wiper_Set>

    return;
 8002fbe:	bf00      	nop
}
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000344 	.word	0x20000344

08002fc8 <Envelope_Mode_Control>:

void Envelope_Mode_Control() {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(ENV_EN_PORT, sys.gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8002fcc:	4b20      	ldr	r3, [pc, #128]	@ (8003050 <Envelope_Mode_Control+0x88>)
 8002fce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <Envelope_Mode_Control+0x8c>)
 8002fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f000 fbda 	bl	80037a0 <GPIO_State_Change>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b17      	ldr	r3, [pc, #92]	@ (8003050 <Envelope_Mode_Control+0x88>)
 8002ff2:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    sys.gpio_reg = GPIO_State_Change(ENV_LP_PORT, sys.gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8002ff6:	4b16      	ldr	r3, [pc, #88]	@ (8003050 <Envelope_Mode_Control+0x88>)
 8002ff8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <Envelope_Mode_Control+0x8c>)
 8003000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2204      	movs	r2, #4
 8003010:	2001      	movs	r0, #1
 8003012:	f000 fbc5 	bl	80037a0 <GPIO_State_Change>
 8003016:	4603      	mov	r3, r0
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <Envelope_Mode_Control+0x88>)
 800301c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    sys.gpio_reg = GPIO_State_Change(ENV_POL_PORT, sys.gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <Envelope_Mode_Control+0x88>)
 8003022:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8003026:	4619      	mov	r1, r3
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <Envelope_Mode_Control+0x8c>)
 800302a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2203      	movs	r2, #3
 800303a:	2001      	movs	r0, #1
 800303c:	f000 fbb0 	bl	80037a0 <GPIO_State_Change>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b02      	ldr	r3, [pc, #8]	@ (8003050 <Envelope_Mode_Control+0x88>)
 8003046:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 800304a:	bf00      	nop
}
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200003f4 	.word	0x200003f4
 8003054:	20000344 	.word	0x20000344

08003058 <Envelope_Digital_Pot_Control>:

void Envelope_Digital_Pot_Control(){
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <Envelope_Digital_Pot_Control+0x38>)
 800305e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003062:	2200      	movs	r2, #0
 8003064:	4619      	mov	r1, r3
 8003066:	2008      	movs	r0, #8
 8003068:	f7ff fd0a 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 800306c:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <Envelope_Digital_Pot_Control+0x38>)
 800306e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003072:	2200      	movs	r2, #0
 8003074:	4619      	mov	r1, r3
 8003076:	2009      	movs	r0, #9
 8003078:	f7ff fd02 	bl	8002a80 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <Envelope_Digital_Pot_Control+0x38>)
 800307e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003082:	2200      	movs	r2, #0
 8003084:	4619      	mov	r1, r3
 8003086:	200a      	movs	r0, #10
 8003088:	f7ff fcfa 	bl	8002a80 <Digital_Pot_Wiper_Set>

    return;
 800308c:	bf00      	nop
}
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000344 	.word	0x20000344

08003094 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 8003098:	4b32      	ldr	r3, [pc, #200]	@ (8003164 <System_Reset_Initialize+0xd0>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 800309e:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 0;
 80030a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 80030aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 80030b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 80030b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 80030bc:	4b29      	ldr	r3, [pc, #164]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 80030c2:	4b28      	ldr	r3, [pc, #160]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	sys.midi_buf[3] = 0;
 80030ca:	4b26      	ldr	r3, [pc, #152]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	sys.temp_buf[3] = 0;
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	sys.temp_buf_index = 0;
 80030da:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030dc:	2200      	movs	r2, #0
 80030de:	665a      	str	r2, [r3, #100]	@ 0x64

	// communication status flags
	sys.usb_data_present = 0;
 80030e0:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	669a      	str	r2, [r3, #104]	@ 0x68
	sys.midi_data_present = 0;
 80030e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	66da      	str	r2, [r3, #108]	@ 0x6c

	// midi variables
	sys.note_status_bit = 0;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	671a      	str	r2, [r3, #112]	@ 0x70
	sys.midi_note_input = 0;
 80030f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	675a      	str	r2, [r3, #116]	@ 0x74
	sys.midi_note_velocity = 0;
 80030f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <System_Reset_Initialize+0xd0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	679a      	str	r2, [r3, #120]	@ 0x78

	sys.gate = 0;
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <System_Reset_Initialize+0xd0>)
 8003100:	2200      	movs	r2, #0
 8003102:	67da      	str	r2, [r3, #124]	@ 0x7c
	sys.velocity_enable = 0;
 8003104:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <System_Reset_Initialize+0xd0>)
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	sys.gpio_reg = 0;
 800310c:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <System_Reset_Initialize+0xd0>)
 800310e:	2200      	movs	r2, #0
 8003110:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 8003114:	2201      	movs	r2, #1
 8003116:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800311a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311e:	f001 f943 	bl	80043a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 8003122:	2201      	movs	r2, #1
 8003124:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003128:	480f      	ldr	r0, [pc, #60]	@ (8003168 <System_Reset_Initialize+0xd4>)
 800312a:	f001 f93d 	bl	80043a8 <HAL_GPIO_WritePin>

	DAC_Register_Init();
 800312e:	f000 facd 	bl	80036cc <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 8003132:	213f      	movs	r1, #63	@ 0x3f
 8003134:	2040      	movs	r0, #64	@ 0x40
 8003136:	f000 faab 	bl	8003690 <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 800313a:	213f      	movs	r1, #63	@ 0x3f
 800313c:	2044      	movs	r0, #68	@ 0x44
 800313e:	f000 faa7 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 8003142:	213f      	movs	r1, #63	@ 0x3f
 8003144:	2041      	movs	r0, #65	@ 0x41
 8003146:	f000 faa3 	bl	8003690 <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 800314a:	213f      	movs	r1, #63	@ 0x3f
 800314c:	2045      	movs	r0, #69	@ 0x45
 800314e:	f000 fa9f 	bl	8003690 <DAC_Register_Write>

	GPIO_Register_Init();
 8003152:	f000 fb11 	bl	8003778 <GPIO_Register_Init>

	MIDI_Port_Control();
 8003156:	f000 f81f 	bl	8003198 <MIDI_Port_Control>
	Gate_Control();
 800315a:	f000 f807 	bl	800316c <Gate_Control>

	return;
 800315e:	bf00      	nop
}
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200003f4 	.word	0x200003f4
 8003168:	48000400 	.word	0x48000400

0800316c <Gate_Control>:

// ===========================================================================================================
// system functions

void Gate_Control(){
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0

	// gate control for envelope trigger and LED indicator
	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, sys.gate);
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <Gate_Control+0x28>)
 8003172:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8003176:	4619      	mov	r1, r3
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <Gate_Control+0x28>)
 800317a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317c:	2203      	movs	r2, #3
 800317e:	2000      	movs	r0, #0
 8003180:	f000 fb0e 	bl	80037a0 <GPIO_State_Change>
 8003184:	4603      	mov	r3, r0
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b02      	ldr	r3, [pc, #8]	@ (8003194 <Gate_Control+0x28>)
 800318a:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	return;
 800318e:	bf00      	nop
}
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200003f4 	.word	0x200003f4

08003198 <MIDI_Port_Control>:

void MIDI_Port_Control(){
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0

	// enable or disable transmit through MIDI port
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_EN_PORT, sys.gpio_reg, MIDI_TX_EN_PIN, sys.midi_tx_en == 0);
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <MIDI_Port_Control+0x50>)
 800319e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 80031a2:	4619      	mov	r1, r3
 80031a4:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <MIDI_Port_Control+0x50>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	2000      	movs	r0, #0
 80031b6:	f000 faf3 	bl	80037a0 <GPIO_State_Change>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <MIDI_Port_Control+0x50>)
 80031c0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	// toggle polarity of MIDI UART output
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_POL_PORT, sys.gpio_reg, MIDI_TX_POL_PIN, sys.midi_tx_pol);
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <MIDI_Port_Control+0x50>)
 80031c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 80031ca:	4619      	mov	r1, r3
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <MIDI_Port_Control+0x50>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 fae4 	bl	80037a0 <GPIO_State_Change>
 80031d8:	4603      	mov	r3, r0
 80031da:	b29a      	uxth	r2, r3
 80031dc:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <MIDI_Port_Control+0x50>)
 80031de:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	return;
 80031e2:	bf00      	nop
}
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200003f4 	.word	0x200003f4

080031ec <Command_Response_Handler>:
	}

	return;
}

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	70fb      	strb	r3, [r7, #3]
 80031fe:	460b      	mov	r3, r1
 8003200:	70bb      	strb	r3, [r7, #2]
 8003202:	4613      	mov	r3, r2
 8003204:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <Command_Response_Handler+0x98>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d033      	beq.n	8003276 <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d109      	bne.n	8003228 <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 8003214:	4a1c      	ldr	r2, [pc, #112]	@ (8003288 <Command_Response_Handler+0x9c>)
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	4611      	mov	r1, r2
 800321e:	8019      	strh	r1, [r3, #0]
 8003220:	3302      	adds	r3, #2
 8003222:	0c12      	lsrs	r2, r2, #16
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e013      	b.n	8003250 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 8003228:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <Command_Response_Handler+0x98>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 8003234:	78bb      	ldrb	r3, [r7, #2]
 8003236:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	73bb      	strb	r3, [r7, #14]
 800323c:	e008      	b.n	8003250 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <Command_Response_Handler+0xa0>)
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4611      	mov	r1, r2
 8003248:	8019      	strh	r1, [r3, #0]
 800324a:	3302      	adds	r3, #2
 800324c:	0c12      	lsrs	r2, r2, #16
 800324e:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	2103      	movs	r1, #3
 8003256:	4618      	mov	r0, r3
 8003258:	f00b fe44 	bl	800eee4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <Command_Response_Handler+0x98>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10a      	bne.n	800327a <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8003264:	f107 010c 	add.w	r1, r7, #12
 8003268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800326c:	2203      	movs	r2, #3
 800326e:	4808      	ldr	r0, [pc, #32]	@ (8003290 <Command_Response_Handler+0xa4>)
 8003270:	f006 f97c 	bl	800956c <HAL_UART_Transmit>
    }

	return;
 8003274:	e001      	b.n	800327a <Command_Response_Handler+0x8e>
        return;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <Command_Response_Handler+0x90>
	return;
 800327a:	bf00      	nop
}
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200003f4 	.word	0x200003f4
 8003288:	08010184 	.word	0x08010184
 800328c:	08010188 	.word	0x08010188
 8003290:	200004c8 	.word	0x200004c8

08003294 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6139      	str	r1, [r7, #16]
 800329e:	60fa      	str	r2, [r7, #12]
 80032a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80032a8:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d83a      	bhi.n	8003326 <Command_Error_Check+0x92>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <Command_Error_Check+0x24>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032d9 	.word	0x080032d9
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	08003307 	.word	0x08003307
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bfcc      	ite	gt
 80032d0:	2301      	movgt	r3, #1
 80032d2:	2300      	movle	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e027      	b.n	8003328 <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dd03      	ble.n	80032e6 <Command_Error_Check+0x52>
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	dd01      	ble.n	80032ea <Command_Error_Check+0x56>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e01e      	b.n	8003328 <Command_Error_Check+0x94>
 80032ea:	2300      	movs	r3, #0
 80032ec:	e01c      	b.n	8003328 <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b30      	cmp	r3, #48	@ 0x30
 80032f2:	dd04      	ble.n	80032fe <Command_Error_Check+0x6a>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3330      	adds	r3, #48	@ 0x30
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	dd01      	ble.n	8003302 <Command_Error_Check+0x6e>
 80032fe:	2301      	movs	r3, #1
 8003300:	e012      	b.n	8003328 <Command_Error_Check+0x94>
 8003302:	2300      	movs	r3, #0
 8003304:	e010      	b.n	8003328 <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 8003306:	ed97 7a02 	vldr	s14, [r7, #8]
 800330a:	edd7 7a01 	vldr	s15, [r7, #4]
 800330e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f083 0301 	eor.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e000      	b.n	8003328 <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 8003326:	2301      	movs	r3, #1
    }
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d103      	bne.n	800334a <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <Command_Blink_Status_LED+0x2c>)
 8003344:	2201      	movs	r2, #1
 8003346:	615a      	str	r2, [r3, #20]
 8003348:	e002      	b.n	8003350 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <Command_Blink_Status_LED+0x2c>)
 800334c:	2201      	movs	r2, #1
 800334e:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 8003350:	4804      	ldr	r0, [pc, #16]	@ (8003364 <Command_Blink_Status_LED+0x30>)
 8003352:	f005 fd27 	bl	8008da4 <HAL_TIM_Base_Start_IT>

}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200003f4 	.word	0x200003f4
 8003364:	2000047c 	.word	0x2000047c

08003368 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a20      	ldr	r2, [pc, #128]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d139      	bne.n	80033ec <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d118      	bne.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 8003380:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b03      	cmp	r3, #3
 8003386:	dc0b      	bgt.n	80033a0 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8003388:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800338c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003390:	f001 f822 	bl	80043d8 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 8003394:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800339c:	6193      	str	r3, [r2, #24]
 800339e:	e008      	b.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80033a0:	4814      	ldr	r0, [pc, #80]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80033a2:	f005 fd6f 	bl	8008e84 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 80033a6:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 80033ac:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d118      	bne.n	80033ec <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 80033ba:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	dc0b      	bgt.n	80033da <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 80033c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ca:	f001 f805 	bl	80043d8 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a08      	ldr	r2, [pc, #32]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033d6:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 80033d8:	e008      	b.n	80033ec <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80033da:	4806      	ldr	r0, [pc, #24]	@ (80033f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80033dc:	f005 fd52 	bl	8008e84 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 80033e6:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	2000047c 	.word	0x2000047c
 80033f8:	200003f4 	.word	0x200003f4

080033fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <SystemInit+0x20>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003406:	4a05      	ldr	r2, [pc, #20]	@ (800341c <SystemInit+0x20>)
 8003408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800340c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003430:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003432:	4a16      	ldr	r2, [pc, #88]	@ (800348c <MX_TIM6_Init+0x6c>)
 8003434:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 8003436:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003438:	f244 129f 	movw	r2, #16799	@ 0x419f
 800343c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343e:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 8003444:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003446:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800344a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800344c:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <MX_TIM6_Init+0x68>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003452:	480d      	ldr	r0, [pc, #52]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003454:	f005 fc4e 	bl	8008cf4 <HAL_TIM_Base_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800345e:	f7fd ffc2 	bl	80013e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4806      	ldr	r0, [pc, #24]	@ (8003488 <MX_TIM6_Init+0x68>)
 8003470:	f005 ff58 	bl	8009324 <HAL_TIMEx_MasterConfigSynchronization>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800347a:	f7fd ffb4 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000047c 	.word	0x2000047c
 800348c:	40001000 	.word	0x40001000

08003490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0d      	ldr	r2, [pc, #52]	@ (80034d4 <HAL_TIM_Base_MspInit+0x44>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d113      	bne.n	80034ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <HAL_TIM_Base_MspInit+0x48>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <HAL_TIM_Base_MspInit+0x48>)
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_TIM_Base_MspInit+0x48>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2036      	movs	r0, #54	@ 0x36
 80034c0:	f000 fb41 	bl	8003b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034c4:	2036      	movs	r0, #54	@ 0x36
 80034c6:	f000 fb58 	bl	8003b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40001000 	.word	0x40001000
 80034d8:	40021000 	.word	0x40021000

080034dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e0:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034e2:	4a25      	ldr	r2, [pc, #148]	@ (8003578 <MX_USART2_UART_Init+0x9c>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034e6:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	4b21      	ldr	r3, [pc, #132]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003500:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003502:	220c      	movs	r2, #12
 8003504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003512:	4b18      	ldr	r3, [pc, #96]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003518:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003520:	2208      	movs	r2, #8
 8003522:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003526:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800352c:	4811      	ldr	r0, [pc, #68]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 800352e:	f005 ffcd 	bl	80094cc <HAL_UART_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003538:	f7fd ff55 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800353c:	2100      	movs	r1, #0
 800353e:	480d      	ldr	r0, [pc, #52]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003540:	f008 f843 	bl	800b5ca <HAL_UARTEx_SetTxFifoThreshold>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800354a:	f7fd ff4c 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800354e:	2100      	movs	r1, #0
 8003550:	4808      	ldr	r0, [pc, #32]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003552:	f008 f878 	bl	800b646 <HAL_UARTEx_SetRxFifoThreshold>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800355c:	f7fd ff43 	bl	80013e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003560:	4804      	ldr	r0, [pc, #16]	@ (8003574 <MX_USART2_UART_Init+0x98>)
 8003562:	f007 fff9 	bl	800b558 <HAL_UARTEx_DisableFifoMode>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800356c:	f7fd ff3b 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200004c8 	.word	0x200004c8
 8003578:	40004400 	.word	0x40004400

0800357c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b09e      	sub	sp, #120	@ 0x78
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2250      	movs	r2, #80	@ 0x50
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f00c f933 	bl	800f808 <memset>
  if(uartHandle->Instance==USART2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a22      	ldr	r2, [pc, #136]	@ (8003630 <HAL_UART_MspInit+0xb4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d13d      	bne.n	8003628 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035ac:	2302      	movs	r3, #2
 80035ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 f8c7 	bl	800774c <HAL_RCCEx_PeriphCLKConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035c4:	f7fd ff0f 	bl	80013e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d4:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e0:	4b14      	ldr	r3, [pc, #80]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e4:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ec:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <HAL_UART_MspInit+0xb8>)
 80035ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80035f8:	2318      	movs	r3, #24
 80035fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003608:	2307      	movs	r3, #7
 800360a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003610:	4619      	mov	r1, r3
 8003612:	4809      	ldr	r0, [pc, #36]	@ (8003638 <HAL_UART_MspInit+0xbc>)
 8003614:	f000 fd46 	bl	80040a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2100      	movs	r1, #0
 800361c:	2026      	movs	r0, #38	@ 0x26
 800361e:	f000 fa92 	bl	8003b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003622:	2026      	movs	r0, #38	@ 0x26
 8003624:	f000 faa9 	bl	8003b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003628:	bf00      	nop
 800362a:	3778      	adds	r7, #120	@ 0x78
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40004400 	.word	0x40004400
 8003634:	40021000 	.word	0x40021000
 8003638:	48000400 	.word	0x48000400

0800363c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800363c:	480d      	ldr	r0, [pc, #52]	@ (8003674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800363e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003640:	f7ff fedc 	bl	80033fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003644:	480c      	ldr	r0, [pc, #48]	@ (8003678 <LoopForever+0x6>)
  ldr r1, =_edata
 8003646:	490d      	ldr	r1, [pc, #52]	@ (800367c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <LoopForever+0xe>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800364c:	e002      	b.n	8003654 <LoopCopyDataInit>

0800364e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003652:	3304      	adds	r3, #4

08003654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003658:	d3f9      	bcc.n	800364e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800365c:	4c0a      	ldr	r4, [pc, #40]	@ (8003688 <LoopForever+0x16>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003660:	e001      	b.n	8003666 <LoopFillZerobss>

08003662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003664:	3204      	adds	r2, #4

08003666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003668:	d3fb      	bcc.n	8003662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800366a:	f00c f8db 	bl	800f824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800366e:	f7fd fe1d 	bl	80012ac <main>

08003672 <LoopForever>:

LoopForever:
    b LoopForever
 8003672:	e7fe      	b.n	8003672 <LoopForever>
  ldr   r0, =_estack
 8003674:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800367c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003680:	08010a44 	.word	0x08010a44
  ldr r2, =_sbss
 8003684:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003688:	20002068 	.word	0x20002068

0800368c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800368c:	e7fe      	b.n	800368c <ADC1_2_IRQHandler>
	...

08003690 <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af04      	add	r7, sp, #16
 8003696:	4603      	mov	r3, r0
 8003698:	460a      	mov	r2, r1
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	4613      	mov	r3, r2
 800369e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 80036a0:	79bb      	ldrb	r3, [r7, #6]
 80036a2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	230a      	movs	r3, #10
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	2301      	movs	r3, #1
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	218e      	movs	r1, #142	@ 0x8e
 80036ba:	4803      	ldr	r0, [pc, #12]	@ (80036c8 <DAC_Register_Write+0x38>)
 80036bc:	f000 ff42 	bl	8004544 <HAL_I2C_Mem_Write>

	return;
 80036c0:	bf00      	nop
}
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200001f0 	.word	0x200001f0

080036cc <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	2055      	movs	r0, #85	@ 0x55
 80036d4:	f7ff ffdc 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 80036d8:	2127      	movs	r1, #39	@ 0x27
 80036da:	2040      	movs	r0, #64	@ 0x40
 80036dc:	f7ff ffd8 	bl	8003690 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 80036e0:	2127      	movs	r1, #39	@ 0x27
 80036e2:	2041      	movs	r0, #65	@ 0x41
 80036e4:	f7ff ffd4 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 80036e8:	2127      	movs	r1, #39	@ 0x27
 80036ea:	2044      	movs	r0, #68	@ 0x44
 80036ec:	f7ff ffd0 	bl	8003690 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 80036f0:	2127      	movs	r1, #39	@ 0x27
 80036f2:	2045      	movs	r0, #69	@ 0x45
 80036f4:	f7ff ffcc 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 80036f8:	2100      	movs	r1, #0
 80036fa:	2046      	movs	r0, #70	@ 0x46
 80036fc:	f7ff ffc8 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 8003700:	21e0      	movs	r1, #224	@ 0xe0
 8003702:	2049      	movs	r0, #73	@ 0x49
 8003704:	f7ff ffc4 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8003708:	2101      	movs	r1, #1
 800370a:	2056      	movs	r0, #86	@ 0x56
 800370c:	f7ff ffc0 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 8003710:	2103      	movs	r1, #3
 8003712:	204b      	movs	r0, #75	@ 0x4b
 8003714:	f7ff ffbc 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 8003718:	2111      	movs	r1, #17
 800371a:	2058      	movs	r0, #88	@ 0x58
 800371c:	f7ff ffb8 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 8003720:	21ec      	movs	r1, #236	@ 0xec
 8003722:	2049      	movs	r0, #73	@ 0x49
 8003724:	f7ff ffb4 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 8003728:	2101      	movs	r1, #1
 800372a:	204a      	movs	r0, #74	@ 0x4a
 800372c:	f7ff ffb0 	bl	8003690 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 8003730:	2130      	movs	r1, #48	@ 0x30
 8003732:	2059      	movs	r0, #89	@ 0x59
 8003734:	f7ff ffac 	bl	8003690 <DAC_Register_Write>

	return;
 8003738:	bf00      	nop
}
 800373a:	bd80      	pop	{r7, pc}

0800373c <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af04      	add	r7, sp, #16
 8003742:	4603      	mov	r3, r0
 8003744:	460a      	mov	r2, r1
 8003746:	71fb      	strb	r3, [r7, #7]
 8003748:	4613      	mov	r3, r2
 800374a:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 800374c:	79bb      	ldrb	r3, [r7, #6]
 800374e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	b29a      	uxth	r2, r3
 8003754:	230a      	movs	r3, #10
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	2301      	movs	r3, #1
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2301      	movs	r3, #1
 8003764:	21ee      	movs	r1, #238	@ 0xee
 8003766:	4803      	ldr	r0, [pc, #12]	@ (8003774 <GPIO_Register_Write+0x38>)
 8003768:	f000 feec 	bl	8004544 <HAL_I2C_Mem_Write>

	return;
 800376c:	bf00      	nop
}
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200001f0 	.word	0x200001f0

08003778 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 800377c:	2100      	movs	r1, #0
 800377e:	2006      	movs	r0, #6
 8003780:	f7ff ffdc 	bl	800373c <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003784:	2100      	movs	r1, #0
 8003786:	2007      	movs	r0, #7
 8003788:	f7ff ffd8 	bl	800373c <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 800378c:	2100      	movs	r1, #0
 800378e:	2002      	movs	r0, #2
 8003790:	f7ff ffd4 	bl	800373c <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003794:	2100      	movs	r1, #0
 8003796:	2003      	movs	r0, #3
 8003798:	f7ff ffd0 	bl	800373c <GPIO_Register_Write>

	return;
 800379c:	bf00      	nop
}
 800379e:	bd80      	pop	{r7, pc}

080037a0 <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	461a      	mov	r2, r3
 80037ac:	460b      	mov	r3, r1
 80037ae:	817b      	strh	r3, [r7, #10]
 80037b0:	4613      	mov	r3, r2
 80037b2:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b07      	cmp	r3, #7
 80037b8:	dd02      	ble.n	80037c0 <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 80037ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037be:	e051      	b.n	8003864 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d121      	bne.n	800380a <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 80037c6:	7a7b      	ldrb	r3, [r7, #9]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 80037cc:	2201      	movs	r2, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	b21a      	sxth	r2, r3
 80037d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037da:	4313      	orrs	r3, r2
 80037dc:	b21b      	sxth	r3, r3
 80037de:	817b      	strh	r3, [r7, #10]
 80037e0:	e00b      	b.n	80037fa <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 80037e2:	2201      	movs	r2, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	b21b      	sxth	r3, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	b21a      	sxth	r2, r3
 80037f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 80037fa:	897b      	ldrh	r3, [r7, #10]
 80037fc:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 80037fe:	7dbb      	ldrb	r3, [r7, #22]
 8003800:	4619      	mov	r1, r3
 8003802:	2002      	movs	r0, #2
 8003804:	f7ff ff9a 	bl	800373c <GPIO_Register_Write>
 8003808:	e02b      	b.n	8003862 <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d125      	bne.n	800385c <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 8003810:	7a7b      	ldrb	r3, [r7, #9]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3308      	adds	r3, #8
 800381a:	2201      	movs	r2, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	b21a      	sxth	r2, r3
 8003822:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003826:	4313      	orrs	r3, r2
 8003828:	b21b      	sxth	r3, r3
 800382a:	817b      	strh	r3, [r7, #10]
 800382c:	e00c      	b.n	8003848 <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3308      	adds	r3, #8
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	b21b      	sxth	r3, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	b21a      	sxth	r2, r3
 800383e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003842:	4013      	ands	r3, r2
 8003844:	b21b      	sxth	r3, r3
 8003846:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	4619      	mov	r1, r3
 8003854:	2003      	movs	r0, #3
 8003856:	f7ff ff71 	bl	800373c <GPIO_Register_Write>
 800385a:	e002      	b.n	8003862 <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 800385c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003860:	e000      	b.n	8003864 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 8003862:	897b      	ldrh	r3, [r7, #10]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f000 f95a 	bl	8003b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387c:	200f      	movs	r0, #15
 800387e:	f000 f80d 	bl	800389c <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	71fb      	strb	r3, [r7, #7]
 800388c:	e001      	b.n	8003892 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800388e:	f7ff f87b 	bl	8002988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003892:	79fb      	ldrb	r3, [r7, #7]

}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038a8:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_InitTick+0x68>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d022      	beq.n	80038f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038b0:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <HAL_InitTick+0x6c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <HAL_InitTick+0x68>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80038bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 f966 	bl	8003b96 <HAL_SYSTICK_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10f      	bne.n	80038f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d809      	bhi.n	80038ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d6:	2200      	movs	r2, #0
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	f000 f932 	bl	8003b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <HAL_InitTick+0x70>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e007      	b.n	80038fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e004      	b.n	80038fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e001      	b.n	80038fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000008 	.word	0x20000008
 8003908:	20000000 	.word	0x20000000
 800390c:	20000004 	.word	0x20000004

08003910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_IncTick+0x1c>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_IncTick+0x20>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4413      	add	r3, r2
 800391e:	4a03      	ldr	r2, [pc, #12]	@ (800392c <HAL_IncTick+0x1c>)
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	2000055c 	.word	0x2000055c
 8003930:	20000008 	.word	0x20000008

08003934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return uwTick;
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_GetTick+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000055c 	.word	0x2000055c

0800394c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff ffee 	bl	8003934 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d004      	beq.n	8003970 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_Delay+0x40>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003970:	bf00      	nop
 8003972:	f7ff ffdf 	bl	8003934 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	429a      	cmp	r2, r3
 8003980:	d8f7      	bhi.n	8003972 <HAL_Delay+0x26>
  {
  }
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000008 	.word	0x20000008

08003990 <__NVIC_SetPriorityGrouping>:
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	@ (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	@ (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	@ (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	@ 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003afc:	d301      	bcc.n	8003b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00f      	b.n	8003b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b02:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <SysTick_Config+0x40>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0a:	210f      	movs	r1, #15
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f7ff ff8e 	bl	8003a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <SysTick_Config+0x40>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1a:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <SysTick_Config+0x40>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000e010 	.word	0xe000e010

08003b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff29 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b54:	f7ff ff40 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f7ff ff90 	bl	8003a84 <NVIC_EncodePriority>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff5f 	bl	8003a30 <__NVIC_SetPriority>
}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff33 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffa4 	bl	8003aec <SysTick_Config>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e08d      	b.n	8003cde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <HAL_DMA_Init+0x138>)
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d80f      	bhi.n	8003bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b45      	ldr	r3, [pc, #276]	@ (8003cec <HAL_DMA_Init+0x13c>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a45      	ldr	r2, [pc, #276]	@ (8003cf0 <HAL_DMA_Init+0x140>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	009a      	lsls	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a42      	ldr	r2, [pc, #264]	@ (8003cf4 <HAL_DMA_Init+0x144>)
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bec:	e00e      	b.n	8003c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <HAL_DMA_Init+0x148>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf0 <HAL_DMA_Init+0x140>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_DMA_Init+0x14c>)
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9be 	bl	8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c6c:	d102      	bne.n	8003c74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_DMA_Init+0x104>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d80c      	bhi.n	8003cb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9de 	bl	800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	e008      	b.n	8003cc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40020407 	.word	0x40020407
 8003cec:	bffdfff8 	.word	0xbffdfff8
 8003cf0:	cccccccd 	.word	0xcccccccd
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	bffdfbf8 	.word	0xbffdfbf8
 8003cfc:	40020400 	.word	0x40020400

08003d00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d005      	beq.n	8003d24 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	e037      	b.n	8003d94 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020e 	bic.w	r2, r2, #14
 8003d32:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d42:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f202 	lsl.w	r2, r1, r2
 8003d66:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d70:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d88:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d92:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
 8003de4:	e047      	b.n	8003e76 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 020e 	bic.w	r2, r2, #14
 8003df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f003 021f 	and.w	r2, r3, #31
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f202 	lsl.w	r2, r1, r2
 8003e28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
    }
  }
  return status;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d026      	beq.n	8003efa <HAL_DMA_IRQHandler+0x7a>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d021      	beq.n	8003efa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d071      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ef8:	e06c      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2202      	movs	r2, #2
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02e      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d029      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 020a 	bic.w	r2, r2, #10
 8003f34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f003 021f 	and.w	r2, r3, #31
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d038      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f6a:	e033      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2208      	movs	r2, #8
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02a      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d025      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 020e 	bic.w	r2, r2, #14
 8003f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 021f 	and.w	r2, r3, #31
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
}
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b16      	ldr	r3, [pc, #88]	@ (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d802      	bhi.n	8003ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ff4:	4b15      	ldr	r3, [pc, #84]	@ (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e001      	b.n	8003ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ffc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3b08      	subs	r3, #8
 800400a:	4a12      	ldr	r2, [pc, #72]	@ (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	009a      	lsls	r2, r3, #2
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a0b      	ldr	r2, [pc, #44]	@ (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800402a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40020407 	.word	0x40020407
 800404c:	40020800 	.word	0x40020800
 8004050:	40020820 	.word	0x40020820
 8004054:	cccccccd 	.word	0xcccccccd
 8004058:	40020880 	.word	0x40020880

0800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800407e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	1000823f 	.word	0x1000823f
 80040a0:	40020940 	.word	0x40020940

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040b2:	e15a      	b.n	800436a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 814c 	beq.w	8004364 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	6939      	ldr	r1, [r7, #16]
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0203 	and.w	r2, r3, #3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80a6 	beq.w	8004364 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004218:	4b5b      	ldr	r3, [pc, #364]	@ (8004388 <HAL_GPIO_Init+0x2e4>)
 800421a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421c:	4a5a      	ldr	r2, [pc, #360]	@ (8004388 <HAL_GPIO_Init+0x2e4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6613      	str	r3, [r2, #96]	@ 0x60
 8004224:	4b58      	ldr	r3, [pc, #352]	@ (8004388 <HAL_GPIO_Init+0x2e4>)
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004230:	4a56      	ldr	r2, [pc, #344]	@ (800438c <HAL_GPIO_Init+0x2e8>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	220f      	movs	r2, #15
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800425a:	d01f      	beq.n	800429c <HAL_GPIO_Init+0x1f8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a4c      	ldr	r2, [pc, #304]	@ (8004390 <HAL_GPIO_Init+0x2ec>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d019      	beq.n	8004298 <HAL_GPIO_Init+0x1f4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a4b      	ldr	r2, [pc, #300]	@ (8004394 <HAL_GPIO_Init+0x2f0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_GPIO_Init+0x1f0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a4a      	ldr	r2, [pc, #296]	@ (8004398 <HAL_GPIO_Init+0x2f4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00d      	beq.n	8004290 <HAL_GPIO_Init+0x1ec>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a49      	ldr	r2, [pc, #292]	@ (800439c <HAL_GPIO_Init+0x2f8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <HAL_GPIO_Init+0x1e8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a48      	ldr	r2, [pc, #288]	@ (80043a0 <HAL_GPIO_Init+0x2fc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_GPIO_Init+0x1e4>
 8004284:	2305      	movs	r3, #5
 8004286:	e00a      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 8004288:	2306      	movs	r3, #6
 800428a:	e008      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 800428c:	2304      	movs	r3, #4
 800428e:	e006      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 8004290:	2303      	movs	r3, #3
 8004292:	e004      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 8004294:	2302      	movs	r3, #2
 8004296:	e002      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <HAL_GPIO_Init+0x1fa>
 800429c:	2300      	movs	r3, #0
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	f002 0203 	and.w	r2, r2, #3
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	4093      	lsls	r3, r2
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042ae:	4937      	ldr	r1, [pc, #220]	@ (800438c <HAL_GPIO_Init+0x2e8>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	3302      	adds	r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042bc:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042e0:	4a30      	ldr	r2, [pc, #192]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042e6:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800430a:	4a26      	ldr	r2, [pc, #152]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004310:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004334:	4a1b      	ldr	r2, [pc, #108]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800435e:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <HAL_GPIO_Init+0x300>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f ae9d 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	48000400 	.word	0x48000400
 8004394:	48000800 	.word	0x48000800
 8004398:	48000c00 	.word	0x48000c00
 800439c:	48001000 	.word	0x48001000
 80043a0:	48001400 	.word	0x48001400
 80043a4:	40010400 	.word	0x40010400

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4013      	ands	r3, r2
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43d9      	mvns	r1, r3
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	400b      	ands	r3, r1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	619a      	str	r2, [r3, #24]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e08d      	b.n	800453a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fe10 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	@ 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800445c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800446c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d107      	bne.n	8004486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e006      	b.n	8004494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d108      	bne.n	80044ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e007      	b.n	80044be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69d9      	ldr	r1, [r3, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	f040 80f9 	bne.w	800475e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_I2C_Mem_Write+0x34>
 8004572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0ed      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_I2C_Mem_Write+0x4e>
 800458e:	2302      	movs	r3, #2
 8004590:	e0e6      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800459a:	f7ff f9cb 	bl	8003934 <HAL_GetTick>
 800459e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2319      	movs	r3, #25
 80045a6:	2201      	movs	r2, #1
 80045a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f955 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0d1      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2221      	movs	r2, #33	@ 0x21
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2240      	movs	r2, #64	@ 0x40
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045e4:	88f8      	ldrh	r0, [r7, #6]
 80045e6:	893a      	ldrh	r2, [r7, #8]
 80045e8:	8979      	ldrh	r1, [r7, #10]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4603      	mov	r3, r0
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8b9 	bl	800476c <I2C_RequestMemoryWrite>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0a9      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2bff      	cmp	r3, #255	@ 0xff
 8004614:	d90e      	bls.n	8004634 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	@ 0xff
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	b2da      	uxtb	r2, r3
 8004622:	8979      	ldrh	r1, [r7, #10]
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fad9 	bl	8004be4 <I2C_TransferConfig>
 8004632:	e00f      	b.n	8004654 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004642:	b2da      	uxtb	r2, r3
 8004644:	8979      	ldrh	r1, [r7, #10]
 8004646:	2300      	movs	r3, #0
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fac8 	bl	8004be4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f958 	bl	800490e <I2C_WaitOnTXISFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e07b      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d034      	beq.n	800470c <HAL_I2C_Mem_Write+0x1c8>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d130      	bne.n	800470c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	@ 0x80
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8d1 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04d      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2bff      	cmp	r3, #255	@ 0xff
 80046cc:	d90e      	bls.n	80046ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	22ff      	movs	r2, #255	@ 0xff
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	8979      	ldrh	r1, [r7, #10]
 80046dc:	2300      	movs	r3, #0
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fa7d 	bl	8004be4 <I2C_TransferConfig>
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	2300      	movs	r3, #0
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa6c 	bl	8004be4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d19e      	bne.n	8004654 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f93e 	bl	800499c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01a      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <HAL_I2C_Mem_Write+0x224>)
 800473e:	400b      	ands	r3, r1
 8004740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	fe00e800 	.word	0xfe00e800

0800476c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	461a      	mov	r2, r3
 800477a:	4603      	mov	r3, r0
 800477c:	817b      	strh	r3, [r7, #10]
 800477e:	460b      	mov	r3, r1
 8004780:	813b      	strh	r3, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <I2C_RequestMemoryWrite+0xa4>)
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fa25 	bl	8004be4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f8b5 	bl	800490e <I2C_WaitOnTXISFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e02c      	b.n	8004808 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047b4:	893b      	ldrh	r3, [r7, #8]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80047be:	e015      	b.n	80047ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047c0:	893b      	ldrh	r3, [r7, #8]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f89b 	bl	800490e <I2C_WaitOnTXISFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e012      	b.n	8004808 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2180      	movs	r1, #128	@ 0x80
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f830 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	80002000 	.word	0x80002000

08004814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d103      	bne.n	8004832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d007      	beq.n	8004850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	619a      	str	r2, [r3, #24]
  }
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800486c:	e03b      	b.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f8d6 	bl	8004a24 <I2C_IsErrorOccurred>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d02d      	beq.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488a:	f7ff f853 	bl	8003934 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d122      	bne.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	bf0c      	ite	eq
 80048b0:	2301      	moveq	r3, #1
 80048b2:	2300      	movne	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d113      	bne.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00f      	b.n	8004906 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d0b4      	beq.n	800486e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800491a:	e033      	b.n	8004984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f87f 	bl	8004a24 <I2C_IsErrorOccurred>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e031      	b.n	8004994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d025      	beq.n	8004984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fe fffc 	bl	8003934 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11a      	bne.n	8004984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d013      	beq.n	8004984 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d1c4      	bne.n	800491c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a8:	e02f      	b.n	8004a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f838 	bl	8004a24 <I2C_IsErrorOccurred>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e02d      	b.n	8004a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe ffb9 	bl	8003934 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11a      	bne.n	8004a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d013      	beq.n	8004a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e007      	b.n	8004a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d1c8      	bne.n	80049aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d068      	beq.n	8004b22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a58:	e049      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d045      	beq.n	8004aee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe ff67 	bl	8003934 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_IsErrorOccurred+0x54>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d13a      	bne.n	8004aee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a9a:	d121      	bne.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa2:	d01d      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d01a      	beq.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004aba:	f7fe ff3b 	bl	8003934 <HAL_GetTick>
 8004abe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac0:	e00e      	b.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ac2:	f7fe ff37 	bl	8003934 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b19      	cmp	r3, #25
 8004ace:	d907      	bls.n	8004ae0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f043 0320 	orr.w	r3, r3, #32
 8004ad6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004ade:	e006      	b.n	8004aee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d1e9      	bne.n	8004ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d003      	beq.n	8004b04 <I2C_IsErrorOccurred+0xe0>
 8004afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0aa      	beq.n	8004a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2220      	movs	r2, #32
 8004b12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fe3b 	bl	8004814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <I2C_IsErrorOccurred+0x1bc>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	@ 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	fe00e800 	.word	0xfe00e800

08004be4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004bfc:	7a7b      	ldrb	r3, [r7, #9]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	0d5b      	lsrs	r3, r3, #21
 8004c1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <I2C_TransferConfig+0x60>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	43db      	mvns	r3, r3
 8004c28:	ea02 0103 	and.w	r1, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	03ff63ff 	.word	0x03ff63ff

08004c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d138      	bne.n	8004cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e032      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	@ 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d139      	bne.n	8004d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e033      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e0d0      	b.n	8004f2c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc f9dc 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dba:	f023 030f 	bic.w	r3, r3, #15
 8004dbe:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d061      	beq.n	8004e94 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dd8:	2310      	movs	r3, #16
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e001      	b.n	8004de2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d802      	bhi.n	8004df0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004df0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004df4:	f002 fee6 	bl	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004df8:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e02:	d125      	bne.n	8004e50 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	461a      	mov	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	3305      	adds	r3, #5
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e01f      	b.n	8004e6e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	3305      	adds	r3, #5
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e00e      	b.n	8004e6e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	3305      	adds	r3, #5
 8004e6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4a30      	ldr	r2, [pc, #192]	@ (8004f34 <HAL_I2S_Init+0x1bc>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	08db      	lsrs	r3, r3, #3
 8004e78:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e94:	2302      	movs	r3, #2
 8004e96:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d902      	bls.n	8004ea8 <HAL_I2S_Init+0x130>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2bff      	cmp	r3, #255	@ 0xff
 8004ea6:	d907      	bls.n	8004eb8 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e039      	b.n	8004f2c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ed6:	f023 030f 	bic.w	r3, r3, #15
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6851      	ldr	r1, [r2, #4]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	4311      	orrs	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68d2      	ldr	r2, [r2, #12]
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6992      	ldr	r2, [r2, #24]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d003      	beq.n	8004f0c <HAL_I2S_Init+0x194>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2bb0      	cmp	r3, #176	@ 0xb0
 8004f0a:	d107      	bne.n	8004f1c <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	cccccccd 	.word	0xcccccccd

08004f38 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_I2S_Transmit+0x1c>
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0d8      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d001      	beq.n	8004f68 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0d0      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_I2S_Transmit+0x40>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0c8      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2203      	movs	r2, #3
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d002      	beq.n	8004fac <HAL_I2S_Transmit+0x74>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d10a      	bne.n	8004fc2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	845a      	strh	r2, [r3, #34]	@ 0x22
 8004fc0:	e005      	b.n	8004fce <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe4:	d007      	beq.n	8004ff6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ff4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f888 	bl	8005112 <I2S_WaitFlagStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d04e      	beq.n	80050a6 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e070      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	1c9a      	adds	r2, r3, #2
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	2102      	movs	r1, #2
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f85d 	bl	8005112 <I2S_WaitFlagStateUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00f      	beq.n	800507e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e045      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b08      	cmp	r3, #8
 800508a:	d10c      	bne.n	80050a6 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f043 0204 	orr.w	r2, r3, #4
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1bb      	bne.n	8005028 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c4:	d118      	bne.n	80050f8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	@ 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f820 	bl	8005112 <I2S_WaitFlagStateUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00f      	beq.n	80050f8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	f043 0201 	orr.w	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e008      	b.n	800510a <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005122:	f7fe fc07 	bl	8003934 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005128:	e018      	b.n	800515c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d014      	beq.n	800515c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005132:	f7fe fbff 	bl	8003934 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d902      	bls.n	8005148 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e00f      	b.n	800517c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d1d7      	bne.n	800512a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e0c0      	b.n	8005318 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f009 ffe2 	bl	800f174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2203      	movs	r2, #3
 80051b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f006 fae6 	bl	800b78e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	e03e      	b.n	8005246 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3311      	adds	r3, #17
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	3310      	adds	r3, #16
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3313      	adds	r3, #19
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3320      	adds	r3, #32
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3324      	adds	r3, #36	@ 0x24
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	3301      	adds	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	791b      	ldrb	r3, [r3, #4]
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3bb      	bcc.n	80051c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e044      	b.n	80052e0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800526c:	7bfa      	ldrb	r2, [r7, #15]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005282:	7bfa      	ldrb	r2, [r7, #15]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	3301      	adds	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3b5      	bcc.n	8005256 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80052f6:	f006 fa65 	bl	800b7c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7a9b      	ldrb	r3, [r3, #10]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d102      	bne.n	8005316 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fc0e 	bl	8006b32 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_PCD_Start+0x16>
 8005332:	2302      	movs	r3, #2
 8005334:	e012      	b.n	800535c <HAL_PCD_Start+0x3c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f006 fa0c 	bl	800b760 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f007 ffe9 	bl	800d324 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f007 ffee 	bl	800d352 <USB_ReadInterrupts>
 8005376:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fb06 	bl	8005994 <PCD_EP_ISR_Handler>

    return;
 8005388:	e110      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a6:	b292      	uxth	r2, r2
 80053a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f009 ff72 	bl	800f296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80053b2:	2100      	movs	r1, #0
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8fc 	bl	80055b2 <HAL_PCD_SetAddress>

    return;
 80053ba:	e0f7      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053d8:	b292      	uxth	r2, r2
 80053da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053de:	e0e5      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005402:	e0d3      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d034      	beq.n	8005478 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0204 	bic.w	r2, r2, #4
 8005420:	b292      	uxth	r2, r2
 8005422:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800542e:	b29a      	uxth	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0208 	bic.w	r2, r2, #8
 8005438:	b292      	uxth	r2, r2
 800543a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005450:	2100      	movs	r1, #0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f00a f912 	bl	800f67c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f009 ff55 	bl	800f308 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005470:	b292      	uxth	r2, r2
 8005472:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005476:	e099      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800547e:	2b00      	cmp	r3, #0
 8005480:	d027      	beq.n	80054d2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0208 	orr.w	r2, r2, #8
 8005494:	b292      	uxth	r2, r2
 8005496:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ac:	b292      	uxth	r2, r2
 80054ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0204 	orr.w	r2, r2, #4
 80054c4:	b292      	uxth	r2, r2
 80054c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f009 ff02 	bl	800f2d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054d0:	e06c      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d040      	beq.n	800555e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054ee:	b292      	uxth	r2, r2
 80054f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d12b      	bne.n	8005556 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0204 	orr.w	r2, r2, #4
 8005510:	b292      	uxth	r2, r2
 8005512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0208 	orr.w	r2, r2, #8
 8005528:	b292      	uxth	r2, r2
 800552a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800553e:	b29b      	uxth	r3, r3
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800554c:	2101      	movs	r1, #1
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f00a f894 	bl	800f67c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005554:	e02a      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f009 febc 	bl	800f2d4 <HAL_PCD_SuspendCallback>
    return;
 800555c:	e026      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800557a:	b292      	uxth	r2, r2
 800557c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f009 fe7a 	bl	800f27a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005586:	e011      	b.n	80055ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055a4:	b292      	uxth	r2, r2
 80055a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80055aa:	bf00      	nop
  }
}
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_PCD_SetAddress+0x1a>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e012      	b.n	80055f2 <HAL_PCD_SetAddress+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f007 fe8a 	bl	800d2fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	4608      	mov	r0, r1
 8005604:	4611      	mov	r1, r2
 8005606:	461a      	mov	r2, r3
 8005608:	4603      	mov	r3, r0
 800560a:	70fb      	strb	r3, [r7, #3]
 800560c:	460b      	mov	r3, r1
 800560e:	803b      	strh	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da0e      	bge.n	800563e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	f003 0207 	and.w	r2, r3, #7
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	3310      	adds	r3, #16
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	705a      	strb	r2, [r3, #1]
 800563c:	e00e      	b.n	800565c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	f003 0207 	and.w	r2, r3, #7
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005668:	883b      	ldrh	r3, [r7, #0]
 800566a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	78ba      	ldrb	r2, [r7, #2]
 8005676:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005678:	78bb      	ldrb	r3, [r7, #2]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d102      	bne.n	8005684 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_PCD_EP_Open+0x98>
 800568e:	2302      	movs	r3, #2
 8005690:	e00e      	b.n	80056b0 <HAL_PCD_EP_Open+0xb6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f006 f8ad 	bl	800b800 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80056ae:	7afb      	ldrb	r3, [r7, #11]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da0e      	bge.n	80056ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	3310      	adds	r3, #16
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	705a      	strb	r2, [r3, #1]
 80056e8:	e00e      	b.n	8005708 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 0207 	and.w	r2, r3, #7
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4413      	add	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_PCD_EP_Close+0x6a>
 800571e:	2302      	movs	r3, #2
 8005720:	e00e      	b.n	8005740 <HAL_PCD_EP_Close+0x88>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	4618      	mov	r0, r3
 8005732:	f006 fd4d 	bl	800c1d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	460b      	mov	r3, r1
 8005756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	f003 0207 	and.w	r2, r3, #7
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2200      	movs	r2, #0
 8005780:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	b2da      	uxtb	r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6979      	ldr	r1, [r7, #20]
 800579a:	4618      	mov	r0, r3
 800579c:	f006 ff05 	bl	800c5aa <USB_EPStartXfer>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 0207 	and.w	r2, r3, #7
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80057cc:	681b      	ldr	r3, [r3, #0]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	460b      	mov	r3, r1
 80057e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	f003 0207 	and.w	r2, r3, #7
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	3310      	adds	r3, #16
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2201      	movs	r2, #1
 8005824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005826:	7afb      	ldrb	r3, [r7, #11]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	b2da      	uxtb	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6979      	ldr	r1, [r7, #20]
 8005838:	4618      	mov	r0, r3
 800583a:	f006 feb6 	bl	800c5aa <USB_EPStartXfer>

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	7912      	ldrb	r2, [r2, #4]
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e03e      	b.n	80058e4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da0e      	bge.n	800588c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	f003 0207 	and.w	r2, r3, #7
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	3310      	adds	r3, #16
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4413      	add	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	705a      	strb	r2, [r3, #1]
 800588a:	e00c      	b.n	80058a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_PCD_EP_SetStall+0x7e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e00e      	b.n	80058e4 <HAL_PCD_EP_SetStall+0x9c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f007 fc17 	bl	800d108 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	7912      	ldrb	r2, [r2, #4]
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e040      	b.n	800598c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800590a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	da0e      	bge.n	8005930 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	f003 0207 	and.w	r2, r3, #7
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3310      	adds	r3, #16
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	705a      	strb	r2, [r3, #1]
 800592e:	e00e      	b.n	800594e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 0207 	and.w	r2, r3, #7
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_PCD_EP_ClrStall+0x82>
 800596a:	2302      	movs	r3, #2
 800596c:	e00e      	b.n	800598c <HAL_PCD_EP_ClrStall+0xa0>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68f9      	ldr	r1, [r7, #12]
 800597c:	4618      	mov	r0, r3
 800597e:	f007 fc14 	bl	800d1aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b092      	sub	sp, #72	@ 0x48
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800599c:	e333      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059a6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80059a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80059b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 8108 	bne.w	8005bce <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80059be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d14c      	bne.n	8005a62 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80059d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d8:	813b      	strh	r3, [r7, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	893b      	ldrh	r3, [r7, #8]
 80059e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3310      	adds	r3, #16
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	441a      	add	r2, r3
 8005a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f009 fc0b 	bl	800f246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7b1b      	ldrb	r3, [r3, #12]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 82e5 	beq.w	8006006 <PCD_EP_ISR_Handler+0x672>
 8005a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 82e0 	bne.w	8006006 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	7b1b      	ldrb	r3, [r3, #12]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	731a      	strb	r2, [r3, #12]
 8005a60:	e2d1      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a68:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d032      	beq.n	8005ae2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f007 fc9d 	bl	800d3f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005ac8:	4013      	ands	r3, r2
 8005aca:	817b      	strh	r3, [r7, #10]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	897a      	ldrh	r2, [r7, #10]
 8005ad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ad6:	b292      	uxth	r2, r2
 8005ad8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f009 fb86 	bl	800f1ec <HAL_PCD_SetupStageCallback>
 8005ae0:	e291      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ae2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f280 828d 	bge.w	8006006 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005af8:	4013      	ands	r3, r2
 8005afa:	81fb      	strh	r3, [r7, #14]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	89fa      	ldrh	r2, [r7, #14]
 8005b02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b06:	b292      	uxth	r2, r2
 8005b08:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d019      	beq.n	8005b6e <PCD_EP_ISR_Handler+0x1da>
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d015      	beq.n	8005b6e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b48:	6959      	ldr	r1, [r3, #20]
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f007 fc4f 	bl	800d3f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	441a      	add	r2, r3
 8005b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f009 fb51 	bl	800f210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 8242 	bne.w	8006006 <PCD_EP_ISR_Handler+0x672>
 8005b82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b8c:	f000 823b 	beq.w	8006006 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba0:	81bb      	strh	r3, [r7, #12]
 8005ba2:	89bb      	ldrh	r3, [r7, #12]
 8005ba4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ba8:	81bb      	strh	r3, [r7, #12]
 8005baa:	89bb      	ldrh	r3, [r7, #12]
 8005bac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bb0:	81bb      	strh	r3, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	89bb      	ldrh	r3, [r7, #12]
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]
 8005bcc:	e21b      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005be0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f280 80f1 	bge.w	8005dcc <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005c00:	4013      	ands	r3, r2
 8005c02:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c18:	b292      	uxth	r2, r2
 8005c1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c1c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	7b1b      	ldrb	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d123      	bne.n	8005c82 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005c62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 808b 	beq.w	8005d82 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	6959      	ldr	r1, [r3, #20]
 8005c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c76:	88da      	ldrh	r2, [r3, #6]
 8005c78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c7c:	f007 fbbb 	bl	800d3f6 <USB_ReadPMA>
 8005c80:	e07f      	b.n	8005d82 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c84:	78db      	ldrb	r3, [r3, #3]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d109      	bne.n	8005c9e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005c8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9c6 	bl	8006022 <HAL_PCD_EP_DB_Receive>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005c9c:	e071      	b.n	8005d82 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d022      	beq.n	8005d3e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	4413      	add	r3, r2
 8005d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d1c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d02c      	beq.n	8005d82 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d32:	891a      	ldrh	r2, [r3, #8]
 8005d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d38:	f007 fb5d 	bl	800d3f6 <USB_ReadPMA>
 8005d3c:	e021      	b.n	8005d82 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005d66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d74:	6959      	ldr	r1, [r3, #20]
 8005d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d78:	895a      	ldrh	r2, [r3, #10]
 8005d7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d7e:	f007 fb3a 	bl	800d3f6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005d82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d84:	69da      	ldr	r2, [r3, #28]
 8005d86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d8a:	441a      	add	r2, r3
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005d90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d98:	441a      	add	r2, r3
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <PCD_EP_ISR_Handler+0x41e>
 8005da6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d206      	bcs.n	8005dc0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f009 fa29 	bl	800f210 <HAL_PCD_DataOutStageCallback>
 8005dbe:	e005      	b.n	8005dcc <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f006 fbef 	bl	800c5aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005dcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8117 	beq.w	8006006 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005dd8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3310      	adds	r3, #16
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	441a      	add	r2, r3
 8005e16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f040 80a1 	bne.w	8005f70 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	2200      	movs	r2, #0
 8005e32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e36:	7b1b      	ldrb	r3, [r3, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8092 	beq.w	8005f62 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d046      	beq.n	8005ed6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d126      	bne.n	8005e9e <PCD_EP_ISR_Handler+0x50a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	00da      	lsls	r2, r3, #3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e061      	b.n	8005f62 <PCD_EP_ISR_Handler+0x5ce>
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d15d      	bne.n	8005f62 <PCD_EP_ISR_Handler+0x5ce>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e045      	b.n	8005f62 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d126      	bne.n	8005f32 <PCD_EP_ISR_Handler+0x59e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	4413      	add	r3, r2
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	00da      	lsls	r2, r3, #3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e017      	b.n	8005f62 <PCD_EP_ISR_Handler+0x5ce>
 8005f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d113      	bne.n	8005f62 <PCD_EP_ISR_Handler+0x5ce>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	4413      	add	r3, r2
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00da      	lsls	r2, r3, #3
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	2200      	movs	r2, #0
 8005f60:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f009 f96c 	bl	800f246 <HAL_PCD_DataInStageCallback>
 8005f6e:	e04a      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005f70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d13f      	bne.n	8005ffa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d906      	bls.n	8005fb8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fb4:	619a      	str	r2, [r3, #24]
 8005fb6:	e002      	b.n	8005fbe <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fba:	2200      	movs	r2, #0
 8005fbc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f009 f93a 	bl	800f246 <HAL_PCD_DataInStageCallback>
 8005fd2:	e018      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005fda:	441a      	add	r2, r3
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fde:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe2:	69da      	ldr	r2, [r3, #28]
 8005fe4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005fe6:	441a      	add	r2, r3
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fea:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f006 fad9 	bl	800c5aa <USB_EPStartXfer>
 8005ff8:	e005      	b.n	8006006 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005ffa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f917 	bl	8006234 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800600e:	b29b      	uxth	r3, r3
 8006010:	b21b      	sxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	f6ff acc3 	blt.w	800599e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3748      	adds	r7, #72	@ 0x48
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b088      	sub	sp, #32
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d07c      	beq.n	8006134 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4413      	add	r3, r2
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	4413      	add	r3, r2
 8006054:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	8b7b      	ldrh	r3, [r7, #26]
 8006066:	429a      	cmp	r2, r3
 8006068:	d306      	bcc.n	8006078 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	8b7b      	ldrh	r3, [r7, #26]
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	619a      	str	r2, [r3, #24]
 8006076:	e002      	b.n	800607e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d123      	bne.n	80060ce <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800609c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a0:	833b      	strh	r3, [r7, #24]
 80060a2:	8b3b      	ldrh	r3, [r7, #24]
 80060a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060a8:	833b      	strh	r3, [r7, #24]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	8b3b      	ldrh	r3, [r7, #24]
 80060ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01f      	beq.n	8006118 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f2:	82fb      	strh	r3, [r7, #22]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	8afb      	ldrh	r3, [r7, #22]
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800610c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006110:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006118:	8b7b      	ldrh	r3, [r7, #26]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8085 	beq.w	800622a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6959      	ldr	r1, [r3, #20]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	891a      	ldrh	r2, [r3, #8]
 800612c:	8b7b      	ldrh	r3, [r7, #26]
 800612e:	f007 f962 	bl	800d3f6 <USB_ReadPMA>
 8006132:	e07a      	b.n	800622a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800613c:	b29b      	uxth	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	4413      	add	r3, r2
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	4413      	add	r3, r2
 800614e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006158:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	8b7b      	ldrh	r3, [r7, #26]
 8006160:	429a      	cmp	r2, r3
 8006162:	d306      	bcc.n	8006172 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	8b7b      	ldrh	r3, [r7, #26]
 800616a:	1ad2      	subs	r2, r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	619a      	str	r2, [r3, #24]
 8006170:	e002      	b.n	8006178 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2200      	movs	r2, #0
 8006176:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d123      	bne.n	80061c8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	83fb      	strh	r3, [r7, #30]
 800619c:	8bfb      	ldrh	r3, [r7, #30]
 800619e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061a2:	83fb      	strh	r3, [r7, #30]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8bfb      	ldrh	r3, [r7, #30]
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11f      	bne.n	8006212 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ec:	83bb      	strh	r3, [r7, #28]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	8bbb      	ldrh	r3, [r7, #28]
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6959      	ldr	r1, [r3, #20]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	895a      	ldrh	r2, [r3, #10]
 8006224:	8b7b      	ldrh	r3, [r7, #26]
 8006226:	f007 f8e6 	bl	800d3f6 <USB_ReadPMA>
    }
  }

  return count;
 800622a:	8b7b      	ldrh	r3, [r7, #26]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b0a6      	sub	sp, #152	@ 0x98
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006242:	88fb      	ldrh	r3, [r7, #6]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 81f7 	beq.w	800663c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4413      	add	r3, r2
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4413      	add	r3, r2
 8006268:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006272:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800627e:	429a      	cmp	r2, r3
 8006280:	d907      	bls.n	8006292 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800628a:	1ad2      	subs	r2, r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	619a      	str	r2, [r3, #24]
 8006290:	e002      	b.n	8006298 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 80e1 	bne.w	8006464 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d126      	bne.n	80062f8 <HAL_PCD_EP_DB_Transmit+0xc4>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	4413      	add	r3, r2
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	00da      	lsls	r2, r3, #3
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	4413      	add	r3, r2
 80062cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e01a      	b.n	800632e <HAL_PCD_EP_DB_Transmit+0xfa>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d116      	bne.n	800632e <HAL_PCD_EP_DB_Transmit+0xfa>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	4413      	add	r3, r2
 8006316:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	00da      	lsls	r2, r3, #3
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	4413      	add	r3, r2
 8006322:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	2200      	movs	r2, #0
 800632c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d126      	bne.n	800638a <HAL_PCD_EP_DB_Transmit+0x156>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	4413      	add	r3, r2
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	00da      	lsls	r2, r3, #3
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	4413      	add	r3, r2
 800635e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800636e:	b29a      	uxth	r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	801a      	strh	r2, [r3, #0]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006382:	b29a      	uxth	r2, r3
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e017      	b.n	80063ba <HAL_PCD_EP_DB_Transmit+0x186>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d113      	bne.n	80063ba <HAL_PCD_EP_DB_Transmit+0x186>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a0:	4413      	add	r3, r2
 80063a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	2200      	movs	r2, #0
 80063b8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	78db      	ldrb	r3, [r3, #3]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d123      	bne.n	800640a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	837b      	strh	r3, [r7, #26]
 80063de:	8b7b      	ldrh	r3, [r7, #26]
 80063e0:	f083 0320 	eor.w	r3, r3, #32
 80063e4:	837b      	strh	r3, [r7, #26]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	8b7b      	ldrh	r3, [r7, #26]
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f008 ff18 	bl	800f246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01f      	beq.n	8006460 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643a:	833b      	strh	r3, [r7, #24]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	8b3b      	ldrh	r3, [r7, #24]
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e31f      	b.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d021      	beq.n	80064b2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006488:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	f040 82ca 	bne.w	8006a52 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064c6:	441a      	add	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064d4:	441a      	add	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d309      	bcc.n	80064fa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	621a      	str	r2, [r3, #32]
 80064f8:	e015      	b.n	8006526 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006502:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006506:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006510:	e009      	b.n	8006526 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2200      	movs	r2, #0
 8006524:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d15f      	bne.n	80065ee <HAL_PCD_EP_DB_Transmit+0x3ba>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	643b      	str	r3, [r7, #64]	@ 0x40
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006542:	4413      	add	r3, r2
 8006544:	643b      	str	r3, [r7, #64]	@ 0x40
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	00da      	lsls	r2, r3, #3
 800654c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800654e:	4413      	add	r3, r2
 8006550:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006560:	b29a      	uxth	r2, r3
 8006562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <HAL_PCD_EP_DB_Transmit+0x34e>
 800656c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e051      	b.n	8006626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006584:	2b3e      	cmp	r3, #62	@ 0x3e
 8006586:	d816      	bhi.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x382>
 8006588:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	653b      	str	r3, [r7, #80]	@ 0x50
 800658e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800659a:	3301      	adds	r3, #1
 800659c:	653b      	str	r3, [r7, #80]	@ 0x50
 800659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	029b      	lsls	r3, r3, #10
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e037      	b.n	8006626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80065b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80065bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <HAL_PCD_EP_DB_Transmit+0x398>
 80065c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c8:	3b01      	subs	r3, #1
 80065ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80065cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4313      	orrs	r3, r2
 80065dc:	b29b      	uxth	r3, r3
 80065de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e01b      	b.n	8006626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d117      	bne.n	8006626 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800660a:	4413      	add	r3, r2
 800660c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	00da      	lsls	r2, r3, #3
 8006614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006616:	4413      	add	r3, r2
 8006618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800661c:	647b      	str	r3, [r7, #68]	@ 0x44
 800661e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006620:	b29a      	uxth	r2, r3
 8006622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006624:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6959      	ldr	r1, [r3, #20]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	891a      	ldrh	r2, [r3, #8]
 8006632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006634:	b29b      	uxth	r3, r3
 8006636:	f006 fe9c 	bl	800d372 <USB_WritePMA>
 800663a:	e20a      	b.n	8006a52 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006644:	b29b      	uxth	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	4413      	add	r3, r2
 8006656:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006660:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800666c:	429a      	cmp	r2, r3
 800666e:	d307      	bcc.n	8006680 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	619a      	str	r2, [r3, #24]
 800667e:	e002      	b.n	8006686 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 80f6 	bne.w	800687c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d126      	bne.n	80066e6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	677b      	str	r3, [r7, #116]	@ 0x74
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066ac:	4413      	add	r3, r2
 80066ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00da      	lsls	r2, r3, #3
 80066b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066be:	673b      	str	r3, [r7, #112]	@ 0x70
 80066c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e01a      	b.n	800671c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d116      	bne.n	800671c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006702:	4413      	add	r3, r2
 8006704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	00da      	lsls	r2, r3, #3
 800670c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800670e:	4413      	add	r3, r2
 8006710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006718:	2200      	movs	r2, #0
 800671a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d12f      	bne.n	800678c <HAL_PCD_EP_DB_Transmit+0x558>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006744:	4413      	add	r3, r2
 8006746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006754:	4413      	add	r3, r2
 8006756:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800675a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800675e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e01c      	b.n	80067c6 <HAL_PCD_EP_DB_Transmit+0x592>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d118      	bne.n	80067c6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067a4:	4413      	add	r3, r2
 80067a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80067c2:	2200      	movs	r2, #0
 80067c4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	78db      	ldrb	r3, [r3, #3]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d127      	bne.n	800681e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80067ec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80067f0:	f083 0320 	eor.w	r3, r3, #32
 80067f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f008 fd0e 	bl	800f246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d121      	bne.n	8006878 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800684e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e113      	b.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d121      	bne.n	80068ca <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	f040 80be 	bne.w	8006a52 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80068de:	441a      	add	r2, r3
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80068ec:	441a      	add	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d309      	bcc.n	8006912 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a1a      	ldr	r2, [r3, #32]
 8006908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	621a      	str	r2, [r3, #32]
 8006910:	e015      	b.n	800693e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d107      	bne.n	800692a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800691a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800691e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006928:	e009      	b.n	800693e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2200      	movs	r2, #0
 8006934:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d15f      	bne.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006960:	4413      	add	r3, r2
 8006962:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	00da      	lsls	r2, r3, #3
 800696a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800696c:	4413      	add	r3, r2
 800696e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006972:	667b      	str	r3, [r7, #100]	@ 0x64
 8006974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800697e:	b29a      	uxth	r2, r3
 8006980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <HAL_PCD_EP_DB_Transmit+0x76c>
 800698a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006998:	b29a      	uxth	r2, r3
 800699a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	e04e      	b.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x80a>
 80069a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80069a4:	d816      	bhi.n	80069d4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80069a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_PCD_EP_DB_Transmit+0x788>
 80069b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069b8:	3301      	adds	r3, #1
 80069ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80069bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e034      	b.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x80a>
 80069d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <HAL_PCD_EP_DB_Transmit+0x7b6>
 80069e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e6:	3b01      	subs	r3, #1
 80069e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80069ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	e018      	b.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d114      	bne.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a22:	4413      	add	r3, r2
 8006a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00da      	lsls	r2, r3, #3
 8006a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6959      	ldr	r1, [r3, #20]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	895a      	ldrh	r2, [r3, #10]
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f006 fc90 	bl	800d372 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a6c:	82fb      	strh	r3, [r7, #22]
 8006a6e:	8afb      	ldrh	r3, [r7, #22]
 8006a70:	f083 0310 	eor.w	r3, r3, #16
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	8afb      	ldrh	r3, [r7, #22]
 8006a78:	f083 0320 	eor.w	r3, r3, #32
 8006a7c:	82fb      	strh	r3, [r7, #22]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8afb      	ldrh	r3, [r7, #22]
 8006a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3798      	adds	r7, #152	@ 0x98
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	607b      	str	r3, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	817b      	strh	r3, [r7, #10]
 8006aba:	4613      	mov	r3, r2
 8006abc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	f003 0207 	and.w	r2, r3, #7
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	3310      	adds	r3, #16
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	e009      	b.n	8006af6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ae2:	897a      	ldrh	r2, [r7, #10]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	80da      	strh	r2, [r3, #6]
 8006b0a:	e00b      	b.n	8006b24 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f043 0302 	orr.w	r3, r3, #2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d141      	bne.n	8006c1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b96:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba2:	d131      	bne.n	8006c08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ba4:	4b47      	ldr	r3, [pc, #284]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006baa:	4a46      	ldr	r2, [pc, #280]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bb4:	4b43      	ldr	r3, [pc, #268]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bbc:	4a41      	ldr	r2, [pc, #260]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bc4:	4b40      	ldr	r3, [pc, #256]	@ (8006cc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2232      	movs	r2, #50	@ 0x32
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	4a3f      	ldr	r2, [pc, #252]	@ (8006ccc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	0c9b      	lsrs	r3, r3, #18
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bda:	e002      	b.n	8006be2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006be2:	4b38      	ldr	r3, [pc, #224]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bee:	d102      	bne.n	8006bf6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f2      	bne.n	8006bdc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bf6:	4b33      	ldr	r3, [pc, #204]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c02:	d158      	bne.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e057      	b.n	8006cb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c08:	4b2e      	ldr	r3, [pc, #184]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c18:	e04d      	b.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c20:	d141      	bne.n	8006ca6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c22:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2e:	d131      	bne.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c30:	4b24      	ldr	r3, [pc, #144]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c36:	4a23      	ldr	r2, [pc, #140]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c40:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c48:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2232      	movs	r2, #50	@ 0x32
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	0c9b      	lsrs	r3, r3, #18
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c66:	e002      	b.n	8006c6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c6e:	4b15      	ldr	r3, [pc, #84]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7a:	d102      	bne.n	8006c82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f2      	bne.n	8006c68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c82:	4b10      	ldr	r3, [pc, #64]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c8e:	d112      	bne.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e011      	b.n	8006cb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c94:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ca4:	e007      	b.n	8006cb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ca6:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cae:	4a05      	ldr	r2, [pc, #20]	@ (8006cc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006cb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	20000000 	.word	0x20000000
 8006ccc:	431bde83 	.word	0x431bde83

08006cd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006cd4:	4b05      	ldr	r3, [pc, #20]	@ (8006cec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	4a04      	ldr	r2, [pc, #16]	@ (8006cec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cde:	6093      	str	r3, [r2, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40007000 	.word	0x40007000

08006cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e2fe      	b.n	8007300 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d075      	beq.n	8006dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0e:	4b97      	ldr	r3, [pc, #604]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d18:	4b94      	ldr	r3, [pc, #592]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	d102      	bne.n	8006d2e <HAL_RCC_OscConfig+0x3e>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d002      	beq.n	8006d34 <HAL_RCC_OscConfig+0x44>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d10b      	bne.n	8006d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d34:	4b8d      	ldr	r3, [pc, #564]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05b      	beq.n	8006df8 <HAL_RCC_OscConfig+0x108>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d157      	bne.n	8006df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e2d9      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d54:	d106      	bne.n	8006d64 <HAL_RCC_OscConfig+0x74>
 8006d56:	4b85      	ldr	r3, [pc, #532]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a84      	ldr	r2, [pc, #528]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e01d      	b.n	8006da0 <HAL_RCC_OscConfig+0xb0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d6c:	d10c      	bne.n	8006d88 <HAL_RCC_OscConfig+0x98>
 8006d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a7e      	ldr	r2, [pc, #504]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e00b      	b.n	8006da0 <HAL_RCC_OscConfig+0xb0>
 8006d88:	4b78      	ldr	r3, [pc, #480]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a77      	ldr	r2, [pc, #476]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	4b75      	ldr	r3, [pc, #468]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a74      	ldr	r2, [pc, #464]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d013      	beq.n	8006dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fc fdc4 	bl	8003934 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db0:	f7fc fdc0 	bl	8003934 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	@ 0x64
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e29e      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f0      	beq.n	8006db0 <HAL_RCC_OscConfig+0xc0>
 8006dce:	e014      	b.n	8006dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd0:	f7fc fdb0 	bl	8003934 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7fc fdac 	bl	8003934 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	@ 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e28a      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dea:	4b60      	ldr	r3, [pc, #384]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f0      	bne.n	8006dd8 <HAL_RCC_OscConfig+0xe8>
 8006df6:	e000      	b.n	8006dfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d075      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e06:	4b59      	ldr	r3, [pc, #356]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e10:	4b56      	ldr	r3, [pc, #344]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d102      	bne.n	8006e26 <HAL_RCC_OscConfig+0x136>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d002      	beq.n	8006e2c <HAL_RCC_OscConfig+0x13c>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d11f      	bne.n	8006e6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_OscConfig+0x154>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e25d      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e44:	4b49      	ldr	r3, [pc, #292]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	4946      	ldr	r1, [pc, #280]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e58:	4b45      	ldr	r3, [pc, #276]	@ (8006f70 <HAL_RCC_OscConfig+0x280>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fc fd1d 	bl	800389c <HAL_InitTick>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d043      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e249      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d023      	beq.n	8006ebc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e74:	4b3d      	ldr	r3, [pc, #244]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a3c      	ldr	r2, [pc, #240]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fc fd58 	bl	8003934 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e88:	f7fc fd54 	bl	8003934 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e232      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e9a:	4b34      	ldr	r3, [pc, #208]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea6:	4b31      	ldr	r3, [pc, #196]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	061b      	lsls	r3, r3, #24
 8006eb4:	492d      	ldr	r1, [pc, #180]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	604b      	str	r3, [r1, #4]
 8006eba:	e01a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fc fd34 	bl	8003934 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ed0:	f7fc fd30 	bl	8003934 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e20e      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ee2:	4b22      	ldr	r3, [pc, #136]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x1e0>
 8006eee:	e000      	b.n	8006ef2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d041      	beq.n	8006f82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01c      	beq.n	8006f40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f06:	4b19      	ldr	r3, [pc, #100]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f0c:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f16:	f7fc fd0d 	bl	8003934 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f1e:	f7fc fd09 	bl	8003934 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e1e7      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f30:	4b0e      	ldr	r3, [pc, #56]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0ef      	beq.n	8006f1e <HAL_RCC_OscConfig+0x22e>
 8006f3e:	e020      	b.n	8006f82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f40:	4b0a      	ldr	r3, [pc, #40]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f46:	4a09      	ldr	r2, [pc, #36]	@ (8006f6c <HAL_RCC_OscConfig+0x27c>)
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f50:	f7fc fcf0 	bl	8003934 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f56:	e00d      	b.n	8006f74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f58:	f7fc fcec 	bl	8003934 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d906      	bls.n	8006f74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1ca      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
 8006f6a:	bf00      	nop
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f74:	4b8c      	ldr	r3, [pc, #560]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8006f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1ea      	bne.n	8006f58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 80a6 	beq.w	80070dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f90:	2300      	movs	r3, #0
 8006f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f94:	4b84      	ldr	r3, [pc, #528]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8006f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x2b4>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x2b6>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00d      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006faa:	4b7f      	ldr	r3, [pc, #508]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fae:	4a7e      	ldr	r2, [pc, #504]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc6:	4b79      	ldr	r3, [pc, #484]	@ (80071ac <HAL_RCC_OscConfig+0x4bc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d118      	bne.n	8007004 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd2:	4b76      	ldr	r3, [pc, #472]	@ (80071ac <HAL_RCC_OscConfig+0x4bc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a75      	ldr	r2, [pc, #468]	@ (80071ac <HAL_RCC_OscConfig+0x4bc>)
 8006fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fde:	f7fc fca9 	bl	8003934 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe6:	f7fc fca5 	bl	8003934 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e183      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff8:	4b6c      	ldr	r3, [pc, #432]	@ (80071ac <HAL_RCC_OscConfig+0x4bc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d108      	bne.n	800701e <HAL_RCC_OscConfig+0x32e>
 800700c:	4b66      	ldr	r3, [pc, #408]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007012:	4a65      	ldr	r2, [pc, #404]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800701c:	e024      	b.n	8007068 <HAL_RCC_OscConfig+0x378>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b05      	cmp	r3, #5
 8007024:	d110      	bne.n	8007048 <HAL_RCC_OscConfig+0x358>
 8007026:	4b60      	ldr	r3, [pc, #384]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702c:	4a5e      	ldr	r2, [pc, #376]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800702e:	f043 0304 	orr.w	r3, r3, #4
 8007032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007036:	4b5c      	ldr	r3, [pc, #368]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	4a5a      	ldr	r2, [pc, #360]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007046:	e00f      	b.n	8007068 <HAL_RCC_OscConfig+0x378>
 8007048:	4b57      	ldr	r3, [pc, #348]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704e:	4a56      	ldr	r2, [pc, #344]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007058:	4b53      	ldr	r3, [pc, #332]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705e:	4a52      	ldr	r2, [pc, #328]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007060:	f023 0304 	bic.w	r3, r3, #4
 8007064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d016      	beq.n	800709e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fc fc60 	bl	8003934 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007076:	e00a      	b.n	800708e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7fc fc5c 	bl	8003934 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e138      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708e:	4b46      	ldr	r3, [pc, #280]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0ed      	beq.n	8007078 <HAL_RCC_OscConfig+0x388>
 800709c:	e015      	b.n	80070ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709e:	f7fc fc49 	bl	8003934 <HAL_GetTick>
 80070a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070a4:	e00a      	b.n	80070bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070a6:	f7fc fc45 	bl	8003934 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e121      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070bc:	4b3a      	ldr	r3, [pc, #232]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ed      	bne.n	80070a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070ca:	7ffb      	ldrb	r3, [r7, #31]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d105      	bne.n	80070dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d0:	4b35      	ldr	r3, [pc, #212]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	4a34      	ldr	r2, [pc, #208]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 80070d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d03c      	beq.n	8007162 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01c      	beq.n	800712a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070f0:	4b2d      	ldr	r3, [pc, #180]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 80070f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070f6:	4a2c      	ldr	r2, [pc, #176]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fc fc18 	bl	8003934 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007108:	f7fc fc14 	bl	8003934 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e0f2      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800711a:	4b23      	ldr	r3, [pc, #140]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800711c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ef      	beq.n	8007108 <HAL_RCC_OscConfig+0x418>
 8007128:	e01b      	b.n	8007162 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800712a:	4b1f      	ldr	r3, [pc, #124]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800712c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007130:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713a:	f7fc fbfb 	bl	8003934 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007142:	f7fc fbf7 	bl	8003934 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e0d5      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007154:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1ef      	bne.n	8007142 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80c9 	beq.w	80072fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800716c:	4b0e      	ldr	r3, [pc, #56]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 030c 	and.w	r3, r3, #12
 8007174:	2b0c      	cmp	r3, #12
 8007176:	f000 8083 	beq.w	8007280 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d15e      	bne.n	8007240 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007182:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a08      	ldr	r2, [pc, #32]	@ (80071a8 <HAL_RCC_OscConfig+0x4b8>)
 8007188:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fc fbd1 	bl	8003934 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007194:	e00c      	b.n	80071b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007196:	f7fc fbcd 	bl	8003934 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d905      	bls.n	80071b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e0ab      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b0:	4b55      	ldr	r3, [pc, #340]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1ec      	bne.n	8007196 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071bc:	4b52      	ldr	r3, [pc, #328]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	4b52      	ldr	r3, [pc, #328]	@ (800730c <HAL_RCC_OscConfig+0x61c>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6a11      	ldr	r1, [r2, #32]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071cc:	3a01      	subs	r2, #1
 80071ce:	0112      	lsls	r2, r2, #4
 80071d0:	4311      	orrs	r1, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80071d6:	0212      	lsls	r2, r2, #8
 80071d8:	4311      	orrs	r1, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071de:	0852      	lsrs	r2, r2, #1
 80071e0:	3a01      	subs	r2, #1
 80071e2:	0552      	lsls	r2, r2, #21
 80071e4:	4311      	orrs	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071ea:	0852      	lsrs	r2, r2, #1
 80071ec:	3a01      	subs	r2, #1
 80071ee:	0652      	lsls	r2, r2, #25
 80071f0:	4311      	orrs	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071f6:	06d2      	lsls	r2, r2, #27
 80071f8:	430a      	orrs	r2, r1
 80071fa:	4943      	ldr	r1, [pc, #268]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007200:	4b41      	ldr	r3, [pc, #260]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a40      	ldr	r2, [pc, #256]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800720a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800720c:	4b3e      	ldr	r3, [pc, #248]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4a3d      	ldr	r2, [pc, #244]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007216:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fc fb8c 	bl	8003934 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007220:	f7fc fb88 	bl	8003934 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e066      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007232:	4b35      	ldr	r3, [pc, #212]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0x530>
 800723e:	e05e      	b.n	80072fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007240:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a30      	ldr	r2, [pc, #192]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007246:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800724a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fc fb72 	bl	8003934 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007254:	f7fc fb6e 	bl	8003934 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e04c      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007266:	4b28      	ldr	r3, [pc, #160]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007272:	4b25      	ldr	r3, [pc, #148]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	4924      	ldr	r1, [pc, #144]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 8007278:	4b25      	ldr	r3, [pc, #148]	@ (8007310 <HAL_RCC_OscConfig+0x620>)
 800727a:	4013      	ands	r3, r2
 800727c:	60cb      	str	r3, [r1, #12]
 800727e:	e03e      	b.n	80072fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e039      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800728c:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <HAL_RCC_OscConfig+0x618>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f003 0203 	and.w	r2, r3, #3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	429a      	cmp	r2, r3
 800729e:	d12c      	bne.n	80072fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	3b01      	subs	r3, #1
 80072ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d123      	bne.n	80072fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d11b      	bne.n	80072fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d113      	bne.n	80072fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	3b01      	subs	r3, #1
 80072e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d109      	bne.n	80072fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	3b01      	subs	r3, #1
 80072f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d001      	beq.n	80072fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40021000 	.word	0x40021000
 800730c:	019f800c 	.word	0x019f800c
 8007310:	feeefffc 	.word	0xfeeefffc

08007314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e11e      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800732c:	4b91      	ldr	r3, [pc, #580]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d910      	bls.n	800735c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800733a:	4b8e      	ldr	r3, [pc, #568]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 020f 	bic.w	r2, r3, #15
 8007342:	498c      	ldr	r1, [pc, #560]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800734a:	4b8a      	ldr	r3, [pc, #552]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e106      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d073      	beq.n	8007450 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d129      	bne.n	80073c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007370:	4b81      	ldr	r3, [pc, #516]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0f4      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007380:	f000 f99e 	bl	80076c0 <RCC_GetSysClockFreqFromPLLSource>
 8007384:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	4a7c      	ldr	r2, [pc, #496]	@ (800757c <HAL_RCC_ClockConfig+0x268>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d93f      	bls.n	800740e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800738e:	4b7a      	ldr	r3, [pc, #488]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d033      	beq.n	800740e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d12f      	bne.n	800740e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073ae:	4b72      	ldr	r3, [pc, #456]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073b6:	4a70      	ldr	r2, [pc, #448]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073be:	2380      	movs	r3, #128	@ 0x80
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	e024      	b.n	800740e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e0c6      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073dc:	4b66      	ldr	r3, [pc, #408]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e0be      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80073ec:	f000 f8ce 	bl	800758c <HAL_RCC_GetSysClockFreq>
 80073f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4a61      	ldr	r2, [pc, #388]	@ (800757c <HAL_RCC_ClockConfig+0x268>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d909      	bls.n	800740e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007402:	4a5d      	ldr	r2, [pc, #372]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007408:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800740a:	2380      	movs	r3, #128	@ 0x80
 800740c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800740e:	4b5a      	ldr	r3, [pc, #360]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f023 0203 	bic.w	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	4957      	ldr	r1, [pc, #348]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800741c:	4313      	orrs	r3, r2
 800741e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007420:	f7fc fa88 	bl	8003934 <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007426:	e00a      	b.n	800743e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007428:	f7fc fa84 	bl	8003934 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e095      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743e:	4b4e      	ldr	r3, [pc, #312]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 020c 	and.w	r2, r3, #12
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	429a      	cmp	r2, r3
 800744e:	d1eb      	bne.n	8007428 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d023      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007468:	4b43      	ldr	r3, [pc, #268]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a42      	ldr	r2, [pc, #264]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800746e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007472:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007480:	4b3d      	ldr	r3, [pc, #244]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007488:	4a3b      	ldr	r2, [pc, #236]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800748a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800748e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007490:	4b39      	ldr	r3, [pc, #228]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4936      	ldr	r1, [pc, #216]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	608b      	str	r3, [r1, #8]
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b80      	cmp	r3, #128	@ 0x80
 80074a8:	d105      	bne.n	80074b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074aa:	4b33      	ldr	r3, [pc, #204]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	4a32      	ldr	r2, [pc, #200]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 80074b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d21d      	bcs.n	8007500 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f023 020f 	bic.w	r2, r3, #15
 80074cc:	4929      	ldr	r1, [pc, #164]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074d4:	f7fc fa2e 	bl	8003934 <HAL_GetTick>
 80074d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	e00a      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074dc:	f7fc fa2a 	bl	8003934 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e03b      	b.n	800756a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	4b20      	ldr	r3, [pc, #128]	@ (8007574 <HAL_RCC_ClockConfig+0x260>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d1ed      	bne.n	80074dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800750c:	4b1a      	ldr	r3, [pc, #104]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4917      	ldr	r1, [pc, #92]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800752a:	4b13      	ldr	r3, [pc, #76]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	490f      	ldr	r1, [pc, #60]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 800753a:	4313      	orrs	r3, r2
 800753c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800753e:	f000 f825 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007542:	4602      	mov	r2, r0
 8007544:	4b0c      	ldr	r3, [pc, #48]	@ (8007578 <HAL_RCC_ClockConfig+0x264>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	490c      	ldr	r1, [pc, #48]	@ (8007580 <HAL_RCC_ClockConfig+0x26c>)
 8007550:	5ccb      	ldrb	r3, [r1, r3]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	4a0a      	ldr	r2, [pc, #40]	@ (8007584 <HAL_RCC_ClockConfig+0x270>)
 800755c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800755e:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <HAL_RCC_ClockConfig+0x274>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7fc f99a 	bl	800389c <HAL_InitTick>
 8007568:	4603      	mov	r3, r0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40022000 	.word	0x40022000
 8007578:	40021000 	.word	0x40021000
 800757c:	04c4b400 	.word	0x04c4b400
 8007580:	080101d0 	.word	0x080101d0
 8007584:	20000000 	.word	0x20000000
 8007588:	20000004 	.word	0x20000004

0800758c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007592:	4b2c      	ldr	r3, [pc, #176]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	2b04      	cmp	r3, #4
 800759c:	d102      	bne.n	80075a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800759e:	4b2a      	ldr	r3, [pc, #168]	@ (8007648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e047      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075a4:	4b27      	ldr	r3, [pc, #156]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 030c 	and.w	r3, r3, #12
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d102      	bne.n	80075b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075b0:	4b26      	ldr	r3, [pc, #152]	@ (800764c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	e03e      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075b6:	4b23      	ldr	r3, [pc, #140]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 030c 	and.w	r3, r3, #12
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	d136      	bne.n	8007630 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075c2:	4b20      	ldr	r3, [pc, #128]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	091b      	lsrs	r3, r3, #4
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	3301      	adds	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d10c      	bne.n	80075fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075e0:	4a1a      	ldr	r2, [pc, #104]	@ (800764c <HAL_RCC_GetSysClockFreq+0xc0>)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e8:	4a16      	ldr	r2, [pc, #88]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075ea:	68d2      	ldr	r2, [r2, #12]
 80075ec:	0a12      	lsrs	r2, r2, #8
 80075ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	617b      	str	r3, [r7, #20]
      break;
 80075f8:	e00c      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075fa:	4a13      	ldr	r2, [pc, #76]	@ (8007648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	4a10      	ldr	r2, [pc, #64]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007604:	68d2      	ldr	r2, [r2, #12]
 8007606:	0a12      	lsrs	r2, r2, #8
 8007608:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]
      break;
 8007612:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007614:	4b0b      	ldr	r3, [pc, #44]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	0e5b      	lsrs	r3, r3, #25
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	3301      	adds	r3, #1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e001      	b.n	8007634 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007634:	693b      	ldr	r3, [r7, #16]
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40021000 	.word	0x40021000
 8007648:	00f42400 	.word	0x00f42400
 800764c:	016e3600 	.word	0x016e3600

08007650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007654:	4b03      	ldr	r3, [pc, #12]	@ (8007664 <HAL_RCC_GetHCLKFreq+0x14>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000000 	.word	0x20000000

08007668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800766c:	f7ff fff0 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	4b06      	ldr	r3, [pc, #24]	@ (800768c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	4904      	ldr	r1, [pc, #16]	@ (8007690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800767e:	5ccb      	ldrb	r3, [r1, r3]
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007688:	4618      	mov	r0, r3
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000
 8007690:	080101e0 	.word	0x080101e0

08007694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007698:	f7ff ffda 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	0adb      	lsrs	r3, r3, #11
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	4904      	ldr	r1, [pc, #16]	@ (80076bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40021000 	.word	0x40021000
 80076bc:	080101e0 	.word	0x080101e0

080076c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d10c      	bne.n	80076fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e4:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ec:	4a14      	ldr	r2, [pc, #80]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076ee:	68d2      	ldr	r2, [r2, #12]
 80076f0:	0a12      	lsrs	r2, r2, #8
 80076f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
 80076fa:	617b      	str	r3, [r7, #20]
    break;
 80076fc:	e00c      	b.n	8007718 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076fe:	4a12      	ldr	r2, [pc, #72]	@ (8007748 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	fbb2 f3f3 	udiv	r3, r2, r3
 8007706:	4a0e      	ldr	r2, [pc, #56]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007708:	68d2      	ldr	r2, [r2, #12]
 800770a:	0a12      	lsrs	r2, r2, #8
 800770c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
    break;
 8007716:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007718:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	0e5b      	lsrs	r3, r3, #25
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	3301      	adds	r3, #1
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007732:	687b      	ldr	r3, [r7, #4]
}
 8007734:	4618      	mov	r0, r3
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	40021000 	.word	0x40021000
 8007744:	016e3600 	.word	0x016e3600
 8007748:	00f42400 	.word	0x00f42400

0800774c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007754:	2300      	movs	r3, #0
 8007756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007758:	2300      	movs	r3, #0
 800775a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8098 	beq.w	800789a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800776a:	2300      	movs	r3, #0
 800776c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800776e:	4b43      	ldr	r3, [pc, #268]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10d      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800777a:	4b40      	ldr	r3, [pc, #256]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800777c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777e:	4a3f      	ldr	r2, [pc, #252]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007784:	6593      	str	r3, [r2, #88]	@ 0x58
 8007786:	4b3d      	ldr	r3, [pc, #244]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800778a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800778e:	60bb      	str	r3, [r7, #8]
 8007790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007792:	2301      	movs	r3, #1
 8007794:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007796:	4b3a      	ldr	r3, [pc, #232]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a39      	ldr	r2, [pc, #228]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800779c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077a2:	f7fc f8c7 	bl	8003934 <HAL_GetTick>
 80077a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077a8:	e009      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077aa:	f7fc f8c3 	bl	8003934 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d902      	bls.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	74fb      	strb	r3, [r7, #19]
        break;
 80077bc:	e005      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077be:	4b30      	ldr	r3, [pc, #192]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ef      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077ca:	7cfb      	ldrb	r3, [r7, #19]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d159      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077d0:	4b2a      	ldr	r3, [pc, #168]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01e      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d019      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077ec:	4b23      	ldr	r3, [pc, #140]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077f8:	4b20      	ldr	r3, [pc, #128]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fe:	4a1f      	ldr	r2, [pc, #124]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007808:	4b1c      	ldr	r3, [pc, #112]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	4a1b      	ldr	r2, [pc, #108]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007818:	4a18      	ldr	r2, [pc, #96]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782a:	f7fc f883 	bl	8003934 <HAL_GetTick>
 800782e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007830:	e00b      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007832:	f7fc f87f 	bl	8003934 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d902      	bls.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	74fb      	strb	r3, [r7, #19]
            break;
 8007848:	e006      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800784a:	4b0c      	ldr	r3, [pc, #48]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0ec      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007858:	7cfb      	ldrb	r3, [r7, #19]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800785e:	4b07      	ldr	r3, [pc, #28]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786c:	4903      	ldr	r1, [pc, #12]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007874:	e008      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007876:	7cfb      	ldrb	r3, [r7, #19]
 8007878:	74bb      	strb	r3, [r7, #18]
 800787a:	e005      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800787c:	40021000 	.word	0x40021000
 8007880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007888:	7c7b      	ldrb	r3, [r7, #17]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800788e:	4ba7      	ldr	r3, [pc, #668]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007892:	4aa6      	ldr	r2, [pc, #664]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007898:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078a6:	4ba1      	ldr	r3, [pc, #644]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ac:	f023 0203 	bic.w	r2, r3, #3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	499d      	ldr	r1, [pc, #628]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078c8:	4b98      	ldr	r3, [pc, #608]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ce:	f023 020c 	bic.w	r2, r3, #12
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	4995      	ldr	r1, [pc, #596]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80078ea:	4b90      	ldr	r3, [pc, #576]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	498c      	ldr	r1, [pc, #560]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800790c:	4b87      	ldr	r3, [pc, #540]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007912:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	4984      	ldr	r1, [pc, #528]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791c:	4313      	orrs	r3, r2
 800791e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800792e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	497b      	ldr	r1, [pc, #492]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007950:	4b76      	ldr	r3, [pc, #472]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	4973      	ldr	r1, [pc, #460]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007960:	4313      	orrs	r3, r2
 8007962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007972:	4b6e      	ldr	r3, [pc, #440]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007978:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	496a      	ldr	r1, [pc, #424]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007982:	4313      	orrs	r3, r2
 8007984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007994:	4b65      	ldr	r3, [pc, #404]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	4962      	ldr	r1, [pc, #392]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079b6:	4b5d      	ldr	r3, [pc, #372]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c4:	4959      	ldr	r1, [pc, #356]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079d8:	4b54      	ldr	r3, [pc, #336]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	4951      	ldr	r1, [pc, #324]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d015      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079fa:	4b4c      	ldr	r3, [pc, #304]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	4948      	ldr	r1, [pc, #288]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a18:	d105      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a1a:	4b44      	ldr	r3, [pc, #272]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	4a43      	ldr	r2, [pc, #268]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a24:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d015      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a32:	4b3e      	ldr	r3, [pc, #248]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a40:	493a      	ldr	r1, [pc, #232]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a50:	d105      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a52:	4b36      	ldr	r3, [pc, #216]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4a35      	ldr	r2, [pc, #212]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a5c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d015      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a6a:	4b30      	ldr	r3, [pc, #192]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	492c      	ldr	r1, [pc, #176]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a88:	d105      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a8a:	4b28      	ldr	r3, [pc, #160]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	4a27      	ldr	r2, [pc, #156]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a94:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d015      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007aa2:	4b22      	ldr	r3, [pc, #136]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	491e      	ldr	r1, [pc, #120]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ac0:	d105      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	4a19      	ldr	r2, [pc, #100]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007acc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d015      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ada:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae8:	4910      	ldr	r1, [pc, #64]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007af8:	d105      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007afa:	4b0c      	ldr	r3, [pc, #48]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4a0b      	ldr	r2, [pc, #44]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b04:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d018      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b12:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b20:	4902      	ldr	r1, [pc, #8]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	e001      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b36:	d105      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a20      	ldr	r2, [pc, #128]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d015      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007b50:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5e:	4918      	ldr	r1, [pc, #96]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6e:	d105      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b70:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	4a12      	ldr	r2, [pc, #72]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d015      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b88:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b96:	490a      	ldr	r1, [pc, #40]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ba8:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	4a04      	ldr	r2, [pc, #16]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007bae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007bb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40021000 	.word	0x40021000

08007bc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007bd6:	d136      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007bd8:	4bb3      	ldr	r3, [pc, #716]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be2:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007be4:	4bb0      	ldr	r3, [pc, #704]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d108      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bf8:	d104      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8007bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	f000 bce6 	b.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007c04:	4ba8      	ldr	r3, [pc, #672]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d108      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c18:	d104      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8007c1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	f000 bcd6 	b.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007c24:	4ba0      	ldr	r3, [pc, #640]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c30:	f040 84ce 	bne.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c3a:	f040 84c9 	bne.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 8007c3e:	4b9b      	ldr	r3, [pc, #620]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	f000 bcc5 	b.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8007c46:	4b98      	ldr	r3, [pc, #608]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c52:	4b95      	ldr	r3, [pc, #596]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5e:	d102      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8007c60:	4b93      	ldr	r3, [pc, #588]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	e017      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	e014      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8007c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c78:	4b8b      	ldr	r3, [pc, #556]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c84:	d102      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8007c86:	4b8b      	ldr	r3, [pc, #556]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	e004      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c96:	4b84      	ldr	r3, [pc, #528]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca8:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cb0:	f000 843c 	beq.w	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cba:	f200 8464 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc4:	f000 83f7 	beq.w	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cce:	f200 845a 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd8:	f000 83b0 	beq.w	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce2:	f200 8450 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cec:	f000 8378 	beq.w	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cf6:	f200 8446 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d00:	f000 8335 	beq.w	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d0a:	f200 843c 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d14:	f000 82f6 	beq.w	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d1e:	f200 8432 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d28:	f000 82a8 	beq.w	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d32:	f200 8428 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d3c:	f000 825a 	beq.w	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d46:	f200 841e 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d50:	f000 8214 	beq.w	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d5a:	f200 8414 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d64:	f000 81e0 	beq.w	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d6e:	f200 840a 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b80      	cmp	r3, #128	@ 0x80
 8007d76:	f000 81b2 	beq.w	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	f200 8402 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d84b      	bhi.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 83fb 	beq.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	2b1f      	cmp	r3, #31
 8007d96:	f200 83f6 	bhi.w	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007e2b 	.word	0x08007e2b
 8007da4:	08007e8d 	.word	0x08007e8d
 8007da8:	08008587 	.word	0x08008587
 8007dac:	08007f01 	.word	0x08007f01
 8007db0:	08008587 	.word	0x08008587
 8007db4:	08008587 	.word	0x08008587
 8007db8:	08008587 	.word	0x08008587
 8007dbc:	08007f63 	.word	0x08007f63
 8007dc0:	08008587 	.word	0x08008587
 8007dc4:	08008587 	.word	0x08008587
 8007dc8:	08008587 	.word	0x08008587
 8007dcc:	08008587 	.word	0x08008587
 8007dd0:	08008587 	.word	0x08008587
 8007dd4:	08008587 	.word	0x08008587
 8007dd8:	08008587 	.word	0x08008587
 8007ddc:	08007fc5 	.word	0x08007fc5
 8007de0:	08008587 	.word	0x08008587
 8007de4:	08008587 	.word	0x08008587
 8007de8:	08008587 	.word	0x08008587
 8007dec:	08008587 	.word	0x08008587
 8007df0:	08008587 	.word	0x08008587
 8007df4:	08008587 	.word	0x08008587
 8007df8:	08008587 	.word	0x08008587
 8007dfc:	08008587 	.word	0x08008587
 8007e00:	08008587 	.word	0x08008587
 8007e04:	08008587 	.word	0x08008587
 8007e08:	08008587 	.word	0x08008587
 8007e0c:	08008587 	.word	0x08008587
 8007e10:	08008587 	.word	0x08008587
 8007e14:	08008587 	.word	0x08008587
 8007e18:	08008587 	.word	0x08008587
 8007e1c:	0800802d 	.word	0x0800802d
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	f000 8136 	beq.w	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 8007e28:	e3ad      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 8007e3c:	f7ff fc2a 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 8007e40:	61f8      	str	r0, [r7, #28]
      break;
 8007e42:	e3a2      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d103      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7ff fb9f 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007e4e:	61f8      	str	r0, [r7, #28]
      break;
 8007e50:	e39b      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8007e52:	4b15      	ldr	r3, [pc, #84]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5e:	d105      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d102      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 8007e66:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007e68:	61fb      	str	r3, [r7, #28]
      break;
 8007e6a:	e38e      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	f040 8387 	bne.w	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	f040 8383 	bne.w	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 8007e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e88:	61fb      	str	r3, [r7, #28]
      break;
 8007e8a:	e37e      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007e8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e92:	f003 030c 	and.w	r3, r3, #12
 8007e96:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e9e:	f7ff fbe3 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8007ea2:	61f8      	str	r0, [r7, #28]
      break;
 8007ea4:	e373      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007ea6:	bf00      	nop
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	000b71b0 	.word	0x000b71b0
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d103      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7ff fb65 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007ec2:	61f8      	str	r0, [r7, #28]
      break;
 8007ec4:	e363      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007ec6:	4ba3      	ldr	r3, [pc, #652]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed2:	d105      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d102      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 8007eda:	4b9f      	ldr	r3, [pc, #636]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007edc:	61fb      	str	r3, [r7, #28]
      break;
 8007ede:	e356      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007ee0:	4b9c      	ldr	r3, [pc, #624]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	f040 834f 	bne.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b0c      	cmp	r3, #12
 8007ef4:	f040 834b 	bne.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 8007ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efc:	61fb      	str	r3, [r7, #28]
      break;
 8007efe:	e346      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007f00:	4b94      	ldr	r3, [pc, #592]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f0a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007f12:	f7ff fba9 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8007f16:	61f8      	str	r0, [r7, #28]
      break;
 8007f18:	e33b      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b10      	cmp	r3, #16
 8007f1e:	d103      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8007f20:	f7ff fb34 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007f24:	61f8      	str	r0, [r7, #28]
      break;
 8007f26:	e334      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007f28:	4b8a      	ldr	r3, [pc, #552]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f34:	d105      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d102      	bne.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 8007f3c:	4b86      	ldr	r3, [pc, #536]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f3e:	61fb      	str	r3, [r7, #28]
      break;
 8007f40:	e327      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007f42:	4b84      	ldr	r3, [pc, #528]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f040 8320 	bne.w	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b30      	cmp	r3, #48	@ 0x30
 8007f56:	f040 831c 	bne.w	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 8007f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f5e:	61fb      	str	r3, [r7, #28]
      break;
 8007f60:	e317      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007f62:	4b7c      	ldr	r3, [pc, #496]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f68:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f6c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7ff fb78 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8007f78:	61f8      	str	r0, [r7, #28]
      break;
 8007f7a:	e30c      	b.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b40      	cmp	r3, #64	@ 0x40
 8007f80:	d103      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8007f82:	f7ff fb03 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007f86:	61f8      	str	r0, [r7, #28]
      break;
 8007f88:	e305      	b.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007f8a:	4b72      	ldr	r3, [pc, #456]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f96:	d105      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2b80      	cmp	r3, #128	@ 0x80
 8007f9c:	d102      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 8007f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fa0:	61fb      	str	r3, [r7, #28]
      break;
 8007fa2:	e2f8      	b.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	f040 82f1 	bne.w	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fb8:	f040 82ed 	bne.w	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 8007fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc0:	61fb      	str	r3, [r7, #28]
      break;
 8007fc2:	e2e8      	b.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007fc4:	4b63      	ldr	r3, [pc, #396]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fce:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007fd6:	f7ff fb47 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8007fda:	61f8      	str	r0, [r7, #28]
      break;
 8007fdc:	e2dd      	b.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe4:	d103      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 8007fe6:	f7ff fad1 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8007fea:	61f8      	str	r0, [r7, #28]
      break;
 8007fec:	e2d5      	b.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007fee:	4b59      	ldr	r3, [pc, #356]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ffa:	d106      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008002:	d102      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8008004:	4b54      	ldr	r3, [pc, #336]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008006:	61fb      	str	r3, [r7, #28]
      break;
 8008008:	e2c7      	b.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800800a:	4b52      	ldr	r3, [pc, #328]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	f040 82c0 	bne.w	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008020:	f040 82bb 	bne.w	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8008024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008028:	61fb      	str	r3, [r7, #28]
      break;
 800802a:	e2b6      	b.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800802c:	4b49      	ldr	r3, [pc, #292]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008032:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008036:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 800803e:	f7ff fb13 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8008042:	61f8      	str	r0, [r7, #28]
      break;
 8008044:	e2ab      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804c:	d103      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 800804e:	f7ff fa9d 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8008052:	61f8      	str	r0, [r7, #28]
      break;
 8008054:	e2a3      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008056:	4b3f      	ldr	r3, [pc, #252]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800805e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008062:	d106      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800806a:	d102      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 800806c:	4b3a      	ldr	r3, [pc, #232]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800806e:	61fb      	str	r3, [r7, #28]
      break;
 8008070:	e295      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008072:	4b38      	ldr	r3, [pc, #224]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b02      	cmp	r3, #2
 800807e:	f040 828e 	bne.w	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008088:	f040 8289 	bne.w	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 800808c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008090:	61fb      	str	r3, [r7, #28]
      break;
 8008092:	e284      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008094:	4b2f      	ldr	r3, [pc, #188]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800809e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d103      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 80080a6:	f7ff fadf 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 80080aa:	61f8      	str	r0, [r7, #28]
      break;
 80080ac:	e279      	b.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b4:	d103      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 80080b6:	f7ff fa69 	bl	800758c <HAL_RCC_GetSysClockFreq>
 80080ba:	61f8      	str	r0, [r7, #28]
      break;
 80080bc:	e271      	b.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80080be:	4b25      	ldr	r3, [pc, #148]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ca:	f040 826a 	bne.w	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d4:	f040 8265 	bne.w	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 80080d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80080da:	61fb      	str	r3, [r7, #28]
      break;
 80080dc:	e261      	b.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80080de:	4b1d      	ldr	r3, [pc, #116]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80080e8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 80080f0:	f7ff faba 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 80080f4:	61f8      	str	r0, [r7, #28]
      break;
 80080f6:	e256      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080fe:	d103      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8008100:	f7ff fa44 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8008104:	61f8      	str	r0, [r7, #28]
      break;
 8008106:	e24e      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008108:	4b12      	ldr	r3, [pc, #72]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008114:	f040 8247 	bne.w	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800811e:	f040 8242 	bne.w	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008124:	61fb      	str	r3, [r7, #28]
      break;
 8008126:	e23e      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008128:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008132:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800813a:	f7ff fa95 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800813e:	61f8      	str	r0, [r7, #28]
      break;
 8008140:	e233      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008148:	d108      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 800814a:	f7ff fa1f 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800814e:	61f8      	str	r0, [r7, #28]
      break;
 8008150:	e22b      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8008152:	bf00      	nop
 8008154:	40021000 	.word	0x40021000
 8008158:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800815c:	4b9b      	ldr	r3, [pc, #620]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008168:	f040 821f 	bne.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008172:	f040 821a 	bne.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8008176:	4b96      	ldr	r3, [pc, #600]	@ (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008178:	61fb      	str	r3, [r7, #28]
      break;
 800817a:	e216      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800817c:	4b93      	ldr	r3, [pc, #588]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008182:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008186:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 800818e:	f7ff fa6b 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8008192:	61f8      	str	r0, [r7, #28]
      break;
 8008194:	e20b      	b.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008196:	4b8d      	ldr	r3, [pc, #564]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d107      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081aa:	d103      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 80081ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	e01e      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80081b4:	4b85      	ldr	r3, [pc, #532]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c0:	d106      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081c8:	d102      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 80081ca:	4b81      	ldr	r3, [pc, #516]	@ (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	e010      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80081d0:	4b7e      	ldr	r3, [pc, #504]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	f040 81e7 	bne.w	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80081e6:	f040 81e2 	bne.w	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 80081ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ee:	61fb      	str	r3, [r7, #28]
      break;
 80081f0:	e1dd      	b.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80081f2:	e1dc      	b.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80081f4:	4b75      	ldr	r3, [pc, #468]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80081fe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d103      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008206:	f7ff f9c1 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800820a:	61f8      	str	r0, [r7, #28]
      break;
 800820c:	e1d1      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008214:	d11b      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008216:	4b6d      	ldr	r3, [pc, #436]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 81c7 	beq.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008224:	4b69      	ldr	r3, [pc, #420]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	0a1b      	lsrs	r3, r3, #8
 800822a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800822e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	fb03 f202 	mul.w	r2, r3, r2
 8008238:	4b64      	ldr	r3, [pc, #400]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	0d5b      	lsrs	r3, r3, #21
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	3301      	adds	r3, #1
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	61fb      	str	r3, [r7, #28]
      break;
 800824c:	e1b1      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008254:	d102      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008256:	4b5f      	ldr	r3, [pc, #380]	@ (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008258:	61fb      	str	r3, [r7, #28]
      break;
 800825a:	e1aa      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800825c:	4b5b      	ldr	r3, [pc, #364]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008268:	f040 81a3 	bne.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008272:	f040 819e 	bne.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8008276:	4b56      	ldr	r3, [pc, #344]	@ (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008278:	61fb      	str	r3, [r7, #28]
      break;
 800827a:	e19a      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800827c:	4b53      	ldr	r3, [pc, #332]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008282:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008286:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 800828e:	f7ff f97d 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8008292:	61f8      	str	r0, [r7, #28]
      break;
 8008294:	e18f      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800829c:	d11b      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800829e:	4b4b      	ldr	r3, [pc, #300]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8185 	beq.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80082ac:	4b47      	ldr	r3, [pc, #284]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	fb03 f202 	mul.w	r2, r3, r2
 80082c0:	4b42      	ldr	r3, [pc, #264]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	0d5b      	lsrs	r3, r3, #21
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	3301      	adds	r3, #1
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d2:	61fb      	str	r3, [r7, #28]
      break;
 80082d4:	e16f      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082dc:	d102      	bne.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 80082de:	4b3d      	ldr	r3, [pc, #244]	@ (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80082e0:	61fb      	str	r3, [r7, #28]
      break;
 80082e2:	e168      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80082e4:	4b39      	ldr	r3, [pc, #228]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f0:	f040 8161 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80082fa:	f040 815c 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 80082fe:	4b34      	ldr	r3, [pc, #208]	@ (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008300:	61fb      	str	r3, [r7, #28]
      break;
 8008302:	e158      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008304:	4b31      	ldr	r3, [pc, #196]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800830e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008316:	d103      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008318:	f7ff f9a6 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800831c:	61f8      	str	r0, [r7, #28]
      break;
 800831e:	e14c      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8008326:	4b2c      	ldr	r3, [pc, #176]	@ (80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8008328:	61fb      	str	r3, [r7, #28]
      break;
 800832a:	e146      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008332:	f040 8142 	bne.w	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008336:	4b25      	ldr	r3, [pc, #148]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 813b 	beq.w	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008344:	4b21      	ldr	r3, [pc, #132]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	0a1b      	lsrs	r3, r3, #8
 800834a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800834e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	fb03 f202 	mul.w	r2, r3, r2
 8008358:	4b1c      	ldr	r3, [pc, #112]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	0d5b      	lsrs	r3, r3, #21
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	3301      	adds	r3, #1
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	fbb2 f3f3 	udiv	r3, r2, r3
 800836a:	61fb      	str	r3, [r7, #28]
      break;
 800836c:	e125      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 800836e:	4b17      	ldr	r3, [pc, #92]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008374:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008378:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008380:	d114      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008382:	4b12      	ldr	r3, [pc, #72]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800838c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	fb03 f202 	mul.w	r2, r3, r2
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	0d5b      	lsrs	r3, r3, #21
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	3301      	adds	r3, #1
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a8:	61fb      	str	r3, [r7, #28]
      break;
 80083aa:	e108      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80083ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	f040 8101 	bne.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 80fd 	bne.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80083c6:	61fb      	str	r3, [r7, #28]
      break;
 80083c8:	e0f9      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80083ca:	bf00      	nop
 80083cc:	40021000 	.word	0x40021000
 80083d0:	00f42400 	.word	0x00f42400
 80083d4:	00bb8000 	.word	0x00bb8000
 80083d8:	016e3600 	.word	0x016e3600
 80083dc:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80083e0:	4b7e      	ldr	r3, [pc, #504]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80083ea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f2:	d114      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80083f4:	4b79      	ldr	r3, [pc, #484]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fe:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	fb03 f202 	mul.w	r2, r3, r2
 8008408:	4b74      	ldr	r3, [pc, #464]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	0d5b      	lsrs	r3, r3, #21
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	3301      	adds	r3, #1
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	61fb      	str	r3, [r7, #28]
      break;
 800841c:	e0d1      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800841e:	4b6f      	ldr	r3, [pc, #444]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008424:	f003 0302 	and.w	r3, r3, #2
 8008428:	2b02      	cmp	r3, #2
 800842a:	f040 80ca 	bne.w	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80c6 	bne.w	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8008436:	4b6a      	ldr	r3, [pc, #424]	@ (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8008438:	61fb      	str	r3, [r7, #28]
      break;
 800843a:	e0c2      	b.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800843c:	4b67      	ldr	r3, [pc, #412]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008446:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844e:	d129      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008450:	4b62      	ldr	r3, [pc, #392]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80b4 	beq.w	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800845e:	4b5f      	ldr	r3, [pc, #380]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008468:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800846a:	4b5c      	ldr	r3, [pc, #368]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	0edb      	lsrs	r3, r3, #27
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800847c:	4b57      	ldr	r3, [pc, #348]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008488:	2311      	movs	r3, #17
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e001      	b.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 800848e:	2307      	movs	r3, #7
 8008490:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	fb03 f202 	mul.w	r2, r3, r2
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a0:	61fb      	str	r3, [r7, #28]
      break;
 80084a2:	e090      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084aa:	f040 808c 	bne.w	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 80084ae:	f7ff f86d 	bl	800758c <HAL_RCC_GetSysClockFreq>
 80084b2:	61f8      	str	r0, [r7, #28]
      break;
 80084b4:	e087      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 80084b6:	4b49      	ldr	r3, [pc, #292]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80084c0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c8:	d128      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80084ca:	4b44      	ldr	r3, [pc, #272]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d079      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80084d6:	4b41      	ldr	r3, [pc, #260]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084e0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80084e2:	4b3e      	ldr	r3, [pc, #248]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	0edb      	lsrs	r3, r3, #27
 80084e8:	f003 031f 	and.w	r3, r3, #31
 80084ec:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80084f4:	4b39      	ldr	r3, [pc, #228]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 8008500:	2311      	movs	r3, #17
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e001      	b.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 8008506:	2307      	movs	r3, #7
 8008508:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	fb03 f202 	mul.w	r2, r3, r2
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	fbb2 f3f3 	udiv	r3, r2, r3
 8008518:	61fb      	str	r3, [r7, #28]
      break;
 800851a:	e056      	b.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008522:	d152      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 8008524:	f7ff f832 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8008528:	61f8      	str	r0, [r7, #28]
      break;
 800852a:	e04e      	b.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 800852c:	4b2b      	ldr	r3, [pc, #172]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800852e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008532:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008536:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800853e:	d114      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008540:	4b26      	ldr	r3, [pc, #152]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	0a1b      	lsrs	r3, r3, #8
 8008546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	fb03 f202 	mul.w	r2, r3, r2
 8008554:	4b21      	ldr	r3, [pc, #132]	@ (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	0d5b      	lsrs	r3, r3, #21
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	3301      	adds	r3, #1
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	fbb2 f3f3 	udiv	r3, r2, r3
 8008566:	61fb      	str	r3, [r7, #28]
      break;
 8008568:	e031      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008570:	d102      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8008572:	4b1c      	ldr	r3, [pc, #112]	@ (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8008574:	61fb      	str	r3, [r7, #28]
      break;
 8008576:	e02a      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d127      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 800857e:	f7ff f805 	bl	800758c <HAL_RCC_GetSysClockFreq>
 8008582:	61f8      	str	r0, [r7, #28]
      break;
 8008584:	e023      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008586:	bf00      	nop
 8008588:	e022      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800858a:	bf00      	nop
 800858c:	e020      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800858e:	bf00      	nop
 8008590:	e01e      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008592:	bf00      	nop
 8008594:	e01c      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008596:	bf00      	nop
 8008598:	e01a      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800859a:	bf00      	nop
 800859c:	e018      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800859e:	bf00      	nop
 80085a0:	e016      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085a2:	bf00      	nop
 80085a4:	e014      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085a6:	bf00      	nop
 80085a8:	e012      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085aa:	bf00      	nop
 80085ac:	e010      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085ae:	bf00      	nop
 80085b0:	e00e      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085b2:	bf00      	nop
 80085b4:	e00c      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085b6:	bf00      	nop
 80085b8:	e00a      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085ba:	bf00      	nop
 80085bc:	e008      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085be:	bf00      	nop
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085c2:	bf00      	nop
 80085c4:	e004      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 80085ce:	bf00      	nop
    }
  }

  return(frequency);
 80085d0:	69fb      	ldr	r3, [r7, #28]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40021000 	.word	0x40021000
 80085e0:	02dc6c00 	.word	0x02dc6c00
 80085e4:	00f42400 	.word	0x00f42400

080085e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e09d      	b.n	8008736 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d108      	bne.n	8008614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800860a:	d009      	beq.n	8008620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
 8008612:	e005      	b.n	8008620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d106      	bne.n	8008640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7fa f960 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008656:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008660:	d902      	bls.n	8008668 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	e002      	b.n	800866e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800866c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008676:	d007      	beq.n	8008688 <HAL_SPI_Init+0xa0>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008680:	d002      	beq.n	8008688 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ca:	ea42 0103 	orr.w	r1, r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	f003 0204 	and.w	r2, r3, #4
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008704:	ea42 0103 	orr.w	r1, r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69da      	ldr	r2, [r3, #28]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	4613      	mov	r3, r2
 800874c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800874e:	f7fb f8f1 	bl	8003934 <HAL_GetTick>
 8008752:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b01      	cmp	r3, #1
 8008762:	d001      	beq.n	8008768 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
 8008766:	e15c      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_SPI_Transmit+0x36>
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e154      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <HAL_SPI_Transmit+0x48>
 8008782:	2302      	movs	r3, #2
 8008784:	e14d      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2203      	movs	r2, #3
 8008792:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087d8:	d10f      	bne.n	80087fa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b40      	cmp	r3, #64	@ 0x40
 8008806:	d007      	beq.n	8008818 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008820:	d952      	bls.n	80088c8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_SPI_Transmit+0xf2>
 800882a:	8b7b      	ldrh	r3, [r7, #26]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d145      	bne.n	80088bc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008840:	1c9a      	adds	r2, r3, #2
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	3b01      	subs	r3, #1
 800884e:	b29a      	uxth	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008854:	e032      	b.n	80088bc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b02      	cmp	r3, #2
 8008862:	d112      	bne.n	800888a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	881a      	ldrh	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008874:	1c9a      	adds	r2, r3, #2
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008888:	e018      	b.n	80088bc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800888a:	f7fb f853 	bl	8003934 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d803      	bhi.n	80088a2 <HAL_SPI_Transmit+0x164>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d102      	bne.n	80088a8 <HAL_SPI_Transmit+0x16a>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e0b2      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1c7      	bne.n	8008856 <HAL_SPI_Transmit+0x118>
 80088c6:	e083      	b.n	80089d0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <HAL_SPI_Transmit+0x198>
 80088d0:	8b7b      	ldrh	r3, [r7, #26]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d177      	bne.n	80089c6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d912      	bls.n	8008906 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e4:	881a      	ldrh	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f0:	1c9a      	adds	r2, r3, #2
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b02      	subs	r3, #2
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008904:	e05f      	b.n	80089c6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	7812      	ldrb	r2, [r2, #0]
 8008912:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800892c:	e04b      	b.n	80089c6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b02      	cmp	r3, #2
 800893a:	d12b      	bne.n	8008994 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b01      	cmp	r3, #1
 8008944:	d912      	bls.n	800896c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	881a      	ldrh	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008956:	1c9a      	adds	r2, r3, #2
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b02      	subs	r3, #2
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800896a:	e02c      	b.n	80089c6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	7812      	ldrb	r2, [r2, #0]
 8008978:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008988:	b29b      	uxth	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008992:	e018      	b.n	80089c6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008994:	f7fa ffce 	bl	8003934 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d803      	bhi.n	80089ac <HAL_SPI_Transmit+0x26e>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d102      	bne.n	80089b2 <HAL_SPI_Transmit+0x274>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e02d      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1ae      	bne.n	800892e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089d0:	69fa      	ldr	r2, [r7, #28]
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f947 	bl	8008c68 <SPI_EndRxTxTransaction>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008a20:	2300      	movs	r3, #0
  }
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a3c:	f7fa ff7a 	bl	8003934 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4413      	add	r3, r2
 8008a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a4c:	f7fa ff72 	bl	8003934 <HAL_GetTick>
 8008a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a52:	4b39      	ldr	r3, [pc, #228]	@ (8008b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	015b      	lsls	r3, r3, #5
 8008a58:	0d1b      	lsrs	r3, r3, #20
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	fb02 f303 	mul.w	r3, r2, r3
 8008a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a62:	e054      	b.n	8008b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d050      	beq.n	8008b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a6c:	f7fa ff62 	bl	8003934 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d902      	bls.n	8008a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d13d      	bne.n	8008afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a9a:	d111      	bne.n	8008ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aa4:	d004      	beq.n	8008ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aae:	d107      	bne.n	8008ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ac8:	d10f      	bne.n	8008aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e017      	b.n	8008b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4013      	ands	r3, r2
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	2300      	movne	r3, #0
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d19b      	bne.n	8008a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000000 	.word	0x20000000

08008b3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	@ 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b4e:	f7fa fef1 	bl	8003934 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008b5e:	f7fa fee9 	bl	8003934 <HAL_GetTick>
 8008b62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8008c64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	00da      	lsls	r2, r3, #3
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	0d1b      	lsrs	r3, r3, #20
 8008b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7e:	fb02 f303 	mul.w	r3, r2, r3
 8008b82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b84:	e060      	b.n	8008c48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b8c:	d107      	bne.n	8008b9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d050      	beq.n	8008c48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ba6:	f7fa fec5 	bl	8003934 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d902      	bls.n	8008bbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d13d      	bne.n	8008c38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008bca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bd4:	d111      	bne.n	8008bfa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bde:	d004      	beq.n	8008bea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be8:	d107      	bne.n	8008bfa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c02:	d10f      	bne.n	8008c24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e010      	b.n	8008c5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4013      	ands	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d196      	bne.n	8008b86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3728      	adds	r7, #40	@ 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000000 	.word	0x20000000

08008c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff ff5b 	bl	8008b3c <SPI_WaitFifoStateUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c90:	f043 0220 	orr.w	r2, r3, #32
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e027      	b.n	8008cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2180      	movs	r1, #128	@ 0x80
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fec0 	bl	8008a2c <SPI_WaitFlagStateUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e014      	b.n	8008cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff ff34 	bl	8008b3c <SPI_WaitFifoStateUntilTimeout>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e000      	b.n	8008cec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e049      	b.n	8008d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d106      	bne.n	8008d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fa fbb8 	bl	8003490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	4610      	mov	r0, r2
 8008d34:	f000 fa4c 	bl	80091d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d001      	beq.n	8008dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e04f      	b.n	8008e5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a23      	ldr	r2, [pc, #140]	@ (8008e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01d      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de6:	d018      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1f      	ldr	r2, [pc, #124]	@ (8008e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1e      	ldr	r2, [pc, #120]	@ (8008e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00e      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1c      	ldr	r2, [pc, #112]	@ (8008e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d004      	beq.n	8008e1a <HAL_TIM_Base_Start_IT+0x76>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a19      	ldr	r2, [pc, #100]	@ (8008e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d115      	bne.n	8008e46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	4b17      	ldr	r3, [pc, #92]	@ (8008e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b06      	cmp	r3, #6
 8008e2a:	d015      	beq.n	8008e58 <HAL_TIM_Base_Start_IT+0xb4>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e32:	d011      	beq.n	8008e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e44:	e008      	b.n	8008e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0201 	orr.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	e000      	b.n	8008e5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40012c00 	.word	0x40012c00
 8008e6c:	40000400 	.word	0x40000400
 8008e70:	40000800 	.word	0x40000800
 8008e74:	40013400 	.word	0x40013400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40015000 	.word	0x40015000
 8008e80:	00010007 	.word	0x00010007

08008e84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0201 	bic.w	r2, r2, #1
 8008e9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6a1a      	ldr	r2, [r3, #32]
 8008ea2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10f      	bne.n	8008ecc <HAL_TIM_Base_Stop_IT+0x48>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_TIM_Base_Stop_IT+0x48>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0201 	bic.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d020      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f06f 0202 	mvn.w	r2, #2
 8008f16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f931 	bl	8009194 <HAL_TIM_IC_CaptureCallback>
 8008f32:	e005      	b.n	8008f40 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f923 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f934 	bl	80091a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d020      	beq.n	8008f92 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01b      	beq.n	8008f92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f06f 0204 	mvn.w	r2, #4
 8008f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f90b 	bl	8009194 <HAL_TIM_IC_CaptureCallback>
 8008f7e:	e005      	b.n	8008f8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8fd 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f90e 	bl	80091a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d020      	beq.n	8008fde <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01b      	beq.n	8008fde <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f06f 0208 	mvn.w	r2, #8
 8008fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8e5 	bl	8009194 <HAL_TIM_IC_CaptureCallback>
 8008fca:	e005      	b.n	8008fd8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f8d7 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f8e8 	bl	80091a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d020      	beq.n	800902a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f06f 0210 	mvn.w	r2, #16
 8008ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2208      	movs	r2, #8
 8009000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f8bf 	bl	8009194 <HAL_TIM_IC_CaptureCallback>
 8009016:	e005      	b.n	8009024 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f8b1 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8c2 	bl	80091a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0201 	mvn.w	r2, #1
 8009046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7fa f98d 	bl	8003368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d104      	bne.n	8009062 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9ec 	bl	8009454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f9e4 	bl	8009468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00c      	beq.n	80090c4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f87c 	bl	80091bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f06f 0220 	mvn.w	r2, #32
 80090e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f9ac 	bl	8009440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00c      	beq.n	800910c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9b8 	bl	800947c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00c      	beq.n	8009130 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d007      	beq.n	8009130 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f9b0 	bl	8009490 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00c      	beq.n	8009154 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800914c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9a8 	bl	80094a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00c      	beq.n	8009178 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f9a0 	bl	80094b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a48      	ldr	r2, [pc, #288]	@ (8009304 <TIM_Base_SetConfig+0x134>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ee:	d00f      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a45      	ldr	r2, [pc, #276]	@ (8009308 <TIM_Base_SetConfig+0x138>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00b      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a44      	ldr	r2, [pc, #272]	@ (800930c <TIM_Base_SetConfig+0x13c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a43      	ldr	r2, [pc, #268]	@ (8009310 <TIM_Base_SetConfig+0x140>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_Base_SetConfig+0x40>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a42      	ldr	r2, [pc, #264]	@ (8009314 <TIM_Base_SetConfig+0x144>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d108      	bne.n	8009222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a37      	ldr	r2, [pc, #220]	@ (8009304 <TIM_Base_SetConfig+0x134>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d01f      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009230:	d01b      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a34      	ldr	r2, [pc, #208]	@ (8009308 <TIM_Base_SetConfig+0x138>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d017      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a33      	ldr	r2, [pc, #204]	@ (800930c <TIM_Base_SetConfig+0x13c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d013      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a32      	ldr	r2, [pc, #200]	@ (8009310 <TIM_Base_SetConfig+0x140>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00f      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a32      	ldr	r2, [pc, #200]	@ (8009318 <TIM_Base_SetConfig+0x148>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00b      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a31      	ldr	r2, [pc, #196]	@ (800931c <TIM_Base_SetConfig+0x14c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d007      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a30      	ldr	r2, [pc, #192]	@ (8009320 <TIM_Base_SetConfig+0x150>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_Base_SetConfig+0x9a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a2b      	ldr	r2, [pc, #172]	@ (8009314 <TIM_Base_SetConfig+0x144>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d108      	bne.n	800927c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a18      	ldr	r2, [pc, #96]	@ (8009304 <TIM_Base_SetConfig+0x134>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d013      	beq.n	80092d0 <TIM_Base_SetConfig+0x100>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a19      	ldr	r2, [pc, #100]	@ (8009310 <TIM_Base_SetConfig+0x140>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00f      	beq.n	80092d0 <TIM_Base_SetConfig+0x100>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a19      	ldr	r2, [pc, #100]	@ (8009318 <TIM_Base_SetConfig+0x148>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00b      	beq.n	80092d0 <TIM_Base_SetConfig+0x100>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a18      	ldr	r2, [pc, #96]	@ (800931c <TIM_Base_SetConfig+0x14c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d007      	beq.n	80092d0 <TIM_Base_SetConfig+0x100>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <TIM_Base_SetConfig+0x150>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d003      	beq.n	80092d0 <TIM_Base_SetConfig+0x100>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a12      	ldr	r2, [pc, #72]	@ (8009314 <TIM_Base_SetConfig+0x144>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d103      	bne.n	80092d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d105      	bne.n	80092f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	f023 0201 	bic.w	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	611a      	str	r2, [r3, #16]
  }
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40000400 	.word	0x40000400
 800930c:	40000800 	.word	0x40000800
 8009310:	40013400 	.word	0x40013400
 8009314:	40015000 	.word	0x40015000
 8009318:	40014000 	.word	0x40014000
 800931c:	40014400 	.word	0x40014400
 8009320:	40014800 	.word	0x40014800

08009324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009334:	2b01      	cmp	r3, #1
 8009336:	d101      	bne.n	800933c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009338:	2302      	movs	r3, #2
 800933a:	e06f      	b.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a31      	ldr	r2, [pc, #196]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d009      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a30      	ldr	r2, [pc, #192]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d004      	beq.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a2e      	ldr	r2, [pc, #184]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d108      	bne.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009380:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4313      	orrs	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d01d      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093bc:	d018      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d013      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00e      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a15      	ldr	r2, [pc, #84]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d009      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a16      	ldr	r2, [pc, #88]	@ (800943c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d004      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a11      	ldr	r2, [pc, #68]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10c      	bne.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40015000 	.word	0x40015000
 8009434:	40000400 	.word	0x40000400
 8009438:	40000800 	.word	0x40000800
 800943c:	40014000 	.word	0x40014000

08009440 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e042      	b.n	8009564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fa f843 	bl	800357c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2224      	movs	r2, #36	@ 0x24
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 ff60 	bl	800a3dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc61 	bl	8009de4 <UART_SetConfig>
 8009522:	4603      	mov	r3, r0
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e01b      	b.n	8009564 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800953a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800954a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f042 0201 	orr.w	r2, r2, #1
 800955a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 ffdf 	bl	800a520 <UART_CheckIdleState>
 8009562:	4603      	mov	r3, r0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	@ 0x28
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	4613      	mov	r3, r2
 800957a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009582:	2b20      	cmp	r3, #32
 8009584:	d17b      	bne.n	800967e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_UART_Transmit+0x26>
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e074      	b.n	8009680 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2221      	movs	r2, #33	@ 0x21
 80095a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095a6:	f7fa f9c5 	bl	8003934 <HAL_GetTick>
 80095aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	88fa      	ldrh	r2, [r7, #6]
 80095b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c4:	d108      	bne.n	80095d8 <HAL_UART_Transmit+0x6c>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	61bb      	str	r3, [r7, #24]
 80095d6:	e003      	b.n	80095e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095e0:	e030      	b.n	8009644 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	2180      	movs	r1, #128	@ 0x80
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f001 f841 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e03d      	b.n	8009680 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009618:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	3302      	adds	r3, #2
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	e007      	b.n	8009632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800964a:	b29b      	uxth	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1c8      	bne.n	80095e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2200      	movs	r2, #0
 8009658:	2140      	movs	r1, #64	@ 0x40
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f001 f80a 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e006      	b.n	8009680 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	e000      	b.n	8009680 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800967e:	2302      	movs	r3, #2
  }
}
 8009680:	4618      	mov	r0, r3
 8009682:	3720      	adds	r7, #32
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	@ 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800969c:	2b20      	cmp	r3, #32
 800969e:	d137      	bne.n	8009710 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <HAL_UART_Receive_IT+0x24>
 80096a6:	88fb      	ldrh	r3, [r7, #6]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e030      	b.n	8009712 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a18      	ldr	r2, [pc, #96]	@ (800971c <HAL_UART_Receive_IT+0x94>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d01f      	beq.n	8009700 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	613b      	str	r3, [r7, #16]
   return(result);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	623b      	str	r3, [r7, #32]
 80096ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	461a      	mov	r2, r3
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f001 f822 	bl	800a750 <UART_Start_Receive_IT>
 800970c:	4603      	mov	r3, r0
 800970e:	e000      	b.n	8009712 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009710:	2302      	movs	r3, #2
  }
}
 8009712:	4618      	mov	r0, r3
 8009714:	3728      	adds	r7, #40	@ 0x28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40008000 	.word	0x40008000

08009720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b0ba      	sub	sp, #232	@ 0xe8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009746:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800974a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800974e:	4013      	ands	r3, r2
 8009750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d11b      	bne.n	8009794 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009760:	f003 0320 	and.w	r3, r3, #32
 8009764:	2b00      	cmp	r3, #0
 8009766:	d015      	beq.n	8009794 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d009      	beq.n	8009794 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8300 	beq.w	8009d8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
      }
      return;
 8009792:	e2fa      	b.n	8009d8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8123 	beq.w	80099e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800979e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097a2:	4b8d      	ldr	r3, [pc, #564]	@ (80099d8 <HAL_UART_IRQHandler+0x2b8>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80097ae:	4b8b      	ldr	r3, [pc, #556]	@ (80099dc <HAL_UART_IRQHandler+0x2bc>)
 80097b0:	4013      	ands	r3, r2
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 8116 	beq.w	80099e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d011      	beq.n	80097e8 <HAL_UART_IRQHandler+0xc8>
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	f043 0201 	orr.w	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d011      	beq.n	8009818 <HAL_UART_IRQHandler+0xf8>
 80097f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2202      	movs	r2, #2
 8009806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800980e:	f043 0204 	orr.w	r2, r3, #4
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d011      	beq.n	8009848 <HAL_UART_IRQHandler+0x128>
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2204      	movs	r2, #4
 8009836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800983e:	f043 0202 	orr.w	r2, r3, #2
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d017      	beq.n	8009884 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d105      	bne.n	800986c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009860:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009864:	4b5c      	ldr	r3, [pc, #368]	@ (80099d8 <HAL_UART_IRQHandler+0x2b8>)
 8009866:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2208      	movs	r2, #8
 8009872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987a:	f043 0208 	orr.w	r2, r3, #8
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800988c:	2b00      	cmp	r3, #0
 800988e:	d012      	beq.n	80098b6 <HAL_UART_IRQHandler+0x196>
 8009890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009894:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00c      	beq.n	80098b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ac:	f043 0220 	orr.w	r2, r3, #32
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8266 	beq.w	8009d8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c6:	f003 0320 	and.w	r3, r3, #32
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d013      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800990a:	2b40      	cmp	r3, #64	@ 0x40
 800990c:	d005      	beq.n	800991a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800990e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009912:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009916:	2b00      	cmp	r3, #0
 8009918:	d054      	beq.n	80099c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 f83a 	bl	800a994 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992a:	2b40      	cmp	r3, #64	@ 0x40
 800992c:	d146      	bne.n	80099bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3308      	adds	r3, #8
 8009934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800994c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3308      	adds	r3, #8
 8009956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800995a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800995e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1d9      	bne.n	800992e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800998a:	4a15      	ldr	r2, [pc, #84]	@ (80099e0 <HAL_UART_IRQHandler+0x2c0>)
 800998c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009994:	4618      	mov	r0, r3
 8009996:	f7fa fa0c 	bl	8003db2 <HAL_DMA_Abort_IT>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d019      	beq.n	80099d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80099ae:	4610      	mov	r0, r2
 80099b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b2:	e00f      	b.n	80099d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f9ff 	bl	8009db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ba:	e00b      	b.n	80099d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f9fb 	bl	8009db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c2:	e007      	b.n	80099d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9f7 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80099d2:	e1dc      	b.n	8009d8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	bf00      	nop
    return;
 80099d6:	e1da      	b.n	8009d8e <HAL_UART_IRQHandler+0x66e>
 80099d8:	10000001 	.word	0x10000001
 80099dc:	04000120 	.word	0x04000120
 80099e0:	0800aa61 	.word	0x0800aa61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	f040 8170 	bne.w	8009cce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80099ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f2:	f003 0310 	and.w	r3, r3, #16
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8169 	beq.w	8009cce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8162 	beq.w	8009cce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2210      	movs	r2, #16
 8009a10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a1c:	2b40      	cmp	r3, #64	@ 0x40
 8009a1e:	f040 80d8 	bne.w	8009bd2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 80af 	beq.w	8009b98 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a44:	429a      	cmp	r2, r3
 8009a46:	f080 80a7 	bcs.w	8009b98 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0320 	and.w	r3, r3, #32
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f040 8087 	bne.w	8009b76 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1da      	bne.n	8009a68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ad6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e1      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e3      	bne.n	8009aee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b44:	f023 0310 	bic.w	r3, r3, #16
 8009b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e4      	bne.n	8009b34 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fa f8c5 	bl	8003d00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f91b 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b96:	e0fc      	b.n	8009d92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	f040 80f5 	bne.w	8009d92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	f040 80eb 	bne.w	8009d92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f8fe 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
      return;
 8009bd0:	e0df      	b.n	8009d92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80d1 	beq.w	8009d96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80cc 	beq.w	8009d96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e4      	bne.n	8009bfe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	623b      	str	r3, [r7, #32]
   return(result);
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3308      	adds	r3, #8
 8009c58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e1      	bne.n	8009c34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f023 0310 	bic.w	r3, r3, #16
 8009c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ca6:	61fb      	str	r3, [r7, #28]
 8009ca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	69b9      	ldr	r1, [r7, #24]
 8009cac:	69fa      	ldr	r2, [r7, #28]
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e4      	bne.n	8009c84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f880 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ccc:	e063      	b.n	8009d96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00e      	beq.n	8009cf8 <HAL_UART_IRQHandler+0x5d8>
 8009cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d008      	beq.n	8009cf8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 fc13 	bl	800b51c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cf6:	e051      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d014      	beq.n	8009d2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d105      	bne.n	8009d1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03a      	beq.n	8009d9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
    }
    return;
 8009d2c:	e035      	b.n	8009d9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <HAL_UART_IRQHandler+0x62e>
 8009d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fe9c 	bl	800aa84 <UART_EndTransmit_IT>
    return;
 8009d4c:	e026      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <HAL_UART_IRQHandler+0x64e>
 8009d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 fbec 	bl	800b544 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d6c:	e016      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d010      	beq.n	8009d9c <HAL_UART_IRQHandler+0x67c>
 8009d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da0c      	bge.n	8009d9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 fbd4 	bl	800b530 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d88:	e008      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009d8a:	bf00      	nop
 8009d8c:	e006      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
    return;
 8009d8e:	bf00      	nop
 8009d90:	e004      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009d92:	bf00      	nop
 8009d94:	e002      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009d96:	bf00      	nop
 8009d98:	e000      	b.n	8009d9c <HAL_UART_IRQHandler+0x67c>
    return;
 8009d9a:	bf00      	nop
  }
}
 8009d9c:	37e8      	adds	r7, #232	@ 0xe8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop

08009da4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de8:	b08c      	sub	sp, #48	@ 0x30
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	431a      	orrs	r2, r3
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4baa      	ldr	r3, [pc, #680]	@ (800a0bc <UART_SetConfig+0x2d8>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a9f      	ldr	r2, [pc, #636]	@ (800a0c0 <UART_SetConfig+0x2dc>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d004      	beq.n	8009e50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e64:	430b      	orrs	r3, r1
 8009e66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	f023 010f 	bic.w	r1, r3, #15
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a90      	ldr	r2, [pc, #576]	@ (800a0c4 <UART_SetConfig+0x2e0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d125      	bne.n	8009ed4 <UART_SetConfig+0xf0>
 8009e88:	4b8f      	ldr	r3, [pc, #572]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 8009e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d81a      	bhi.n	8009ecc <UART_SetConfig+0xe8>
 8009e96:	a201      	add	r2, pc, #4	@ (adr r2, 8009e9c <UART_SetConfig+0xb8>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009ead 	.word	0x08009ead
 8009ea0:	08009ebd 	.word	0x08009ebd
 8009ea4:	08009eb5 	.word	0x08009eb5
 8009ea8:	08009ec5 	.word	0x08009ec5
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb2:	e116      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eba:	e112      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ebc:	2304      	movs	r3, #4
 8009ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec2:	e10e      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	e10a      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ecc:	2310      	movs	r3, #16
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e106      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a7c      	ldr	r2, [pc, #496]	@ (800a0cc <UART_SetConfig+0x2e8>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d138      	bne.n	8009f50 <UART_SetConfig+0x16c>
 8009ede:	4b7a      	ldr	r3, [pc, #488]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 8009ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ee4:	f003 030c 	and.w	r3, r3, #12
 8009ee8:	2b0c      	cmp	r3, #12
 8009eea:	d82d      	bhi.n	8009f48 <UART_SetConfig+0x164>
 8009eec:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <UART_SetConfig+0x110>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f29 	.word	0x08009f29
 8009ef8:	08009f49 	.word	0x08009f49
 8009efc:	08009f49 	.word	0x08009f49
 8009f00:	08009f49 	.word	0x08009f49
 8009f04:	08009f39 	.word	0x08009f39
 8009f08:	08009f49 	.word	0x08009f49
 8009f0c:	08009f49 	.word	0x08009f49
 8009f10:	08009f49 	.word	0x08009f49
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f49 	.word	0x08009f49
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	08009f49 	.word	0x08009f49
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f2e:	e0d8      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f36:	e0d4      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f38:	2304      	movs	r3, #4
 8009f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f3e:	e0d0      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f40:	2308      	movs	r3, #8
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f46:	e0cc      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f48:	2310      	movs	r3, #16
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4e:	e0c8      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a5e      	ldr	r2, [pc, #376]	@ (800a0d0 <UART_SetConfig+0x2ec>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d125      	bne.n	8009fa6 <UART_SetConfig+0x1c2>
 8009f5a:	4b5b      	ldr	r3, [pc, #364]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 8009f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f64:	2b30      	cmp	r3, #48	@ 0x30
 8009f66:	d016      	beq.n	8009f96 <UART_SetConfig+0x1b2>
 8009f68:	2b30      	cmp	r3, #48	@ 0x30
 8009f6a:	d818      	bhi.n	8009f9e <UART_SetConfig+0x1ba>
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d00a      	beq.n	8009f86 <UART_SetConfig+0x1a2>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d814      	bhi.n	8009f9e <UART_SetConfig+0x1ba>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <UART_SetConfig+0x19a>
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d008      	beq.n	8009f8e <UART_SetConfig+0x1aa>
 8009f7c:	e00f      	b.n	8009f9e <UART_SetConfig+0x1ba>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f84:	e0ad      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f86:	2302      	movs	r3, #2
 8009f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8c:	e0a9      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f8e:	2304      	movs	r3, #4
 8009f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f94:	e0a5      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f96:	2308      	movs	r3, #8
 8009f98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f9c:	e0a1      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009f9e:	2310      	movs	r3, #16
 8009fa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fa4:	e09d      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a4a      	ldr	r2, [pc, #296]	@ (800a0d4 <UART_SetConfig+0x2f0>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d125      	bne.n	8009ffc <UART_SetConfig+0x218>
 8009fb0:	4b45      	ldr	r3, [pc, #276]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fbc:	d016      	beq.n	8009fec <UART_SetConfig+0x208>
 8009fbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fc0:	d818      	bhi.n	8009ff4 <UART_SetConfig+0x210>
 8009fc2:	2b80      	cmp	r3, #128	@ 0x80
 8009fc4:	d00a      	beq.n	8009fdc <UART_SetConfig+0x1f8>
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	d814      	bhi.n	8009ff4 <UART_SetConfig+0x210>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <UART_SetConfig+0x1f0>
 8009fce:	2b40      	cmp	r3, #64	@ 0x40
 8009fd0:	d008      	beq.n	8009fe4 <UART_SetConfig+0x200>
 8009fd2:	e00f      	b.n	8009ff4 <UART_SetConfig+0x210>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	e082      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009fdc:	2302      	movs	r3, #2
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	e07e      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e07a      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009fec:	2308      	movs	r3, #8
 8009fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff2:	e076      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ffa:	e072      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a35      	ldr	r2, [pc, #212]	@ (800a0d8 <UART_SetConfig+0x2f4>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d12a      	bne.n	800a05c <UART_SetConfig+0x278>
 800a006:	4b30      	ldr	r3, [pc, #192]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 800a008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a00c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a010:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a014:	d01a      	beq.n	800a04c <UART_SetConfig+0x268>
 800a016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a01a:	d81b      	bhi.n	800a054 <UART_SetConfig+0x270>
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a020:	d00c      	beq.n	800a03c <UART_SetConfig+0x258>
 800a022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a026:	d815      	bhi.n	800a054 <UART_SetConfig+0x270>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <UART_SetConfig+0x250>
 800a02c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a030:	d008      	beq.n	800a044 <UART_SetConfig+0x260>
 800a032:	e00f      	b.n	800a054 <UART_SetConfig+0x270>
 800a034:	2300      	movs	r3, #0
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03a:	e052      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a03c:	2302      	movs	r3, #2
 800a03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a042:	e04e      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a044:	2304      	movs	r3, #4
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04a:	e04a      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a04c:	2308      	movs	r3, #8
 800a04e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a052:	e046      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a054:	2310      	movs	r3, #16
 800a056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05a:	e042      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a17      	ldr	r2, [pc, #92]	@ (800a0c0 <UART_SetConfig+0x2dc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d13a      	bne.n	800a0dc <UART_SetConfig+0x2f8>
 800a066:	4b18      	ldr	r3, [pc, #96]	@ (800a0c8 <UART_SetConfig+0x2e4>)
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a070:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a074:	d01a      	beq.n	800a0ac <UART_SetConfig+0x2c8>
 800a076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a07a:	d81b      	bhi.n	800a0b4 <UART_SetConfig+0x2d0>
 800a07c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a080:	d00c      	beq.n	800a09c <UART_SetConfig+0x2b8>
 800a082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a086:	d815      	bhi.n	800a0b4 <UART_SetConfig+0x2d0>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <UART_SetConfig+0x2b0>
 800a08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a090:	d008      	beq.n	800a0a4 <UART_SetConfig+0x2c0>
 800a092:	e00f      	b.n	800a0b4 <UART_SetConfig+0x2d0>
 800a094:	2300      	movs	r3, #0
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e022      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a09c:	2302      	movs	r3, #2
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e01e      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a0a4:	2304      	movs	r3, #4
 800a0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0aa:	e01a      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a0ac:	2308      	movs	r3, #8
 800a0ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0b2:	e016      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ba:	e012      	b.n	800a0e2 <UART_SetConfig+0x2fe>
 800a0bc:	cfff69f3 	.word	0xcfff69f3
 800a0c0:	40008000 	.word	0x40008000
 800a0c4:	40013800 	.word	0x40013800
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	40004400 	.word	0x40004400
 800a0d0:	40004800 	.word	0x40004800
 800a0d4:	40004c00 	.word	0x40004c00
 800a0d8:	40005000 	.word	0x40005000
 800a0dc:	2310      	movs	r3, #16
 800a0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4aae      	ldr	r2, [pc, #696]	@ (800a3a0 <UART_SetConfig+0x5bc>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	f040 8097 	bne.w	800a21c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0f2:	2b08      	cmp	r3, #8
 800a0f4:	d823      	bhi.n	800a13e <UART_SetConfig+0x35a>
 800a0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0fc <UART_SetConfig+0x318>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	0800a13f 	.word	0x0800a13f
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a13f 	.word	0x0800a13f
 800a10c:	0800a12f 	.word	0x0800a12f
 800a110:	0800a13f 	.word	0x0800a13f
 800a114:	0800a13f 	.word	0x0800a13f
 800a118:	0800a13f 	.word	0x0800a13f
 800a11c:	0800a137 	.word	0x0800a137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a120:	f7fd faa2 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800a124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a126:	e010      	b.n	800a14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a128:	4b9e      	ldr	r3, [pc, #632]	@ (800a3a4 <UART_SetConfig+0x5c0>)
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a12c:	e00d      	b.n	800a14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a12e:	f7fd fa2d 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800a132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a134:	e009      	b.n	800a14a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a13c:	e005      	b.n	800a14a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a148:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 8130 	beq.w	800a3b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a156:	4a94      	ldr	r2, [pc, #592]	@ (800a3a8 <UART_SetConfig+0x5c4>)
 800a158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a160:	fbb3 f3f2 	udiv	r3, r3, r2
 800a164:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	4413      	add	r3, r2
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	429a      	cmp	r2, r3
 800a174:	d305      	bcc.n	800a182 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d903      	bls.n	800a18a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a188:	e113      	b.n	800a3b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	2200      	movs	r2, #0
 800a18e:	60bb      	str	r3, [r7, #8]
 800a190:	60fa      	str	r2, [r7, #12]
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	4a84      	ldr	r2, [pc, #528]	@ (800a3a8 <UART_SetConfig+0x5c4>)
 800a198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	603b      	str	r3, [r7, #0]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1ac:	f7f6 fc7a 	bl	8000aa4 <__aeabi_uldivmod>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f04f 0200 	mov.w	r2, #0
 800a1bc:	f04f 0300 	mov.w	r3, #0
 800a1c0:	020b      	lsls	r3, r1, #8
 800a1c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1c6:	0202      	lsls	r2, r0, #8
 800a1c8:	6979      	ldr	r1, [r7, #20]
 800a1ca:	6849      	ldr	r1, [r1, #4]
 800a1cc:	0849      	lsrs	r1, r1, #1
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	eb12 0804 	adds.w	r8, r2, r4
 800a1d8:	eb43 0905 	adc.w	r9, r3, r5
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	469a      	mov	sl, r3
 800a1e4:	4693      	mov	fp, r2
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f6 fc59 	bl	8000aa4 <__aeabi_uldivmod>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a200:	d308      	bcc.n	800a214 <UART_SetConfig+0x430>
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a208:	d204      	bcs.n	800a214 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6a3a      	ldr	r2, [r7, #32]
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	e0ce      	b.n	800a3b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a21a:	e0ca      	b.n	800a3b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a224:	d166      	bne.n	800a2f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a226:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d827      	bhi.n	800a27e <UART_SetConfig+0x49a>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x450>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a259 	.word	0x0800a259
 800a238:	0800a261 	.word	0x0800a261
 800a23c:	0800a269 	.word	0x0800a269
 800a240:	0800a27f 	.word	0x0800a27f
 800a244:	0800a26f 	.word	0x0800a26f
 800a248:	0800a27f 	.word	0x0800a27f
 800a24c:	0800a27f 	.word	0x0800a27f
 800a250:	0800a27f 	.word	0x0800a27f
 800a254:	0800a277 	.word	0x0800a277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a258:	f7fd fa06 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800a25c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a25e:	e014      	b.n	800a28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a260:	f7fd fa18 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 800a264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a266:	e010      	b.n	800a28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a268:	4b4e      	ldr	r3, [pc, #312]	@ (800a3a4 <UART_SetConfig+0x5c0>)
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a26c:	e00d      	b.n	800a28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a26e:	f7fd f98d 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800a272:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a274:	e009      	b.n	800a28a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a27c:	e005      	b.n	800a28a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8090 	beq.w	800a3b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a296:	4a44      	ldr	r2, [pc, #272]	@ (800a3a8 <UART_SetConfig+0x5c4>)
 800a298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a29c:	461a      	mov	r2, r3
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2a4:	005a      	lsls	r2, r3, #1
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	441a      	add	r2, r3
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	2b0f      	cmp	r3, #15
 800a2bc:	d916      	bls.n	800a2ec <UART_SetConfig+0x508>
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c4:	d212      	bcs.n	800a2ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f023 030f 	bic.w	r3, r3, #15
 800a2ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	085b      	lsrs	r3, r3, #1
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	8bfb      	ldrh	r3, [r7, #30]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	8bfa      	ldrh	r2, [r7, #30]
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	e062      	b.n	800a3b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2f2:	e05e      	b.n	800a3b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2f8:	2b08      	cmp	r3, #8
 800a2fa:	d828      	bhi.n	800a34e <UART_SetConfig+0x56a>
 800a2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a304 <UART_SetConfig+0x520>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a331 	.word	0x0800a331
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	0800a34f 	.word	0x0800a34f
 800a314:	0800a33f 	.word	0x0800a33f
 800a318:	0800a34f 	.word	0x0800a34f
 800a31c:	0800a34f 	.word	0x0800a34f
 800a320:	0800a34f 	.word	0x0800a34f
 800a324:	0800a347 	.word	0x0800a347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a328:	f7fd f99e 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 800a32c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a32e:	e014      	b.n	800a35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a330:	f7fd f9b0 	bl	8007694 <HAL_RCC_GetPCLK2Freq>
 800a334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a336:	e010      	b.n	800a35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a338:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a4 <UART_SetConfig+0x5c0>)
 800a33a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a33c:	e00d      	b.n	800a35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a33e:	f7fd f925 	bl	800758c <HAL_RCC_GetSysClockFreq>
 800a342:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a344:	e009      	b.n	800a35a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a34c:	e005      	b.n	800a35a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a358:	bf00      	nop
    }

    if (pclk != 0U)
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d028      	beq.n	800a3b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a364:	4a10      	ldr	r2, [pc, #64]	@ (800a3a8 <UART_SetConfig+0x5c4>)
 800a366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d910      	bls.n	800a3ac <UART_SetConfig+0x5c8>
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a390:	d20c      	bcs.n	800a3ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	b29a      	uxth	r2, r3
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	e009      	b.n	800a3b2 <UART_SetConfig+0x5ce>
 800a39e:	bf00      	nop
 800a3a0:	40008000 	.word	0x40008000
 800a3a4:	00f42400 	.word	0x00f42400
 800a3a8:	080101e8 	.word	0x080101e8
      }
      else
      {
        ret = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3730      	adds	r7, #48	@ 0x30
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d01a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4da:	d10a      	bne.n	800a4f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b098      	sub	sp, #96	@ 0x60
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a530:	f7f9 fa00 	bl	8003934 <HAL_GetTick>
 800a534:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b08      	cmp	r3, #8
 800a542:	d12f      	bne.n	800a5a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a54c:	2200      	movs	r2, #0
 800a54e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f88e 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d022      	beq.n	800a5a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a572:	653b      	str	r3, [r7, #80]	@ 0x50
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a57c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a57e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e6      	bne.n	800a55e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e063      	b.n	800a66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0304 	and.w	r3, r3, #4
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d149      	bne.n	800a646 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f857 	bl	800a674 <UART_WaitOnFlagUntilTimeout>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d03c      	beq.n	800a646 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e6      	bne.n	800a5cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a61e:	61fa      	str	r2, [r7, #28]
 800a620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	69b9      	ldr	r1, [r7, #24]
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	617b      	str	r3, [r7, #20]
   return(result);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e5      	bne.n	800a5fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e012      	b.n	800a66c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2220      	movs	r2, #32
 800a64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2220      	movs	r2, #32
 800a652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3758      	adds	r7, #88	@ 0x58
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a684:	e04f      	b.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d04b      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68e:	f7f9 f951 	bl	8003934 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d302      	bcc.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e04e      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d037      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b80      	cmp	r3, #128	@ 0x80
 800a6ba:	d034      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b40      	cmp	r3, #64	@ 0x40
 800a6c0:	d031      	beq.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d110      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f95b 	bl	800a994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2208      	movs	r2, #8
 800a6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e029      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a700:	d111      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a70a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f941 	bl	800a994 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e00f      	b.n	800a746 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4013      	ands	r3, r2
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	429a      	cmp	r2, r3
 800a734:	bf0c      	ite	eq
 800a736:	2301      	moveq	r3, #1
 800a738:	2300      	movne	r3, #0
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	461a      	mov	r2, r3
 800a73e:	79fb      	ldrb	r3, [r7, #7]
 800a740:	429a      	cmp	r2, r3
 800a742:	d0a0      	beq.n	800a686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a750:	b480      	push	{r7}
 800a752:	b0a3      	sub	sp, #140	@ 0x8c
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a782:	d10e      	bne.n	800a7a2 <UART_Start_Receive_IT+0x52>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d105      	bne.n	800a798 <UART_Start_Receive_IT+0x48>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a792:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a796:	e02d      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22ff      	movs	r2, #255	@ 0xff
 800a79c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7a0:	e028      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10d      	bne.n	800a7c6 <UART_Start_Receive_IT+0x76>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d104      	bne.n	800a7bc <UART_Start_Receive_IT+0x6c>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	22ff      	movs	r2, #255	@ 0xff
 800a7b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7ba:	e01b      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	227f      	movs	r2, #127	@ 0x7f
 800a7c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7c4:	e016      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ce:	d10d      	bne.n	800a7ec <UART_Start_Receive_IT+0x9c>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <UART_Start_Receive_IT+0x92>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	227f      	movs	r2, #127	@ 0x7f
 800a7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7e0:	e008      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	223f      	movs	r2, #63	@ 0x3f
 800a7e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a7ea:	e003      	b.n	800a7f4 <UART_Start_Receive_IT+0xa4>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2222      	movs	r2, #34	@ 0x22
 800a800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3308      	adds	r3, #8
 800a824:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a828:	673a      	str	r2, [r7, #112]	@ 0x70
 800a82a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a82e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a830:	e841 2300 	strex	r3, r2, [r1]
 800a834:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e3      	bne.n	800a804 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a844:	d14f      	bne.n	800a8e6 <UART_Start_Receive_IT+0x196>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d349      	bcc.n	800a8e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85a:	d107      	bne.n	800a86c <UART_Start_Receive_IT+0x11c>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d103      	bne.n	800a86c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4a47      	ldr	r2, [pc, #284]	@ (800a984 <UART_Start_Receive_IT+0x234>)
 800a868:	675a      	str	r2, [r3, #116]	@ 0x74
 800a86a:	e002      	b.n	800a872 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	4a46      	ldr	r2, [pc, #280]	@ (800a988 <UART_Start_Receive_IT+0x238>)
 800a870:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01a      	beq.n	800a8b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a882:	e853 3f00 	ldrex	r3, [r3]
 800a886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a88a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a88e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a89c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a89e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e4      	bne.n	800a87a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ba:	e853 3f00 	ldrex	r3, [r3]
 800a8be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a8d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a8d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e5      	bne.n	800a8b0 <UART_Start_Receive_IT+0x160>
 800a8e4:	e046      	b.n	800a974 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ee:	d107      	bne.n	800a900 <UART_Start_Receive_IT+0x1b0>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d103      	bne.n	800a900 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4a24      	ldr	r2, [pc, #144]	@ (800a98c <UART_Start_Receive_IT+0x23c>)
 800a8fc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a8fe:	e002      	b.n	800a906 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4a23      	ldr	r2, [pc, #140]	@ (800a990 <UART_Start_Receive_IT+0x240>)
 800a904:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d019      	beq.n	800a942 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	e853 3f00 	ldrex	r3, [r3]
 800a91a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a922:	677b      	str	r3, [r7, #116]	@ 0x74
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a92c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e6      	bne.n	800a90e <UART_Start_Receive_IT+0x1be>
 800a940:	e018      	b.n	800a974 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	613b      	str	r3, [r7, #16]
   return(result);
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f043 0320 	orr.w	r3, r3, #32
 800a956:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a960:	623b      	str	r3, [r7, #32]
 800a962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69f9      	ldr	r1, [r7, #28]
 800a966:	6a3a      	ldr	r2, [r7, #32]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e6      	bne.n	800a942 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	378c      	adds	r7, #140	@ 0x8c
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	0800b1b1 	.word	0x0800b1b1
 800a988:	0800ae4d 	.word	0x0800ae4d
 800a98c:	0800ac95 	.word	0x0800ac95
 800a990:	0800aadd 	.word	0x0800aadd

0800a994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b095      	sub	sp, #84	@ 0x54
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1e6      	bne.n	800a99c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9e4:	f023 0301 	bic.w	r3, r3, #1
 800a9e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e3      	bne.n	800a9ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d118      	bne.n	800aa40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa30:	6979      	ldr	r1, [r7, #20]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	e841 2300 	strex	r3, r2, [r1]
 800aa38:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e6      	bne.n	800aa0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa54:	bf00      	nop
 800aa56:	3754      	adds	r7, #84	@ 0x54
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7ff f99e 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa7c:	bf00      	nop
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaa0:	61fb      	str	r3, [r7, #28]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	61bb      	str	r3, [r7, #24]
 800aaac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	613b      	str	r3, [r7, #16]
   return(result);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e6      	bne.n	800aa8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff f969 	bl	8009da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad2:	bf00      	nop
 800aad4:	3720      	adds	r7, #32
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b09c      	sub	sp, #112	@ 0x70
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aaea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaf4:	2b22      	cmp	r3, #34	@ 0x22
 800aaf6:	f040 80be 	bne.w	800ac76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ab08:	b2d9      	uxtb	r1, r3
 800ab0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab14:	400a      	ands	r2, r1
 800ab16:	b2d2      	uxtb	r2, r2
 800ab18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab1e:	1c5a      	adds	r2, r3, #1
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f040 80a1 	bne.w	800ac86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e6      	bne.n	800ab44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3308      	adds	r3, #8
 800ab94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab96:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e5      	bne.n	800ab76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a33      	ldr	r2, [pc, #204]	@ (800ac90 <UART_RxISR_8BIT+0x1b4>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d01f      	beq.n	800ac08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d018      	beq.n	800ac08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	623b      	str	r3, [r7, #32]
   return(result);
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800abea:	663b      	str	r3, [r7, #96]	@ 0x60
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800abf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfc:	e841 2300 	strex	r3, r2, [r1]
 800ac00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e6      	bne.n	800abd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d12e      	bne.n	800ac6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0310 	bic.w	r3, r3, #16
 800ac2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac34:	61fb      	str	r3, [r7, #28]
 800ac36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	69b9      	ldr	r1, [r7, #24]
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	617b      	str	r3, [r7, #20]
   return(result);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e6      	bne.n	800ac16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	f003 0310 	and.w	r3, r3, #16
 800ac52:	2b10      	cmp	r3, #16
 800ac54:	d103      	bne.n	800ac5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff f8b0 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac6c:	e00b      	b.n	800ac86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7f6 fc26 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 800ac74:	e007      	b.n	800ac86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	699a      	ldr	r2, [r3, #24]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f042 0208 	orr.w	r2, r2, #8
 800ac84:	619a      	str	r2, [r3, #24]
}
 800ac86:	bf00      	nop
 800ac88:	3770      	adds	r7, #112	@ 0x70
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	40008000 	.word	0x40008000

0800ac94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b09c      	sub	sp, #112	@ 0x70
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aca2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acac:	2b22      	cmp	r3, #34	@ 0x22
 800acae:	f040 80be 	bne.w	800ae2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800acc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800acc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800acca:	4013      	ands	r3, r2
 800accc:	b29a      	uxth	r2, r3
 800acce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acd6:	1c9a      	adds	r2, r3, #2
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 80a1 	bne.w	800ae3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad10:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad1a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad22:	e841 2300 	strex	r3, r2, [r1]
 800ad26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e6      	bne.n	800acfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3308      	adds	r3, #8
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	f023 0301 	bic.w	r3, r3, #1
 800ad44:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad4e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ad50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad56:	e841 2300 	strex	r3, r2, [r1]
 800ad5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e5      	bne.n	800ad2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a33      	ldr	r2, [pc, #204]	@ (800ae48 <UART_RxISR_16BIT+0x1b4>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d01f      	beq.n	800adc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d018      	beq.n	800adc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ada2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e6      	bne.n	800ad8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d12e      	bne.n	800ae26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	60bb      	str	r3, [r7, #8]
   return(result);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f023 0310 	bic.w	r3, r3, #16
 800ade2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	613b      	str	r3, [r7, #16]
   return(result);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e6      	bne.n	800adce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	f003 0310 	and.w	r3, r3, #16
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d103      	bne.n	800ae16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2210      	movs	r2, #16
 800ae14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7fe ffd4 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae24:	e00b      	b.n	800ae3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7f6 fb4a 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 800ae2c:	e007      	b.n	800ae3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	699a      	ldr	r2, [r3, #24]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f042 0208 	orr.w	r2, r2, #8
 800ae3c:	619a      	str	r2, [r3, #24]
}
 800ae3e:	bf00      	nop
 800ae40:	3770      	adds	r7, #112	@ 0x70
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	40008000 	.word	0x40008000

0800ae4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b0ac      	sub	sp, #176	@ 0xb0
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69db      	ldr	r3, [r3, #28]
 800ae64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae82:	2b22      	cmp	r3, #34	@ 0x22
 800ae84:	f040 8183 	bne.w	800b18e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae92:	e126      	b.n	800b0e2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800aea2:	b2d9      	uxtb	r1, r3
 800aea4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeae:	400a      	ands	r2, r1
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aeda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d053      	beq.n	800af8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d011      	beq.n	800af16 <UART_RxISR_8BIT_FIFOEN+0xca>
 800aef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00b      	beq.n	800af16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2201      	movs	r2, #1
 800af04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0c:	f043 0201 	orr.w	r2, r3, #1
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af1a:	f003 0302 	and.w	r3, r3, #2
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d011      	beq.n	800af46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800af22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00b      	beq.n	800af46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2202      	movs	r2, #2
 800af34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af3c:	f043 0204 	orr.w	r2, r3, #4
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af4a:	f003 0304 	and.w	r3, r3, #4
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d011      	beq.n	800af76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800af52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00b      	beq.n	800af76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2204      	movs	r2, #4
 800af64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af6c:	f043 0202 	orr.w	r2, r3, #2
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7fe ff19 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	f040 80a3 	bne.w	800b0e2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800afaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	461a      	mov	r2, r3
 800afba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800afc0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800afc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800afcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e4      	bne.n	800af9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800afe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800afe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afe8:	f023 0301 	bic.w	r3, r3, #1
 800afec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3308      	adds	r3, #8
 800aff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800affa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800affc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b002:	e841 2300 	strex	r3, r2, [r1]
 800b006:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1e1      	bne.n	800afd2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a60      	ldr	r2, [pc, #384]	@ (800b1a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d021      	beq.n	800b070 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01a      	beq.n	800b070 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b04a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b04e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b05c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b05e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e4      	bne.n	800b03a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b074:	2b01      	cmp	r3, #1
 800b076:	d130      	bne.n	800b0da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08e:	f023 0310 	bic.w	r3, r3, #16
 800b092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e4      	bne.n	800b07e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	f003 0310 	and.w	r3, r3, #16
 800b0be:	2b10      	cmp	r3, #16
 800b0c0:	d103      	bne.n	800b0ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2210      	movs	r2, #16
 800b0c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fe fe7a 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b0d8:	e00e      	b.n	800b0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7f6 f9f0 	bl	80014c0 <HAL_UART_RxCpltCallback>
        break;
 800b0e0:	e00a      	b.n	800b0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0e2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f47f aece 	bne.w	800ae94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b102:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b106:	2b00      	cmp	r3, #0
 800b108:	d049      	beq.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x352>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b110:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b114:	429a      	cmp	r2, r3
 800b116:	d242      	bcs.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	61fb      	str	r3, [r7, #28]
   return(result);
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b12e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b13c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b13e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e3      	bne.n	800b118 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a16      	ldr	r2, [pc, #88]	@ (800b1ac <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b154:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	60bb      	str	r3, [r7, #8]
   return(result);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f043 0320 	orr.w	r3, r3, #32
 800b16a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	6979      	ldr	r1, [r7, #20]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	613b      	str	r3, [r7, #16]
   return(result);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e4      	bne.n	800b156 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b18c:	e007      	b.n	800b19e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	699a      	ldr	r2, [r3, #24]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f042 0208 	orr.w	r2, r2, #8
 800b19c:	619a      	str	r2, [r3, #24]
}
 800b19e:	bf00      	nop
 800b1a0:	37b0      	adds	r7, #176	@ 0xb0
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	40008000 	.word	0x40008000
 800b1ac:	0800aadd 	.word	0x0800aadd

0800b1b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b0ae      	sub	sp, #184	@ 0xb8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b1be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1e6:	2b22      	cmp	r3, #34	@ 0x22
 800b1e8:	f040 8187 	bne.w	800b4fa <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1f6:	e12a      	b.n	800b44e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b20a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b20e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b212:	4013      	ands	r3, r2
 800b214:	b29a      	uxth	r2, r3
 800b216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b21a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b220:	1c9a      	adds	r2, r3, #2
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d053      	beq.n	800b2f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d011      	beq.n	800b27e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b25a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2201      	movs	r2, #1
 800b26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b274:	f043 0201 	orr.w	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b27e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b282:	f003 0302 	and.w	r3, r3, #2
 800b286:	2b00      	cmp	r3, #0
 800b288:	d011      	beq.n	800b2ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b28a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2202      	movs	r2, #2
 800b29c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a4:	f043 0204 	orr.w	r2, r3, #4
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d011      	beq.n	800b2de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b2ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2d4:	f043 0202 	orr.w	r2, r3, #2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7fe fd65 	bl	8009db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f040 80a5 	bne.w	800b44e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	461a      	mov	r2, r3
 800b322:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b32a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b32e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b332:	e841 2300 	strex	r3, r2, [r1]
 800b336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1e2      	bne.n	800b304 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b354:	f023 0301 	bic.w	r3, r3, #1
 800b358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3308      	adds	r3, #8
 800b362:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b36c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e1      	bne.n	800b33e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2220      	movs	r2, #32
 800b37e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a60      	ldr	r2, [pc, #384]	@ (800b514 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d021      	beq.n	800b3dc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d01a      	beq.n	800b3dc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ae:	e853 3f00 	ldrex	r3, [r3]
 800b3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b3c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3d0:	e841 2300 	strex	r3, r2, [r1]
 800b3d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e4      	bne.n	800b3a6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d130      	bne.n	800b446 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	e853 3f00 	ldrex	r3, [r3]
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fa:	f023 0310 	bic.w	r3, r3, #16
 800b3fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b40e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e4      	bne.n	800b3ea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	f003 0310 	and.w	r3, r3, #16
 800b42a:	2b10      	cmp	r3, #16
 800b42c:	d103      	bne.n	800b436 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2210      	movs	r2, #16
 800b434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fe fcc4 	bl	8009dcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b444:	e00e      	b.n	800b464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7f6 f83a 	bl	80014c0 <HAL_UART_RxCpltCallback>
        break;
 800b44c:	e00a      	b.n	800b464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b44e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b452:	2b00      	cmp	r3, #0
 800b454:	d006      	beq.n	800b464 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b45a:	f003 0320 	and.w	r3, r3, #32
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f aeca 	bne.w	800b1f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b46a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b46e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b472:	2b00      	cmp	r3, #0
 800b474:	d049      	beq.n	800b50a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b47c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b480:	429a      	cmp	r2, r3
 800b482:	d242      	bcs.n	800b50a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3308      	adds	r3, #8
 800b48a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	623b      	str	r3, [r7, #32]
   return(result);
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b49a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b4a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e3      	bne.n	800b484 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a16      	ldr	r2, [pc, #88]	@ (800b518 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b4c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f043 0320 	orr.w	r3, r3, #32
 800b4d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	69b9      	ldr	r1, [r7, #24]
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e4      	bne.n	800b4c2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4f8:	e007      	b.n	800b50a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	699a      	ldr	r2, [r3, #24]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f042 0208 	orr.w	r2, r2, #8
 800b508:	619a      	str	r2, [r3, #24]
}
 800b50a:	bf00      	nop
 800b50c:	37b8      	adds	r7, #184	@ 0xb8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	40008000 	.word	0x40008000
 800b518:	0800ac95 	.word	0x0800ac95

0800b51c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b566:	2b01      	cmp	r3, #1
 800b568:	d101      	bne.n	800b56e <HAL_UARTEx_DisableFifoMode+0x16>
 800b56a:	2302      	movs	r3, #2
 800b56c:	e027      	b.n	800b5be <HAL_UARTEx_DisableFifoMode+0x66>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2224      	movs	r2, #36	@ 0x24
 800b57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f022 0201 	bic.w	r2, r2, #1
 800b594:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b59c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e02d      	b.n	800b63e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2224      	movs	r2, #36	@ 0x24
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0201 	bic.w	r2, r2, #1
 800b608:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f850 	bl	800b6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e02d      	b.n	800b6ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2224      	movs	r2, #36	@ 0x24
 800b66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0201 	bic.w	r2, r2, #1
 800b684:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f812 	bl	800b6c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d108      	bne.n	800b6e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b6e4:	e031      	b.n	800b74a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b6ea:	2308      	movs	r3, #8
 800b6ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	0e5b      	lsrs	r3, r3, #25
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	f003 0307 	and.w	r3, r3, #7
 800b6fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	0f5b      	lsrs	r3, r3, #29
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f003 0307 	and.w	r3, r3, #7
 800b70c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	7b3a      	ldrb	r2, [r7, #12]
 800b712:	4911      	ldr	r1, [pc, #68]	@ (800b758 <UARTEx_SetNbDataToProcess+0x94>)
 800b714:	5c8a      	ldrb	r2, [r1, r2]
 800b716:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b71a:	7b3a      	ldrb	r2, [r7, #12]
 800b71c:	490f      	ldr	r1, [pc, #60]	@ (800b75c <UARTEx_SetNbDataToProcess+0x98>)
 800b71e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b720:	fb93 f3f2 	sdiv	r3, r3, r2
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	7b7a      	ldrb	r2, [r7, #13]
 800b730:	4909      	ldr	r1, [pc, #36]	@ (800b758 <UARTEx_SetNbDataToProcess+0x94>)
 800b732:	5c8a      	ldrb	r2, [r1, r2]
 800b734:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b738:	7b7a      	ldrb	r2, [r7, #13]
 800b73a:	4908      	ldr	r1, [pc, #32]	@ (800b75c <UARTEx_SetNbDataToProcess+0x98>)
 800b73c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b73e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b742:	b29a      	uxth	r2, r3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	08010200 	.word	0x08010200
 800b75c:	08010208 	.word	0x08010208

0800b760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b770:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b774:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	b29a      	uxth	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b796:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b79a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	43db      	mvns	r3, r3
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	1d3b      	adds	r3, r7, #4
 800b7ce:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b800:	b480      	push	{r7}
 800b802:	b0a7      	sub	sp, #156	@ 0x9c
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b826:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	78db      	ldrb	r3, [r3, #3]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d81f      	bhi.n	800b872 <USB_ActivateEndpoint+0x72>
 800b832:	a201      	add	r2, pc, #4	@ (adr r2, 800b838 <USB_ActivateEndpoint+0x38>)
 800b834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b838:	0800b849 	.word	0x0800b849
 800b83c:	0800b865 	.word	0x0800b865
 800b840:	0800b87b 	.word	0x0800b87b
 800b844:	0800b857 	.word	0x0800b857
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b848:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b84c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b850:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b854:	e012      	b.n	800b87c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b856:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b85a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b85e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b862:	e00b      	b.n	800b87c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b864:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b868:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b86c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b870:	e004      	b.n	800b87c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b878:	e000      	b.n	800b87c <USB_ActivateEndpoint+0x7c>
      break;
 800b87a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	441a      	add	r2, r3
 800b886:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b88a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b88e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	b21b      	sxth	r3, r3
 800b8ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8b6:	b21a      	sxth	r2, r3
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b21b      	sxth	r3, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	b21b      	sxth	r3, r3
 800b8c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	441a      	add	r2, r3
 800b8d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	7b1b      	ldrb	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 8180 	bne.w	800bbf2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	785b      	ldrb	r3, [r3, #1]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 8084 	beq.w	800ba04 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b906:	b29b      	uxth	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	4413      	add	r3, r2
 800b90e:	61bb      	str	r3, [r7, #24]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	00da      	lsls	r2, r3, #3
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	88db      	ldrh	r3, [r3, #6]
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	b29b      	uxth	r3, r3
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	827b      	strh	r3, [r7, #18]
 800b93e:	8a7b      	ldrh	r3, [r7, #18]
 800b940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01b      	beq.n	800b980 <USB_ActivateEndpoint+0x180>
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4413      	add	r3, r2
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b29b      	uxth	r3, r3
 800b956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b95a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b95e:	823b      	strh	r3, [r7, #16]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	441a      	add	r2, r3
 800b96a:	8a3b      	ldrh	r3, [r7, #16]
 800b96c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b978:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	78db      	ldrb	r3, [r3, #3]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d020      	beq.n	800b9ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b99a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b99e:	81bb      	strh	r3, [r7, #12]
 800b9a0:	89bb      	ldrh	r3, [r7, #12]
 800b9a2:	f083 0320 	eor.w	r3, r3, #32
 800b9a6:	81bb      	strh	r3, [r7, #12]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	441a      	add	r2, r3
 800b9b2:	89bb      	ldrh	r3, [r7, #12]
 800b9b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	8013      	strh	r3, [r2, #0]
 800b9c8:	e3f9      	b.n	800c1be <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9e0:	81fb      	strh	r3, [r7, #14]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	441a      	add	r2, r3
 800b9ec:	89fb      	ldrh	r3, [r7, #14]
 800b9ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	8013      	strh	r3, [r2, #0]
 800ba02:	e3dc      	b.n	800c1be <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	4413      	add	r3, r2
 800ba16:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	00da      	lsls	r2, r3, #3
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	4413      	add	r3, r2
 800ba22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ba26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba48:	4413      	add	r3, r2
 800ba4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	00da      	lsls	r2, r3, #3
 800ba52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba54:	4413      	add	r3, r2
 800ba56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	801a      	strh	r2, [r3, #0]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <USB_ActivateEndpoint+0x28a>
 800ba74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	801a      	strh	r2, [r3, #0]
 800ba88:	e041      	b.n	800bb0e <USB_ActivateEndpoint+0x30e>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba90:	d81c      	bhi.n	800bacc <USB_ActivateEndpoint+0x2cc>
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	085b      	lsrs	r3, r3, #1
 800ba98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d004      	beq.n	800bab2 <USB_ActivateEndpoint+0x2b2>
 800baa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800baac:	3301      	adds	r3, #1
 800baae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800babc:	b29b      	uxth	r3, r3
 800babe:	029b      	lsls	r3, r3, #10
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	4313      	orrs	r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	801a      	strh	r2, [r3, #0]
 800baca:	e020      	b.n	800bb0e <USB_ActivateEndpoint+0x30e>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	095b      	lsrs	r3, r3, #5
 800bad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	f003 031f 	and.w	r3, r3, #31
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d104      	bne.n	800baec <USB_ActivateEndpoint+0x2ec>
 800bae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800baec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	029b      	lsls	r3, r3, #10
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	4313      	orrs	r3, r2
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bb1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d01b      	beq.n	800bb5e <USB_ActivateEndpoint+0x35e>
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4413      	add	r3, r2
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb3c:	843b      	strh	r3, [r7, #32]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	441a      	add	r2, r3
 800bb48:	8c3b      	ldrh	r3, [r7, #32]
 800bb4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d124      	bne.n	800bbb0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb7c:	83bb      	strh	r3, [r7, #28]
 800bb7e:	8bbb      	ldrh	r3, [r7, #28]
 800bb80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bb84:	83bb      	strh	r3, [r7, #28]
 800bb86:	8bbb      	ldrh	r3, [r7, #28]
 800bb88:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bb8c:	83bb      	strh	r3, [r7, #28]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	441a      	add	r2, r3
 800bb98:	8bbb      	ldrh	r3, [r7, #28]
 800bb9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	8013      	strh	r3, [r2, #0]
 800bbae:	e306      	b.n	800c1be <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbc6:	83fb      	strh	r3, [r7, #30]
 800bbc8:	8bfb      	ldrh	r3, [r7, #30]
 800bbca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bbce:	83fb      	strh	r3, [r7, #30]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	441a      	add	r2, r3
 800bbda:	8bfb      	ldrh	r3, [r7, #30]
 800bbdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	8013      	strh	r3, [r2, #0]
 800bbf0:	e2e5      	b.n	800c1be <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	78db      	ldrb	r3, [r3, #3]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d11e      	bne.n	800bc38 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc10:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	441a      	add	r2, r3
 800bc1e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800bc22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	8013      	strh	r3, [r2, #0]
 800bc36:	e01d      	b.n	800bc74 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bc4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc4e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	441a      	add	r2, r3
 800bc5c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800bc60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	461a      	mov	r2, r3
 800bc82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc84:	4413      	add	r3, r2
 800bc86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	00da      	lsls	r2, r3, #3
 800bc8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bc96:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	891b      	ldrh	r3, [r3, #8]
 800bc9c:	085b      	lsrs	r3, r3, #1
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bca6:	801a      	strh	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcb8:	4413      	add	r3, r2
 800bcba:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	00da      	lsls	r2, r3, #3
 800bcc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bcca:	673b      	str	r3, [r7, #112]	@ 0x70
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	895b      	ldrh	r3, [r3, #10]
 800bcd0:	085b      	lsrs	r3, r3, #1
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f040 81af 	bne.w	800c044 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800bcf6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800bcfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01d      	beq.n	800bd3e <USB_ActivateEndpoint+0x53e>
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	881b      	ldrh	r3, [r3, #0]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd18:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	441a      	add	r2, r3
 800bd26:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bd2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800bd4e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800bd52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01d      	beq.n	800bd96 <USB_ActivateEndpoint+0x596>
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd70:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800bd82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	785b      	ldrb	r3, [r3, #1]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d16b      	bne.n	800be76 <USB_ActivateEndpoint+0x676>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdae:	4413      	add	r3, r2
 800bdb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	00da      	lsls	r2, r3, #3
 800bdb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdba:	4413      	add	r3, r2
 800bdbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bdc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdd0:	801a      	strh	r2, [r3, #0]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <USB_ActivateEndpoint+0x5f0>
 800bdda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdec:	801a      	strh	r2, [r3, #0]
 800bdee:	e05d      	b.n	800beac <USB_ActivateEndpoint+0x6ac>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdf6:	d81c      	bhi.n	800be32 <USB_ActivateEndpoint+0x632>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d004      	beq.n	800be18 <USB_ActivateEndpoint+0x618>
 800be0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be12:	3301      	adds	r3, #1
 800be14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be22:	b29b      	uxth	r3, r3
 800be24:	029b      	lsls	r3, r3, #10
 800be26:	b29b      	uxth	r3, r3
 800be28:	4313      	orrs	r3, r2
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be2e:	801a      	strh	r2, [r3, #0]
 800be30:	e03c      	b.n	800beac <USB_ActivateEndpoint+0x6ac>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	095b      	lsrs	r3, r3, #5
 800be38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	f003 031f 	and.w	r3, r3, #31
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <USB_ActivateEndpoint+0x652>
 800be48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be4c:	3b01      	subs	r3, #1
 800be4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	b29a      	uxth	r2, r3
 800be58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	029b      	lsls	r3, r3, #10
 800be60:	b29b      	uxth	r3, r3
 800be62:	4313      	orrs	r3, r2
 800be64:	b29b      	uxth	r3, r3
 800be66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be6e:	b29a      	uxth	r2, r3
 800be70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be72:	801a      	strh	r2, [r3, #0]
 800be74:	e01a      	b.n	800beac <USB_ActivateEndpoint+0x6ac>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d116      	bne.n	800beac <USB_ActivateEndpoint+0x6ac>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	657b      	str	r3, [r7, #84]	@ 0x54
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be88:	b29b      	uxth	r3, r3
 800be8a:	461a      	mov	r2, r3
 800be8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8e:	4413      	add	r3, r2
 800be90:	657b      	str	r3, [r7, #84]	@ 0x54
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	00da      	lsls	r2, r3, #3
 800be98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be9a:	4413      	add	r3, r2
 800be9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bea0:	653b      	str	r3, [r7, #80]	@ 0x50
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beaa:	801a      	strh	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	647b      	str	r3, [r7, #68]	@ 0x44
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785b      	ldrb	r3, [r3, #1]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d16b      	bne.n	800bf90 <USB_ActivateEndpoint+0x790>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	461a      	mov	r2, r3
 800bec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec8:	4413      	add	r3, r2
 800beca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	00da      	lsls	r2, r3, #3
 800bed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed4:	4413      	add	r3, r2
 800bed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800beda:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beea:	801a      	strh	r2, [r3, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <USB_ActivateEndpoint+0x70a>
 800bef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800befe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf06:	801a      	strh	r2, [r3, #0]
 800bf08:	e05b      	b.n	800bfc2 <USB_ActivateEndpoint+0x7c2>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf10:	d81c      	bhi.n	800bf4c <USB_ActivateEndpoint+0x74c>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	085b      	lsrs	r3, r3, #1
 800bf18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <USB_ActivateEndpoint+0x732>
 800bf28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	029b      	lsls	r3, r3, #10
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf48:	801a      	strh	r2, [r3, #0]
 800bf4a:	e03a      	b.n	800bfc2 <USB_ActivateEndpoint+0x7c2>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	095b      	lsrs	r3, r3, #5
 800bf52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	f003 031f 	and.w	r3, r3, #31
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d104      	bne.n	800bf6c <USB_ActivateEndpoint+0x76c>
 800bf62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf66:	3b01      	subs	r3, #1
 800bf68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	029b      	lsls	r3, r3, #10
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8c:	801a      	strh	r2, [r3, #0]
 800bf8e:	e018      	b.n	800bfc2 <USB_ActivateEndpoint+0x7c2>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	785b      	ldrb	r3, [r3, #1]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d114      	bne.n	800bfc2 <USB_ActivateEndpoint+0x7c2>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfa4:	4413      	add	r3, r2
 800bfa6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	00da      	lsls	r2, r3, #3
 800bfae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bfd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bfda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bfe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bfe2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfe4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bfe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	441a      	add	r2, r3
 800bff4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c006:	b29b      	uxth	r3, r3
 800c008:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	b29b      	uxth	r3, r3
 800c018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c01c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c020:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	441a      	add	r2, r3
 800c02c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c02e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c03e:	b29b      	uxth	r3, r3
 800c040:	8013      	strh	r3, [r2, #0]
 800c042:	e0bc      	b.n	800c1be <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c054:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01d      	beq.n	800c09c <USB_ActivateEndpoint+0x89c>
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c076:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	441a      	add	r2, r3
 800c084:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c08c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c098:	b29b      	uxth	r3, r3
 800c09a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c0ac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d01d      	beq.n	800c0f4 <USB_ActivateEndpoint+0x8f4>
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ce:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	441a      	add	r2, r3
 800c0dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	78db      	ldrb	r3, [r3, #3]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d024      	beq.n	800c146 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c10e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c112:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c116:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c11a:	f083 0320 	eor.w	r3, r3, #32
 800c11e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	441a      	add	r2, r3
 800c12c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c140:	b29b      	uxth	r3, r3
 800c142:	8013      	strh	r3, [r2, #0]
 800c144:	e01d      	b.n	800c182 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c15c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	441a      	add	r2, r3
 800c16a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c16e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c17e:	b29b      	uxth	r3, r3
 800c180:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	881b      	ldrh	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c198:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	441a      	add	r2, r3
 800c1a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c1aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c1be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	379c      	adds	r7, #156	@ 0x9c
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop

0800c1d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b08d      	sub	sp, #52	@ 0x34
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	7b1b      	ldrb	r3, [r3, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f040 808e 	bne.w	800c300 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	785b      	ldrb	r3, [r3, #1]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d044      	beq.n	800c276 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	81bb      	strh	r3, [r7, #12]
 800c1fa:	89bb      	ldrh	r3, [r7, #12]
 800c1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c200:	2b00      	cmp	r3, #0
 800c202:	d01b      	beq.n	800c23c <USB_DeactivateEndpoint+0x6c>
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	b29b      	uxth	r3, r3
 800c212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c21a:	817b      	strh	r3, [r7, #10]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	441a      	add	r2, r3
 800c226:	897b      	ldrh	r3, [r7, #10]
 800c228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c22c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c234:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c238:	b29b      	uxth	r3, r3
 800c23a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c24e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c252:	813b      	strh	r3, [r7, #8]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	441a      	add	r2, r3
 800c25e:	893b      	ldrh	r3, [r7, #8]
 800c260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c26c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c270:	b29b      	uxth	r3, r3
 800c272:	8013      	strh	r3, [r2, #0]
 800c274:	e192      	b.n	800c59c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	827b      	strh	r3, [r7, #18]
 800c284:	8a7b      	ldrh	r3, [r7, #18]
 800c286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d01b      	beq.n	800c2c6 <USB_DeactivateEndpoint+0xf6>
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2a4:	823b      	strh	r3, [r7, #16]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	441a      	add	r2, r3
 800c2b0:	8a3b      	ldrh	r3, [r7, #16]
 800c2b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2dc:	81fb      	strh	r3, [r7, #14]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	441a      	add	r2, r3
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	8013      	strh	r3, [r2, #0]
 800c2fe:	e14d      	b.n	800c59c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	785b      	ldrb	r3, [r3, #1]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f040 80a5 	bne.w	800c454 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	843b      	strh	r3, [r7, #32]
 800c318:	8c3b      	ldrh	r3, [r7, #32]
 800c31a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01b      	beq.n	800c35a <USB_DeactivateEndpoint+0x18a>
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	881b      	ldrh	r3, [r3, #0]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c338:	83fb      	strh	r3, [r7, #30]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	441a      	add	r2, r3
 800c344:	8bfb      	ldrh	r3, [r7, #30]
 800c346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c34e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c356:	b29b      	uxth	r3, r3
 800c358:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	4413      	add	r3, r2
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	83bb      	strh	r3, [r7, #28]
 800c368:	8bbb      	ldrh	r3, [r7, #28]
 800c36a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01b      	beq.n	800c3aa <USB_DeactivateEndpoint+0x1da>
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	b29b      	uxth	r3, r3
 800c380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c388:	837b      	strh	r3, [r7, #26]
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	441a      	add	r2, r3
 800c394:	8b7b      	ldrh	r3, [r7, #26]
 800c396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c39a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c39e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3c0:	833b      	strh	r3, [r7, #24]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	441a      	add	r2, r3
 800c3cc:	8b3b      	ldrh	r3, [r7, #24]
 800c3ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3f8:	82fb      	strh	r3, [r7, #22]
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	441a      	add	r2, r3
 800c404:	8afb      	ldrh	r3, [r7, #22]
 800c406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c416:	b29b      	uxth	r3, r3
 800c418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	4413      	add	r3, r2
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	b29b      	uxth	r3, r3
 800c428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c430:	82bb      	strh	r3, [r7, #20]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	441a      	add	r2, r3
 800c43c:	8abb      	ldrh	r3, [r7, #20]
 800c43e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c44e:	b29b      	uxth	r3, r3
 800c450:	8013      	strh	r3, [r2, #0]
 800c452:	e0a3      	b.n	800c59c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c462:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01b      	beq.n	800c4a4 <USB_DeactivateEndpoint+0x2d4>
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c47e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c482:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	441a      	add	r2, r3
 800c48e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c49c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c4b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01b      	beq.n	800c4f4 <USB_DeactivateEndpoint+0x324>
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	441a      	add	r2, r3
 800c4de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c4e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	b29b      	uxth	r3, r3
 800c502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c50a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	441a      	add	r2, r3
 800c516:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c51c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c528:	b29b      	uxth	r3, r3
 800c52a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c53e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c542:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	441a      	add	r2, r3
 800c54e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c55c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c560:	b29b      	uxth	r3, r3
 800c562:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c57a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	441a      	add	r2, r3
 800c586:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c58c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c598:	b29b      	uxth	r3, r3
 800c59a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3734      	adds	r7, #52	@ 0x34
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b0ac      	sub	sp, #176	@ 0xb0
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	785b      	ldrb	r3, [r3, #1]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	f040 84ca 	bne.w	800cf52 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d904      	bls.n	800c5d4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c5d2:	e003      	b.n	800c5dc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	7b1b      	ldrb	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d122      	bne.n	800c62a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	6959      	ldr	r1, [r3, #20]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	88da      	ldrh	r2, [r3, #6]
 800c5ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 febd 	bl	800d372 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	613b      	str	r3, [r7, #16]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c602:	b29b      	uxth	r3, r3
 800c604:	461a      	mov	r2, r3
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	4413      	add	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	00da      	lsls	r2, r3, #3
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	4413      	add	r3, r2
 800c616:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c620:	b29a      	uxth	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	801a      	strh	r2, [r3, #0]
 800c626:	f000 bc6f 	b.w	800cf08 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	78db      	ldrb	r3, [r3, #3]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	f040 831e 	bne.w	800cc70 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	6a1a      	ldr	r2, [r3, #32]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	f240 82cf 	bls.w	800cbe0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c658:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	441a      	add	r2, r3
 800c666:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c66a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c66e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c672:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	6a1a      	ldr	r2, [r3, #32]
 800c682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c686:	1ad2      	subs	r2, r2, r3
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	4413      	add	r3, r2
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	b29b      	uxth	r3, r3
 800c69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 814f 	beq.w	800c942 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	785b      	ldrb	r3, [r3, #1]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d16b      	bne.n	800c788 <USB_EPStartXfer+0x1de>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	461a      	mov	r2, r3
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	4413      	add	r3, r2
 800c6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	00da      	lsls	r2, r3, #3
 800c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	801a      	strh	r2, [r3, #0]
 800c6e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10a      	bne.n	800c702 <USB_EPStartXfer+0x158>
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	801a      	strh	r2, [r3, #0]
 800c700:	e05b      	b.n	800c7ba <USB_EPStartXfer+0x210>
 800c702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c706:	2b3e      	cmp	r3, #62	@ 0x3e
 800c708:	d81c      	bhi.n	800c744 <USB_EPStartXfer+0x19a>
 800c70a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c70e:	085b      	lsrs	r3, r3, #1
 800c710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d004      	beq.n	800c72a <USB_EPStartXfer+0x180>
 800c720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c724:	3301      	adds	r3, #1
 800c726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c734:	b29b      	uxth	r3, r3
 800c736:	029b      	lsls	r3, r3, #10
 800c738:	b29b      	uxth	r3, r3
 800c73a:	4313      	orrs	r3, r2
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c740:	801a      	strh	r2, [r3, #0]
 800c742:	e03a      	b.n	800c7ba <USB_EPStartXfer+0x210>
 800c744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c748:	095b      	lsrs	r3, r3, #5
 800c74a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c74e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c752:	f003 031f 	and.w	r3, r3, #31
 800c756:	2b00      	cmp	r3, #0
 800c758:	d104      	bne.n	800c764 <USB_EPStartXfer+0x1ba>
 800c75a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c75e:	3b01      	subs	r3, #1
 800c760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c76e:	b29b      	uxth	r3, r3
 800c770:	029b      	lsls	r3, r3, #10
 800c772:	b29b      	uxth	r3, r3
 800c774:	4313      	orrs	r3, r2
 800c776:	b29b      	uxth	r3, r3
 800c778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c77c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c780:	b29a      	uxth	r2, r3
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	801a      	strh	r2, [r3, #0]
 800c786:	e018      	b.n	800c7ba <USB_EPStartXfer+0x210>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d114      	bne.n	800c7ba <USB_EPStartXfer+0x210>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c796:	b29b      	uxth	r3, r3
 800c798:	461a      	mov	r2, r3
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	4413      	add	r3, r2
 800c79e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	00da      	lsls	r2, r3, #3
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	895b      	ldrh	r3, [r3, #10]
 800c7be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	6959      	ldr	r1, [r3, #20]
 800c7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fdce 	bl	800d372 <USB_WritePMA>
            ep->xfer_buff += len;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	695a      	ldr	r2, [r3, #20]
 800c7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7de:	441a      	add	r2, r3
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	6a1a      	ldr	r2, [r3, #32]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d907      	bls.n	800c800 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	6a1a      	ldr	r2, [r3, #32]
 800c7f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7f8:	1ad2      	subs	r2, r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	621a      	str	r2, [r3, #32]
 800c7fe:	e006      	b.n	800c80e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	785b      	ldrb	r3, [r3, #1]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d16b      	bne.n	800c8ee <USB_EPStartXfer+0x344>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	61bb      	str	r3, [r7, #24]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c820:	b29b      	uxth	r3, r3
 800c822:	461a      	mov	r2, r3
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	4413      	add	r3, r2
 800c828:	61bb      	str	r3, [r7, #24]
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	00da      	lsls	r2, r3, #3
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	4413      	add	r3, r2
 800c834:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	b29b      	uxth	r3, r3
 800c840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c844:	b29a      	uxth	r2, r3
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	801a      	strh	r2, [r3, #0]
 800c84a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <USB_EPStartXfer+0x2be>
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c85c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c860:	b29a      	uxth	r2, r3
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	801a      	strh	r2, [r3, #0]
 800c866:	e05d      	b.n	800c924 <USB_EPStartXfer+0x37a>
 800c868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c86c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c86e:	d81c      	bhi.n	800c8aa <USB_EPStartXfer+0x300>
 800c870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c874:	085b      	lsrs	r3, r3, #1
 800c876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c87a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	2b00      	cmp	r3, #0
 800c884:	d004      	beq.n	800c890 <USB_EPStartXfer+0x2e6>
 800c886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c88a:	3301      	adds	r3, #1
 800c88c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	b29a      	uxth	r2, r3
 800c896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	029b      	lsls	r3, r3, #10
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	801a      	strh	r2, [r3, #0]
 800c8a8:	e03c      	b.n	800c924 <USB_EPStartXfer+0x37a>
 800c8aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8ae:	095b      	lsrs	r3, r3, #5
 800c8b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c8b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d104      	bne.n	800c8ca <USB_EPStartXfer+0x320>
 800c8c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	029b      	lsls	r3, r3, #10
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	801a      	strh	r2, [r3, #0]
 800c8ec:	e01a      	b.n	800c924 <USB_EPStartXfer+0x37a>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d116      	bne.n	800c924 <USB_EPStartXfer+0x37a>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	623b      	str	r3, [r7, #32]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c900:	b29b      	uxth	r3, r3
 800c902:	461a      	mov	r2, r3
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	4413      	add	r3, r2
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	00da      	lsls	r2, r3, #3
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	4413      	add	r3, r2
 800c914:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c918:	61fb      	str	r3, [r7, #28]
 800c91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c91e:	b29a      	uxth	r2, r3
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	891b      	ldrh	r3, [r3, #8]
 800c928:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	6959      	ldr	r1, [r3, #20]
 800c930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c934:	b29b      	uxth	r3, r3
 800c936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fd19 	bl	800d372 <USB_WritePMA>
 800c940:	e2e2      	b.n	800cf08 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	785b      	ldrb	r3, [r3, #1]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d16b      	bne.n	800ca22 <USB_EPStartXfer+0x478>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c954:	b29b      	uxth	r3, r3
 800c956:	461a      	mov	r2, r3
 800c958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c95a:	4413      	add	r3, r2
 800c95c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	00da      	lsls	r2, r3, #3
 800c964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c966:	4413      	add	r3, r2
 800c968:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c96c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c978:	b29a      	uxth	r2, r3
 800c97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c97c:	801a      	strh	r2, [r3, #0]
 800c97e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <USB_EPStartXfer+0x3f2>
 800c986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c994:	b29a      	uxth	r2, r3
 800c996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c998:	801a      	strh	r2, [r3, #0]
 800c99a:	e05d      	b.n	800ca58 <USB_EPStartXfer+0x4ae>
 800c99c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9a2:	d81c      	bhi.n	800c9de <USB_EPStartXfer+0x434>
 800c9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c9ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <USB_EPStartXfer+0x41a>
 800c9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9be:	3301      	adds	r3, #1
 800c9c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	029b      	lsls	r3, r3, #10
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	e03c      	b.n	800ca58 <USB_EPStartXfer+0x4ae>
 800c9de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9e2:	095b      	lsrs	r3, r3, #5
 800c9e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c9e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ec:	f003 031f 	and.w	r3, r3, #31
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <USB_EPStartXfer+0x454>
 800c9f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	029b      	lsls	r3, r3, #10
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca1e:	801a      	strh	r2, [r3, #0]
 800ca20:	e01a      	b.n	800ca58 <USB_EPStartXfer+0x4ae>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	785b      	ldrb	r3, [r3, #1]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d116      	bne.n	800ca58 <USB_EPStartXfer+0x4ae>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	461a      	mov	r2, r3
 800ca38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca3a:	4413      	add	r3, r2
 800ca3c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	00da      	lsls	r2, r3, #3
 800ca44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca46:	4413      	add	r3, r2
 800ca48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	891b      	ldrh	r3, [r3, #8]
 800ca5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	6959      	ldr	r1, [r3, #20]
 800ca64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fc7f 	bl	800d372 <USB_WritePMA>
            ep->xfer_buff += len;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	695a      	ldr	r2, [r3, #20]
 800ca78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca7c:	441a      	add	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	6a1a      	ldr	r2, [r3, #32]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d907      	bls.n	800ca9e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	6a1a      	ldr	r2, [r3, #32]
 800ca92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca96:	1ad2      	subs	r2, r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	621a      	str	r2, [r3, #32]
 800ca9c:	e006      	b.n	800caac <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2200      	movs	r2, #0
 800caaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	643b      	str	r3, [r7, #64]	@ 0x40
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d16b      	bne.n	800cb90 <USB_EPStartXfer+0x5e6>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	461a      	mov	r2, r3
 800cac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac8:	4413      	add	r3, r2
 800caca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	00da      	lsls	r2, r3, #3
 800cad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad4:	4413      	add	r3, r2
 800cad6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cada:	637b      	str	r3, [r7, #52]	@ 0x34
 800cadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caea:	801a      	strh	r2, [r3, #0]
 800caec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10a      	bne.n	800cb0a <USB_EPStartXfer+0x560>
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cafe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb06:	801a      	strh	r2, [r3, #0]
 800cb08:	e05b      	b.n	800cbc2 <USB_EPStartXfer+0x618>
 800cb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb10:	d81c      	bhi.n	800cb4c <USB_EPStartXfer+0x5a2>
 800cb12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb16:	085b      	lsrs	r3, r3, #1
 800cb18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d004      	beq.n	800cb32 <USB_EPStartXfer+0x588>
 800cb28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	029b      	lsls	r3, r3, #10
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	4313      	orrs	r3, r2
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb48:	801a      	strh	r2, [r3, #0]
 800cb4a:	e03a      	b.n	800cbc2 <USB_EPStartXfer+0x618>
 800cb4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb50:	095b      	lsrs	r3, r3, #5
 800cb52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d104      	bne.n	800cb6c <USB_EPStartXfer+0x5c2>
 800cb62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb66:	3b01      	subs	r3, #1
 800cb68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	029b      	lsls	r3, r3, #10
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8c:	801a      	strh	r2, [r3, #0]
 800cb8e:	e018      	b.n	800cbc2 <USB_EPStartXfer+0x618>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	785b      	ldrb	r3, [r3, #1]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d114      	bne.n	800cbc2 <USB_EPStartXfer+0x618>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba4:	4413      	add	r3, r2
 800cba6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	00da      	lsls	r2, r3, #3
 800cbae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	895b      	ldrh	r3, [r3, #10]
 800cbc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	6959      	ldr	r1, [r3, #20]
 800cbce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fbca 	bl	800d372 <USB_WritePMA>
 800cbde:	e193      	b.n	800cf08 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	881b      	ldrh	r3, [r3, #0]
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cbfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbfe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	441a      	add	r2, r3
 800cc0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800cc10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc34:	4413      	add	r3, r2
 800cc36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	00da      	lsls	r2, r3, #3
 800cc3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc40:	4413      	add	r3, r2
 800cc42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	891b      	ldrh	r3, [r3, #8]
 800cc56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6959      	ldr	r1, [r3, #20]
 800cc5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fb82 	bl	800d372 <USB_WritePMA>
 800cc6e:	e14b      	b.n	800cf08 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	6a1a      	ldr	r2, [r3, #32]
 800cc74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc78:	1ad2      	subs	r2, r2, r3
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 809a 	beq.w	800cdca <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	785b      	ldrb	r3, [r3, #1]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d16b      	bne.n	800cd7a <USB_EPStartXfer+0x7d0>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	461a      	mov	r2, r3
 800ccb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccb2:	4413      	add	r3, r2
 800ccb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	00da      	lsls	r2, r3, #3
 800ccbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ccc4:	667b      	str	r3, [r7, #100]	@ 0x64
 800ccc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccd4:	801a      	strh	r2, [r3, #0]
 800ccd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <USB_EPStartXfer+0x74a>
 800ccde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccf0:	801a      	strh	r2, [r3, #0]
 800ccf2:	e05b      	b.n	800cdac <USB_EPStartXfer+0x802>
 800ccf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccf8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccfa:	d81c      	bhi.n	800cd36 <USB_EPStartXfer+0x78c>
 800ccfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd00:	085b      	lsrs	r3, r3, #1
 800cd02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d004      	beq.n	800cd1c <USB_EPStartXfer+0x772>
 800cd12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd16:	3301      	adds	r3, #1
 800cd18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	029b      	lsls	r3, r3, #10
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd32:	801a      	strh	r2, [r3, #0]
 800cd34:	e03a      	b.n	800cdac <USB_EPStartXfer+0x802>
 800cd36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd3a:	095b      	lsrs	r3, r3, #5
 800cd3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd44:	f003 031f 	and.w	r3, r3, #31
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d104      	bne.n	800cd56 <USB_EPStartXfer+0x7ac>
 800cd4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd50:	3b01      	subs	r3, #1
 800cd52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	029b      	lsls	r3, r3, #10
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd76:	801a      	strh	r2, [r3, #0]
 800cd78:	e018      	b.n	800cdac <USB_EPStartXfer+0x802>
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d114      	bne.n	800cdac <USB_EPStartXfer+0x802>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd8e:	4413      	add	r3, r2
 800cd90:	673b      	str	r3, [r7, #112]	@ 0x70
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	00da      	lsls	r2, r3, #3
 800cd98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cda0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdaa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	895b      	ldrh	r3, [r3, #10]
 800cdb0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	6959      	ldr	r1, [r3, #20]
 800cdb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fad5 	bl	800d372 <USB_WritePMA>
 800cdc8:	e09e      	b.n	800cf08 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d16b      	bne.n	800ceaa <USB_EPStartXfer+0x900>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	461a      	mov	r2, r3
 800cde0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cde2:	4413      	add	r3, r2
 800cde4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	00da      	lsls	r2, r3, #3
 800cdec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cdee:	4413      	add	r3, r2
 800cdf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cdf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cdf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <USB_EPStartXfer+0x87a>
 800ce0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce20:	801a      	strh	r2, [r3, #0]
 800ce22:	e063      	b.n	800ceec <USB_EPStartXfer+0x942>
 800ce24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce28:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce2a:	d81c      	bhi.n	800ce66 <USB_EPStartXfer+0x8bc>
 800ce2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce30:	085b      	lsrs	r3, r3, #1
 800ce32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <USB_EPStartXfer+0x8a2>
 800ce42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce46:	3301      	adds	r3, #1
 800ce48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	029b      	lsls	r3, r3, #10
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce62:	801a      	strh	r2, [r3, #0]
 800ce64:	e042      	b.n	800ceec <USB_EPStartXfer+0x942>
 800ce66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce6a:	095b      	lsrs	r3, r3, #5
 800ce6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce74:	f003 031f 	and.w	r3, r3, #31
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <USB_EPStartXfer+0x8dc>
 800ce7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce80:	3b01      	subs	r3, #1
 800ce82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	029b      	lsls	r3, r3, #10
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	4313      	orrs	r3, r2
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cea6:	801a      	strh	r2, [r3, #0]
 800cea8:	e020      	b.n	800ceec <USB_EPStartXfer+0x942>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d11c      	bne.n	800ceec <USB_EPStartXfer+0x942>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	461a      	mov	r2, r3
 800cec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cec6:	4413      	add	r3, r2
 800cec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	00da      	lsls	r2, r3, #3
 800ced2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ced6:	4413      	add	r3, r2
 800ced8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cedc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ceea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	891b      	ldrh	r3, [r3, #8]
 800cef0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	6959      	ldr	r1, [r3, #20]
 800cef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fa35 	bl	800d372 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf1e:	817b      	strh	r3, [r7, #10]
 800cf20:	897b      	ldrh	r3, [r7, #10]
 800cf22:	f083 0310 	eor.w	r3, r3, #16
 800cf26:	817b      	strh	r3, [r7, #10]
 800cf28:	897b      	ldrh	r3, [r7, #10]
 800cf2a:	f083 0320 	eor.w	r3, r3, #32
 800cf2e:	817b      	strh	r3, [r7, #10]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	441a      	add	r2, r3
 800cf3a:	897b      	ldrh	r3, [r7, #10]
 800cf3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	8013      	strh	r3, [r2, #0]
 800cf50:	e0d5      	b.n	800d0fe <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	7b1b      	ldrb	r3, [r3, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d156      	bne.n	800d008 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d122      	bne.n	800cfa8 <USB_EPStartXfer+0x9fe>
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	78db      	ldrb	r3, [r3, #3]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d11e      	bne.n	800cfa8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf80:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	441a      	add	r2, r3
 800cf8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cf92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	8013      	strh	r3, [r2, #0]
 800cfa6:	e01d      	b.n	800cfe4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cfba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfbe:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	441a      	add	r2, r3
 800cfcc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800cfd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d907      	bls.n	800d000 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	699a      	ldr	r2, [r3, #24]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	1ad2      	subs	r2, r2, r3
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	619a      	str	r2, [r3, #24]
 800cffe:	e054      	b.n	800d0aa <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2200      	movs	r2, #0
 800d004:	619a      	str	r2, [r3, #24]
 800d006:	e050      	b.n	800d0aa <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	78db      	ldrb	r3, [r3, #3]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d142      	bne.n	800d096 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	69db      	ldr	r3, [r3, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d048      	beq.n	800d0aa <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d028:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d02c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <USB_EPStartXfer+0xa96>
 800d034:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10b      	bne.n	800d058 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d040:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d12e      	bne.n	800d0aa <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d04c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d054:	2b00      	cmp	r3, #0
 800d056:	d128      	bne.n	800d0aa <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4413      	add	r3, r2
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	b29b      	uxth	r3, r3
 800d066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d06e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	441a      	add	r2, r3
 800d07c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d08c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d090:	b29b      	uxth	r3, r3
 800d092:	8013      	strh	r3, [r2, #0]
 800d094:	e009      	b.n	800d0aa <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	78db      	ldrb	r3, [r3, #3]
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d103      	bne.n	800d0a6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	619a      	str	r2, [r3, #24]
 800d0a4:	e001      	b.n	800d0aa <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e02a      	b.n	800d100 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4413      	add	r3, r2
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d0c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d0c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d0d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d0d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d0d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	441a      	add	r2, r3
 800d0e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d0ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	37b0      	adds	r7, #176	@ 0xb0
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	785b      	ldrb	r3, [r3, #1]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d020      	beq.n	800d15c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4413      	add	r3, r2
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	b29b      	uxth	r3, r3
 800d128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d12c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d130:	81bb      	strh	r3, [r7, #12]
 800d132:	89bb      	ldrh	r3, [r7, #12]
 800d134:	f083 0310 	eor.w	r3, r3, #16
 800d138:	81bb      	strh	r3, [r7, #12]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	441a      	add	r2, r3
 800d144:	89bb      	ldrh	r3, [r7, #12]
 800d146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d156:	b29b      	uxth	r3, r3
 800d158:	8013      	strh	r3, [r2, #0]
 800d15a:	e01f      	b.n	800d19c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	b29b      	uxth	r3, r3
 800d16a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d172:	81fb      	strh	r3, [r7, #14]
 800d174:	89fb      	ldrh	r3, [r7, #14]
 800d176:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d17a:	81fb      	strh	r3, [r7, #14]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	441a      	add	r2, r3
 800d186:	89fb      	ldrh	r3, [r7, #14]
 800d188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d18c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d198:	b29b      	uxth	r3, r3
 800d19a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b087      	sub	sp, #28
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	785b      	ldrb	r3, [r3, #1]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d04c      	beq.n	800d256 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4413      	add	r3, r2
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	823b      	strh	r3, [r7, #16]
 800d1ca:	8a3b      	ldrh	r3, [r7, #16]
 800d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01b      	beq.n	800d20c <USB_EPClearStall+0x62>
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1ea:	81fb      	strh	r3, [r7, #14]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	441a      	add	r2, r3
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d204:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d208:	b29b      	uxth	r3, r3
 800d20a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	78db      	ldrb	r3, [r3, #3]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d06c      	beq.n	800d2ee <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	b29b      	uxth	r3, r3
 800d222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d22a:	81bb      	strh	r3, [r7, #12]
 800d22c:	89bb      	ldrh	r3, [r7, #12]
 800d22e:	f083 0320 	eor.w	r3, r3, #32
 800d232:	81bb      	strh	r3, [r7, #12]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	441a      	add	r2, r3
 800d23e:	89bb      	ldrh	r3, [r7, #12]
 800d240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d24c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d250:	b29b      	uxth	r3, r3
 800d252:	8013      	strh	r3, [r2, #0]
 800d254:	e04b      	b.n	800d2ee <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	82fb      	strh	r3, [r7, #22]
 800d264:	8afb      	ldrh	r3, [r7, #22]
 800d266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d01b      	beq.n	800d2a6 <USB_EPClearStall+0xfc>
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d284:	82bb      	strh	r3, [r7, #20]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	441a      	add	r2, r3
 800d290:	8abb      	ldrh	r3, [r7, #20]
 800d292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d29a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2bc:	827b      	strh	r3, [r7, #18]
 800d2be:	8a7b      	ldrh	r3, [r7, #18]
 800d2c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d2c4:	827b      	strh	r3, [r7, #18]
 800d2c6:	8a7b      	ldrh	r3, [r7, #18]
 800d2c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d2cc:	827b      	strh	r3, [r7, #18]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	441a      	add	r2, r3
 800d2d8:	8a7b      	ldrh	r3, [r7, #18]
 800d2da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	371c      	adds	r7, #28
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d103      	bne.n	800d316 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2280      	movs	r2, #128	@ 0x80
 800d312:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d332:	b29b      	uxth	r3, r3
 800d334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d352:	b480      	push	{r7}
 800d354:	b085      	sub	sp, #20
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d360:	b29b      	uxth	r3, r3
 800d362:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d364:	68fb      	ldr	r3, [r7, #12]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d372:	b480      	push	{r7}
 800d374:	b08b      	sub	sp, #44	@ 0x2c
 800d376:	af00      	add	r7, sp, #0
 800d378:	60f8      	str	r0, [r7, #12]
 800d37a:	60b9      	str	r1, [r7, #8]
 800d37c:	4611      	mov	r1, r2
 800d37e:	461a      	mov	r2, r3
 800d380:	460b      	mov	r3, r1
 800d382:	80fb      	strh	r3, [r7, #6]
 800d384:	4613      	mov	r3, r2
 800d386:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d388:	88bb      	ldrh	r3, [r7, #4]
 800d38a:	3301      	adds	r3, #1
 800d38c:	085b      	lsrs	r3, r3, #1
 800d38e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d398:	88fa      	ldrh	r2, [r7, #6]
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d3a2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3a8:	e01b      	b.n	800d3e2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	b21a      	sxth	r2, r3
 800d3ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	b21b      	sxth	r3, r3
 800d3c2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	8a7a      	ldrh	r2, [r7, #18]
 800d3c8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d3ca:	6a3b      	ldr	r3, [r7, #32]
 800d3cc:	3302      	adds	r3, #2
 800d3ce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e0      	bne.n	800d3aa <USB_WritePMA+0x38>
  }
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	372c      	adds	r7, #44	@ 0x2c
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b08b      	sub	sp, #44	@ 0x2c
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	4611      	mov	r1, r2
 800d402:	461a      	mov	r2, r3
 800d404:	460b      	mov	r3, r1
 800d406:	80fb      	strh	r3, [r7, #6]
 800d408:	4613      	mov	r3, r2
 800d40a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d40c:	88bb      	ldrh	r3, [r7, #4]
 800d40e:	085b      	lsrs	r3, r3, #1
 800d410:	b29b      	uxth	r3, r3
 800d412:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d41c:	88fa      	ldrh	r2, [r7, #6]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	4413      	add	r3, r2
 800d422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d426:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d42c:	e018      	b.n	800d460 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	b29b      	uxth	r3, r3
 800d434:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	3302      	adds	r3, #2
 800d43a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	3301      	adds	r3, #1
 800d448:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	3301      	adds	r3, #1
 800d458:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45c:	3b01      	subs	r3, #1
 800d45e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e3      	bne.n	800d42e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d466:	88bb      	ldrh	r3, [r7, #4]
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d007      	beq.n	800d482 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	881b      	ldrh	r3, [r3, #0]
 800d476:	b29b      	uxth	r3, r3
 800d478:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	701a      	strb	r2, [r3, #0]
  }
}
 800d482:	bf00      	nop
 800d484:	372c      	adds	r7, #44	@ 0x2c
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	460b      	mov	r3, r1
 800d498:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d49a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d49e:	f002 f923 	bl	800f6e8 <USBD_static_malloc>
 800d4a2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d105      	bne.n	800d4b6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d4b2:	2302      	movs	r3, #2
 800d4b4:	e066      	b.n	800d584 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7c1b      	ldrb	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d119      	bne.n	800d4fa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d4c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	2181      	movs	r1, #129	@ 0x81
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f001 ffb1 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d4da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4de:	2202      	movs	r2, #2
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 ffa7 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2210      	movs	r2, #16
 800d4f4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d4f8:	e016      	b.n	800d528 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d4fa:	2340      	movs	r3, #64	@ 0x40
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	2181      	movs	r1, #129	@ 0x81
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f001 ff98 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2201      	movs	r2, #1
 800d50a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d50c:	2340      	movs	r3, #64	@ 0x40
 800d50e:	2202      	movs	r2, #2
 800d510:	2101      	movs	r1, #1
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f001 ff8f 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2210      	movs	r2, #16
 800d524:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d528:	2308      	movs	r3, #8
 800d52a:	2203      	movs	r2, #3
 800d52c:	2182      	movs	r1, #130	@ 0x82
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f001 ff81 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2201      	movs	r2, #1
 800d538:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	7c1b      	ldrb	r3, [r3, #16]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d109      	bne.n	800d572 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d568:	2101      	movs	r1, #1
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f002 f852 	bl	800f614 <USBD_LL_PrepareReceive>
 800d570:	e007      	b.n	800d582 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d578:	2340      	movs	r3, #64	@ 0x40
 800d57a:	2101      	movs	r1, #1
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f002 f849 	bl	800f614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d598:	2181      	movs	r1, #129	@ 0x81
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f001 ff71 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f001 ff6a 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d5b6:	2182      	movs	r1, #130	@ 0x82
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f001 ff62 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00e      	beq.n	800d5f6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f002 f88b 	bl	800f704 <USBD_static_free>
    pdev->pClassData = NULL;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d610:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d616:	2300      	movs	r3, #0
 800d618:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	e0af      	b.n	800d788 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d630:	2b00      	cmp	r3, #0
 800d632:	d03f      	beq.n	800d6b4 <USBD_CDC_Setup+0xb4>
 800d634:	2b20      	cmp	r3, #32
 800d636:	f040 809f 	bne.w	800d778 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	88db      	ldrh	r3, [r3, #6]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d02e      	beq.n	800d6a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	b25b      	sxtb	r3, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	da16      	bge.n	800d67a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d658:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	88d2      	ldrh	r2, [r2, #6]
 800d65e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	88db      	ldrh	r3, [r3, #6]
 800d664:	2b07      	cmp	r3, #7
 800d666:	bf28      	it	cs
 800d668:	2307      	movcs	r3, #7
 800d66a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	89fa      	ldrh	r2, [r7, #14]
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f001 facd 	bl	800ec12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d678:	e085      	b.n	800d786 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	785a      	ldrb	r2, [r3, #1]
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	88db      	ldrh	r3, [r3, #6]
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d690:	6939      	ldr	r1, [r7, #16]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	88db      	ldrh	r3, [r3, #6]
 800d696:	461a      	mov	r2, r3
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f001 fae6 	bl	800ec6a <USBD_CtlPrepareRx>
      break;
 800d69e:	e072      	b.n	800d786 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	7850      	ldrb	r0, [r2, #1]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	4798      	blx	r3
      break;
 800d6b2:	e068      	b.n	800d786 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	785b      	ldrb	r3, [r3, #1]
 800d6b8:	2b0b      	cmp	r3, #11
 800d6ba:	d852      	bhi.n	800d762 <USBD_CDC_Setup+0x162>
 800d6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c4 <USBD_CDC_Setup+0xc4>)
 800d6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c2:	bf00      	nop
 800d6c4:	0800d6f5 	.word	0x0800d6f5
 800d6c8:	0800d771 	.word	0x0800d771
 800d6cc:	0800d763 	.word	0x0800d763
 800d6d0:	0800d763 	.word	0x0800d763
 800d6d4:	0800d763 	.word	0x0800d763
 800d6d8:	0800d763 	.word	0x0800d763
 800d6dc:	0800d763 	.word	0x0800d763
 800d6e0:	0800d763 	.word	0x0800d763
 800d6e4:	0800d763 	.word	0x0800d763
 800d6e8:	0800d763 	.word	0x0800d763
 800d6ec:	0800d71f 	.word	0x0800d71f
 800d6f0:	0800d749 	.word	0x0800d749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d107      	bne.n	800d710 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d700:	f107 030a 	add.w	r3, r7, #10
 800d704:	2202      	movs	r2, #2
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 fa82 	bl	800ec12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d70e:	e032      	b.n	800d776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f001 fa0c 	bl	800eb30 <USBD_CtlError>
            ret = USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	75fb      	strb	r3, [r7, #23]
          break;
 800d71c:	e02b      	b.n	800d776 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b03      	cmp	r3, #3
 800d728:	d107      	bne.n	800d73a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d72a:	f107 030d 	add.w	r3, r7, #13
 800d72e:	2201      	movs	r2, #1
 800d730:	4619      	mov	r1, r3
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f001 fa6d 	bl	800ec12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d738:	e01d      	b.n	800d776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f001 f9f7 	bl	800eb30 <USBD_CtlError>
            ret = USBD_FAIL;
 800d742:	2303      	movs	r3, #3
 800d744:	75fb      	strb	r3, [r7, #23]
          break;
 800d746:	e016      	b.n	800d776 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b03      	cmp	r3, #3
 800d752:	d00f      	beq.n	800d774 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f001 f9ea 	bl	800eb30 <USBD_CtlError>
            ret = USBD_FAIL;
 800d75c:	2303      	movs	r3, #3
 800d75e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d760:	e008      	b.n	800d774 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f001 f9e3 	bl	800eb30 <USBD_CtlError>
          ret = USBD_FAIL;
 800d76a:	2303      	movs	r3, #3
 800d76c:	75fb      	strb	r3, [r7, #23]
          break;
 800d76e:	e002      	b.n	800d776 <USBD_CDC_Setup+0x176>
          break;
 800d770:	bf00      	nop
 800d772:	e008      	b.n	800d786 <USBD_CDC_Setup+0x186>
          break;
 800d774:	bf00      	nop
      }
      break;
 800d776:	e006      	b.n	800d786 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f001 f9d8 	bl	800eb30 <USBD_CtlError>
      ret = USBD_FAIL;
 800d780:	2303      	movs	r3, #3
 800d782:	75fb      	strb	r3, [r7, #23]
      break;
 800d784:	bf00      	nop
  }

  return (uint8_t)ret;
 800d786:	7dfb      	ldrb	r3, [r7, #23]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d7a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e04f      	b.n	800d852 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d7ba:	78fa      	ldrb	r2, [r7, #3]
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	4413      	add	r3, r2
 800d7c4:	009b      	lsls	r3, r3, #2
 800d7c6:	440b      	add	r3, r1
 800d7c8:	3318      	adds	r3, #24
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d029      	beq.n	800d824 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d7d0:	78fa      	ldrb	r2, [r7, #3]
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	440b      	add	r3, r1
 800d7de:	3318      	adds	r3, #24
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	78f9      	ldrb	r1, [r7, #3]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	4403      	add	r3, r0
 800d7f0:	3320      	adds	r3, #32
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d7f8:	fb01 f303 	mul.w	r3, r1, r3
 800d7fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d110      	bne.n	800d824 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d802:	78fa      	ldrb	r2, [r7, #3]
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	4613      	mov	r3, r2
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	4413      	add	r3, r2
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	440b      	add	r3, r1
 800d810:	3318      	adds	r3, #24
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d816:	78f9      	ldrb	r1, [r7, #3]
 800d818:	2300      	movs	r3, #0
 800d81a:	2200      	movs	r2, #0
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 fed8 	bl	800f5d2 <USBD_LL_Transmit>
 800d822:	e015      	b.n	800d850 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2200      	movs	r2, #0
 800d828:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d84c:	78fa      	ldrb	r2, [r7, #3]
 800d84e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d86c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d878:	2303      	movs	r3, #3
 800d87a:	e015      	b.n	800d8a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d87c:	78fb      	ldrb	r3, [r7, #3]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 fee8 	bl	800f656 <USBD_LL_GetRxDataSize>
 800d886:	4602      	mov	r2, r0
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e01a      	b.n	800d900 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d014      	beq.n	800d8fe <USBD_CDC_EP0_RxReady+0x4e>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d8da:	2bff      	cmp	r3, #255	@ 0xff
 800d8dc:	d00f      	beq.n	800d8fe <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d8ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d8f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	22ff      	movs	r2, #255	@ 0xff
 800d8fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2243      	movs	r2, #67	@ 0x43
 800d914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d916:	4b03      	ldr	r3, [pc, #12]	@ (800d924 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d918:	4618      	mov	r0, r3
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	20000094 	.word	0x20000094

0800d928 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2243      	movs	r2, #67	@ 0x43
 800d934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d936:	4b03      	ldr	r3, [pc, #12]	@ (800d944 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	20000050 	.word	0x20000050

0800d948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2243      	movs	r2, #67	@ 0x43
 800d954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d956:	4b03      	ldr	r3, [pc, #12]	@ (800d964 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	200000d8 	.word	0x200000d8

0800d968 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	220a      	movs	r2, #10
 800d974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d976:	4b03      	ldr	r3, [pc, #12]	@ (800d984 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	2000000c 	.word	0x2000000c

0800d988 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d998:	2303      	movs	r3, #3
 800d99a:	e004      	b.n	800d9a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr

0800d9b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b087      	sub	sp, #28
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e008      	b.n	800d9e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr

0800d9ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9ee:	b480      	push	{r7}
 800d9f0:	b085      	sub	sp, #20
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d101      	bne.n	800da0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800da06:	2303      	movs	r3, #3
 800da08:	e004      	b.n	800da14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800da30:	2301      	movs	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da3e:	2303      	movs	r3, #3
 800da40:	e01a      	b.n	800da78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d114      	bne.n	800da76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2201      	movs	r2, #1
 800da50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800da6a:	2181      	movs	r1, #129	@ 0x81
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f001 fdb0 	bl	800f5d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800da76:	7bfb      	ldrb	r3, [r7, #15]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e016      	b.n	800dacc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7c1b      	ldrb	r3, [r3, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800daac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dab0:	2101      	movs	r1, #1
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f001 fdae 	bl	800f614 <USBD_LL_PrepareReceive>
 800dab8:	e007      	b.n	800daca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dac0:	2340      	movs	r3, #64	@ 0x40
 800dac2:	2101      	movs	r1, #1
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f001 fda5 	bl	800f614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dae8:	2303      	movs	r3, #3
 800daea:	e01f      	b.n	800db2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d003      	beq.n	800db12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	79fa      	ldrb	r2, [r7, #7]
 800db1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f001 fc0d 	bl	800f340 <USBD_LL_Init>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d101      	bne.n	800db4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800db48:	2303      	movs	r3, #3
 800db4a:	e016      	b.n	800db7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00b      	beq.n	800db78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db68:	f107 020e 	add.w	r2, r7, #14
 800db6c:	4610      	mov	r0, r2
 800db6e:	4798      	blx	r3
 800db70:	4602      	mov	r2, r0
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f001 fc38 	bl	800f400 <USBD_LL_Start>
 800db90:	4603      	mov	r3, r0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800db9a:	b480      	push	{r7}
 800db9c:	b083      	sub	sp, #12
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d009      	beq.n	800dbde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	78fa      	ldrb	r2, [r7, #3]
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	4798      	blx	r3
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d007      	beq.n	800dc0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	78fa      	ldrb	r2, [r7, #3]
 800dc08:	4611      	mov	r1, r2
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	4798      	blx	r3
  }

  return USBD_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 ff46 	bl	800eabc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dc3e:	461a      	mov	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc4c:	f003 031f 	and.w	r3, r3, #31
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d01a      	beq.n	800dc8a <USBD_LL_SetupStage+0x72>
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d822      	bhi.n	800dc9e <USBD_LL_SetupStage+0x86>
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <USBD_LL_SetupStage+0x4a>
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d00a      	beq.n	800dc76 <USBD_LL_SetupStage+0x5e>
 800dc60:	e01d      	b.n	800dc9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9ee 	bl	800e04c <USBD_StdDevReq>
 800dc70:	4603      	mov	r3, r0
 800dc72:	73fb      	strb	r3, [r7, #15]
      break;
 800dc74:	e020      	b.n	800dcb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fa52 	bl	800e128 <USBD_StdItfReq>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]
      break;
 800dc88:	e016      	b.n	800dcb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc90:	4619      	mov	r1, r3
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 fa91 	bl	800e1ba <USBD_StdEPReq>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc9c:	e00c      	b.n	800dcb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dca4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 fc07 	bl	800f4c0 <USBD_LL_StallEP>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800dcb6:	bf00      	nop
  }

  return ret;
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b086      	sub	sp, #24
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	60f8      	str	r0, [r7, #12]
 800dcca:	460b      	mov	r3, r1
 800dccc:	607a      	str	r2, [r7, #4]
 800dcce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dcd0:	7afb      	ldrb	r3, [r7, #11]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d138      	bne.n	800dd48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dcdc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d14a      	bne.n	800dd7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	689a      	ldr	r2, [r3, #8]
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d913      	bls.n	800dd1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	689a      	ldr	r2, [r3, #8]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	1ad2      	subs	r2, r2, r3
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	68da      	ldr	r2, [r3, #12]
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	bf28      	it	cs
 800dd0e:	4613      	movcs	r3, r2
 800dd10:	461a      	mov	r2, r3
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 ffc5 	bl	800eca4 <USBD_CtlContinueRx>
 800dd1a:	e030      	b.n	800dd7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d10b      	bne.n	800dd40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d005      	beq.n	800dd40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 ffc0 	bl	800ecc6 <USBD_CtlSendStatus>
 800dd46:	e01a      	b.n	800dd7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d114      	bne.n	800dd7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00e      	beq.n	800dd7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	7afa      	ldrb	r2, [r7, #11]
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	4798      	blx	r3
 800dd70:	4603      	mov	r3, r0
 800dd72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dd74:	7dfb      	ldrb	r3, [r7, #23]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	e000      	b.n	800dd80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	460b      	mov	r3, r1
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd96:	7afb      	ldrb	r3, [r7, #11]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d16b      	bne.n	800de74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	3314      	adds	r3, #20
 800dda0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d156      	bne.n	800de5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	689a      	ldr	r2, [r3, #8]
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d914      	bls.n	800dde2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	689a      	ldr	r2, [r3, #8]
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	1ad2      	subs	r2, r2, r3
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	6879      	ldr	r1, [r7, #4]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f000 ff3a 	bl	800ec48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	2100      	movs	r1, #0
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f001 fc1a 	bl	800f614 <USBD_LL_PrepareReceive>
 800dde0:	e03b      	b.n	800de5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d11c      	bne.n	800de28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d316      	bcc.n	800de28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	685a      	ldr	r2, [r3, #4]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de04:	429a      	cmp	r2, r3
 800de06:	d20f      	bcs.n	800de28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de08:	2200      	movs	r2, #0
 800de0a:	2100      	movs	r1, #0
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 ff1b 	bl	800ec48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de1a:	2300      	movs	r3, #0
 800de1c:	2200      	movs	r2, #0
 800de1e:	2100      	movs	r1, #0
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f001 fbf7 	bl	800f614 <USBD_LL_PrepareReceive>
 800de26:	e018      	b.n	800de5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2b03      	cmp	r3, #3
 800de32:	d10b      	bne.n	800de4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de4c:	2180      	movs	r1, #128	@ 0x80
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f001 fb36 	bl	800f4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 ff49 	bl	800ecec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800de60:	2b01      	cmp	r3, #1
 800de62:	d122      	bne.n	800deaa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f7ff fe98 	bl	800db9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800de72:	e01a      	b.n	800deaa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d114      	bne.n	800deaa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de86:	695b      	ldr	r3, [r3, #20]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	7afa      	ldrb	r2, [r7, #11]
 800de96:	4611      	mov	r1, r2
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	4798      	blx	r3
 800de9c:	4603      	mov	r3, r0
 800de9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dea0:	7dfb      	ldrb	r3, [r7, #23]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d001      	beq.n	800deaa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	e000      	b.n	800deac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3718      	adds	r7, #24
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dee4:	2303      	movs	r3, #3
 800dee6:	e02f      	b.n	800df48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00f      	beq.n	800df12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d009      	beq.n	800df12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	6852      	ldr	r2, [r2, #4]
 800df0a:	b2d2      	uxtb	r2, r2
 800df0c:	4611      	mov	r1, r2
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df12:	2340      	movs	r3, #64	@ 0x40
 800df14:	2200      	movs	r2, #0
 800df16:	2100      	movs	r1, #0
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 fa8c 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2201      	movs	r2, #1
 800df22:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2240      	movs	r2, #64	@ 0x40
 800df2a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df2e:	2340      	movs	r3, #64	@ 0x40
 800df30:	2200      	movs	r2, #0
 800df32:	2180      	movs	r1, #128	@ 0x80
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f001 fa7e 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2240      	movs	r2, #64	@ 0x40
 800df44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	78fa      	ldrb	r2, [r7, #3]
 800df60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2204      	movs	r2, #4
 800df8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b04      	cmp	r3, #4
 800dfae:	d106      	bne.n	800dfbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e012      	b.n	800e008 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b03      	cmp	r3, #3
 800dfec:	d10b      	bne.n	800e006 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dff4:	69db      	ldr	r3, [r3, #28]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e000:	69db      	ldr	r3, [r3, #28]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e010:	b480      	push	{r7}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	3301      	adds	r3, #1
 800e026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e02e:	8a3b      	ldrh	r3, [r7, #16]
 800e030:	021b      	lsls	r3, r3, #8
 800e032:	b21a      	sxth	r2, r3
 800e034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e038:	4313      	orrs	r3, r2
 800e03a:	b21b      	sxth	r3, r3
 800e03c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e03e:	89fb      	ldrh	r3, [r7, #14]
}
 800e040:	4618      	mov	r0, r3
 800e042:	371c      	adds	r7, #28
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e056:	2300      	movs	r3, #0
 800e058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e062:	2b40      	cmp	r3, #64	@ 0x40
 800e064:	d005      	beq.n	800e072 <USBD_StdDevReq+0x26>
 800e066:	2b40      	cmp	r3, #64	@ 0x40
 800e068:	d853      	bhi.n	800e112 <USBD_StdDevReq+0xc6>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00b      	beq.n	800e086 <USBD_StdDevReq+0x3a>
 800e06e:	2b20      	cmp	r3, #32
 800e070:	d14f      	bne.n	800e112 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	4798      	blx	r3
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]
      break;
 800e084:	e04a      	b.n	800e11c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	785b      	ldrb	r3, [r3, #1]
 800e08a:	2b09      	cmp	r3, #9
 800e08c:	d83b      	bhi.n	800e106 <USBD_StdDevReq+0xba>
 800e08e:	a201      	add	r2, pc, #4	@ (adr r2, 800e094 <USBD_StdDevReq+0x48>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e0e9 	.word	0x0800e0e9
 800e098:	0800e0fd 	.word	0x0800e0fd
 800e09c:	0800e107 	.word	0x0800e107
 800e0a0:	0800e0f3 	.word	0x0800e0f3
 800e0a4:	0800e107 	.word	0x0800e107
 800e0a8:	0800e0c7 	.word	0x0800e0c7
 800e0ac:	0800e0bd 	.word	0x0800e0bd
 800e0b0:	0800e107 	.word	0x0800e107
 800e0b4:	0800e0df 	.word	0x0800e0df
 800e0b8:	0800e0d1 	.word	0x0800e0d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f9de 	bl	800e480 <USBD_GetDescriptor>
          break;
 800e0c4:	e024      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fb6d 	bl	800e7a8 <USBD_SetAddress>
          break;
 800e0ce:	e01f      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fbac 	bl	800e830 <USBD_SetConfig>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]
          break;
 800e0dc:	e018      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fc4b 	bl	800e97c <USBD_GetConfig>
          break;
 800e0e6:	e013      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e0e8:	6839      	ldr	r1, [r7, #0]
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fc7c 	bl	800e9e8 <USBD_GetStatus>
          break;
 800e0f0:	e00e      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 fcab 	bl	800ea50 <USBD_SetFeature>
          break;
 800e0fa:	e009      	b.n	800e110 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fcba 	bl	800ea78 <USBD_ClrFeature>
          break;
 800e104:	e004      	b.n	800e110 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e106:	6839      	ldr	r1, [r7, #0]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 fd11 	bl	800eb30 <USBD_CtlError>
          break;
 800e10e:	bf00      	nop
      }
      break;
 800e110:	e004      	b.n	800e11c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fd0b 	bl	800eb30 <USBD_CtlError>
      break;
 800e11a:	bf00      	nop
  }

  return ret;
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop

0800e128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e13e:	2b40      	cmp	r3, #64	@ 0x40
 800e140:	d005      	beq.n	800e14e <USBD_StdItfReq+0x26>
 800e142:	2b40      	cmp	r3, #64	@ 0x40
 800e144:	d82f      	bhi.n	800e1a6 <USBD_StdItfReq+0x7e>
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <USBD_StdItfReq+0x26>
 800e14a:	2b20      	cmp	r3, #32
 800e14c:	d12b      	bne.n	800e1a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e154:	b2db      	uxtb	r3, r3
 800e156:	3b01      	subs	r3, #1
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d81d      	bhi.n	800e198 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	889b      	ldrh	r3, [r3, #4]
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b01      	cmp	r3, #1
 800e164:	d813      	bhi.n	800e18e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	4798      	blx	r3
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	88db      	ldrh	r3, [r3, #6]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d110      	bne.n	800e1a2 <USBD_StdItfReq+0x7a>
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10d      	bne.n	800e1a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 fd9d 	bl	800ecc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e18c:	e009      	b.n	800e1a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fccd 	bl	800eb30 <USBD_CtlError>
          break;
 800e196:	e004      	b.n	800e1a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fcc8 	bl	800eb30 <USBD_CtlError>
          break;
 800e1a0:	e000      	b.n	800e1a4 <USBD_StdItfReq+0x7c>
          break;
 800e1a2:	bf00      	nop
      }
      break;
 800e1a4:	e004      	b.n	800e1b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fcc1 	bl	800eb30 <USBD_CtlError>
      break;
 800e1ae:	bf00      	nop
  }

  return ret;
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b084      	sub	sp, #16
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	889b      	ldrh	r3, [r3, #4]
 800e1cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1d6:	2b40      	cmp	r3, #64	@ 0x40
 800e1d8:	d007      	beq.n	800e1ea <USBD_StdEPReq+0x30>
 800e1da:	2b40      	cmp	r3, #64	@ 0x40
 800e1dc:	f200 8145 	bhi.w	800e46a <USBD_StdEPReq+0x2b0>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <USBD_StdEPReq+0x44>
 800e1e4:	2b20      	cmp	r3, #32
 800e1e6:	f040 8140 	bne.w	800e46a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	4798      	blx	r3
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	73fb      	strb	r3, [r7, #15]
      break;
 800e1fc:	e13a      	b.n	800e474 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b03      	cmp	r3, #3
 800e204:	d007      	beq.n	800e216 <USBD_StdEPReq+0x5c>
 800e206:	2b03      	cmp	r3, #3
 800e208:	f300 8129 	bgt.w	800e45e <USBD_StdEPReq+0x2a4>
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d07f      	beq.n	800e310 <USBD_StdEPReq+0x156>
 800e210:	2b01      	cmp	r3, #1
 800e212:	d03c      	beq.n	800e28e <USBD_StdEPReq+0xd4>
 800e214:	e123      	b.n	800e45e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d002      	beq.n	800e228 <USBD_StdEPReq+0x6e>
 800e222:	2b03      	cmp	r3, #3
 800e224:	d016      	beq.n	800e254 <USBD_StdEPReq+0x9a>
 800e226:	e02c      	b.n	800e282 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e228:	7bbb      	ldrb	r3, [r7, #14]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00d      	beq.n	800e24a <USBD_StdEPReq+0x90>
 800e22e:	7bbb      	ldrb	r3, [r7, #14]
 800e230:	2b80      	cmp	r3, #128	@ 0x80
 800e232:	d00a      	beq.n	800e24a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e234:	7bbb      	ldrb	r3, [r7, #14]
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 f941 	bl	800f4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e23e:	2180      	movs	r1, #128	@ 0x80
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 f93d 	bl	800f4c0 <USBD_LL_StallEP>
 800e246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e248:	e020      	b.n	800e28c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fc6f 	bl	800eb30 <USBD_CtlError>
              break;
 800e252:	e01b      	b.n	800e28c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	885b      	ldrh	r3, [r3, #2]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10e      	bne.n	800e27a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e25c:	7bbb      	ldrb	r3, [r7, #14]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00b      	beq.n	800e27a <USBD_StdEPReq+0xc0>
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	2b80      	cmp	r3, #128	@ 0x80
 800e266:	d008      	beq.n	800e27a <USBD_StdEPReq+0xc0>
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	88db      	ldrh	r3, [r3, #6]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d104      	bne.n	800e27a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e270:	7bbb      	ldrb	r3, [r7, #14]
 800e272:	4619      	mov	r1, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f001 f923 	bl	800f4c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fd23 	bl	800ecc6 <USBD_CtlSendStatus>

              break;
 800e280:	e004      	b.n	800e28c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fc53 	bl	800eb30 <USBD_CtlError>
              break;
 800e28a:	bf00      	nop
          }
          break;
 800e28c:	e0ec      	b.n	800e468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e294:	b2db      	uxtb	r3, r3
 800e296:	2b02      	cmp	r3, #2
 800e298:	d002      	beq.n	800e2a0 <USBD_StdEPReq+0xe6>
 800e29a:	2b03      	cmp	r3, #3
 800e29c:	d016      	beq.n	800e2cc <USBD_StdEPReq+0x112>
 800e29e:	e030      	b.n	800e302 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00d      	beq.n	800e2c2 <USBD_StdEPReq+0x108>
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
 800e2a8:	2b80      	cmp	r3, #128	@ 0x80
 800e2aa:	d00a      	beq.n	800e2c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2ac:	7bbb      	ldrb	r3, [r7, #14]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f001 f905 	bl	800f4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2b6:	2180      	movs	r1, #128	@ 0x80
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f001 f901 	bl	800f4c0 <USBD_LL_StallEP>
 800e2be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2c0:	e025      	b.n	800e30e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e2c2:	6839      	ldr	r1, [r7, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fc33 	bl	800eb30 <USBD_CtlError>
              break;
 800e2ca:	e020      	b.n	800e30e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	885b      	ldrh	r3, [r3, #2]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d11b      	bne.n	800e30c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d004      	beq.n	800e2e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 f90b 	bl	800f4fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fcec 	bl	800ecc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	4798      	blx	r3
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e300:	e004      	b.n	800e30c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 fc13 	bl	800eb30 <USBD_CtlError>
              break;
 800e30a:	e000      	b.n	800e30e <USBD_StdEPReq+0x154>
              break;
 800e30c:	bf00      	nop
          }
          break;
 800e30e:	e0ab      	b.n	800e468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d002      	beq.n	800e322 <USBD_StdEPReq+0x168>
 800e31c:	2b03      	cmp	r3, #3
 800e31e:	d032      	beq.n	800e386 <USBD_StdEPReq+0x1cc>
 800e320:	e097      	b.n	800e452 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d007      	beq.n	800e338 <USBD_StdEPReq+0x17e>
 800e328:	7bbb      	ldrb	r3, [r7, #14]
 800e32a:	2b80      	cmp	r3, #128	@ 0x80
 800e32c:	d004      	beq.n	800e338 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fbfd 	bl	800eb30 <USBD_CtlError>
                break;
 800e336:	e091      	b.n	800e45c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da0b      	bge.n	800e358 <USBD_StdEPReq+0x19e>
 800e340:	7bbb      	ldrb	r3, [r7, #14]
 800e342:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e346:	4613      	mov	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	4413      	add	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	3310      	adds	r3, #16
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	4413      	add	r3, r2
 800e354:	3304      	adds	r3, #4
 800e356:	e00b      	b.n	800e370 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e358:	7bbb      	ldrb	r3, [r7, #14]
 800e35a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e35e:	4613      	mov	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4413      	add	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	4413      	add	r3, r2
 800e36e:	3304      	adds	r3, #4
 800e370:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2202      	movs	r2, #2
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fc47 	bl	800ec12 <USBD_CtlSendData>
              break;
 800e384:	e06a      	b.n	800e45c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	da11      	bge.n	800e3b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	f003 020f 	and.w	r2, r3, #15
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	440b      	add	r3, r1
 800e3a0:	3324      	adds	r3, #36	@ 0x24
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d117      	bne.n	800e3d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fbc0 	bl	800eb30 <USBD_CtlError>
                  break;
 800e3b0:	e054      	b.n	800e45c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e3b2:	7bbb      	ldrb	r3, [r7, #14]
 800e3b4:	f003 020f 	and.w	r2, r3, #15
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d104      	bne.n	800e3d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fbad 	bl	800eb30 <USBD_CtlError>
                  break;
 800e3d6:	e041      	b.n	800e45c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	da0b      	bge.n	800e3f8 <USBD_StdEPReq+0x23e>
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	4413      	add	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	3310      	adds	r3, #16
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	e00b      	b.n	800e410 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	4413      	add	r3, r2
 800e40e:	3304      	adds	r3, #4
 800e410:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e412:	7bbb      	ldrb	r3, [r7, #14]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <USBD_StdEPReq+0x264>
 800e418:	7bbb      	ldrb	r3, [r7, #14]
 800e41a:	2b80      	cmp	r3, #128	@ 0x80
 800e41c:	d103      	bne.n	800e426 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2200      	movs	r2, #0
 800e422:	601a      	str	r2, [r3, #0]
 800e424:	e00e      	b.n	800e444 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e426:	7bbb      	ldrb	r3, [r7, #14]
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f001 f886 	bl	800f53c <USBD_LL_IsStallEP>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d003      	beq.n	800e43e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2201      	movs	r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
 800e43c:	e002      	b.n	800e444 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2200      	movs	r2, #0
 800e442:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2202      	movs	r2, #2
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fbe1 	bl	800ec12 <USBD_CtlSendData>
              break;
 800e450:	e004      	b.n	800e45c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fb6b 	bl	800eb30 <USBD_CtlError>
              break;
 800e45a:	bf00      	nop
          }
          break;
 800e45c:	e004      	b.n	800e468 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e45e:	6839      	ldr	r1, [r7, #0]
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fb65 	bl	800eb30 <USBD_CtlError>
          break;
 800e466:	bf00      	nop
      }
      break;
 800e468:	e004      	b.n	800e474 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 fb5f 	bl	800eb30 <USBD_CtlError>
      break;
 800e472:	bf00      	nop
  }

  return ret;
 800e474:	7bfb      	ldrb	r3, [r7, #15]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e48a:	2300      	movs	r3, #0
 800e48c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e492:	2300      	movs	r3, #0
 800e494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	0a1b      	lsrs	r3, r3, #8
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b0e      	cmp	r3, #14
 800e4a2:	f200 8152 	bhi.w	800e74a <USBD_GetDescriptor+0x2ca>
 800e4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4ac <USBD_GetDescriptor+0x2c>)
 800e4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ac:	0800e51d 	.word	0x0800e51d
 800e4b0:	0800e535 	.word	0x0800e535
 800e4b4:	0800e575 	.word	0x0800e575
 800e4b8:	0800e74b 	.word	0x0800e74b
 800e4bc:	0800e74b 	.word	0x0800e74b
 800e4c0:	0800e6eb 	.word	0x0800e6eb
 800e4c4:	0800e717 	.word	0x0800e717
 800e4c8:	0800e74b 	.word	0x0800e74b
 800e4cc:	0800e74b 	.word	0x0800e74b
 800e4d0:	0800e74b 	.word	0x0800e74b
 800e4d4:	0800e74b 	.word	0x0800e74b
 800e4d8:	0800e74b 	.word	0x0800e74b
 800e4dc:	0800e74b 	.word	0x0800e74b
 800e4e0:	0800e74b 	.word	0x0800e74b
 800e4e4:	0800e4e9 	.word	0x0800e4e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4ee:	69db      	ldr	r3, [r3, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00b      	beq.n	800e50c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4fa:	69db      	ldr	r3, [r3, #28]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	7c12      	ldrb	r2, [r2, #16]
 800e500:	f107 0108 	add.w	r1, r7, #8
 800e504:	4610      	mov	r0, r2
 800e506:	4798      	blx	r3
 800e508:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e50a:	e126      	b.n	800e75a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e50c:	6839      	ldr	r1, [r7, #0]
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fb0e 	bl	800eb30 <USBD_CtlError>
        err++;
 800e514:	7afb      	ldrb	r3, [r7, #11]
 800e516:	3301      	adds	r3, #1
 800e518:	72fb      	strb	r3, [r7, #11]
      break;
 800e51a:	e11e      	b.n	800e75a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	7c12      	ldrb	r2, [r2, #16]
 800e528:	f107 0108 	add.w	r1, r7, #8
 800e52c:	4610      	mov	r0, r2
 800e52e:	4798      	blx	r3
 800e530:	60f8      	str	r0, [r7, #12]
      break;
 800e532:	e112      	b.n	800e75a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7c1b      	ldrb	r3, [r3, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10d      	bne.n	800e558 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e544:	f107 0208 	add.w	r2, r7, #8
 800e548:	4610      	mov	r0, r2
 800e54a:	4798      	blx	r3
 800e54c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3301      	adds	r3, #1
 800e552:	2202      	movs	r2, #2
 800e554:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e556:	e100      	b.n	800e75a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e560:	f107 0208 	add.w	r2, r7, #8
 800e564:	4610      	mov	r0, r2
 800e566:	4798      	blx	r3
 800e568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3301      	adds	r3, #1
 800e56e:	2202      	movs	r2, #2
 800e570:	701a      	strb	r2, [r3, #0]
      break;
 800e572:	e0f2      	b.n	800e75a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	885b      	ldrh	r3, [r3, #2]
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b05      	cmp	r3, #5
 800e57c:	f200 80ac 	bhi.w	800e6d8 <USBD_GetDescriptor+0x258>
 800e580:	a201      	add	r2, pc, #4	@ (adr r2, 800e588 <USBD_GetDescriptor+0x108>)
 800e582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e586:	bf00      	nop
 800e588:	0800e5a1 	.word	0x0800e5a1
 800e58c:	0800e5d5 	.word	0x0800e5d5
 800e590:	0800e609 	.word	0x0800e609
 800e594:	0800e63d 	.word	0x0800e63d
 800e598:	0800e671 	.word	0x0800e671
 800e59c:	0800e6a5 	.word	0x0800e6a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00b      	beq.n	800e5c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	7c12      	ldrb	r2, [r2, #16]
 800e5b8:	f107 0108 	add.w	r1, r7, #8
 800e5bc:	4610      	mov	r0, r2
 800e5be:	4798      	blx	r3
 800e5c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5c2:	e091      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 fab2 	bl	800eb30 <USBD_CtlError>
            err++;
 800e5cc:	7afb      	ldrb	r3, [r7, #11]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5d2:	e089      	b.n	800e6e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00b      	beq.n	800e5f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	7c12      	ldrb	r2, [r2, #16]
 800e5ec:	f107 0108 	add.w	r1, r7, #8
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	4798      	blx	r3
 800e5f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5f6:	e077      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 fa98 	bl	800eb30 <USBD_CtlError>
            err++;
 800e600:	7afb      	ldrb	r3, [r7, #11]
 800e602:	3301      	adds	r3, #1
 800e604:	72fb      	strb	r3, [r7, #11]
          break;
 800e606:	e06f      	b.n	800e6e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00b      	beq.n	800e62c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	7c12      	ldrb	r2, [r2, #16]
 800e620:	f107 0108 	add.w	r1, r7, #8
 800e624:	4610      	mov	r0, r2
 800e626:	4798      	blx	r3
 800e628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e62a:	e05d      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e62c:	6839      	ldr	r1, [r7, #0]
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 fa7e 	bl	800eb30 <USBD_CtlError>
            err++;
 800e634:	7afb      	ldrb	r3, [r7, #11]
 800e636:	3301      	adds	r3, #1
 800e638:	72fb      	strb	r3, [r7, #11]
          break;
 800e63a:	e055      	b.n	800e6e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	7c12      	ldrb	r2, [r2, #16]
 800e654:	f107 0108 	add.w	r1, r7, #8
 800e658:	4610      	mov	r0, r2
 800e65a:	4798      	blx	r3
 800e65c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e65e:	e043      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 fa64 	bl	800eb30 <USBD_CtlError>
            err++;
 800e668:	7afb      	ldrb	r3, [r7, #11]
 800e66a:	3301      	adds	r3, #1
 800e66c:	72fb      	strb	r3, [r7, #11]
          break;
 800e66e:	e03b      	b.n	800e6e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00b      	beq.n	800e694 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e682:	695b      	ldr	r3, [r3, #20]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	7c12      	ldrb	r2, [r2, #16]
 800e688:	f107 0108 	add.w	r1, r7, #8
 800e68c:	4610      	mov	r0, r2
 800e68e:	4798      	blx	r3
 800e690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e692:	e029      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fa4a 	bl	800eb30 <USBD_CtlError>
            err++;
 800e69c:	7afb      	ldrb	r3, [r7, #11]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e6a2:	e021      	b.n	800e6e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6aa:	699b      	ldr	r3, [r3, #24]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00b      	beq.n	800e6c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6b6:	699b      	ldr	r3, [r3, #24]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	7c12      	ldrb	r2, [r2, #16]
 800e6bc:	f107 0108 	add.w	r1, r7, #8
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	4798      	blx	r3
 800e6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6c6:	e00f      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fa30 	bl	800eb30 <USBD_CtlError>
            err++;
 800e6d0:	7afb      	ldrb	r3, [r7, #11]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e6d6:	e007      	b.n	800e6e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fa28 	bl	800eb30 <USBD_CtlError>
          err++;
 800e6e0:	7afb      	ldrb	r3, [r7, #11]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e6e6:	bf00      	nop
      }
      break;
 800e6e8:	e037      	b.n	800e75a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7c1b      	ldrb	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d109      	bne.n	800e706 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6fa:	f107 0208 	add.w	r2, r7, #8
 800e6fe:	4610      	mov	r0, r2
 800e700:	4798      	blx	r3
 800e702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e704:	e029      	b.n	800e75a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e706:	6839      	ldr	r1, [r7, #0]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 fa11 	bl	800eb30 <USBD_CtlError>
        err++;
 800e70e:	7afb      	ldrb	r3, [r7, #11]
 800e710:	3301      	adds	r3, #1
 800e712:	72fb      	strb	r3, [r7, #11]
      break;
 800e714:	e021      	b.n	800e75a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	7c1b      	ldrb	r3, [r3, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d10d      	bne.n	800e73a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e726:	f107 0208 	add.w	r2, r7, #8
 800e72a:	4610      	mov	r0, r2
 800e72c:	4798      	blx	r3
 800e72e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	3301      	adds	r3, #1
 800e734:	2207      	movs	r2, #7
 800e736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e738:	e00f      	b.n	800e75a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f9f7 	bl	800eb30 <USBD_CtlError>
        err++;
 800e742:	7afb      	ldrb	r3, [r7, #11]
 800e744:	3301      	adds	r3, #1
 800e746:	72fb      	strb	r3, [r7, #11]
      break;
 800e748:	e007      	b.n	800e75a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e74a:	6839      	ldr	r1, [r7, #0]
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f9ef 	bl	800eb30 <USBD_CtlError>
      err++;
 800e752:	7afb      	ldrb	r3, [r7, #11]
 800e754:	3301      	adds	r3, #1
 800e756:	72fb      	strb	r3, [r7, #11]
      break;
 800e758:	bf00      	nop
  }

  if (err != 0U)
 800e75a:	7afb      	ldrb	r3, [r7, #11]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d11e      	bne.n	800e79e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	88db      	ldrh	r3, [r3, #6]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d016      	beq.n	800e796 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e768:	893b      	ldrh	r3, [r7, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00e      	beq.n	800e78c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	88da      	ldrh	r2, [r3, #6]
 800e772:	893b      	ldrh	r3, [r7, #8]
 800e774:	4293      	cmp	r3, r2
 800e776:	bf28      	it	cs
 800e778:	4613      	movcs	r3, r2
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e77e:	893b      	ldrh	r3, [r7, #8]
 800e780:	461a      	mov	r2, r3
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fa44 	bl	800ec12 <USBD_CtlSendData>
 800e78a:	e009      	b.n	800e7a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f9ce 	bl	800eb30 <USBD_CtlError>
 800e794:	e004      	b.n	800e7a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 fa95 	bl	800ecc6 <USBD_CtlSendStatus>
 800e79c:	e000      	b.n	800e7a0 <USBD_GetDescriptor+0x320>
    return;
 800e79e:	bf00      	nop
  }
}
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop

0800e7a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	889b      	ldrh	r3, [r3, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d131      	bne.n	800e81e <USBD_SetAddress+0x76>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	88db      	ldrh	r3, [r3, #6]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d12d      	bne.n	800e81e <USBD_SetAddress+0x76>
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7c8:	d829      	bhi.n	800e81e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	d104      	bne.n	800e7ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f9a3 	bl	800eb30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ea:	e01d      	b.n	800e828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	7bfa      	ldrb	r2, [r7, #15]
 800e7f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 fecb 	bl	800f594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fa61 	bl	800ecc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e804:	7bfb      	ldrb	r3, [r7, #15]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d004      	beq.n	800e814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2202      	movs	r2, #2
 800e80e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e812:	e009      	b.n	800e828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2201      	movs	r2, #1
 800e818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e81c:	e004      	b.n	800e828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e81e:	6839      	ldr	r1, [r7, #0]
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f985 	bl	800eb30 <USBD_CtlError>
  }
}
 800e826:	bf00      	nop
 800e828:	bf00      	nop
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	885b      	ldrh	r3, [r3, #2]
 800e842:	b2da      	uxtb	r2, r3
 800e844:	4b4c      	ldr	r3, [pc, #304]	@ (800e978 <USBD_SetConfig+0x148>)
 800e846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e848:	4b4b      	ldr	r3, [pc, #300]	@ (800e978 <USBD_SetConfig+0x148>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d905      	bls.n	800e85c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f96c 	bl	800eb30 <USBD_CtlError>
    return USBD_FAIL;
 800e858:	2303      	movs	r3, #3
 800e85a:	e088      	b.n	800e96e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b02      	cmp	r3, #2
 800e866:	d002      	beq.n	800e86e <USBD_SetConfig+0x3e>
 800e868:	2b03      	cmp	r3, #3
 800e86a:	d025      	beq.n	800e8b8 <USBD_SetConfig+0x88>
 800e86c:	e071      	b.n	800e952 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e86e:	4b42      	ldr	r3, [pc, #264]	@ (800e978 <USBD_SetConfig+0x148>)
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d01c      	beq.n	800e8b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e876:	4b40      	ldr	r3, [pc, #256]	@ (800e978 <USBD_SetConfig+0x148>)
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e880:	4b3d      	ldr	r3, [pc, #244]	@ (800e978 <USBD_SetConfig+0x148>)
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	4619      	mov	r1, r3
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff f992 	bl	800dbb0 <USBD_SetClassConfig>
 800e88c:	4603      	mov	r3, r0
 800e88e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d004      	beq.n	800e8a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f949 	bl	800eb30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e89e:	e065      	b.n	800e96c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fa10 	bl	800ecc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2203      	movs	r2, #3
 800e8aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8ae:	e05d      	b.n	800e96c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fa08 	bl	800ecc6 <USBD_CtlSendStatus>
      break;
 800e8b6:	e059      	b.n	800e96c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e8b8:	4b2f      	ldr	r3, [pc, #188]	@ (800e978 <USBD_SetConfig+0x148>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d112      	bne.n	800e8e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e8c8:	4b2b      	ldr	r3, [pc, #172]	@ (800e978 <USBD_SetConfig+0x148>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8d2:	4b29      	ldr	r3, [pc, #164]	@ (800e978 <USBD_SetConfig+0x148>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff f985 	bl	800dbe8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f9f1 	bl	800ecc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8e4:	e042      	b.n	800e96c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e8e6:	4b24      	ldr	r3, [pc, #144]	@ (800e978 <USBD_SetConfig+0x148>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d02a      	beq.n	800e94a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7ff f973 	bl	800dbe8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e902:	4b1d      	ldr	r3, [pc, #116]	@ (800e978 <USBD_SetConfig+0x148>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	461a      	mov	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e90c:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <USBD_SetConfig+0x148>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7ff f94c 	bl	800dbb0 <USBD_SetClassConfig>
 800e918:	4603      	mov	r3, r0
 800e91a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e91c:	7bfb      	ldrb	r3, [r7, #15]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00f      	beq.n	800e942 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e922:	6839      	ldr	r1, [r7, #0]
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f903 	bl	800eb30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff f958 	bl	800dbe8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2202      	movs	r2, #2
 800e93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e940:	e014      	b.n	800e96c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f9bf 	bl	800ecc6 <USBD_CtlSendStatus>
      break;
 800e948:	e010      	b.n	800e96c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f9bb 	bl	800ecc6 <USBD_CtlSendStatus>
      break;
 800e950:	e00c      	b.n	800e96c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f8eb 	bl	800eb30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e95a:	4b07      	ldr	r3, [pc, #28]	@ (800e978 <USBD_SetConfig+0x148>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7ff f941 	bl	800dbe8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e966:	2303      	movs	r3, #3
 800e968:	73fb      	strb	r3, [r7, #15]
      break;
 800e96a:	bf00      	nop
  }

  return ret;
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20000560 	.word	0x20000560

0800e97c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	88db      	ldrh	r3, [r3, #6]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d004      	beq.n	800e998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f8cd 	bl	800eb30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e996:	e023      	b.n	800e9e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	dc02      	bgt.n	800e9aa <USBD_GetConfig+0x2e>
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dc03      	bgt.n	800e9b0 <USBD_GetConfig+0x34>
 800e9a8:	e015      	b.n	800e9d6 <USBD_GetConfig+0x5a>
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d00b      	beq.n	800e9c6 <USBD_GetConfig+0x4a>
 800e9ae:	e012      	b.n	800e9d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f927 	bl	800ec12 <USBD_CtlSendData>
        break;
 800e9c4:	e00c      	b.n	800e9e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f91f 	bl	800ec12 <USBD_CtlSendData>
        break;
 800e9d4:	e004      	b.n	800e9e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f8a9 	bl	800eb30 <USBD_CtlError>
        break;
 800e9de:	bf00      	nop
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d81e      	bhi.n	800ea3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	88db      	ldrh	r3, [r3, #6]
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d004      	beq.n	800ea12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f890 	bl	800eb30 <USBD_CtlError>
        break;
 800ea10:	e01a      	b.n	800ea48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d005      	beq.n	800ea2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	f043 0202 	orr.w	r2, r3, #2
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	330c      	adds	r3, #12
 800ea32:	2202      	movs	r2, #2
 800ea34:	4619      	mov	r1, r3
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f8eb 	bl	800ec12 <USBD_CtlSendData>
      break;
 800ea3c:	e004      	b.n	800ea48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea3e:	6839      	ldr	r1, [r7, #0]
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 f875 	bl	800eb30 <USBD_CtlError>
      break;
 800ea46:	bf00      	nop
  }
}
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	885b      	ldrh	r3, [r3, #2]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d106      	bne.n	800ea70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f92b 	bl	800ecc6 <USBD_CtlSendStatus>
  }
}
 800ea70:	bf00      	nop
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d80b      	bhi.n	800eaa8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	885b      	ldrh	r3, [r3, #2]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d10c      	bne.n	800eab2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f910 	bl	800ecc6 <USBD_CtlSendStatus>
      }
      break;
 800eaa6:	e004      	b.n	800eab2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f840 	bl	800eb30 <USBD_CtlError>
      break;
 800eab0:	e000      	b.n	800eab4 <USBD_ClrFeature+0x3c>
      break;
 800eab2:	bf00      	nop
  }
}
 800eab4:	bf00      	nop
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	781a      	ldrb	r2, [r3, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3301      	adds	r3, #1
 800ead6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	781a      	ldrb	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3301      	adds	r3, #1
 800eae4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f7ff fa92 	bl	800e010 <SWAPBYTE>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff fa85 	bl	800e010 <SWAPBYTE>
 800eb06:	4603      	mov	r3, r0
 800eb08:	461a      	mov	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3301      	adds	r3, #1
 800eb12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	3301      	adds	r3, #1
 800eb18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7ff fa78 	bl	800e010 <SWAPBYTE>
 800eb20:	4603      	mov	r3, r0
 800eb22:	461a      	mov	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	80da      	strh	r2, [r3, #6]
}
 800eb28:	bf00      	nop
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb3a:	2180      	movs	r1, #128	@ 0x80
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fcbf 	bl	800f4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb42:	2100      	movs	r1, #0
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fcbb 	bl	800f4c0 <USBD_LL_StallEP>
}
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	60b9      	str	r1, [r7, #8]
 800eb5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d036      	beq.n	800ebd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb6c:	6938      	ldr	r0, [r7, #16]
 800eb6e:	f000 f836 	bl	800ebde <USBD_GetLen>
 800eb72:	4603      	mov	r3, r0
 800eb74:	3301      	adds	r3, #1
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	4413      	add	r3, r2
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	7812      	ldrb	r2, [r2, #0]
 800eb8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb8c:	7dfb      	ldrb	r3, [r7, #23]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	4413      	add	r3, r2
 800eb98:	2203      	movs	r2, #3
 800eb9a:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eba2:	e013      	b.n	800ebcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eba4:	7dfb      	ldrb	r3, [r7, #23]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	4413      	add	r3, r2
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	7812      	ldrb	r2, [r2, #0]
 800ebae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	613b      	str	r3, [r7, #16]
    idx++;
 800ebb6:	7dfb      	ldrb	r3, [r7, #23]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
    idx++;
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1e7      	bne.n	800eba4 <USBD_GetString+0x52>
 800ebd4:	e000      	b.n	800ebd8 <USBD_GetString+0x86>
    return;
 800ebd6:	bf00      	nop
  }
}
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	b085      	sub	sp, #20
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebee:	e005      	b.n	800ebfc <USBD_GetLen+0x1e>
  {
    len++;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1f5      	bne.n	800ebf0 <USBD_GetLen+0x12>
  }

  return len;
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2202      	movs	r2, #2
 800ec22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	2100      	movs	r1, #0
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f000 fcca 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	2100      	movs	r1, #0
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f000 fcb9 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	60f8      	str	r0, [r7, #12]
 800ec72:	60b9      	str	r1, [r7, #8]
 800ec74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2203      	movs	r2, #3
 800ec7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	2100      	movs	r1, #0
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f000 fcbd 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	68ba      	ldr	r2, [r7, #8]
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f000 fcac 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecbc:	2300      	movs	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2204      	movs	r2, #4
 800ecd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fc78 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2205      	movs	r2, #5
 800ecf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2100      	movs	r1, #0
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fc86 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2120      	movs	r1, #32
 800ed1c:	4818      	ldr	r0, [pc, #96]	@ (800ed80 <MX_USB_Device_Init+0x6c>)
 800ed1e:	f7f5 fb43 	bl	80043a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800ed22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ed26:	f7f4 fe11 	bl	800394c <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	2120      	movs	r1, #32
 800ed2e:	4814      	ldr	r0, [pc, #80]	@ (800ed80 <MX_USB_Device_Init+0x6c>)
 800ed30:	f7f5 fb3a 	bl	80043a8 <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ed34:	2200      	movs	r2, #0
 800ed36:	4913      	ldr	r1, [pc, #76]	@ (800ed84 <MX_USB_Device_Init+0x70>)
 800ed38:	4813      	ldr	r0, [pc, #76]	@ (800ed88 <MX_USB_Device_Init+0x74>)
 800ed3a:	f7fe fecb 	bl	800dad4 <USBD_Init>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d001      	beq.n	800ed48 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800ed44:	f7f2 fb4f 	bl	80013e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ed48:	4910      	ldr	r1, [pc, #64]	@ (800ed8c <MX_USB_Device_Init+0x78>)
 800ed4a:	480f      	ldr	r0, [pc, #60]	@ (800ed88 <MX_USB_Device_Init+0x74>)
 800ed4c:	f7fe fef2 	bl	800db34 <USBD_RegisterClass>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <MX_USB_Device_Init+0x46>
    Error_Handler();
 800ed56:	f7f2 fb46 	bl	80013e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ed5a:	490d      	ldr	r1, [pc, #52]	@ (800ed90 <MX_USB_Device_Init+0x7c>)
 800ed5c:	480a      	ldr	r0, [pc, #40]	@ (800ed88 <MX_USB_Device_Init+0x74>)
 800ed5e:	f7fe fe13 	bl	800d988 <USBD_CDC_RegisterInterface>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <MX_USB_Device_Init+0x58>
    Error_Handler();
 800ed68:	f7f2 fb3d 	bl	80013e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ed6c:	4806      	ldr	r0, [pc, #24]	@ (800ed88 <MX_USB_Device_Init+0x74>)
 800ed6e:	f7fe ff08 	bl	800db82 <USBD_Start>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d001      	beq.n	800ed7c <MX_USB_Device_Init+0x68>
    Error_Handler();
 800ed78:	f7f2 fb35 	bl	80013e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ed7c:	bf00      	nop
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	48000400 	.word	0x48000400
 800ed84:	20000130 	.word	0x20000130
 800ed88:	20000564 	.word	0x20000564
 800ed8c:	20000018 	.word	0x20000018
 800ed90:	2000011c 	.word	0x2000011c

0800ed94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed98:	2200      	movs	r2, #0
 800ed9a:	4905      	ldr	r1, [pc, #20]	@ (800edb0 <CDC_Init_FS+0x1c>)
 800ed9c:	4805      	ldr	r0, [pc, #20]	@ (800edb4 <CDC_Init_FS+0x20>)
 800ed9e:	f7fe fe08 	bl	800d9b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eda2:	4905      	ldr	r1, [pc, #20]	@ (800edb8 <CDC_Init_FS+0x24>)
 800eda4:	4803      	ldr	r0, [pc, #12]	@ (800edb4 <CDC_Init_FS+0x20>)
 800eda6:	f7fe fe22 	bl	800d9ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800edaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800edac:	4618      	mov	r0, r3
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	20001034 	.word	0x20001034
 800edb4:	20000564 	.word	0x20000564
 800edb8:	20000834 	.word	0x20000834

0800edbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800edbc:	b480      	push	{r7}
 800edbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800edc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	4603      	mov	r3, r0
 800edd4:	6039      	str	r1, [r7, #0]
 800edd6:	71fb      	strb	r3, [r7, #7]
 800edd8:	4613      	mov	r3, r2
 800edda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eddc:	79fb      	ldrb	r3, [r7, #7]
 800edde:	2b23      	cmp	r3, #35	@ 0x23
 800ede0:	d84a      	bhi.n	800ee78 <CDC_Control_FS+0xac>
 800ede2:	a201      	add	r2, pc, #4	@ (adr r2, 800ede8 <CDC_Control_FS+0x1c>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800ee79 	.word	0x0800ee79
 800edec:	0800ee79 	.word	0x0800ee79
 800edf0:	0800ee79 	.word	0x0800ee79
 800edf4:	0800ee79 	.word	0x0800ee79
 800edf8:	0800ee79 	.word	0x0800ee79
 800edfc:	0800ee79 	.word	0x0800ee79
 800ee00:	0800ee79 	.word	0x0800ee79
 800ee04:	0800ee79 	.word	0x0800ee79
 800ee08:	0800ee79 	.word	0x0800ee79
 800ee0c:	0800ee79 	.word	0x0800ee79
 800ee10:	0800ee79 	.word	0x0800ee79
 800ee14:	0800ee79 	.word	0x0800ee79
 800ee18:	0800ee79 	.word	0x0800ee79
 800ee1c:	0800ee79 	.word	0x0800ee79
 800ee20:	0800ee79 	.word	0x0800ee79
 800ee24:	0800ee79 	.word	0x0800ee79
 800ee28:	0800ee79 	.word	0x0800ee79
 800ee2c:	0800ee79 	.word	0x0800ee79
 800ee30:	0800ee79 	.word	0x0800ee79
 800ee34:	0800ee79 	.word	0x0800ee79
 800ee38:	0800ee79 	.word	0x0800ee79
 800ee3c:	0800ee79 	.word	0x0800ee79
 800ee40:	0800ee79 	.word	0x0800ee79
 800ee44:	0800ee79 	.word	0x0800ee79
 800ee48:	0800ee79 	.word	0x0800ee79
 800ee4c:	0800ee79 	.word	0x0800ee79
 800ee50:	0800ee79 	.word	0x0800ee79
 800ee54:	0800ee79 	.word	0x0800ee79
 800ee58:	0800ee79 	.word	0x0800ee79
 800ee5c:	0800ee79 	.word	0x0800ee79
 800ee60:	0800ee79 	.word	0x0800ee79
 800ee64:	0800ee79 	.word	0x0800ee79
 800ee68:	0800ee79 	.word	0x0800ee79
 800ee6c:	0800ee79 	.word	0x0800ee79
 800ee70:	0800ee79 	.word	0x0800ee79
 800ee74:	0800ee79 	.word	0x0800ee79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee78:	bf00      	nop
  }

  return (USBD_OK);
 800ee7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	4810      	ldr	r0, [pc, #64]	@ (800eed8 <CDC_Receive_FS+0x50>)
 800ee96:	f7fe fdaa 	bl	800d9ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee9a:	480f      	ldr	r0, [pc, #60]	@ (800eed8 <CDC_Receive_FS+0x50>)
 800ee9c:	f7fe fdf0 	bl	800da80 <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800eea0:	4b0e      	ldr	r3, [pc, #56]	@ (800eedc <CDC_Receive_FS+0x54>)
 800eea2:	2201      	movs	r2, #1
 800eea4:	669a      	str	r2, [r3, #104]	@ 0x68

  uint8_t len = (uint8_t) *Len;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800eeac:	2240      	movs	r2, #64	@ 0x40
 800eeae:	2100      	movs	r1, #0
 800eeb0:	480b      	ldr	r0, [pc, #44]	@ (800eee0 <CDC_Receive_FS+0x58>)
 800eeb2:	f000 fca9 	bl	800f808 <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4808      	ldr	r0, [pc, #32]	@ (800eee0 <CDC_Receive_FS+0x58>)
 800eebe:	f000 fcd5 	bl	800f86c <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800eec2:	2240      	movs	r2, #64	@ 0x40
 800eec4:	2100      	movs	r1, #0
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fc9e 	bl	800f808 <memset>

  return (USBD_OK);
 800eecc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20000564 	.word	0x20000564
 800eedc:	200003f4 	.word	0x200003f4
 800eee0:	20000410 	.word	0x20000410

0800eee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	460b      	mov	r3, r1
 800eeee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eef4:	4b0d      	ldr	r3, [pc, #52]	@ (800ef2c <CDC_Transmit_FS+0x48>)
 800eef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eefa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ef06:	2301      	movs	r3, #1
 800ef08:	e00b      	b.n	800ef22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ef0a:	887b      	ldrh	r3, [r7, #2]
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	6879      	ldr	r1, [r7, #4]
 800ef10:	4806      	ldr	r0, [pc, #24]	@ (800ef2c <CDC_Transmit_FS+0x48>)
 800ef12:	f7fe fd4e 	bl	800d9b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ef16:	4805      	ldr	r0, [pc, #20]	@ (800ef2c <CDC_Transmit_FS+0x48>)
 800ef18:	f7fe fd82 	bl	800da20 <USBD_CDC_TransmitPacket>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20000564 	.word	0x20000564

0800ef30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ef42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	371c      	adds	r7, #28
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
	...

0800ef54 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	6039      	str	r1, [r7, #0]
 800ef5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2212      	movs	r2, #18
 800ef64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ef66:	4b03      	ldr	r3, [pc, #12]	@ (800ef74 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	20000150 	.word	0x20000150

0800ef78 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	6039      	str	r1, [r7, #0]
 800ef82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2204      	movs	r2, #4
 800ef88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef8a:	4b03      	ldr	r3, [pc, #12]	@ (800ef98 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	370c      	adds	r7, #12
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr
 800ef98:	20000164 	.word	0x20000164

0800ef9c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	6039      	str	r1, [r7, #0]
 800efa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efa8:	79fb      	ldrb	r3, [r7, #7]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d105      	bne.n	800efba <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	4907      	ldr	r1, [pc, #28]	@ (800efd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efb2:	4808      	ldr	r0, [pc, #32]	@ (800efd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efb4:	f7ff fdcd 	bl	800eb52 <USBD_GetString>
 800efb8:	e004      	b.n	800efc4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4904      	ldr	r1, [pc, #16]	@ (800efd0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efbe:	4805      	ldr	r0, [pc, #20]	@ (800efd4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efc0:	f7ff fdc7 	bl	800eb52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efc4:	4b02      	ldr	r3, [pc, #8]	@ (800efd0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	20001834 	.word	0x20001834
 800efd4:	0801018c 	.word	0x0801018c

0800efd8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	4904      	ldr	r1, [pc, #16]	@ (800eff8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800efe8:	4804      	ldr	r0, [pc, #16]	@ (800effc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800efea:	f7ff fdb2 	bl	800eb52 <USBD_GetString>
  return USBD_StrDesc;
 800efee:	4b02      	ldr	r3, [pc, #8]	@ (800eff8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20001834 	.word	0x20001834
 800effc:	080101a0 	.word	0x080101a0

0800f000 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	6039      	str	r1, [r7, #0]
 800f00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	221a      	movs	r2, #26
 800f010:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f012:	f000 f843 	bl	800f09c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f016:	4b02      	ldr	r3, [pc, #8]	@ (800f020 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000168 	.word	0x20000168

0800f024 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	6039      	str	r1, [r7, #0]
 800f02e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d105      	bne.n	800f042 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f036:	683a      	ldr	r2, [r7, #0]
 800f038:	4907      	ldr	r1, [pc, #28]	@ (800f058 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f03a:	4808      	ldr	r0, [pc, #32]	@ (800f05c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f03c:	f7ff fd89 	bl	800eb52 <USBD_GetString>
 800f040:	e004      	b.n	800f04c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f042:	683a      	ldr	r2, [r7, #0]
 800f044:	4904      	ldr	r1, [pc, #16]	@ (800f058 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f046:	4805      	ldr	r0, [pc, #20]	@ (800f05c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f048:	f7ff fd83 	bl	800eb52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f04c:	4b02      	ldr	r3, [pc, #8]	@ (800f058 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20001834 	.word	0x20001834
 800f05c:	080101b4 	.word	0x080101b4

0800f060 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	4603      	mov	r3, r0
 800f068:	6039      	str	r1, [r7, #0]
 800f06a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d105      	bne.n	800f07e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	4907      	ldr	r1, [pc, #28]	@ (800f094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f076:	4808      	ldr	r0, [pc, #32]	@ (800f098 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f078:	f7ff fd6b 	bl	800eb52 <USBD_GetString>
 800f07c:	e004      	b.n	800f088 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	4904      	ldr	r1, [pc, #16]	@ (800f094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f082:	4805      	ldr	r0, [pc, #20]	@ (800f098 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f084:	f7ff fd65 	bl	800eb52 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f088:	4b02      	ldr	r3, [pc, #8]	@ (800f094 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	20001834 	.word	0x20001834
 800f098:	080101c0 	.word	0x080101c0

0800f09c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e0 <Get_SerialNum+0x44>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f0e4 <Get_SerialNum+0x48>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f0e8 <Get_SerialNum+0x4c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d009      	beq.n	800f0d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f0c2:	2208      	movs	r2, #8
 800f0c4:	4909      	ldr	r1, [pc, #36]	@ (800f0ec <Get_SerialNum+0x50>)
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f000 f814 	bl	800f0f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0cc:	2204      	movs	r2, #4
 800f0ce:	4908      	ldr	r1, [pc, #32]	@ (800f0f0 <Get_SerialNum+0x54>)
 800f0d0:	68b8      	ldr	r0, [r7, #8]
 800f0d2:	f000 f80f 	bl	800f0f4 <IntToUnicode>
  }
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	1fff7590 	.word	0x1fff7590
 800f0e4:	1fff7594 	.word	0x1fff7594
 800f0e8:	1fff7598 	.word	0x1fff7598
 800f0ec:	2000016a 	.word	0x2000016a
 800f0f0:	2000017a 	.word	0x2000017a

0800f0f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b087      	sub	sp, #28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	4613      	mov	r3, r2
 800f100:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]
 800f10a:	e027      	b.n	800f15c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	0f1b      	lsrs	r3, r3, #28
 800f110:	2b09      	cmp	r3, #9
 800f112:	d80b      	bhi.n	800f12c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	0f1b      	lsrs	r3, r3, #28
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	005b      	lsls	r3, r3, #1
 800f11e:	4619      	mov	r1, r3
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	440b      	add	r3, r1
 800f124:	3230      	adds	r2, #48	@ 0x30
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]
 800f12a:	e00a      	b.n	800f142 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	0f1b      	lsrs	r3, r3, #28
 800f130:	b2da      	uxtb	r2, r3
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	4619      	mov	r1, r3
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	440b      	add	r3, r1
 800f13c:	3237      	adds	r2, #55	@ 0x37
 800f13e:	b2d2      	uxtb	r2, r2
 800f140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	011b      	lsls	r3, r3, #4
 800f146:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f148:	7dfb      	ldrb	r3, [r7, #23]
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	3301      	adds	r3, #1
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	4413      	add	r3, r2
 800f152:	2200      	movs	r2, #0
 800f154:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	3301      	adds	r3, #1
 800f15a:	75fb      	strb	r3, [r7, #23]
 800f15c:	7dfa      	ldrb	r2, [r7, #23]
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	429a      	cmp	r2, r3
 800f162:	d3d3      	bcc.n	800f10c <IntToUnicode+0x18>
  }
}
 800f164:	bf00      	nop
 800f166:	bf00      	nop
 800f168:	371c      	adds	r7, #28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
	...

0800f174 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b098      	sub	sp, #96	@ 0x60
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f17c:	f107 0310 	add.w	r3, r7, #16
 800f180:	2250      	movs	r2, #80	@ 0x50
 800f182:	2100      	movs	r1, #0
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fb3f 	bl	800f808 <memset>
  if(pcdHandle->Instance==USB)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4a15      	ldr	r2, [pc, #84]	@ (800f1e4 <HAL_PCD_MspInit+0x70>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d122      	bne.n	800f1da <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f194:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f198:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f19a:	2300      	movs	r3, #0
 800f19c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f19e:	f107 0310 	add.w	r3, r7, #16
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7f8 fad2 	bl	800774c <HAL_RCCEx_PeriphCLKConfig>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f1ae:	f7f2 f91a 	bl	80013e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f1e8 <HAL_PCD_MspInit+0x74>)
 800f1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f1e8 <HAL_PCD_MspInit+0x74>)
 800f1b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f1bc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1be:	4b0a      	ldr	r3, [pc, #40]	@ (800f1e8 <HAL_PCD_MspInit+0x74>)
 800f1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1c6:	60fb      	str	r3, [r7, #12]
 800f1c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	2014      	movs	r0, #20
 800f1d0:	f7f4 fcb9 	bl	8003b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f1d4:	2014      	movs	r0, #20
 800f1d6:	f7f4 fcd0 	bl	8003b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f1da:	bf00      	nop
 800f1dc:	3760      	adds	r7, #96	@ 0x60
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	40005c00 	.word	0x40005c00
 800f1e8:	40021000 	.word	0x40021000

0800f1ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f200:	4619      	mov	r1, r3
 800f202:	4610      	mov	r0, r2
 800f204:	f7fe fd08 	bl	800dc18 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f208:	bf00      	nop
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	460b      	mov	r3, r1
 800f21a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f222:	78fa      	ldrb	r2, [r7, #3]
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	4613      	mov	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	440b      	add	r3, r1
 800f230:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	78fb      	ldrb	r3, [r7, #3]
 800f238:	4619      	mov	r1, r3
 800f23a:	f7fe fd42 	bl	800dcc2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b082      	sub	sp, #8
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
 800f24e:	460b      	mov	r3, r1
 800f250:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f258:	78fa      	ldrb	r2, [r7, #3]
 800f25a:	6879      	ldr	r1, [r7, #4]
 800f25c:	4613      	mov	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	440b      	add	r3, r1
 800f266:	3324      	adds	r3, #36	@ 0x24
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	78fb      	ldrb	r3, [r7, #3]
 800f26c:	4619      	mov	r1, r3
 800f26e:	f7fe fd8b 	bl	800dd88 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f272:	bf00      	nop
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b082      	sub	sp, #8
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe fe9f 	bl	800dfcc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f28e:	bf00      	nop
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	795b      	ldrb	r3, [r3, #5]
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d001      	beq.n	800f2ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f2aa:	f7f2 f89c 	bl	80013e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2b4:	7bfa      	ldrb	r2, [r7, #15]
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe fe49 	bl	800df50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fdf5 	bl	800deb4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f2ca:	bf00      	nop
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe fe44 	bl	800df70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7a5b      	ldrb	r3, [r3, #9]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d005      	beq.n	800f2fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2f0:	4b04      	ldr	r3, [pc, #16]	@ (800f304 <HAL_PCD_SuspendCallback+0x30>)
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	4a03      	ldr	r2, [pc, #12]	@ (800f304 <HAL_PCD_SuspendCallback+0x30>)
 800f2f6:	f043 0306 	orr.w	r3, r3, #6
 800f2fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f2fc:	bf00      	nop
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	e000ed00 	.word	0xe000ed00

0800f308 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7a5b      	ldrb	r3, [r3, #9]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d007      	beq.n	800f328 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f318:	4b08      	ldr	r3, [pc, #32]	@ (800f33c <HAL_PCD_ResumeCallback+0x34>)
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	4a07      	ldr	r2, [pc, #28]	@ (800f33c <HAL_PCD_ResumeCallback+0x34>)
 800f31e:	f023 0306 	bic.w	r3, r3, #6
 800f322:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f324:	f000 f9f8 	bl	800f718 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fe34 	bl	800df9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	e000ed00 	.word	0xe000ed00

0800f340 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f348:	4a2b      	ldr	r2, [pc, #172]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a29      	ldr	r2, [pc, #164]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f354:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f358:	4b27      	ldr	r3, [pc, #156]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f35a:	4a28      	ldr	r2, [pc, #160]	@ (800f3fc <USBD_LL_Init+0xbc>)
 800f35c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f35e:	4b26      	ldr	r3, [pc, #152]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f360:	2208      	movs	r2, #8
 800f362:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f364:	4b24      	ldr	r3, [pc, #144]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f366:	2202      	movs	r2, #2
 800f368:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f36a:	4b23      	ldr	r3, [pc, #140]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f36c:	2202      	movs	r2, #2
 800f36e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f370:	4b21      	ldr	r3, [pc, #132]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f372:	2200      	movs	r2, #0
 800f374:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f376:	4b20      	ldr	r3, [pc, #128]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f378:	2200      	movs	r2, #0
 800f37a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f37c:	4b1e      	ldr	r3, [pc, #120]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f37e:	2200      	movs	r2, #0
 800f380:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f382:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f384:	2200      	movs	r2, #0
 800f386:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f388:	481b      	ldr	r0, [pc, #108]	@ (800f3f8 <USBD_LL_Init+0xb8>)
 800f38a:	f7f5 fefb 	bl	8005184 <HAL_PCD_Init>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f394:	f7f2 f827 	bl	80013e6 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f39e:	2318      	movs	r3, #24
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	f7f7 fb82 	bl	8006aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ae:	2358      	movs	r3, #88	@ 0x58
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2180      	movs	r1, #128	@ 0x80
 800f3b4:	f7f7 fb7a 	bl	8006aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3be:	23c0      	movs	r3, #192	@ 0xc0
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2181      	movs	r1, #129	@ 0x81
 800f3c4:	f7f7 fb72 	bl	8006aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	f7f7 fb69 	bl	8006aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	2182      	movs	r1, #130	@ 0x82
 800f3e8:	f7f7 fb60 	bl	8006aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20001a34 	.word	0x20001a34
 800f3fc:	40005c00 	.word	0x40005c00

0800f400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f408:	2300      	movs	r3, #0
 800f40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f416:	4618      	mov	r0, r3
 800f418:	f7f5 ff82 	bl	8005320 <HAL_PCD_Start>
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	4618      	mov	r0, r3
 800f424:	f000 f97e 	bl	800f724 <USBD_Get_USB_Status>
 800f428:	4603      	mov	r3, r0
 800f42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	4608      	mov	r0, r1
 800f440:	4611      	mov	r1, r2
 800f442:	461a      	mov	r2, r3
 800f444:	4603      	mov	r3, r0
 800f446:	70fb      	strb	r3, [r7, #3]
 800f448:	460b      	mov	r3, r1
 800f44a:	70bb      	strb	r3, [r7, #2]
 800f44c:	4613      	mov	r3, r2
 800f44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f45e:	78bb      	ldrb	r3, [r7, #2]
 800f460:	883a      	ldrh	r2, [r7, #0]
 800f462:	78f9      	ldrb	r1, [r7, #3]
 800f464:	f7f6 f8c9 	bl	80055fa <HAL_PCD_EP_Open>
 800f468:	4603      	mov	r3, r0
 800f46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 f958 	bl	800f724 <USBD_Get_USB_Status>
 800f474:	4603      	mov	r3, r0
 800f476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f478:	7bbb      	ldrb	r3, [r7, #14]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	460b      	mov	r3, r1
 800f48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48e:	2300      	movs	r3, #0
 800f490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f49c:	78fa      	ldrb	r2, [r7, #3]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7f6 f909 	bl	80056b8 <HAL_PCD_EP_Close>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f000 f939 	bl	800f724 <USBD_Get_USB_Status>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4da:	78fa      	ldrb	r2, [r7, #3]
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7f6 f9b2 	bl	8005848 <HAL_PCD_EP_SetStall>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f000 f91a 	bl	800f724 <USBD_Get_USB_Status>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	460b      	mov	r3, r1
 800f508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f50a:	2300      	movs	r3, #0
 800f50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f50e:	2300      	movs	r3, #0
 800f510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f518:	78fa      	ldrb	r2, [r7, #3]
 800f51a:	4611      	mov	r1, r2
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7f6 f9e5 	bl	80058ec <HAL_PCD_EP_ClrStall>
 800f522:	4603      	mov	r3, r0
 800f524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 f8fb 	bl	800f724 <USBD_Get_USB_Status>
 800f52e:	4603      	mov	r3, r0
 800f530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f532:	7bbb      	ldrb	r3, [r7, #14]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f54e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f554:	2b00      	cmp	r3, #0
 800f556:	da0b      	bge.n	800f570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f55e:	68f9      	ldr	r1, [r7, #12]
 800f560:	4613      	mov	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	440b      	add	r3, r1
 800f56a:	3312      	adds	r3, #18
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	e00b      	b.n	800f588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f576:	68f9      	ldr	r1, [r7, #12]
 800f578:	4613      	mov	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	4413      	add	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	440b      	add	r3, r1
 800f582:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f586:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f5ae:	78fa      	ldrb	r2, [r7, #3]
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f5 fffd 	bl	80055b2 <HAL_PCD_SetAddress>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 f8b0 	bl	800f724 <USBD_Get_USB_Status>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b086      	sub	sp, #24
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	60f8      	str	r0, [r7, #12]
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	603b      	str	r3, [r7, #0]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f5f0:	7af9      	ldrb	r1, [r7, #11]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f7f6 f8f0 	bl	80057da <HAL_PCD_EP_Transmit>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f88f 	bl	800f724 <USBD_Get_USB_Status>
 800f606:	4603      	mov	r3, r0
 800f608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	607a      	str	r2, [r7, #4]
 800f61e:	603b      	str	r3, [r7, #0]
 800f620:	460b      	mov	r3, r1
 800f622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f632:	7af9      	ldrb	r1, [r7, #11]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	f7f6 f886 	bl	8005748 <HAL_PCD_EP_Receive>
 800f63c:	4603      	mov	r3, r0
 800f63e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f86e 	bl	800f724 <USBD_Get_USB_Status>
 800f648:	4603      	mov	r3, r0
 800f64a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f64c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3718      	adds	r7, #24
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b082      	sub	sp, #8
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	460b      	mov	r3, r1
 800f660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f668:	78fa      	ldrb	r2, [r7, #3]
 800f66a:	4611      	mov	r1, r2
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7f6 f89c 	bl	80057aa <HAL_PCD_EP_GetRxCount>
 800f672:	4603      	mov	r3, r0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	460b      	mov	r3, r1
 800f686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f688:	78fb      	ldrb	r3, [r7, #3]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <HAL_PCDEx_LPM_Callback+0x18>
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d013      	beq.n	800f6ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f692:	e023      	b.n	800f6dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7a5b      	ldrb	r3, [r3, #9]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d007      	beq.n	800f6ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f69c:	f000 f83c 	bl	800f718 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6a0:	4b10      	ldr	r3, [pc, #64]	@ (800f6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	4a0f      	ldr	r2, [pc, #60]	@ (800f6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6a6:	f023 0306 	bic.w	r3, r3, #6
 800f6aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe fc72 	bl	800df9c <USBD_LL_Resume>
    break;
 800f6b8:	e010      	b.n	800f6dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fe fc55 	bl	800df70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	7a5b      	ldrb	r3, [r3, #9]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d005      	beq.n	800f6da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6ce:	4b05      	ldr	r3, [pc, #20]	@ (800f6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6d0:	691b      	ldr	r3, [r3, #16]
 800f6d2:	4a04      	ldr	r2, [pc, #16]	@ (800f6e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6d4:	f043 0306 	orr.w	r3, r3, #6
 800f6d8:	6113      	str	r3, [r2, #16]
    break;
 800f6da:	bf00      	nop
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	e000ed00 	.word	0xe000ed00

0800f6e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f6f0:	4b03      	ldr	r3, [pc, #12]	@ (800f700 <USBD_static_malloc+0x18>)
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	370c      	adds	r7, #12
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	20001d10 	.word	0x20001d10

0800f704 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]

}
 800f70c:	bf00      	nop
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f71c:	f7f1 fe18 	bl	8001350 <SystemClock_Config>
}
 800f720:	bf00      	nop
 800f722:	bd80      	pop	{r7, pc}

0800f724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d817      	bhi.n	800f768 <USBD_Get_USB_Status+0x44>
 800f738:	a201      	add	r2, pc, #4	@ (adr r2, 800f740 <USBD_Get_USB_Status+0x1c>)
 800f73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f73e:	bf00      	nop
 800f740:	0800f751 	.word	0x0800f751
 800f744:	0800f757 	.word	0x0800f757
 800f748:	0800f75d 	.word	0x0800f75d
 800f74c:	0800f763 	.word	0x0800f763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	73fb      	strb	r3, [r7, #15]
    break;
 800f754:	e00b      	b.n	800f76e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f756:	2303      	movs	r3, #3
 800f758:	73fb      	strb	r3, [r7, #15]
    break;
 800f75a:	e008      	b.n	800f76e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f75c:	2301      	movs	r3, #1
 800f75e:	73fb      	strb	r3, [r7, #15]
    break;
 800f760:	e005      	b.n	800f76e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f762:	2303      	movs	r3, #3
 800f764:	73fb      	strb	r3, [r7, #15]
    break;
 800f766:	e002      	b.n	800f76e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f768:	2303      	movs	r3, #3
 800f76a:	73fb      	strb	r3, [r7, #15]
    break;
 800f76c:	bf00      	nop
  }
  return usb_status;
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3714      	adds	r7, #20
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <arm_sin_f32>:
 800f77c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f7fc <arm_sin_f32+0x80>
 800f780:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f790:	d504      	bpl.n	800f79c <arm_sin_f32+0x20>
 800f792:	ee17 3a90 	vmov	r3, s15
 800f796:	3b01      	subs	r3, #1
 800f798:	ee07 3a90 	vmov	s15, r3
 800f79c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7a0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800f800 <arm_sin_f32+0x84>
 800f7a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7a8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f7ac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f7b0:	ee17 3a90 	vmov	r3, s15
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7ba:	d21a      	bcs.n	800f7f2 <arm_sin_f32+0x76>
 800f7bc:	ee07 3a90 	vmov	s15, r3
 800f7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c4:	1c59      	adds	r1, r3, #1
 800f7c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7ca:	4a0e      	ldr	r2, [pc, #56]	@ (800f804 <arm_sin_f32+0x88>)
 800f7cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f7d8:	ed93 7a00 	vldr	s14, [r3]
 800f7dc:	edd2 6a00 	vldr	s13, [r2]
 800f7e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f7e4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f7e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f7f0:	4770      	bx	lr
 800f7f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	e7e6      	b.n	800f7ca <arm_sin_f32+0x4e>
 800f7fc:	3e22f983 	.word	0x3e22f983
 800f800:	44000000 	.word	0x44000000
 800f804:	08010210 	.word	0x08010210

0800f808 <memset>:
 800f808:	4402      	add	r2, r0
 800f80a:	4603      	mov	r3, r0
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d100      	bne.n	800f812 <memset+0xa>
 800f810:	4770      	bx	lr
 800f812:	f803 1b01 	strb.w	r1, [r3], #1
 800f816:	e7f9      	b.n	800f80c <memset+0x4>

0800f818 <__errno>:
 800f818:	4b01      	ldr	r3, [pc, #4]	@ (800f820 <__errno+0x8>)
 800f81a:	6818      	ldr	r0, [r3, #0]
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	20000184 	.word	0x20000184

0800f824 <__libc_init_array>:
 800f824:	b570      	push	{r4, r5, r6, lr}
 800f826:	4d0d      	ldr	r5, [pc, #52]	@ (800f85c <__libc_init_array+0x38>)
 800f828:	4c0d      	ldr	r4, [pc, #52]	@ (800f860 <__libc_init_array+0x3c>)
 800f82a:	1b64      	subs	r4, r4, r5
 800f82c:	10a4      	asrs	r4, r4, #2
 800f82e:	2600      	movs	r6, #0
 800f830:	42a6      	cmp	r6, r4
 800f832:	d109      	bne.n	800f848 <__libc_init_array+0x24>
 800f834:	4d0b      	ldr	r5, [pc, #44]	@ (800f864 <__libc_init_array+0x40>)
 800f836:	4c0c      	ldr	r4, [pc, #48]	@ (800f868 <__libc_init_array+0x44>)
 800f838:	f000 fc92 	bl	8010160 <_init>
 800f83c:	1b64      	subs	r4, r4, r5
 800f83e:	10a4      	asrs	r4, r4, #2
 800f840:	2600      	movs	r6, #0
 800f842:	42a6      	cmp	r6, r4
 800f844:	d105      	bne.n	800f852 <__libc_init_array+0x2e>
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	f855 3b04 	ldr.w	r3, [r5], #4
 800f84c:	4798      	blx	r3
 800f84e:	3601      	adds	r6, #1
 800f850:	e7ee      	b.n	800f830 <__libc_init_array+0xc>
 800f852:	f855 3b04 	ldr.w	r3, [r5], #4
 800f856:	4798      	blx	r3
 800f858:	3601      	adds	r6, #1
 800f85a:	e7f2      	b.n	800f842 <__libc_init_array+0x1e>
 800f85c:	08010a3c 	.word	0x08010a3c
 800f860:	08010a3c 	.word	0x08010a3c
 800f864:	08010a3c 	.word	0x08010a3c
 800f868:	08010a40 	.word	0x08010a40

0800f86c <memcpy>:
 800f86c:	440a      	add	r2, r1
 800f86e:	4291      	cmp	r1, r2
 800f870:	f100 33ff 	add.w	r3, r0, #4294967295
 800f874:	d100      	bne.n	800f878 <memcpy+0xc>
 800f876:	4770      	bx	lr
 800f878:	b510      	push	{r4, lr}
 800f87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f882:	4291      	cmp	r1, r2
 800f884:	d1f9      	bne.n	800f87a <memcpy+0xe>
 800f886:	bd10      	pop	{r4, pc}

0800f888 <fmodf>:
 800f888:	b508      	push	{r3, lr}
 800f88a:	ed2d 8b02 	vpush	{d8}
 800f88e:	eef0 8a40 	vmov.f32	s17, s0
 800f892:	eeb0 8a60 	vmov.f32	s16, s1
 800f896:	f000 f879 	bl	800f98c <__ieee754_fmodf>
 800f89a:	eef4 8a48 	vcmp.f32	s17, s16
 800f89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a2:	d60c      	bvs.n	800f8be <fmodf+0x36>
 800f8a4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f8c4 <fmodf+0x3c>
 800f8a8:	eeb4 8a68 	vcmp.f32	s16, s17
 800f8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b0:	d105      	bne.n	800f8be <fmodf+0x36>
 800f8b2:	f7ff ffb1 	bl	800f818 <__errno>
 800f8b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f8ba:	2321      	movs	r3, #33	@ 0x21
 800f8bc:	6003      	str	r3, [r0, #0]
 800f8be:	ecbd 8b02 	vpop	{d8}
 800f8c2:	bd08      	pop	{r3, pc}
 800f8c4:	00000000 	.word	0x00000000

0800f8c8 <powf>:
 800f8c8:	b508      	push	{r3, lr}
 800f8ca:	ed2d 8b04 	vpush	{d8-d9}
 800f8ce:	eeb0 8a60 	vmov.f32	s16, s1
 800f8d2:	eeb0 9a40 	vmov.f32	s18, s0
 800f8d6:	f000 f8db 	bl	800fa90 <__ieee754_powf>
 800f8da:	eeb4 8a48 	vcmp.f32	s16, s16
 800f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e2:	eef0 8a40 	vmov.f32	s17, s0
 800f8e6:	d63e      	bvs.n	800f966 <powf+0x9e>
 800f8e8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f0:	d112      	bne.n	800f918 <powf+0x50>
 800f8f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fa:	d039      	beq.n	800f970 <powf+0xa8>
 800f8fc:	eeb0 0a48 	vmov.f32	s0, s16
 800f900:	f000 f839 	bl	800f976 <finitef>
 800f904:	b378      	cbz	r0, 800f966 <powf+0x9e>
 800f906:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90e:	d52a      	bpl.n	800f966 <powf+0x9e>
 800f910:	f7ff ff82 	bl	800f818 <__errno>
 800f914:	2322      	movs	r3, #34	@ 0x22
 800f916:	e014      	b.n	800f942 <powf+0x7a>
 800f918:	f000 f82d 	bl	800f976 <finitef>
 800f91c:	b998      	cbnz	r0, 800f946 <powf+0x7e>
 800f91e:	eeb0 0a49 	vmov.f32	s0, s18
 800f922:	f000 f828 	bl	800f976 <finitef>
 800f926:	b170      	cbz	r0, 800f946 <powf+0x7e>
 800f928:	eeb0 0a48 	vmov.f32	s0, s16
 800f92c:	f000 f823 	bl	800f976 <finitef>
 800f930:	b148      	cbz	r0, 800f946 <powf+0x7e>
 800f932:	eef4 8a68 	vcmp.f32	s17, s17
 800f936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93a:	d7e9      	bvc.n	800f910 <powf+0x48>
 800f93c:	f7ff ff6c 	bl	800f818 <__errno>
 800f940:	2321      	movs	r3, #33	@ 0x21
 800f942:	6003      	str	r3, [r0, #0]
 800f944:	e00f      	b.n	800f966 <powf+0x9e>
 800f946:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94e:	d10a      	bne.n	800f966 <powf+0x9e>
 800f950:	eeb0 0a49 	vmov.f32	s0, s18
 800f954:	f000 f80f 	bl	800f976 <finitef>
 800f958:	b128      	cbz	r0, 800f966 <powf+0x9e>
 800f95a:	eeb0 0a48 	vmov.f32	s0, s16
 800f95e:	f000 f80a 	bl	800f976 <finitef>
 800f962:	2800      	cmp	r0, #0
 800f964:	d1d4      	bne.n	800f910 <powf+0x48>
 800f966:	eeb0 0a68 	vmov.f32	s0, s17
 800f96a:	ecbd 8b04 	vpop	{d8-d9}
 800f96e:	bd08      	pop	{r3, pc}
 800f970:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f974:	e7f7      	b.n	800f966 <powf+0x9e>

0800f976 <finitef>:
 800f976:	ee10 3a10 	vmov	r3, s0
 800f97a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f97e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f982:	bfac      	ite	ge
 800f984:	2000      	movge	r0, #0
 800f986:	2001      	movlt	r0, #1
 800f988:	4770      	bx	lr
	...

0800f98c <__ieee754_fmodf>:
 800f98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98e:	ee10 5a90 	vmov	r5, s1
 800f992:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800f996:	1e43      	subs	r3, r0, #1
 800f998:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f99c:	d206      	bcs.n	800f9ac <__ieee754_fmodf+0x20>
 800f99e:	ee10 3a10 	vmov	r3, s0
 800f9a2:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800f9a6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800f9aa:	d304      	bcc.n	800f9b6 <__ieee754_fmodf+0x2a>
 800f9ac:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f9b0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b6:	4286      	cmp	r6, r0
 800f9b8:	dbfc      	blt.n	800f9b4 <__ieee754_fmodf+0x28>
 800f9ba:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800f9be:	d105      	bne.n	800f9cc <__ieee754_fmodf+0x40>
 800f9c0:	4b32      	ldr	r3, [pc, #200]	@ (800fa8c <__ieee754_fmodf+0x100>)
 800f9c2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800f9c6:	ed93 0a00 	vldr	s0, [r3]
 800f9ca:	e7f3      	b.n	800f9b4 <__ieee754_fmodf+0x28>
 800f9cc:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f9d0:	d140      	bne.n	800fa54 <__ieee754_fmodf+0xc8>
 800f9d2:	0232      	lsls	r2, r6, #8
 800f9d4:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800f9d8:	2a00      	cmp	r2, #0
 800f9da:	dc38      	bgt.n	800fa4e <__ieee754_fmodf+0xc2>
 800f9dc:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800f9e0:	d13e      	bne.n	800fa60 <__ieee754_fmodf+0xd4>
 800f9e2:	0207      	lsls	r7, r0, #8
 800f9e4:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800f9e8:	2f00      	cmp	r7, #0
 800f9ea:	da36      	bge.n	800fa5a <__ieee754_fmodf+0xce>
 800f9ec:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800f9f0:	bfb9      	ittee	lt
 800f9f2:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800f9f6:	1a5b      	sublt	r3, r3, r1
 800f9f8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800f9fc:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800fa00:	bfb8      	it	lt
 800fa02:	fa06 f303 	lsllt.w	r3, r6, r3
 800fa06:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800fa0a:	bfb5      	itete	lt
 800fa0c:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800fa10:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800fa14:	1aad      	sublt	r5, r5, r2
 800fa16:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800fa1a:	bfb8      	it	lt
 800fa1c:	40a8      	lsllt	r0, r5
 800fa1e:	1a89      	subs	r1, r1, r2
 800fa20:	1a1d      	subs	r5, r3, r0
 800fa22:	bb01      	cbnz	r1, 800fa66 <__ieee754_fmodf+0xda>
 800fa24:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800fa28:	bf38      	it	cc
 800fa2a:	462b      	movcc	r3, r5
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d0c7      	beq.n	800f9c0 <__ieee754_fmodf+0x34>
 800fa30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa34:	db1f      	blt.n	800fa76 <__ieee754_fmodf+0xea>
 800fa36:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800fa3a:	db1f      	blt.n	800fa7c <__ieee754_fmodf+0xf0>
 800fa3c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800fa40:	327f      	adds	r2, #127	@ 0x7f
 800fa42:	4323      	orrs	r3, r4
 800fa44:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fa48:	ee00 3a10 	vmov	s0, r3
 800fa4c:	e7b2      	b.n	800f9b4 <__ieee754_fmodf+0x28>
 800fa4e:	3901      	subs	r1, #1
 800fa50:	0052      	lsls	r2, r2, #1
 800fa52:	e7c1      	b.n	800f9d8 <__ieee754_fmodf+0x4c>
 800fa54:	15f1      	asrs	r1, r6, #23
 800fa56:	397f      	subs	r1, #127	@ 0x7f
 800fa58:	e7c0      	b.n	800f9dc <__ieee754_fmodf+0x50>
 800fa5a:	3a01      	subs	r2, #1
 800fa5c:	007f      	lsls	r7, r7, #1
 800fa5e:	e7c3      	b.n	800f9e8 <__ieee754_fmodf+0x5c>
 800fa60:	15c2      	asrs	r2, r0, #23
 800fa62:	3a7f      	subs	r2, #127	@ 0x7f
 800fa64:	e7c2      	b.n	800f9ec <__ieee754_fmodf+0x60>
 800fa66:	2d00      	cmp	r5, #0
 800fa68:	da02      	bge.n	800fa70 <__ieee754_fmodf+0xe4>
 800fa6a:	005b      	lsls	r3, r3, #1
 800fa6c:	3901      	subs	r1, #1
 800fa6e:	e7d7      	b.n	800fa20 <__ieee754_fmodf+0x94>
 800fa70:	d0a6      	beq.n	800f9c0 <__ieee754_fmodf+0x34>
 800fa72:	006b      	lsls	r3, r5, #1
 800fa74:	e7fa      	b.n	800fa6c <__ieee754_fmodf+0xe0>
 800fa76:	005b      	lsls	r3, r3, #1
 800fa78:	3a01      	subs	r2, #1
 800fa7a:	e7d9      	b.n	800fa30 <__ieee754_fmodf+0xa4>
 800fa7c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800fa80:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800fa84:	3282      	adds	r2, #130	@ 0x82
 800fa86:	4113      	asrs	r3, r2
 800fa88:	4323      	orrs	r3, r4
 800fa8a:	e7dd      	b.n	800fa48 <__ieee754_fmodf+0xbc>
 800fa8c:	08010a14 	.word	0x08010a14

0800fa90 <__ieee754_powf>:
 800fa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa94:	ee10 4a90 	vmov	r4, s1
 800fa98:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800fa9c:	ed2d 8b02 	vpush	{d8}
 800faa0:	ee10 6a10 	vmov	r6, s0
 800faa4:	eeb0 8a40 	vmov.f32	s16, s0
 800faa8:	eef0 8a60 	vmov.f32	s17, s1
 800faac:	d10c      	bne.n	800fac8 <__ieee754_powf+0x38>
 800faae:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800fab2:	0076      	lsls	r6, r6, #1
 800fab4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800fab8:	f240 829c 	bls.w	800fff4 <__ieee754_powf+0x564>
 800fabc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800fac0:	ecbd 8b02 	vpop	{d8}
 800fac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fac8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800facc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800fad0:	d802      	bhi.n	800fad8 <__ieee754_powf+0x48>
 800fad2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800fad6:	d908      	bls.n	800faea <__ieee754_powf+0x5a>
 800fad8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800fadc:	d1ee      	bne.n	800fabc <__ieee754_powf+0x2c>
 800fade:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800fae2:	0064      	lsls	r4, r4, #1
 800fae4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800fae8:	e7e6      	b.n	800fab8 <__ieee754_powf+0x28>
 800faea:	2e00      	cmp	r6, #0
 800faec:	da1e      	bge.n	800fb2c <__ieee754_powf+0x9c>
 800faee:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800faf2:	d22b      	bcs.n	800fb4c <__ieee754_powf+0xbc>
 800faf4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800faf8:	d332      	bcc.n	800fb60 <__ieee754_powf+0xd0>
 800fafa:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800fafe:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800fb02:	fa49 f503 	asr.w	r5, r9, r3
 800fb06:	fa05 f303 	lsl.w	r3, r5, r3
 800fb0a:	454b      	cmp	r3, r9
 800fb0c:	d126      	bne.n	800fb5c <__ieee754_powf+0xcc>
 800fb0e:	f005 0501 	and.w	r5, r5, #1
 800fb12:	f1c5 0502 	rsb	r5, r5, #2
 800fb16:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800fb1a:	d122      	bne.n	800fb62 <__ieee754_powf+0xd2>
 800fb1c:	2c00      	cmp	r4, #0
 800fb1e:	f280 826f 	bge.w	8010000 <__ieee754_powf+0x570>
 800fb22:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fb26:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800fb2a:	e7c9      	b.n	800fac0 <__ieee754_powf+0x30>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800fb32:	d1f0      	bne.n	800fb16 <__ieee754_powf+0x86>
 800fb34:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800fb38:	f000 825c 	beq.w	800fff4 <__ieee754_powf+0x564>
 800fb3c:	d908      	bls.n	800fb50 <__ieee754_powf+0xc0>
 800fb3e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800fea0 <__ieee754_powf+0x410>
 800fb42:	2c00      	cmp	r4, #0
 800fb44:	bfa8      	it	ge
 800fb46:	eeb0 0a68 	vmovge.f32	s0, s17
 800fb4a:	e7b9      	b.n	800fac0 <__ieee754_powf+0x30>
 800fb4c:	2502      	movs	r5, #2
 800fb4e:	e7ee      	b.n	800fb2e <__ieee754_powf+0x9e>
 800fb50:	2c00      	cmp	r4, #0
 800fb52:	f280 8252 	bge.w	800fffa <__ieee754_powf+0x56a>
 800fb56:	eeb1 0a68 	vneg.f32	s0, s17
 800fb5a:	e7b1      	b.n	800fac0 <__ieee754_powf+0x30>
 800fb5c:	2500      	movs	r5, #0
 800fb5e:	e7da      	b.n	800fb16 <__ieee754_powf+0x86>
 800fb60:	2500      	movs	r5, #0
 800fb62:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800fb66:	d102      	bne.n	800fb6e <__ieee754_powf+0xde>
 800fb68:	ee28 0a08 	vmul.f32	s0, s16, s16
 800fb6c:	e7a8      	b.n	800fac0 <__ieee754_powf+0x30>
 800fb6e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800fb72:	d109      	bne.n	800fb88 <__ieee754_powf+0xf8>
 800fb74:	2e00      	cmp	r6, #0
 800fb76:	db07      	blt.n	800fb88 <__ieee754_powf+0xf8>
 800fb78:	eeb0 0a48 	vmov.f32	s0, s16
 800fb7c:	ecbd 8b02 	vpop	{d8}
 800fb80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb84:	f000 bae8 	b.w	8010158 <__ieee754_sqrtf>
 800fb88:	eeb0 0a48 	vmov.f32	s0, s16
 800fb8c:	f000 fa50 	bl	8010030 <fabsf>
 800fb90:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800fb94:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800fb98:	4647      	mov	r7, r8
 800fb9a:	d002      	beq.n	800fba2 <__ieee754_powf+0x112>
 800fb9c:	f1b8 0f00 	cmp.w	r8, #0
 800fba0:	d117      	bne.n	800fbd2 <__ieee754_powf+0x142>
 800fba2:	2c00      	cmp	r4, #0
 800fba4:	bfbc      	itt	lt
 800fba6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800fbaa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	da86      	bge.n	800fac0 <__ieee754_powf+0x30>
 800fbb2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800fbb6:	ea58 0805 	orrs.w	r8, r8, r5
 800fbba:	d104      	bne.n	800fbc6 <__ieee754_powf+0x136>
 800fbbc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fbc0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800fbc4:	e77c      	b.n	800fac0 <__ieee754_powf+0x30>
 800fbc6:	2d01      	cmp	r5, #1
 800fbc8:	f47f af7a 	bne.w	800fac0 <__ieee754_powf+0x30>
 800fbcc:	eeb1 0a40 	vneg.f32	s0, s0
 800fbd0:	e776      	b.n	800fac0 <__ieee754_powf+0x30>
 800fbd2:	0ff0      	lsrs	r0, r6, #31
 800fbd4:	3801      	subs	r0, #1
 800fbd6:	ea55 0300 	orrs.w	r3, r5, r0
 800fbda:	d104      	bne.n	800fbe6 <__ieee754_powf+0x156>
 800fbdc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800fbe0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800fbe4:	e76c      	b.n	800fac0 <__ieee754_powf+0x30>
 800fbe6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800fbea:	d973      	bls.n	800fcd4 <__ieee754_powf+0x244>
 800fbec:	4bad      	ldr	r3, [pc, #692]	@ (800fea4 <__ieee754_powf+0x414>)
 800fbee:	4598      	cmp	r8, r3
 800fbf0:	d808      	bhi.n	800fc04 <__ieee754_powf+0x174>
 800fbf2:	2c00      	cmp	r4, #0
 800fbf4:	da0b      	bge.n	800fc0e <__ieee754_powf+0x17e>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	ecbd 8b02 	vpop	{d8}
 800fbfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc00:	f000 baa4 	b.w	801014c <__math_oflowf>
 800fc04:	4ba8      	ldr	r3, [pc, #672]	@ (800fea8 <__ieee754_powf+0x418>)
 800fc06:	4598      	cmp	r8, r3
 800fc08:	d908      	bls.n	800fc1c <__ieee754_powf+0x18c>
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	dcf3      	bgt.n	800fbf6 <__ieee754_powf+0x166>
 800fc0e:	2000      	movs	r0, #0
 800fc10:	ecbd 8b02 	vpop	{d8}
 800fc14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc18:	f000 ba92 	b.w	8010140 <__math_uflowf>
 800fc1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fc20:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc24:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800feac <__ieee754_powf+0x41c>
 800fc28:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800fc2c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800fc30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fc34:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fc38:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fc3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc40:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800feb0 <__ieee754_powf+0x420>
 800fc44:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800fc48:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800feb4 <__ieee754_powf+0x424>
 800fc4c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fc50:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800feb8 <__ieee754_powf+0x428>
 800fc54:	eef0 6a67 	vmov.f32	s13, s15
 800fc58:	eee0 6a07 	vfma.f32	s13, s0, s14
 800fc5c:	ee16 3a90 	vmov	r3, s13
 800fc60:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800fc64:	f023 030f 	bic.w	r3, r3, #15
 800fc68:	ee06 3a90 	vmov	s13, r3
 800fc6c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800fc70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc74:	3d01      	subs	r5, #1
 800fc76:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800fc7a:	4305      	orrs	r5, r0
 800fc7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc80:	f024 040f 	bic.w	r4, r4, #15
 800fc84:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800fc88:	bf18      	it	ne
 800fc8a:	eeb0 8a47 	vmovne.f32	s16, s14
 800fc8e:	ee07 4a10 	vmov	s14, r4
 800fc92:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fc96:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800fc9a:	ee07 3a90 	vmov	s15, r3
 800fc9e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800fca2:	ee07 4a10 	vmov	s14, r4
 800fca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fcaa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800fcae:	ee17 1a10 	vmov	r1, s14
 800fcb2:	2900      	cmp	r1, #0
 800fcb4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcb8:	f340 80dd 	ble.w	800fe76 <__ieee754_powf+0x3e6>
 800fcbc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800fcc0:	f240 80ca 	bls.w	800fe58 <__ieee754_powf+0x3c8>
 800fcc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fccc:	bf4c      	ite	mi
 800fcce:	2001      	movmi	r0, #1
 800fcd0:	2000      	movpl	r0, #0
 800fcd2:	e791      	b.n	800fbf8 <__ieee754_powf+0x168>
 800fcd4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800fcd8:	bf01      	itttt	eq
 800fcda:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800febc <__ieee754_powf+0x42c>
 800fcde:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fce2:	f06f 0317 	mvneq.w	r3, #23
 800fce6:	ee17 7a90 	vmoveq	r7, s15
 800fcea:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800fcee:	bf18      	it	ne
 800fcf0:	2300      	movne	r3, #0
 800fcf2:	3a7f      	subs	r2, #127	@ 0x7f
 800fcf4:	441a      	add	r2, r3
 800fcf6:	4b72      	ldr	r3, [pc, #456]	@ (800fec0 <__ieee754_powf+0x430>)
 800fcf8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800fcfc:	429f      	cmp	r7, r3
 800fcfe:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800fd02:	dd06      	ble.n	800fd12 <__ieee754_powf+0x282>
 800fd04:	4b6f      	ldr	r3, [pc, #444]	@ (800fec4 <__ieee754_powf+0x434>)
 800fd06:	429f      	cmp	r7, r3
 800fd08:	f340 80a4 	ble.w	800fe54 <__ieee754_powf+0x3c4>
 800fd0c:	3201      	adds	r2, #1
 800fd0e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800fd12:	2600      	movs	r6, #0
 800fd14:	4b6c      	ldr	r3, [pc, #432]	@ (800fec8 <__ieee754_powf+0x438>)
 800fd16:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800fd1a:	ee07 1a10 	vmov	s14, r1
 800fd1e:	edd3 5a00 	vldr	s11, [r3]
 800fd22:	4b6a      	ldr	r3, [pc, #424]	@ (800fecc <__ieee754_powf+0x43c>)
 800fd24:	ee75 7a87 	vadd.f32	s15, s11, s14
 800fd28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd2c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800fd30:	1049      	asrs	r1, r1, #1
 800fd32:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800fd36:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800fd3a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800fd3e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800fd42:	ee07 1a90 	vmov	s15, r1
 800fd46:	ee26 5a24 	vmul.f32	s10, s12, s9
 800fd4a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800fd4e:	ee15 7a10 	vmov	r7, s10
 800fd52:	401f      	ands	r7, r3
 800fd54:	ee06 7a90 	vmov	s13, r7
 800fd58:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800fd5c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fd60:	ee65 7a05 	vmul.f32	s15, s10, s10
 800fd64:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fd68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fed0 <__ieee754_powf+0x440>
 800fd6c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fed4 <__ieee754_powf+0x444>
 800fd70:	eee7 5a87 	vfma.f32	s11, s15, s14
 800fd74:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fed8 <__ieee754_powf+0x448>
 800fd78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fd7c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800feac <__ieee754_powf+0x41c>
 800fd80:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fd84:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fedc <__ieee754_powf+0x44c>
 800fd88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fd8c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fee0 <__ieee754_powf+0x450>
 800fd90:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fd94:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fd98:	ee35 7a26 	vadd.f32	s14, s10, s13
 800fd9c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800fda0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fda4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800fda8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800fdac:	eef0 5a67 	vmov.f32	s11, s15
 800fdb0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800fdb4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800fdb8:	ee15 1a90 	vmov	r1, s11
 800fdbc:	4019      	ands	r1, r3
 800fdbe:	ee05 1a90 	vmov	s11, r1
 800fdc2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fdc6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800fdca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fdce:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fdd2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fdd6:	eeb0 6a67 	vmov.f32	s12, s15
 800fdda:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fdde:	ee16 1a10 	vmov	r1, s12
 800fde2:	4019      	ands	r1, r3
 800fde4:	ee06 1a10 	vmov	s12, r1
 800fde8:	eeb0 7a46 	vmov.f32	s14, s12
 800fdec:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800fdf0:	493c      	ldr	r1, [pc, #240]	@ (800fee4 <__ieee754_powf+0x454>)
 800fdf2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800fdf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdfa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fee8 <__ieee754_powf+0x458>
 800fdfe:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800feec <__ieee754_powf+0x45c>
 800fe02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe06:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fef0 <__ieee754_powf+0x460>
 800fe0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe0e:	ed91 7a00 	vldr	s14, [r1]
 800fe12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe16:	ee07 2a10 	vmov	s14, r2
 800fe1a:	eef0 6a67 	vmov.f32	s13, s15
 800fe1e:	4a35      	ldr	r2, [pc, #212]	@ (800fef4 <__ieee754_powf+0x464>)
 800fe20:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fe24:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fe28:	ed92 5a00 	vldr	s10, [r2]
 800fe2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe30:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fe34:	ee76 6a87 	vadd.f32	s13, s13, s14
 800fe38:	ee16 2a90 	vmov	r2, s13
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	ee06 3a90 	vmov	s13, r3
 800fe42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fe46:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fe4a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800fe4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe52:	e70f      	b.n	800fc74 <__ieee754_powf+0x1e4>
 800fe54:	2601      	movs	r6, #1
 800fe56:	e75d      	b.n	800fd14 <__ieee754_powf+0x284>
 800fe58:	d152      	bne.n	800ff00 <__ieee754_powf+0x470>
 800fe5a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fef8 <__ieee754_powf+0x468>
 800fe5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe62:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fe66:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	f73f af29 	bgt.w	800fcc4 <__ieee754_powf+0x234>
 800fe72:	2386      	movs	r3, #134	@ 0x86
 800fe74:	e048      	b.n	800ff08 <__ieee754_powf+0x478>
 800fe76:	4a21      	ldr	r2, [pc, #132]	@ (800fefc <__ieee754_powf+0x46c>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d907      	bls.n	800fe8c <__ieee754_powf+0x3fc>
 800fe7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fe80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe84:	bf4c      	ite	mi
 800fe86:	2001      	movmi	r0, #1
 800fe88:	2000      	movpl	r0, #0
 800fe8a:	e6c1      	b.n	800fc10 <__ieee754_powf+0x180>
 800fe8c:	d138      	bne.n	800ff00 <__ieee754_powf+0x470>
 800fe8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe92:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fe96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9a:	dbea      	blt.n	800fe72 <__ieee754_powf+0x3e2>
 800fe9c:	e7ee      	b.n	800fe7c <__ieee754_powf+0x3ec>
 800fe9e:	bf00      	nop
 800fea0:	00000000 	.word	0x00000000
 800fea4:	3f7ffff3 	.word	0x3f7ffff3
 800fea8:	3f800007 	.word	0x3f800007
 800feac:	3eaaaaab 	.word	0x3eaaaaab
 800feb0:	3fb8aa3b 	.word	0x3fb8aa3b
 800feb4:	36eca570 	.word	0x36eca570
 800feb8:	3fb8aa00 	.word	0x3fb8aa00
 800febc:	4b800000 	.word	0x4b800000
 800fec0:	001cc471 	.word	0x001cc471
 800fec4:	005db3d6 	.word	0x005db3d6
 800fec8:	08010a2c 	.word	0x08010a2c
 800fecc:	fffff000 	.word	0xfffff000
 800fed0:	3e6c3255 	.word	0x3e6c3255
 800fed4:	3e53f142 	.word	0x3e53f142
 800fed8:	3e8ba305 	.word	0x3e8ba305
 800fedc:	3edb6db7 	.word	0x3edb6db7
 800fee0:	3f19999a 	.word	0x3f19999a
 800fee4:	08010a1c 	.word	0x08010a1c
 800fee8:	3f76384f 	.word	0x3f76384f
 800feec:	3f763800 	.word	0x3f763800
 800fef0:	369dc3a0 	.word	0x369dc3a0
 800fef4:	08010a24 	.word	0x08010a24
 800fef8:	3338aa3c 	.word	0x3338aa3c
 800fefc:	43160000 	.word	0x43160000
 800ff00:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ff04:	d971      	bls.n	800ffea <__ieee754_powf+0x55a>
 800ff06:	15db      	asrs	r3, r3, #23
 800ff08:	3b7e      	subs	r3, #126	@ 0x7e
 800ff0a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ff0e:	4118      	asrs	r0, r3
 800ff10:	4408      	add	r0, r1
 800ff12:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ff16:	4a3c      	ldr	r2, [pc, #240]	@ (8010008 <__ieee754_powf+0x578>)
 800ff18:	3b7f      	subs	r3, #127	@ 0x7f
 800ff1a:	411a      	asrs	r2, r3
 800ff1c:	4002      	ands	r2, r0
 800ff1e:	ee07 2a10 	vmov	s14, r2
 800ff22:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ff26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ff2a:	f1c3 0317 	rsb	r3, r3, #23
 800ff2e:	4118      	asrs	r0, r3
 800ff30:	2900      	cmp	r1, #0
 800ff32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff36:	bfb8      	it	lt
 800ff38:	4240      	neglt	r0, r0
 800ff3a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ff3e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801000c <__ieee754_powf+0x57c>
 800ff42:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8010010 <__ieee754_powf+0x580>
 800ff46:	ee17 3a10 	vmov	r3, s14
 800ff4a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ff4e:	f023 030f 	bic.w	r3, r3, #15
 800ff52:	ee07 3a10 	vmov	s14, r3
 800ff56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff5a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ff5e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ff62:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8010014 <__ieee754_powf+0x584>
 800ff66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff6a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ff6e:	eef0 6a67 	vmov.f32	s13, s15
 800ff72:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ff76:	eef0 5a66 	vmov.f32	s11, s13
 800ff7a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ff7e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ff82:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ff86:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8010018 <__ieee754_powf+0x588>
 800ff8a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801001c <__ieee754_powf+0x58c>
 800ff8e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ff92:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8010020 <__ieee754_powf+0x590>
 800ff96:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ff9a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010024 <__ieee754_powf+0x594>
 800ff9e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ffa2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8010028 <__ieee754_powf+0x598>
 800ffa6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ffaa:	eeb0 6a66 	vmov.f32	s12, s13
 800ffae:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ffb2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ffb6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ffba:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ffbe:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ffc2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ffc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ffce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ffd2:	ee10 3a10 	vmov	r3, s0
 800ffd6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ffda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ffde:	da06      	bge.n	800ffee <__ieee754_powf+0x55e>
 800ffe0:	f000 f82e 	bl	8010040 <scalbnf>
 800ffe4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ffe8:	e56a      	b.n	800fac0 <__ieee754_powf+0x30>
 800ffea:	2000      	movs	r0, #0
 800ffec:	e7a5      	b.n	800ff3a <__ieee754_powf+0x4aa>
 800ffee:	ee00 3a10 	vmov	s0, r3
 800fff2:	e7f7      	b.n	800ffe4 <__ieee754_powf+0x554>
 800fff4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fff8:	e562      	b.n	800fac0 <__ieee754_powf+0x30>
 800fffa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801002c <__ieee754_powf+0x59c>
 800fffe:	e55f      	b.n	800fac0 <__ieee754_powf+0x30>
 8010000:	eeb0 0a48 	vmov.f32	s0, s16
 8010004:	e55c      	b.n	800fac0 <__ieee754_powf+0x30>
 8010006:	bf00      	nop
 8010008:	ff800000 	.word	0xff800000
 801000c:	3f317218 	.word	0x3f317218
 8010010:	3f317200 	.word	0x3f317200
 8010014:	35bfbe8c 	.word	0x35bfbe8c
 8010018:	b5ddea0e 	.word	0xb5ddea0e
 801001c:	3331bb4c 	.word	0x3331bb4c
 8010020:	388ab355 	.word	0x388ab355
 8010024:	bb360b61 	.word	0xbb360b61
 8010028:	3e2aaaab 	.word	0x3e2aaaab
 801002c:	00000000 	.word	0x00000000

08010030 <fabsf>:
 8010030:	ee10 3a10 	vmov	r3, s0
 8010034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010038:	ee00 3a10 	vmov	s0, r3
 801003c:	4770      	bx	lr
	...

08010040 <scalbnf>:
 8010040:	ee10 3a10 	vmov	r3, s0
 8010044:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010048:	d02b      	beq.n	80100a2 <scalbnf+0x62>
 801004a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801004e:	d302      	bcc.n	8010056 <scalbnf+0x16>
 8010050:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010054:	4770      	bx	lr
 8010056:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801005a:	d123      	bne.n	80100a4 <scalbnf+0x64>
 801005c:	4b24      	ldr	r3, [pc, #144]	@ (80100f0 <scalbnf+0xb0>)
 801005e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80100f4 <scalbnf+0xb4>
 8010062:	4298      	cmp	r0, r3
 8010064:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010068:	db17      	blt.n	801009a <scalbnf+0x5a>
 801006a:	ee10 3a10 	vmov	r3, s0
 801006e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010072:	3a19      	subs	r2, #25
 8010074:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010078:	4288      	cmp	r0, r1
 801007a:	dd15      	ble.n	80100a8 <scalbnf+0x68>
 801007c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80100f8 <scalbnf+0xb8>
 8010080:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80100fc <scalbnf+0xbc>
 8010084:	ee10 3a10 	vmov	r3, s0
 8010088:	eeb0 7a67 	vmov.f32	s14, s15
 801008c:	2b00      	cmp	r3, #0
 801008e:	bfb8      	it	lt
 8010090:	eef0 7a66 	vmovlt.f32	s15, s13
 8010094:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010098:	4770      	bx	lr
 801009a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010100 <scalbnf+0xc0>
 801009e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100a2:	4770      	bx	lr
 80100a4:	0dd2      	lsrs	r2, r2, #23
 80100a6:	e7e5      	b.n	8010074 <scalbnf+0x34>
 80100a8:	4410      	add	r0, r2
 80100aa:	28fe      	cmp	r0, #254	@ 0xfe
 80100ac:	dce6      	bgt.n	801007c <scalbnf+0x3c>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	dd06      	ble.n	80100c0 <scalbnf+0x80>
 80100b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80100b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80100ba:	ee00 3a10 	vmov	s0, r3
 80100be:	4770      	bx	lr
 80100c0:	f110 0f16 	cmn.w	r0, #22
 80100c4:	da09      	bge.n	80100da <scalbnf+0x9a>
 80100c6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010100 <scalbnf+0xc0>
 80100ca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010104 <scalbnf+0xc4>
 80100ce:	ee10 3a10 	vmov	r3, s0
 80100d2:	eeb0 7a67 	vmov.f32	s14, s15
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	e7d9      	b.n	801008e <scalbnf+0x4e>
 80100da:	3019      	adds	r0, #25
 80100dc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80100e0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80100e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010108 <scalbnf+0xc8>
 80100e8:	ee07 3a90 	vmov	s15, r3
 80100ec:	e7d7      	b.n	801009e <scalbnf+0x5e>
 80100ee:	bf00      	nop
 80100f0:	ffff3cb0 	.word	0xffff3cb0
 80100f4:	4c000000 	.word	0x4c000000
 80100f8:	7149f2ca 	.word	0x7149f2ca
 80100fc:	f149f2ca 	.word	0xf149f2ca
 8010100:	0da24260 	.word	0x0da24260
 8010104:	8da24260 	.word	0x8da24260
 8010108:	33000000 	.word	0x33000000

0801010c <with_errnof>:
 801010c:	b510      	push	{r4, lr}
 801010e:	ed2d 8b02 	vpush	{d8}
 8010112:	eeb0 8a40 	vmov.f32	s16, s0
 8010116:	4604      	mov	r4, r0
 8010118:	f7ff fb7e 	bl	800f818 <__errno>
 801011c:	eeb0 0a48 	vmov.f32	s0, s16
 8010120:	ecbd 8b02 	vpop	{d8}
 8010124:	6004      	str	r4, [r0, #0]
 8010126:	bd10      	pop	{r4, pc}

08010128 <xflowf>:
 8010128:	b130      	cbz	r0, 8010138 <xflowf+0x10>
 801012a:	eef1 7a40 	vneg.f32	s15, s0
 801012e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010132:	2022      	movs	r0, #34	@ 0x22
 8010134:	f7ff bfea 	b.w	801010c <with_errnof>
 8010138:	eef0 7a40 	vmov.f32	s15, s0
 801013c:	e7f7      	b.n	801012e <xflowf+0x6>
	...

08010140 <__math_uflowf>:
 8010140:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010148 <__math_uflowf+0x8>
 8010144:	f7ff bff0 	b.w	8010128 <xflowf>
 8010148:	10000000 	.word	0x10000000

0801014c <__math_oflowf>:
 801014c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010154 <__math_oflowf+0x8>
 8010150:	f7ff bfea 	b.w	8010128 <xflowf>
 8010154:	70000000 	.word	0x70000000

08010158 <__ieee754_sqrtf>:
 8010158:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801015c:	4770      	bx	lr
	...

08010160 <_init>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	bf00      	nop
 8010164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010166:	bc08      	pop	{r3}
 8010168:	469e      	mov	lr, r3
 801016a:	4770      	bx	lr

0801016c <_fini>:
 801016c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016e:	bf00      	nop
 8010170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010172:	bc08      	pop	{r3}
 8010174:	469e      	mov	lr, r3
 8010176:	4770      	bx	lr
