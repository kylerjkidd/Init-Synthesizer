
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010480  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  08010658  08010658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f14  08010f14  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  08010f14  08010f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f1c  08010f1c  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f1c  08010f1c  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f20  08010f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08010f24  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  200001d4  080110f8  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fec  080110f8  00012fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e14e  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006828  00000000  00000000  00040352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00046b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018cb  00000000  00000000  00048bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002660e  00000000  00000000  0004a4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee65  00000000  00000000  00070ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db676  00000000  00000000  0009f936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017afac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089b0  00000000  00000000  0017b064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00183a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00183a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00183b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010640 	.word	0x08010640

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	08010640 	.word	0x08010640

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f002 ffbb 	bl	8003d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f002 ffd2 	bl	8003d7e <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 fb89 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 fb82 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 fb7c 	bl	80045ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 fb77 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f003 f9e6 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f003 f9d9 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f003 f9cc 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f003 f9be 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f003 f9ae 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f003 f99f 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f003 f992 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f003 f984 	bl	80042a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f003 f976 	bl	80042a8 <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f003 fafc 	bl	8004610 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9e6 	bl	80013ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f004 f87f 	bl	8005128 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9dd 	bl	80013ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f004 f8c1 	bl	80051be <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9d4 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e fe35 	bl	800fce8 <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fdc8 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9a4 	bl	80013ee <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f003 f8e4 	bl	80042a8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f004 f889 	bl	8005258 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f94f 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e fdb3 	bl	800fce8 <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fd46 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f922 	bl	80013ee <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f003 f84a 	bl	80042a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f003 f83a 	bl	80042a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 fd9f 	bl	8003db4 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8b7 	bl	80013ee <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 fbdd 	bl	8003a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f84f 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 faef 	bl	80028ac <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00d ff91 	bl	800f1f4 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f002 f92b 	bl	800352c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f002 f8cb 	bl	8003470 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	481a      	ldr	r0, [pc, #104]	@ (8001344 <main+0x98>)
 80012dc:	f007 ffd2 	bl	8009284 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f001 fee6 	bl	80030b0 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 fc6a 	bl	8002bbc <Synth_Reset_Initialize>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 80012e8:	2201      	movs	r2, #1
 80012ea:	4917      	ldr	r1, [pc, #92]	@ (8001348 <main+0x9c>)
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <main+0xa0>)
 80012ee:	f008 fc3b 	bl	8009b68 <HAL_UART_Receive_IT>

  uint8_t data[] = "INIT-READY\n";
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <main+0xa4>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	220a      	movs	r2, #10
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <main+0xa0>)
 8001306:	f008 fba1 	bl	8009a4c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Preset_Write(4);
 800130a:	2004      	movs	r0, #4
 800130c:	f002 fa3e 	bl	800378c <Preset_Write>

	  if(sys.midi_data_present == 1){
 8001310:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <main+0xa8>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <main+0x70>
		  MIDI_Decode_Handler();
 8001318:	f000 f870 	bl	80013fc <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <main+0xa8>)
 800131e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <main+0x7c>
		  Serial_Command_Handler();
 8001324:	f000 fc9e 	bl	8001c64 <Serial_Command_Handler>
	  }

	  //Gate_Control();

	  if((sys.note_status_bit == 1)){
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <main+0xa8>)
 800132a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800132c:	2b01      	cmp	r3, #1
 800132e:	d1ec      	bne.n	800130a <main+0x5e>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <main+0xa8>)
 8001332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <main+0xa8>)
 8001336:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa8d 	bl	800185c <Waveform_Synthesis_Handler>
	  Preset_Write(4);
 8001342:	e7e2      	b.n	800130a <main+0x5e>
 8001344:	20000400 	.word	0x20000400
 8001348:	200003d7 	.word	0x200003d7
 800134c:	2000044c 	.word	0x2000044c
 8001350:	08010658 	.word	0x08010658
 8001354:	20000370 	.word	0x20000370

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	@ 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2238      	movs	r2, #56	@ 0x38
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00e fcbe 	bl	800fce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800137a:	2000      	movs	r0, #0
 800137c:	f005 fe74 	bl	8007068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001380:	2321      	movs	r3, #33	@ 0x21
 8001382:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001388:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800138a:	2301      	movs	r3, #1
 800138c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	2303      	movs	r3, #3
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 800139a:	231c      	movs	r3, #28
 800139c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 ff0e 	bl	80071d0 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ba:	f000 f818 	bl	80013ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2104      	movs	r1, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 fa0c 	bl	80077f4 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013e2:	f000 f804 	bl	80013ee <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3750      	adds	r7, #80	@ 0x50
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f2:	b672      	cpsid	i
}
 80013f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f6:	bf00      	nop
 80013f8:	e7fd      	b.n	80013f6 <Error_Handler+0x8>
	...

080013fc <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

	int status_byte = sys.midi_buf[0];
 8001402:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001404:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001408:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 800140a:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 800140c:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001410:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001414:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001418:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b7f      	cmp	r3, #127	@ 0x7f
 800141e:	dc0a      	bgt.n	8001436 <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 8001420:	f000 fc20 	bl	8001c64 <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001426:	2200      	movs	r2, #0
 8001428:	66da      	str	r2, [r3, #108]	@ 0x6c
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 800142a:	2203      	movs	r2, #3
 800142c:	2100      	movs	r1, #0
 800142e:	4827      	ldr	r0, [pc, #156]	@ (80014cc <MIDI_Decode_Handler+0xd0>)
 8001430:	f00e fc5a 	bl	800fce8 <memset>

	    return;
 8001434:	e044      	b.n	80014c0 <MIDI_Decode_Handler+0xc4>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 8001436:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001438:	2200      	movs	r2, #0
 800143a:	675a      	str	r2, [r3, #116]	@ 0x74

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001442:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b80      	cmp	r3, #128	@ 0x80
 8001448:	d113      	bne.n	8001472 <MIDI_Decode_Handler+0x76>
    	sys.note_status_bit    =  0; // note off
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 800144c:	2200      	movs	r2, #0
 800144e:	679a      	str	r2, [r3, #120]	@ 0x78
    	sys.midi_note_input    = data_byte1;
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	67d3      	str	r3, [r2, #124]	@ 0x7c
    	sys.midi_note_velocity = data_byte2;
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

    	sys.gate = 0;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001460:	2200      	movs	r2, #0
 8001462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    	Gate_Control();
 8001466:	f001 fed3 	bl	8003210 <Gate_Control>
    	Command_Blink_Status_LED(0); // report no error
 800146a:	2000      	movs	r0, #0
 800146c:	f001 ff8a 	bl	8003384 <Command_Blink_Status_LED>
 8001470:	e01d      	b.n	80014ae <MIDI_Decode_Handler+0xb2>
    }
    else if(status_byte == 0x90){
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b90      	cmp	r3, #144	@ 0x90
 8001476:	d113      	bne.n	80014a0 <MIDI_Decode_Handler+0xa4>
    	sys.note_status_bit    =  1; // note on
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 800147a:	2201      	movs	r2, #1
 800147c:	679a      	str	r2, [r3, #120]	@ 0x78
    	sys.midi_note_input    = data_byte1;
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	67d3      	str	r3, [r2, #124]	@ 0x7c
    	sys.midi_note_velocity = data_byte2;
 8001484:	4a10      	ldr	r2, [pc, #64]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

    	sys.gate = 1;
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 800148e:	2201      	movs	r2, #1
 8001490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    	Gate_Control();
 8001494:	f001 febc 	bl	8003210 <Gate_Control>
    	Command_Blink_Status_LED(0);
 8001498:	2000      	movs	r0, #0
 800149a:	f001 ff73 	bl	8003384 <Command_Blink_Status_LED>
 800149e:	e006      	b.n	80014ae <MIDI_Decode_Handler+0xb2>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	679a      	str	r2, [r3, #120]	@ 0x78
    	Command_Blink_Status_LED(1); // report an error;
 80014a8:	2001      	movs	r0, #1
 80014aa:	f001 ff6b 	bl	8003384 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MIDI_Decode_Handler+0xcc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	66da      	str	r2, [r3, #108]	@ 0x6c
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014b4:	2203      	movs	r2, #3
 80014b6:	2100      	movs	r1, #0
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MIDI_Decode_Handler+0xd0>)
 80014ba:	f00e fc15 	bl	800fce8 <memset>

    return;
 80014be:	bf00      	nop
}
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000370 	.word	0x20000370
 80014cc:	200003d4 	.word	0x200003d4

080014d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014d8:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014dc:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014de:	f892 1067 	ldrb.w	r1, [r2, #103]	@ 0x67
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014ec:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014f4:	66d3      	str	r3, [r2, #108]	@ 0x6c
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 80014f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	dd05      	ble.n	800150a <HAL_UART_RxCpltCallback+0x3a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	66da      	str	r2, [r3, #108]	@ 0x6c
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_UART_RxCpltCallback+0x4c>)
 8001506:	2201      	movs	r2, #1
 8001508:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	4904      	ldr	r1, [pc, #16]	@ (8001520 <HAL_UART_RxCpltCallback+0x50>)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <HAL_UART_RxCpltCallback+0x54>)
 8001510:	f008 fb2a 	bl	8009b68 <HAL_UART_Receive_IT>

}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000370 	.word	0x20000370
 8001520:	200003d7 	.word	0x200003d7
 8001524:	2000044c 	.word	0x2000044c

08001528 <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe ffd4 	bl	80004e0 <__aeabi_f2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <Calculate_Frequency+0x78>)
 800153e:	f7fe fe6f 	bl	8000220 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <Calculate_Frequency+0x7c>)
 8001550:	f7ff f948 	bl	80007e4 <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fa52 	bl	8000a04 <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	ee00 3a90 	vmov	s1, r3
 8001566:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800156a:	f00e fc1d 	bl	800fda8 <powf>
 800156e:	ee10 3a10 	vmov	r3, s0
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffb4 	bl	80004e0 <__aeabi_f2d>
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <Calculate_Frequency+0x80>)
 800157e:	f7ff f807 	bl	8000590 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fa3b 	bl	8000a04 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	ee07 3a90 	vmov	s15, r3
}
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40514000 	.word	0x40514000
 80015a4:	40280000 	.word	0x40280000
 80015a8:	407b8000 	.word	0x407b8000
 80015ac:	00000000 	.word	0x00000000

080015b0 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ba:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7fe ff8e 	bl	80004e0 <__aeabi_f2d>
 80015c4:	a317      	add	r3, pc, #92	@ (adr r3, 8001624 <Synthesize_Sine_Wave+0x74>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe ffe1 	bl	8000590 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe ff82 	bl	80004e0 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe ffd4 	bl	8000590 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fa08 	bl	8000a04 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	ee00 3a10 	vmov	s0, r3
 80015fa:	f00e fb2f 	bl	800fc5c <arm_sin_f32>
 80015fe:	eef0 7a40 	vmov.f32	s15, s0
 8001602:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001620 <Synthesize_Sine_Wave+0x70>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 8001614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	46fffe00 	.word	0x46fffe00
 8001624:	54442d18 	.word	0x54442d18
 8001628:	401921fb 	.word	0x401921fb
 800162c:	00000000 	.word	0x00000000

08001630 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0a03 	vstr	s0, [r7, #12]
 800163a:	edc7 0a02 	vstr	s1, [r7, #8]
 800163e:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 8001642:	ed97 7a03 	vldr	s14, [r7, #12]
 8001646:	edd7 7a02 	vldr	s15, [r7, #8]
 800164a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f00e fb87 	bl	800fd68 <fmodf>
 800165a:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 800165e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001662:	edd7 7a01 	vldr	s15, [r7, #4]
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d503      	bpl.n	8001678 <Synthesize_Pulse_Wave+0x48>
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <Synthesize_Pulse_Wave+0x80>)
 8001676:	e002      	b.n	800167e <Synthesize_Pulse_Wave+0x4e>
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <Synthesize_Pulse_Wave+0x84>)
 800167e:	a30a      	add	r3, pc, #40	@ (adr r3, 80016a8 <Synthesize_Pulse_Wave+0x78>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff84 	bl	8000590 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff f990 	bl	80009b4 <__aeabi_d2iz>
 8001694:	4603      	mov	r3, r0
 8001696:	827b      	strh	r3, [r7, #18]

	return sample;
 8001698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40dfffc0 	.word	0x40dfffc0
 80016b0:	3ff00000 	.word	0x3ff00000
 80016b4:	bff00000 	.word	0xbff00000

080016b8 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	ed87 0a01 	vstr	s0, [r7, #4]
 80016c2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ca:	edd7 7a00 	vldr	s15, [r7]
 80016ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	f00e fb45 	bl	800fd68 <fmodf>
 80016de:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e6:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d519      	bpl.n	8001728 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f7fe fef3 	bl	80004e0 <__aeabi_f2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 8001700:	f7fe ff46 	bl	8000590 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	a330      	add	r3, pc, #192	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff3d 	bl	8000590 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f949 	bl	80009b4 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	e04c      	b.n	80017c2 <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001728:	edd7 7a02 	vldr	s15, [r7, #8]
 800172c:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d521      	bpl.n	800177e <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f7fe fed0 	bl	80004e0 <__aeabi_f2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 8001746:	f7fe ff23 	bl	8000590 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001756:	f7fe fd63 	bl	8000220 <__aeabi_dsub>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	a31b      	add	r3, pc, #108	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff12 	bl	8000590 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f91e 	bl	80009b4 <__aeabi_d2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
 800177c:	e021      	b.n	80017c2 <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe feae 	bl	80004e0 <__aeabi_f2d>
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <Synthesize_Triangle_Wave+0x124>)
 800178a:	f7fe fd49 	bl	8000220 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <Synthesize_Triangle_Wave+0x120>)
 800179c:	f7fe fef8 	bl	8000590 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	a309      	add	r3, pc, #36	@ (adr r3, 80017d0 <Synthesize_Triangle_Wave+0x118>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe feef 	bl	8000590 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f8fb 	bl	80009b4 <__aeabi_d2iz>
 80017be:	4603      	mov	r3, r0
 80017c0:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40dfffc0 	.word	0x40dfffc0
 80017d8:	40100000 	.word	0x40100000
 80017dc:	3ff00000 	.word	0x3ff00000

080017e0 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ea:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f2:	edd7 7a00 	vldr	s15, [r7]
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	f00e fab1 	bl	800fd68 <fmodf>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
 800180a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001858 <Synthesize_Sawtooth_Wave+0x78>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe fe63 	bl	80004e0 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	f7fe fd01 	bl	8000224 <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	a309      	add	r3, pc, #36	@ (adr r3, 8001850 <Synthesize_Sawtooth_Wave+0x70>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fcf6 	bl	8000220 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f8ba 	bl	80009b4 <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	81fb      	strh	r3, [r7, #14]

	return sample;
 8001844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	00000000 	.word	0x00000000
 8001854:	40dfffc0 	.word	0x40dfffc0
 8001858:	46fffe00 	.word	0x46fffe00

0800185c <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800186a:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800186e:	6018      	str	r0, [r3, #0]
 8001870:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001874:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001878:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 800187a:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800187e:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001882:	f102 0218 	add.w	r2, r2, #24
 8001886:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001888:	4bce      	ldr	r3, [pc, #824]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 800188a:	7a9b      	ldrb	r3, [r3, #10]
 800188c:	f1a3 020c 	sub.w	r2, r3, #12
 8001890:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001894:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	f7ff fe3e 	bl	8001528 <Calculate_Frequency>
 80018ac:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018b0:	f103 0314 	add.w	r3, r3, #20
 80018b4:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018b8:	4bc2      	ldr	r3, [pc, #776]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80018ba:	7adb      	ldrb	r3, [r3, #11]
 80018bc:	f1a3 020c 	sub.w	r2, r3, #12
 80018c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018c4:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff fe26 	bl	8001528 <Calculate_Frequency>
 80018dc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018e0:	f103 0310 	add.w	r3, r3, #16
 80018e4:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018ee:	f102 021c 	add.w	r2, r2, #28
 80018f2:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018f4:	e158      	b.n	8001ba8 <Waveform_Synthesis_Handler+0x34c>
        float t = ((float)i/2.0)/((float)nsamples);
 80018f6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018fa:	f103 031c 	add.w	r3, r3, #28
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ee17 0a90 	vmov	r0, s15
 800190c:	f7fe fde8 	bl	80004e0 <__aeabi_f2d>
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001918:	f7fe ff64 	bl	80007e4 <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001928:	f103 0318 	add.w	r3, r3, #24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	ee17 0a90 	vmov	r0, s15
 800193a:	f7fe fdd1 	bl	80004e0 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe ff4d 	bl	80007e4 <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f857 	bl	8000a04 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800195c:	f102 0208 	add.w	r2, r2, #8
 8001960:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 8001962:	4b98      	ldr	r3, [pc, #608]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001964:	7a1b      	ldrb	r3, [r3, #8]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 800196a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800196e:	f103 0314 	add.w	r3, r3, #20
 8001972:	edd3 0a00 	vldr	s1, [r3]
 8001976:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800197a:	f103 0308 	add.w	r3, r3, #8
 800197e:	ed93 0a00 	vldr	s0, [r3]
 8001982:	f7ff fe15 	bl	80015b0 <Synthesize_Sine_Wave>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800198e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001992:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001996:	f102 021c 	add.w	r2, r2, #28
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019a0:	e069      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 80019a2:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019a4:	7a1b      	ldrb	r3, [r3, #8]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d123      	bne.n	80019f2 <Waveform_Synthesis_Handler+0x196>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 80019aa:	4b86      	ldr	r3, [pc, #536]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019ac:	7c9b      	ldrb	r3, [r3, #18]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	eeb0 1a67 	vmov.f32	s2, s15
 80019ba:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019be:	f103 0314 	add.w	r3, r3, #20
 80019c2:	edd3 0a00 	vldr	s1, [r3]
 80019c6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019ca:	f103 0308 	add.w	r3, r3, #8
 80019ce:	ed93 0a00 	vldr	s0, [r3]
 80019d2:	f7ff fe2d 	bl	8001630 <Synthesize_Pulse_Wave>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019de:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019e2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019e6:	f102 021c 	add.w	r2, r2, #28
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019f0:	e041      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019f2:	4b74      	ldr	r3, [pc, #464]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 80019f4:	7a1b      	ldrb	r3, [r3, #8]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d11b      	bne.n	8001a32 <Waveform_Synthesis_Handler+0x1d6>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019fa:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019fe:	f103 0314 	add.w	r3, r3, #20
 8001a02:	edd3 0a00 	vldr	s1, [r3]
 8001a06:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a0a:	f103 0308 	add.w	r3, r3, #8
 8001a0e:	ed93 0a00 	vldr	s0, [r3]
 8001a12:	f7ff fe51 	bl	80016b8 <Synthesize_Triangle_Wave>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a1e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a22:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a26:	f102 021c 	add.w	r2, r2, #28
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a30:	e021      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a32:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001a34:	7a1b      	ldrb	r3, [r3, #8]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d11b      	bne.n	8001a72 <Waveform_Synthesis_Handler+0x216>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a3a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a3e:	f103 0314 	add.w	r3, r3, #20
 8001a42:	edd3 0a00 	vldr	s1, [r3]
 8001a46:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a4a:	f103 0308 	add.w	r3, r3, #8
 8001a4e:	ed93 0a00 	vldr	s0, [r3]
 8001a52:	f7ff fec5 	bl	80017e0 <Synthesize_Sawtooth_Wave>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a5e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a62:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a66:	f102 021c 	add.w	r2, r2, #28
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a70:	e001      	b.n	8001a76 <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d6      	b.n	8001c24 <Waveform_Synthesis_Handler+0x3c8>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a76:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001a78:	7a5b      	ldrb	r3, [r3, #9]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d11c      	bne.n	8001ab8 <Waveform_Synthesis_Handler+0x25c>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a7e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a82:	f103 031c 	add.w	r3, r3, #28
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	1c5c      	adds	r4, r3, #1
 8001a8a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a8e:	f103 0310 	add.w	r3, r3, #16
 8001a92:	edd3 0a00 	vldr	s1, [r3]
 8001a96:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a9a:	f103 0308 	add.w	r3, r3, #8
 8001a9e:	ed93 0a00 	vldr	s0, [r3]
 8001aa2:	f7ff fd85 	bl	80015b0 <Synthesize_Sine_Wave>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001aae:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001ab2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001ab6:	e06c      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001ab8:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001aba:	7a5b      	ldrb	r3, [r3, #9]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d124      	bne.n	8001b0a <Waveform_Synthesis_Handler+0x2ae>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001ac2:	7cdb      	ldrb	r3, [r3, #19]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ad0:	f103 031c 	add.w	r3, r3, #28
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1c5c      	adds	r4, r3, #1
 8001ad8:	eeb0 1a67 	vmov.f32	s2, s15
 8001adc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ae0:	f103 0310 	add.w	r3, r3, #16
 8001ae4:	edd3 0a00 	vldr	s1, [r3]
 8001ae8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001aec:	f103 0308 	add.w	r3, r3, #8
 8001af0:	ed93 0a00 	vldr	s0, [r3]
 8001af4:	f7ff fd9c 	bl	8001630 <Synthesize_Pulse_Wave>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b00:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b04:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b08:	e043      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001b0c:	7a5b      	ldrb	r3, [r3, #9]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d11c      	bne.n	8001b4c <Waveform_Synthesis_Handler+0x2f0>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001b12:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b16:	f103 031c 	add.w	r3, r3, #28
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1c5c      	adds	r4, r3, #1
 8001b1e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b22:	f103 0310 	add.w	r3, r3, #16
 8001b26:	edd3 0a00 	vldr	s1, [r3]
 8001b2a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b2e:	f103 0308 	add.w	r3, r3, #8
 8001b32:	ed93 0a00 	vldr	s0, [r3]
 8001b36:	f7ff fdbf 	bl	80016b8 <Synthesize_Triangle_Wave>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b42:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b46:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b4a:	e022      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <Waveform_Synthesis_Handler+0x368>)
 8001b4e:	7a5b      	ldrb	r3, [r3, #9]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11c      	bne.n	8001b8e <Waveform_Synthesis_Handler+0x332>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b54:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b58:	f103 031c 	add.w	r3, r3, #28
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1c5c      	adds	r4, r3, #1
 8001b60:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b64:	f103 0310 	add.w	r3, r3, #16
 8001b68:	edd3 0a00 	vldr	s1, [r3]
 8001b6c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b70:	f103 0308 	add.w	r3, r3, #8
 8001b74:	ed93 0a00 	vldr	s0, [r3]
 8001b78:	f7ff fe32 	bl	80017e0 <Synthesize_Sawtooth_Wave>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b84:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b88:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b8c:	e001      	b.n	8001b92 <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e048      	b.n	8001c24 <Waveform_Synthesis_Handler+0x3c8>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b92:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b96:	f103 031c 	add.w	r3, r3, #28
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001ba2:	f102 021c 	add.w	r2, r2, #28
 8001ba6:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001ba8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bac:	f103 031c 	add.w	r3, r3, #28
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bb6:	f103 0318 	add.w	r3, r3, #24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f6ff ae9a 	blt.w	80018f6 <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001bc2:	e02a      	b.n	8001c1a <Waveform_Synthesis_Handler+0x3be>
 8001bc4:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bc8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bcc:	f103 0318 	add.w	r3, r3, #24
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	f107 0120 	add.w	r1, r7, #32
 8001bd8:	3918      	subs	r1, #24
 8001bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bde:	4814      	ldr	r0, [pc, #80]	@ (8001c30 <Waveform_Synthesis_Handler+0x3d4>)
 8001be0:	f003 fc1a 	bl	8005418 <HAL_I2S_Transmit>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001bea:	f102 020f 	add.w	r2, r2, #15
 8001bee:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001bf0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bf4:	f103 030f 	add.w	r3, r3, #15
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <Waveform_Synthesis_Handler+0x3b2>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c08:	f002 fcd0 	bl	80045ac <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001c0c:	e009      	b.n	8001c22 <Waveform_Synthesis_Handler+0x3c6>
        }

        if((sys.midi_data_present == 1)){
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <Waveform_Synthesis_Handler+0x3d8>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <Waveform_Synthesis_Handler+0x3be>
        	MIDI_Decode_Handler();
 8001c16:	f7ff fbf1 	bl	80013fc <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <Waveform_Synthesis_Handler+0x3d8>)
 8001c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d0d2      	beq.n	8001bc8 <Waveform_Synthesis_Handler+0x36c>
        }
    }

    return 0;
 8001c22:	2300      	movs	r3, #0

}
 8001c24:	4618      	mov	r0, r3
 8001c26:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	20000244 	.word	0x20000244
 8001c34:	20000370 	.word	0x20000370

08001c38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3c:	f3bf 8f4f 	dsb	sy
}
 8001c40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <__NVIC_SystemReset+0x24>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c4a:	4904      	ldr	r1, [pc, #16]	@ (8001c5c <__NVIC_SystemReset+0x24>)
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_SystemReset+0x28>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c52:	f3bf 8f4f 	dsb	sy
}
 8001c56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <__NVIC_SystemReset+0x20>
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	05fa0004 	.word	0x05fa0004

08001c64 <Serial_Command_Handler>:
#include "serial.h"
#include "system.h"

//extern System sys;

void Serial_Command_Handler(){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0

	int error_check = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]

	int command_byte;
	int address_byte;
	int data_byte;

	sys.value_returned = 0;
 8001c6e:	4b61      	ldr	r3, [pc, #388]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]

    if(sys.usb_data_present == 1){
 8001c74:	4b5f      	ldr	r3, [pc, #380]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d10e      	bne.n	8001c9a <Serial_Command_Handler+0x36>
    	sys.usb_data_present = 0;
 8001c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	671a      	str	r2, [r3, #112]	@ 0x70

        command_byte = sys.usb_vcp_buffer[0];
 8001c82:	4b5c      	ldr	r3, [pc, #368]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c88:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c90:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 8001c92:	4b58      	ldr	r3, [pc, #352]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c94:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c98:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8001c9a:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10e      	bne.n	8001cc0 <Serial_Command_Handler+0x5c>
    	sys.midi_data_present = 0;
 8001ca2:	4b54      	ldr	r3, [pc, #336]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	675a      	str	r2, [r3, #116]	@ 0x74

        command_byte = sys.midi_buf[0];
 8001ca8:	4b52      	ldr	r3, [pc, #328]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001caa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001cae:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 8001cb0:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001cb2:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001cb6:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <Serial_Command_Handler+0x190>)
 8001cba:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001cbe:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	3b41      	subs	r3, #65	@ 0x41
 8001cc4:	2b19      	cmp	r3, #25
 8001cc6:	d87f      	bhi.n	8001dc8 <Serial_Command_Handler+0x164>
 8001cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd0 <Serial_Command_Handler+0x6c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d39 	.word	0x08001d39
 8001cd4:	08001dc9 	.word	0x08001dc9
 8001cd8:	08001d45 	.word	0x08001d45
 8001cdc:	08001dc9 	.word	0x08001dc9
 8001ce0:	08001d51 	.word	0x08001d51
 8001ce4:	08001d5d 	.word	0x08001d5d
 8001ce8:	08001dc9 	.word	0x08001dc9
 8001cec:	08001dc9 	.word	0x08001dc9
 8001cf0:	08001d69 	.word	0x08001d69
 8001cf4:	08001dc9 	.word	0x08001dc9
 8001cf8:	08001dc9 	.word	0x08001dc9
 8001cfc:	08001dc9 	.word	0x08001dc9
 8001d00:	08001d71 	.word	0x08001d71
 8001d04:	08001dc9 	.word	0x08001dc9
 8001d08:	08001d7d 	.word	0x08001d7d
 8001d0c:	08001d89 	.word	0x08001d89
 8001d10:	08001dc9 	.word	0x08001dc9
 8001d14:	08001d95 	.word	0x08001d95
 8001d18:	08001dc9 	.word	0x08001dc9
 8001d1c:	08001dc9 	.word	0x08001dc9
 8001d20:	08001dc9 	.word	0x08001dc9
 8001d24:	08001dc9 	.word	0x08001dc9
 8001d28:	08001dc9 	.word	0x08001dc9
 8001d2c:	08001dc9 	.word	0x08001dc9
 8001d30:	08001dc9 	.word	0x08001dc9
 8001d34:	08001dc9 	.word	0x08001dc9
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f85e 	bl	8001dfc <VCA_Command_Handler>
 8001d40:	6178      	str	r0, [r7, #20]

            break;
 8001d42:	e042      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'C': // communication settings command

        	error_check = Communication_Command_Handler(address_byte, data_byte);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f96e 	bl	8002028 <Communication_Command_Handler>
 8001d4c:	6178      	str	r0, [r7, #20]

            break;
 8001d4e:	e03c      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9c0 	bl	80020d8 <Envelope_Command_Handler>
 8001d58:	6178      	str	r0, [r7, #20]

            break;
 8001d5a:	e036      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fb06 	bl	8002370 <Filter_Command_Handler>
 8001d64:	6178      	str	r0, [r7, #20]

            break;
 8001d66:	e030      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8001d68:	f000 ff78 	bl	8002c5c <Synth_Initialize_Preset>
 8001d6c:	6178      	str	r0, [r7, #20]

            break;
 8001d6e:	e02c      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'L': // load preset command

            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fc02 	bl	800257c <Mixer_Command_Handler>
 8001d78:	6178      	str	r0, [r7, #20]

            break;
 8001d7a:	e026      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fcb4 	bl	80026ec <LFO_Command_Handler>
 8001d84:	6178      	str	r0, [r7, #20]

            break;
 8001d86:	e020      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fd76 	bl	800287c <Preset_Command_Handler>
 8001d90:	6178      	str	r0, [r7, #20]

            break;
 8001d92:	e01a      	b.n	8001dca <Serial_Command_Handler+0x166>
        case 'R': // reset command

        	for(int i=0; i <6 ; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	e011      	b.n	8001dbe <Serial_Command_Handler+0x15a>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8001d9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f002 fc1b 	bl	80045dc <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8001da6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dae:	f002 fc15 	bl	80045dc <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8001db2:	207d      	movs	r0, #125	@ 0x7d
 8001db4:	f001 fecc 	bl	8003b50 <HAL_Delay>
        	for(int i=0; i <6 ; i++){
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	ddea      	ble.n	8001d9a <Serial_Command_Handler+0x136>
        	}

			NVIC_SystemReset();
 8001dc4:	f7ff ff38 	bl	8001c38 <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

            break;
 8001dc8:	bf00      	nop
    }

    Command_Blink_Status_LED(error_check);
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f001 fada 	bl	8003384 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	b2d9      	uxtb	r1, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f001 fa2d 	bl	800323c <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8001de2:	2240      	movs	r2, #64	@ 0x40
 8001de4:	2100      	movs	r1, #0
 8001de6:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <Serial_Command_Handler+0x194>)
 8001de8:	f00d ff7e 	bl	800fce8 <memset>

}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000370 	.word	0x20000370
 8001df8:	20000394 	.word	0x20000394

08001dfc <VCA_Command_Handler>:

// ===========================================================================================================
// A - VCA functions

int VCA_Command_Handler(int address, int data){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3b31      	subs	r3, #49	@ 0x31
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	f200 8083 	bhi.w	8001f1a <VCA_Command_Handler+0x11e>
 8001e14:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <VCA_Command_Handler+0x20>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e31 	.word	0x08001e31
 8001e20:	08001e5d 	.word	0x08001e5d
 8001e24:	08001e89 	.word	0x08001e89
 8001e28:	08001ebd 	.word	0x08001ebd
 8001e2c:	08001ef1 	.word	0x08001ef1
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e30:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e34:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e38:	22ff      	movs	r2, #255	@ 0xff
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f001 fa51 	bl	80032e4 <Command_Error_Check>
 8001e42:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <VCA_Command_Handler+0x5c>
                SynthParameters.vca_offset = data;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001e50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                VCA_Digital_Pot_Control();
 8001e54:	f001 f826 	bl	8002ea4 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	e05f      	b.n	8001f1c <VCA_Command_Handler+0x120>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e5c:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e60:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e64:	22ff      	movs	r2, #255	@ 0xff
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f001 fa3b 	bl	80032e4 <Command_Error_Check>
 8001e6e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <VCA_Command_Handler+0x88>
                SynthParameters.vca_cv_intensity = data;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001e7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                VCA_Digital_Pot_Control();
 8001e80:	f001 f810 	bl	8002ea4 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	e049      	b.n	8001f1c <VCA_Command_Handler+0x120>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8001e88:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e8c:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001e90:	2203      	movs	r2, #3
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	2001      	movs	r0, #1
 8001e96:	f001 fa25 	bl	80032e4 <Command_Error_Check>
 8001e9a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <VCA_Command_Handler+0xbc>
                SynthParameters.vca_mod_source = data;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001ea8:	701a      	strb	r2, [r3, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f83e 	bl	8001f30 <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8001eb4:	f000 ff92 	bl	8002ddc <VCA_Mod_Source_Control>
            }

        	return error_check;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	e02f      	b.n	8001f1c <VCA_Command_Handler+0x120>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8001ebc:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001ec0:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f001 fa0b 	bl	80032e4 <Command_Error_Check>
 8001ece:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <VCA_Command_Handler+0xf0>
                SynthParameters.vca_bypass = data;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001edc:	705a      	strb	r2, [r3, #1]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <VCA_Command_Handler+0x12c>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f824 	bl	8001f30 <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8001ee8:	f000 ffaa 	bl	8002e40 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	e015      	b.n	8001f1c <VCA_Command_Handler+0x120>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8001ef0:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001ef4:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001f24 <VCA_Command_Handler+0x128>
 8001ef8:	2204      	movs	r2, #4
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	2002      	movs	r0, #2
 8001efe:	f001 f9f1 	bl	80032e4 <Command_Error_Check>
 8001f02:	60f8      	str	r0, [r7, #12]

        	//VCA_Value_Query(data);
            if (error_check == 0) {
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <VCA_Command_Handler+0x11a>
            	VCA_Value_Query(data);
 8001f0a:	6838      	ldr	r0, [r7, #0]
 8001f0c:	f000 f842 	bl	8001f94 <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <VCA_Command_Handler+0x130>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	e000      	b.n	8001f1c <VCA_Command_Handler+0x120>
        default:
            // do nothing on invalid command

        	return error_check;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00000000 	.word	0x00000000
 8001f28:	20000344 	.word	0x20000344
 8001f2c:	20000370 	.word	0x20000370

08001f30 <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d017      	beq.n	8001f6e <VCA_Mod_Source_Decode+0x3e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	dc1d      	bgt.n	8001f80 <VCA_Mod_Source_Decode+0x50>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d003      	beq.n	8001f52 <VCA_Mod_Source_Decode+0x22>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d005      	beq.n	8001f5c <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8001f50:	e016      	b.n	8001f80 <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <VCA_Mod_Source_Decode+0x60>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 8001f5a:	e012      	b.n	8001f82 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <VCA_Mod_Source_Decode+0x60>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 1;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <VCA_Mod_Source_Decode+0x60>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 8001f6c:	e009      	b.n	8001f82 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <VCA_Mod_Source_Decode+0x60>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 0;
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <VCA_Mod_Source_Decode+0x60>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 8001f7e:	e000      	b.n	8001f82 <VCA_Mod_Source_Decode+0x52>
            break;
 8001f80:	bf00      	nop
    }

	return;
 8001f82:	bf00      	nop
}
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000344 	.word	0x20000344

08001f94 <VCA_Value_Query>:
    }

	return;
}

void VCA_Value_Query(int data){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8001f9c:	2341      	movs	r3, #65	@ 0x41
 8001f9e:	733b      	strb	r3, [r7, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	737b      	strb	r3, [r7, #13]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3b31      	subs	r3, #49	@ 0x31
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d81c      	bhi.n	8001fec <VCA_Value_Query+0x58>
 8001fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <VCA_Value_Query+0x24>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fd3 	.word	0x08001fd3
 8001fc0:	08001fdd 	.word	0x08001fdd
 8001fc4:	08001fe5 	.word	0x08001fe5
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <VCA_Value_Query+0x88>)
 8001fca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fce:	73bb      	strb	r3, [r7, #14]
            break;
 8001fd0:	e00d      	b.n	8001fee <VCA_Value_Query+0x5a>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <VCA_Value_Query+0x88>)
 8001fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd8:	73bb      	strb	r3, [r7, #14]
            break;
 8001fda:	e008      	b.n	8001fee <VCA_Value_Query+0x5a>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <VCA_Value_Query+0x88>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fe2:	e004      	b.n	8001fee <VCA_Value_Query+0x5a>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <VCA_Value_Query+0x88>)
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	73bb      	strb	r3, [r7, #14]
            break;
 8001fea:	e000      	b.n	8001fee <VCA_Value_Query+0x5a>
        default:  // do nothing on invalid command

            break;
 8001fec:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00d f9e5 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <VCA_Value_Query+0x8c>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <VCA_Value_Query+0x80>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002002:	f107 010c 	add.w	r1, r7, #12
 8002006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200a:	2203      	movs	r2, #3
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <VCA_Value_Query+0x90>)
 800200e:	f007 fd1d 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 8002012:	bf00      	nop
 8002014:	bf00      	nop
}
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000344 	.word	0x20000344
 8002020:	20000370 	.word	0x20000370
 8002024:	2000044c 	.word	0x2000044c

08002028 <Communication_Command_Handler>:

// ===========================================================================================================
// C - communication settings function

int Communication_Command_Handler(int address, int data){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b33      	cmp	r3, #51	@ 0x33
 800203a:	d02f      	beq.n	800209c <Communication_Command_Handler+0x74>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b33      	cmp	r3, #51	@ 0x33
 8002040:	dc40      	bgt.n	80020c4 <Communication_Command_Handler+0x9c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b31      	cmp	r3, #49	@ 0x31
 8002046:	d003      	beq.n	8002050 <Communication_Command_Handler+0x28>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b32      	cmp	r3, #50	@ 0x32
 800204c:	d012      	beq.n	8002074 <Communication_Command_Handler+0x4c>
 800204e:	e039      	b.n	80020c4 <Communication_Command_Handler+0x9c>
        case '1': // echo command/acknowledge response setting; true = echo, false = acknowledge

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002050:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002054:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002058:	2201      	movs	r2, #1
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	2000      	movs	r0, #0
 800205e:	f001 f941 	bl	80032e4 <Command_Error_Check>
 8002062:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <Communication_Command_Handler+0x48>
            	sys.serial_cmd_echo = data;
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <Communication_Command_Handler+0xac>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	e028      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        case '2': // MIDI transmit enable setting; true = enabled, false = disabled

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002074:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002078:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80020d0 <Communication_Command_Handler+0xa8>
 800207c:	2201      	movs	r2, #1
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	2000      	movs	r0, #0
 8002082:	f001 f92f 	bl	80032e4 <Command_Error_Check>
 8002086:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d104      	bne.n	8002098 <Communication_Command_Handler+0x70>
            	sys.midi_tx_en = data;
 800208e:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <Communication_Command_Handler+0xac>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6093      	str	r3, [r2, #8]
            	MIDI_Port_Control();
 8002094:	f001 f892 	bl	80031bc <MIDI_Port_Control>
            }

        	return error_check;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	e014      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        case '3': // MIDI transmit output polarity setting; true = inverted, false = non-inverted

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800209c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80020d0 <Communication_Command_Handler+0xa8>
 80020a0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80020d0 <Communication_Command_Handler+0xa8>
 80020a4:	2201      	movs	r2, #1
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	2000      	movs	r0, #0
 80020aa:	f001 f91b 	bl	80032e4 <Command_Error_Check>
 80020ae:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <Communication_Command_Handler+0x98>
            	sys.midi_tx_pol = data;
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <Communication_Command_Handler+0xac>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6053      	str	r3, [r2, #4]
            	MIDI_Port_Control();
 80020bc:	f001 f87e 	bl	80031bc <MIDI_Port_Control>
            }

        	return error_check;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	e000      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        default:
            // do nothing on invalid command

        	return error_check;
 80020c4:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00000000 	.word	0x00000000
 80020d4:	20000370 	.word	0x20000370

080020d8 <Envelope_Command_Handler>:

// ===========================================================================================================
// E - envelope functions

int Envelope_Command_Handler(int address, int data){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3b31      	subs	r3, #49	@ 0x31
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	f200 809b 	bhi.w	8002226 <Envelope_Command_Handler+0x14e>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <Envelope_Command_Handler+0x20>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	08002111 	.word	0x08002111
 80020fc:	0800213d 	.word	0x0800213d
 8002100:	08002169 	.word	0x08002169
 8002104:	08002195 	.word	0x08002195
 8002108:	080021c9 	.word	0x080021c9
 800210c:	080021fd 	.word	0x080021fd
        case '1': // envelope attack rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002110:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002114:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002118:	22ff      	movs	r2, #255	@ 0xff
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	2000      	movs	r0, #0
 800211e:	f001 f8e1 	bl	80032e4 <Command_Error_Check>
 8002122:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <Envelope_Command_Handler+0x60>
                SynthParameters.env_attack_rate = data;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 8002130:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                Envelope_Digital_Pot_Control();
 8002134:	f000 ff9e 	bl	8003074 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e075      	b.n	8002228 <Envelope_Command_Handler+0x150>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 800213c:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002140:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002144:	22ff      	movs	r2, #255	@ 0xff
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	2000      	movs	r0, #0
 800214a:	f001 f8cb 	bl	80032e4 <Command_Error_Check>
 800214e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <Envelope_Command_Handler+0x8c>
                SynthParameters.env_decay_rate = data;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 800215c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
                Envelope_Digital_Pot_Control();
 8002160:	f000 ff88 	bl	8003074 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e05f      	b.n	8002228 <Envelope_Command_Handler+0x150>
        case '3': // envelope release rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002168:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8002230 <Envelope_Command_Handler+0x158>
 800216c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002170:	22ff      	movs	r2, #255	@ 0xff
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	2000      	movs	r0, #0
 8002176:	f001 f8b5 	bl	80032e4 <Command_Error_Check>
 800217a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <Envelope_Command_Handler+0xb8>
                SynthParameters.env_release_rate = data;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 8002188:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                Envelope_Digital_Pot_Control();
 800218c:	f000 ff72 	bl	8003074 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	e049      	b.n	8002228 <Envelope_Command_Handler+0x150>
        case '4': // envelope output polarity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002194:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002198:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002230 <Envelope_Command_Handler+0x158>
 800219c:	2201      	movs	r2, #1
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	2000      	movs	r0, #0
 80021a2:	f001 f89f 	bl	80032e4 <Command_Error_Check>
 80021a6:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <Envelope_Command_Handler+0xec>
                SynthParameters.env_invert_mode = data;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 80021b4:	715a      	strb	r2, [r3, #5]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 80021b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 80021b8:	795b      	ldrb	r3, [r3, #5]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f83e 	bl	800223c <Envelope_Output_Polarity_Decode>
                Envelope_Mode_Control();
 80021c0:	f000 ff10 	bl	8002fe4 <Envelope_Mode_Control>
            }

        	return error_check;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	e02f      	b.n	8002228 <Envelope_Command_Handler+0x150>
        case '5': // envelope loop mode control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80021c8:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002230 <Envelope_Command_Handler+0x158>
 80021cc:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002230 <Envelope_Command_Handler+0x158>
 80021d0:	2201      	movs	r2, #1
 80021d2:	6839      	ldr	r1, [r7, #0]
 80021d4:	2000      	movs	r0, #0
 80021d6:	f001 f885 	bl	80032e4 <Command_Error_Check>
 80021da:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <Envelope_Command_Handler+0x120>
                SynthParameters.env_loop_mode = data;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 80021e8:	719a      	strb	r2, [r3, #6]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <Envelope_Command_Handler+0x15c>)
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f848 	bl	8002284 <Envelope_Loop_Mode_Decode>
                Envelope_Mode_Control();
 80021f4:	f000 fef6 	bl	8002fe4 <Envelope_Mode_Control>
            }

        	return error_check;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	e015      	b.n	8002228 <Envelope_Command_Handler+0x150>
        case '6': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 5, 0, 0);
 80021fc:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002200:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002230 <Envelope_Command_Handler+0x158>
 8002204:	2205      	movs	r2, #5
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	2002      	movs	r0, #2
 800220a:	f001 f86b 	bl	80032e4 <Command_Error_Check>
 800220e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <Envelope_Command_Handler+0x14a>
            	Envelope_Value_Query(data);
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f000 f858 	bl	80022cc <Envelope_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <Envelope_Command_Handler+0x160>)
 800221e:	2201      	movs	r2, #1
 8002220:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	e000      	b.n	8002228 <Envelope_Command_Handler+0x150>
        default:
            // do nothing on invalid command

        	return error_check;
 8002226:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	00000000 	.word	0x00000000
 8002234:	20000344 	.word	0x20000344
 8002238:	20000370 	.word	0x20000370

0800223c <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <Envelope_Output_Polarity_Decode+0x44>)
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 1;
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <Envelope_Output_Polarity_Decode+0x44>)
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 800225a:	e00b      	b.n	8002274 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <Envelope_Output_Polarity_Decode+0x44>)
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 0;
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <Envelope_Output_Polarity_Decode+0x44>)
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	return;
 8002272:	bf00      	nop
 8002274:	bf00      	nop
}
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000344 	.word	0x20000344

08002284 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <Envelope_Loop_Mode_Decode+0x44>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 1;
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <Envelope_Loop_Mode_Decode+0x44>)
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 80022a2:	e00b      	b.n	80022bc <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <Envelope_Loop_Mode_Decode+0x44>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 0;
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <Envelope_Loop_Mode_Decode+0x44>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return;
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
}
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000344 	.word	0x20000344

080022cc <Envelope_Value_Query>:

void Envelope_Value_Query(int data){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'E', data , 0};
 80022d4:	2345      	movs	r3, #69	@ 0x45
 80022d6:	733b      	strb	r3, [r7, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	737b      	strb	r3, [r7, #13]
 80022de:	2300      	movs	r3, #0
 80022e0:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3b31      	subs	r3, #49	@ 0x31
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d823      	bhi.n	8002332 <Envelope_Value_Query+0x66>
 80022ea:	a201      	add	r2, pc, #4	@ (adr r2, 80022f0 <Envelope_Value_Query+0x24>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002305 	.word	0x08002305
 80022f4:	0800230f 	.word	0x0800230f
 80022f8:	08002319 	.word	0x08002319
 80022fc:	08002323 	.word	0x08002323
 8002300:	0800232b 	.word	0x0800232b
        case '1': // envelope attack rate
        	return_data[2] = SynthParameters.env_attack_rate;
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <Envelope_Value_Query+0x98>)
 8002306:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800230a:	73bb      	strb	r3, [r7, #14]
            break;
 800230c:	e012      	b.n	8002334 <Envelope_Value_Query+0x68>
        case '2': // envelope sustain level/decay rate
        	return_data[2] = SynthParameters.env_decay_rate;
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <Envelope_Value_Query+0x98>)
 8002310:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002314:	73bb      	strb	r3, [r7, #14]
            break;
 8002316:	e00d      	b.n	8002334 <Envelope_Value_Query+0x68>
        case '3': // envelope release rate
        	return_data[2] = SynthParameters.env_release_rate;
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <Envelope_Value_Query+0x98>)
 800231a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800231e:	73bb      	strb	r3, [r7, #14]
            break;
 8002320:	e008      	b.n	8002334 <Envelope_Value_Query+0x68>
        case '4': // envelope output polarity
        	return_data[2] = SynthParameters.env_invert_mode;
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <Envelope_Value_Query+0x98>)
 8002324:	795b      	ldrb	r3, [r3, #5]
 8002326:	73bb      	strb	r3, [r7, #14]
            break;
 8002328:	e004      	b.n	8002334 <Envelope_Value_Query+0x68>
        case '5': // envelope loop mode control
        	return_data[2] = SynthParameters.env_loop_mode;
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <Envelope_Value_Query+0x98>)
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	73bb      	strb	r3, [r7, #14]
            break;
 8002330:	e000      	b.n	8002334 <Envelope_Value_Query+0x68>
        default:  // do nothing on invalid command

            break;
 8002332:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2103      	movs	r1, #3
 800233a:	4618      	mov	r0, r3
 800233c:	f00d f842 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <Envelope_Value_Query+0x9c>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <Envelope_Value_Query+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002350:	2203      	movs	r2, #3
 8002352:	4806      	ldr	r0, [pc, #24]	@ (800236c <Envelope_Value_Query+0xa0>)
 8002354:	f007 fb7a 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 8002358:	bf00      	nop
 800235a:	bf00      	nop
}
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000344 	.word	0x20000344
 8002368:	20000370 	.word	0x20000370
 800236c:	2000044c 	.word	0x2000044c

08002370 <Filter_Command_Handler>:

// ===========================================================================================================
// F - filter functions

int Filter_Command_Handler(int address, int data){
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3b31      	subs	r3, #49	@ 0x31
 8002382:	2b04      	cmp	r3, #4
 8002384:	d87a      	bhi.n	800247c <Filter_Command_Handler+0x10c>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <Filter_Command_Handler+0x1c>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	080023a1 	.word	0x080023a1
 8002390:	080023cb 	.word	0x080023cb
 8002394:	080023f5 	.word	0x080023f5
 8002398:	0800241f 	.word	0x0800241f
 800239c:	08002453 	.word	0x08002453
        case '1': // filter cutoff

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023a0:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002488 <Filter_Command_Handler+0x118>
 80023a4:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002488 <Filter_Command_Handler+0x118>
 80023a8:	22ff      	movs	r2, #255	@ 0xff
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	2000      	movs	r0, #0
 80023ae:	f000 ff99 	bl	80032e4 <Command_Error_Check>
 80023b2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <Filter_Command_Handler+0x56>
                SynthParameters.vcf_cutoff = data;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b33      	ldr	r3, [pc, #204]	@ (800248c <Filter_Command_Handler+0x11c>)
 80023c0:	76da      	strb	r2, [r3, #27]
                Filter_Digital_Pot_Control();
 80023c2:	f000 fdb5 	bl	8002f30 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	e059      	b.n	800247e <Filter_Command_Handler+0x10e>
        case '2': // filter resonance intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023ca:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002488 <Filter_Command_Handler+0x118>
 80023ce:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002488 <Filter_Command_Handler+0x118>
 80023d2:	22ff      	movs	r2, #255	@ 0xff
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 ff84 	bl	80032e4 <Command_Error_Check>
 80023dc:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <Filter_Command_Handler+0x80>
                SynthParameters.vcf_resonance = data;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b28      	ldr	r3, [pc, #160]	@ (800248c <Filter_Command_Handler+0x11c>)
 80023ea:	771a      	strb	r2, [r3, #28]
                Filter_Digital_Pot_Control();
 80023ec:	f000 fda0 	bl	8002f30 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	e044      	b.n	800247e <Filter_Command_Handler+0x10e>
        case '3': // filter modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023f4:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002488 <Filter_Command_Handler+0x118>
 80023f8:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002488 <Filter_Command_Handler+0x118>
 80023fc:	22ff      	movs	r2, #255	@ 0xff
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	2000      	movs	r0, #0
 8002402:	f000 ff6f 	bl	80032e4 <Command_Error_Check>
 8002406:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_cv_intensity = data;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <Filter_Command_Handler+0x11c>)
 8002414:	769a      	strb	r2, [r3, #26]
                Filter_Digital_Pot_Control();
 8002416:	f000 fd8b 	bl	8002f30 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	e02f      	b.n	800247e <Filter_Command_Handler+0x10e>
        case '4': // filter modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 800241e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002488 <Filter_Command_Handler+0x118>
 8002422:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002488 <Filter_Command_Handler+0x118>
 8002426:	2203      	movs	r2, #3
 8002428:	6839      	ldr	r1, [r7, #0]
 800242a:	2001      	movs	r0, #1
 800242c:	f000 ff5a 	bl	80032e4 <Command_Error_Check>
 8002430:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <Filter_Command_Handler+0xde>
                SynthParameters.vcf_mod_source = data;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <Filter_Command_Handler+0x11c>)
 800243e:	709a      	strb	r2, [r3, #2]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <Filter_Command_Handler+0x11c>)
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f825 	bl	8002494 <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 800244a:	f000 fd41 	bl	8002ed0 <Filter_Mod_Source_Control>
            }

        	return error_check;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	e015      	b.n	800247e <Filter_Command_Handler+0x10e>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8002452:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002488 <Filter_Command_Handler+0x118>
 8002456:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002488 <Filter_Command_Handler+0x118>
 800245a:	2204      	movs	r2, #4
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	2002      	movs	r0, #2
 8002460:	f000 ff40 	bl	80032e4 <Command_Error_Check>
 8002464:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <Filter_Command_Handler+0x108>
            	Filter_Value_Query(data);
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	f000 f83d 	bl	80024ec <Filter_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <Filter_Command_Handler+0x120>)
 8002474:	2201      	movs	r2, #1
 8002476:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	e000      	b.n	800247e <Filter_Command_Handler+0x10e>
        default:
            // do nothing on invalid command

        	return error_check;
 800247c:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	00000000 	.word	0x00000000
 800248c:	20000344 	.word	0x20000344
 8002490:	20000370 	.word	0x20000370

08002494 <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

    switch(data) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d014      	beq.n	80024cc <Filter_Mod_Source_Decode+0x38>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	dc18      	bgt.n	80024da <Filter_Mod_Source_Decode+0x46>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d003      	beq.n	80024b6 <Filter_Mod_Source_Decode+0x22>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d004      	beq.n	80024be <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80024b4:	e011      	b.n	80024da <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <Filter_Mod_Source_Decode+0x54>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	761a      	strb	r2, [r3, #24]
            break;
 80024bc:	e00e      	b.n	80024dc <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 80024be:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <Filter_Mod_Source_Decode+0x54>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 1;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <Filter_Mod_Source_Decode+0x54>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	765a      	strb	r2, [r3, #25]
            break;
 80024ca:	e007      	b.n	80024dc <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <Filter_Mod_Source_Decode+0x54>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 0;
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <Filter_Mod_Source_Decode+0x54>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	765a      	strb	r2, [r3, #25]
            break;
 80024d8:	e000      	b.n	80024dc <Filter_Mod_Source_Decode+0x48>
            break;
 80024da:	bf00      	nop
    }

	return;
 80024dc:	bf00      	nop
}
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000344 	.word	0x20000344

080024ec <Filter_Value_Query>:

void Filter_Value_Query(int data){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'F', data , 0};
 80024f4:	2346      	movs	r3, #70	@ 0x46
 80024f6:	733b      	strb	r3, [r7, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	737b      	strb	r3, [r7, #13]
 80024fe:	2300      	movs	r3, #0
 8002500:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3b31      	subs	r3, #49	@ 0x31
 8002506:	2b03      	cmp	r3, #3
 8002508:	d81a      	bhi.n	8002540 <Filter_Value_Query+0x54>
 800250a:	a201      	add	r2, pc, #4	@ (adr r2, 8002510 <Filter_Value_Query+0x24>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002521 	.word	0x08002521
 8002514:	08002529 	.word	0x08002529
 8002518:	08002531 	.word	0x08002531
 800251c:	08002539 	.word	0x08002539
        case '1': // filter cutoff
        	return_data[2] = SynthParameters.vcf_cutoff;
 8002520:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <Filter_Value_Query+0x84>)
 8002522:	7edb      	ldrb	r3, [r3, #27]
 8002524:	73bb      	strb	r3, [r7, #14]
            break;
 8002526:	e00c      	b.n	8002542 <Filter_Value_Query+0x56>
        case '2': // filter resonance intensity
        	return_data[2] = SynthParameters.vcf_resonance;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <Filter_Value_Query+0x84>)
 800252a:	7f1b      	ldrb	r3, [r3, #28]
 800252c:	73bb      	strb	r3, [r7, #14]
            break;
 800252e:	e008      	b.n	8002542 <Filter_Value_Query+0x56>
        case '3': // filter modulation intensity
        	return_data[2] = SynthParameters.vcf_cv_intensity;
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <Filter_Value_Query+0x84>)
 8002532:	7e9b      	ldrb	r3, [r3, #26]
 8002534:	73bb      	strb	r3, [r7, #14]
            break;
 8002536:	e004      	b.n	8002542 <Filter_Value_Query+0x56>
        case '4': // filter modulation control
        	return_data[2] = SynthParameters.vcf_mod_source;
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <Filter_Value_Query+0x84>)
 800253a:	789b      	ldrb	r3, [r3, #2]
 800253c:	73bb      	strb	r3, [r7, #14]
            break;
 800253e:	e000      	b.n	8002542 <Filter_Value_Query+0x56>
        default:  // do nothing on invalid command

            break;
 8002540:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	2103      	movs	r1, #3
 8002548:	4618      	mov	r0, r3
 800254a:	f00c ff3b 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <Filter_Value_Query+0x88>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <Filter_Value_Query+0x7c>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002556:	f107 010c 	add.w	r1, r7, #12
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	2203      	movs	r2, #3
 8002560:	4805      	ldr	r0, [pc, #20]	@ (8002578 <Filter_Value_Query+0x8c>)
 8002562:	f007 fa73 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 8002566:	bf00      	nop
 8002568:	bf00      	nop
}
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000344 	.word	0x20000344
 8002574:	20000370 	.word	0x20000370
 8002578:	2000044c 	.word	0x2000044c

0800257c <Mixer_Command_Handler>:

// ===========================================================================================================
// M - mixer function

int Mixer_Command_Handler(int address, int data){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3b31      	subs	r3, #49	@ 0x31
 800258e:	2b03      	cmp	r3, #3
 8002590:	d85c      	bhi.n	800264c <Mixer_Command_Handler+0xd0>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <Mixer_Command_Handler+0x1c>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025d3 	.word	0x080025d3
 80025a0:	080025fd 	.word	0x080025fd
 80025a4:	08002623 	.word	0x08002623
        case '1': // DAC output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80025a8:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8002658 <Mixer_Command_Handler+0xdc>
 80025ac:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002658 <Mixer_Command_Handler+0xdc>
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 fe95 	bl	80032e4 <Command_Error_Check>
 80025ba:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <Mixer_Command_Handler+0x52>
                SynthParameters.dac_mixer_level = data;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <Mixer_Command_Handler+0xe0>)
 80025c8:	759a      	strb	r2, [r3, #22]
                Mixer_Digital_Pot_Control();
 80025ca:	f000 fbf3 	bl	8002db4 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	e03d      	b.n	800264e <Mixer_Command_Handler+0xd2>
        case '2': // filter output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80025d2:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002658 <Mixer_Command_Handler+0xdc>
 80025d6:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002658 <Mixer_Command_Handler+0xdc>
 80025da:	22ff      	movs	r2, #255	@ 0xff
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 fe80 	bl	80032e4 <Command_Error_Check>
 80025e4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <Mixer_Command_Handler+0x7c>
                SynthParameters.filter_out_level = data;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <Mixer_Command_Handler+0xe0>)
 80025f2:	75da      	strb	r2, [r3, #23]
                Mixer_Digital_Pot_Control();
 80025f4:	f000 fbde 	bl	8002db4 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e028      	b.n	800264e <Mixer_Command_Handler+0xd2>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80025fc:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002658 <Mixer_Command_Handler+0xdc>
 8002600:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002658 <Mixer_Command_Handler+0xdc>
 8002604:	2201      	movs	r2, #1
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	2000      	movs	r0, #0
 800260a:	f000 fe6b 	bl	80032e4 <Command_Error_Check>
 800260e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <Mixer_Command_Handler+0xa2>
            	sys.velocity_enable = data;
 8002616:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <Mixer_Command_Handler+0xe4>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
            }

        	return error_check;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	e015      	b.n	800264e <Mixer_Command_Handler+0xd2>
        case '4': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 3, 0, 0);
 8002622:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002658 <Mixer_Command_Handler+0xdc>
 8002626:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002658 <Mixer_Command_Handler+0xdc>
 800262a:	2203      	movs	r2, #3
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	2002      	movs	r0, #2
 8002630:	f000 fe58 	bl	80032e4 <Command_Error_Check>
 8002634:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <Mixer_Command_Handler+0xcc>
            	Mixer_Value_Query(data);
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f000 f811 	bl	8002664 <Mixer_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002642:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <Mixer_Command_Handler+0xe4>)
 8002644:	2201      	movs	r2, #1
 8002646:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	e000      	b.n	800264e <Mixer_Command_Handler+0xd2>
        default:
            // do nothing on invalid command

        	return error_check;
 800264c:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	00000000 	.word	0x00000000
 800265c:	20000344 	.word	0x20000344
 8002660:	20000370 	.word	0x20000370

08002664 <Mixer_Value_Query>:

void Mixer_Value_Query(int data){
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'M', data , 0};
 800266c:	234d      	movs	r3, #77	@ 0x4d
 800266e:	733b      	strb	r3, [r7, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	737b      	strb	r3, [r7, #13]
 8002676:	2300      	movs	r3, #0
 8002678:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b33      	cmp	r3, #51	@ 0x33
 800267e:	d011      	beq.n	80026a4 <Mixer_Value_Query+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b33      	cmp	r3, #51	@ 0x33
 8002684:	dc14      	bgt.n	80026b0 <Mixer_Value_Query+0x4c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b31      	cmp	r3, #49	@ 0x31
 800268a:	d003      	beq.n	8002694 <Mixer_Value_Query+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b32      	cmp	r3, #50	@ 0x32
 8002690:	d004      	beq.n	800269c <Mixer_Value_Query+0x38>
        case '3': // enable/disable MIDI velocity
        	return_data[2] = sys.velocity_enable;
            break;
        default:  // do nothing on invalid command

            break;
 8002692:	e00d      	b.n	80026b0 <Mixer_Value_Query+0x4c>
        	return_data[2] = SynthParameters.dac_mixer_level;
 8002694:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <Mixer_Value_Query+0x7c>)
 8002696:	7d9b      	ldrb	r3, [r3, #22]
 8002698:	73bb      	strb	r3, [r7, #14]
            break;
 800269a:	e00a      	b.n	80026b2 <Mixer_Value_Query+0x4e>
        	return_data[2] = SynthParameters.filter_out_level;
 800269c:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <Mixer_Value_Query+0x7c>)
 800269e:	7ddb      	ldrb	r3, [r3, #23]
 80026a0:	73bb      	strb	r3, [r7, #14]
            break;
 80026a2:	e006      	b.n	80026b2 <Mixer_Value_Query+0x4e>
        	return_data[2] = sys.velocity_enable;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <Mixer_Value_Query+0x80>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	73bb      	strb	r3, [r7, #14]
            break;
 80026ae:	e000      	b.n	80026b2 <Mixer_Value_Query+0x4e>
            break;
 80026b0:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2103      	movs	r1, #3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00c fe83 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <Mixer_Value_Query+0x80>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <Mixer_Value_Query+0x74>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 80026c6:	f107 010c 	add.w	r1, r7, #12
 80026ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ce:	2203      	movs	r2, #3
 80026d0:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <Mixer_Value_Query+0x84>)
 80026d2:	f007 f9bb 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
}
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000344 	.word	0x20000344
 80026e4:	20000370 	.word	0x20000370
 80026e8:	2000044c 	.word	0x2000044c

080026ec <LFO_Command_Handler>:

// ===========================================================================================================
// O - LFO functions

int LFO_Command_Handler(int address, int data){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b33      	cmp	r3, #51	@ 0x33
 80026fe:	d038      	beq.n	8002772 <LFO_Command_Handler+0x86>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b33      	cmp	r3, #51	@ 0x33
 8002704:	dc4a      	bgt.n	800279c <LFO_Command_Handler+0xb0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b31      	cmp	r3, #49	@ 0x31
 800270a:	d003      	beq.n	8002714 <LFO_Command_Handler+0x28>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b32      	cmp	r3, #50	@ 0x32
 8002710:	d015      	beq.n	800273e <LFO_Command_Handler+0x52>
 8002712:	e043      	b.n	800279c <LFO_Command_Handler+0xb0>
        case '1': // LFO frequency/rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002714:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80027a8 <LFO_Command_Handler+0xbc>
 8002718:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80027a8 <LFO_Command_Handler+0xbc>
 800271c:	22ff      	movs	r2, #255	@ 0xff
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	2000      	movs	r0, #0
 8002722:	f000 fddf 	bl	80032e4 <Command_Error_Check>
 8002726:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <LFO_Command_Handler+0x4e>
                SynthParameters.lfo_frequency = data;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <LFO_Command_Handler+0xc0>)
 8002734:	77da      	strb	r2, [r3, #31]
                LFO_Digital_Pot_Control();
 8002736:	f000 fc47 	bl	8002fc8 <LFO_Digital_Pot_Control>
            }

        	return error_check;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	e02f      	b.n	800279e <LFO_Command_Handler+0xb2>
        case '2': // LFO output waveform

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 800273e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80027a8 <LFO_Command_Handler+0xbc>
 8002742:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80027a8 <LFO_Command_Handler+0xbc>
 8002746:	2203      	movs	r2, #3
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	2001      	movs	r0, #1
 800274c:	f000 fdca 	bl	80032e4 <Command_Error_Check>
 8002750:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <LFO_Command_Handler+0x82>
                SynthParameters.lfo_waveform = data;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <LFO_Command_Handler+0xc0>)
 800275e:	71da      	strb	r2, [r3, #7]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <LFO_Command_Handler+0xc0>)
 8002762:	79db      	ldrb	r3, [r3, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f825 	bl	80027b4 <LFO_Waveform_Decode>
                LFO_Output_Control();
 800276a:	f000 fbfd 	bl	8002f68 <LFO_Output_Control>
            }

        	return error_check;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	e015      	b.n	800279e <LFO_Command_Handler+0xb2>
        case '3': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 2, 0, 0);
 8002772:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80027a8 <LFO_Command_Handler+0xbc>
 8002776:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80027a8 <LFO_Command_Handler+0xbc>
 800277a:	2202      	movs	r2, #2
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	2002      	movs	r0, #2
 8002780:	f000 fdb0 	bl	80032e4 <Command_Error_Check>
 8002784:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <LFO_Command_Handler+0xac>
            	LFO_Value_Query(data);
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f000 f83d 	bl	800280c <LFO_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <LFO_Command_Handler+0xc4>)
 8002794:	2201      	movs	r2, #1
 8002796:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	e000      	b.n	800279e <LFO_Command_Handler+0xb2>
        default:
            // do nothing on invalid command

        	return error_check;
 800279c:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	00000000 	.word	0x00000000
 80027ac:	20000344 	.word	0x20000344
 80027b0:	20000370 	.word	0x20000370

080027b4 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

    switch(data) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d014      	beq.n	80027ec <LFO_Waveform_Decode+0x38>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	dc18      	bgt.n	80027fa <LFO_Waveform_Decode+0x46>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d003      	beq.n	80027d6 <LFO_Waveform_Decode+0x22>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d004      	beq.n	80027de <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80027d4:	e011      	b.n	80027fa <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 80027d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <LFO_Waveform_Decode+0x54>)
 80027d8:	2200      	movs	r2, #0
 80027da:	775a      	strb	r2, [r3, #29]
            break;
 80027dc:	e00e      	b.n	80027fc <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <LFO_Waveform_Decode+0x54>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 1;
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <LFO_Waveform_Decode+0x54>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	779a      	strb	r2, [r3, #30]
            break;
 80027ea:	e007      	b.n	80027fc <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <LFO_Waveform_Decode+0x54>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 0;
 80027f2:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <LFO_Waveform_Decode+0x54>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	779a      	strb	r2, [r3, #30]
            break;
 80027f8:	e000      	b.n	80027fc <LFO_Waveform_Decode+0x48>
            break;
 80027fa:	bf00      	nop
    }

	return;
 80027fc:	bf00      	nop
}
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000344 	.word	0x20000344

0800280c <LFO_Value_Query>:

void LFO_Value_Query(int data){
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'O', data , 0};
 8002814:	234f      	movs	r3, #79	@ 0x4f
 8002816:	733b      	strb	r3, [r7, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	737b      	strb	r3, [r7, #13]
 800281e:	2300      	movs	r3, #0
 8002820:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b31      	cmp	r3, #49	@ 0x31
 8002826:	d003      	beq.n	8002830 <LFO_Value_Query+0x24>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b32      	cmp	r3, #50	@ 0x32
 800282c:	d004      	beq.n	8002838 <LFO_Value_Query+0x2c>
        case '2': // LFO output waveform
        	return_data[2] = SynthParameters.lfo_waveform;
            break;
        default:  // do nothing on invalid command

            break;
 800282e:	e007      	b.n	8002840 <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_frequency;
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <LFO_Value_Query+0x64>)
 8002832:	7fdb      	ldrb	r3, [r3, #31]
 8002834:	73bb      	strb	r3, [r7, #14]
            break;
 8002836:	e003      	b.n	8002840 <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_waveform;
 8002838:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <LFO_Value_Query+0x64>)
 800283a:	79db      	ldrb	r3, [r3, #7]
 800283c:	73bb      	strb	r3, [r7, #14]
            break;
 800283e:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	2103      	movs	r1, #3
 8002846:	4618      	mov	r0, r3
 8002848:	f00c fdbc 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <LFO_Value_Query+0x68>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <LFO_Value_Query+0x5a>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002854:	f107 010c 	add.w	r1, r7, #12
 8002858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285c:	2203      	movs	r2, #3
 800285e:	4806      	ldr	r0, [pc, #24]	@ (8002878 <LFO_Value_Query+0x6c>)
 8002860:	f007 f8f4 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 8002864:	bf00      	nop
 8002866:	bf00      	nop
}
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000344 	.word	0x20000344
 8002874:	20000370 	.word	0x20000370
 8002878:	2000044c 	.word	0x2000044c

0800287c <Preset_Command_Handler>:

// ===========================================================================================================
// P preset function

int Preset_Command_Handler(int address, int data){
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

    switch(address) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b31      	cmp	r3, #49	@ 0x31
 800288a:	d003      	beq.n	8002894 <Preset_Command_Handler+0x18>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b32      	cmp	r3, #50	@ 0x32
 8002890:	d002      	beq.n	8002898 <Preset_Command_Handler+0x1c>
 8002892:	e003      	b.n	800289c <Preset_Command_Handler+0x20>
        case '1': // preset save function

        	// preset save function

        	return 0;
 8002894:	2300      	movs	r3, #0
 8002896:	e002      	b.n	800289e <Preset_Command_Handler+0x22>
        case '2': // preset load function

        	// preset load function

        	return 0;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <Preset_Command_Handler+0x22>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return 1;
 800289c:	2301      	movs	r3, #1
    }

    return 1;
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <MX_SPI3_Init+0x78>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028e2:	2228      	movs	r2, #40	@ 0x28
 80028e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_SPI3_Init+0x74>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <MX_SPI3_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_SPI3_Init+0x74>)
 8002906:	2208      	movs	r2, #8
 8002908:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <MX_SPI3_Init+0x74>)
 800290c:	f006 f8dc 	bl	8008ac8 <HAL_SPI_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002916:	f7fe fd6a 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200002e0 	.word	0x200002e0
 8002924:	40003c00 	.word	0x40003c00

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <HAL_SPI_MspInit+0x7c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d128      	bne.n	800299c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800294a:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	4a16      	ldr	r2, [pc, #88]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 8002950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002954:	6593      	str	r3, [r2, #88]	@ 0x58
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_SPI_MspInit+0x80>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800297a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800298c:	2306      	movs	r3, #6
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4805      	ldr	r0, [pc, #20]	@ (80029ac <HAL_SPI_MspInit+0x84>)
 8002998:	f001 fc86 	bl	80042a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	@ 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40003c00 	.word	0x40003c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	48000800 	.word	0x48000800

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <HAL_MspInit+0x44>)
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <HAL_MspInit+0x44>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_MspInit+0x44>)
 80029c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_MspInit+0x44>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	4a08      	ldr	r2, [pc, #32]	@ (80029f4 <HAL_MspInit+0x44>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_MspInit+0x44>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029e6:	f004 fbe3 	bl	80071b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <NMI_Handler+0x4>

08002a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <HardFault_Handler+0x4>

08002a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <MemManage_Handler+0x4>

08002a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <BusFault_Handler+0x4>

08002a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <UsageFault_Handler+0x4>

08002a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a4e:	f001 f861 	bl	8003b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <DMA1_Channel1_IRQHandler+0x10>)
 8002a5e:	f001 fb11 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000280 	.word	0x20000280

08002a6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <USB_LP_IRQHandler+0x10>)
 8002a72:	f002 fee7 	bl	8005844 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200019b8 	.word	0x200019b8

08002a80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a84:	4802      	ldr	r0, [pc, #8]	@ (8002a90 <USART2_IRQHandler+0x10>)
 8002a86:	f007 f8bb 	bl	8009c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000044c 	.word	0x2000044c

08002a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <TIM6_DAC_IRQHandler+0x10>)
 8002a9a:	f006 fc92 	bl	80093c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000400 	.word	0x20000400

08002aa8 <Digital_Pot_Wiper_Set>:

extern System sys;

Synth SynthParameters;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <Digital_Pot_Wiper_Set+0x1c>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e001      	b.n	8002ac8 <Digital_Pot_Wiper_Set+0x20>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b0a      	cmp	r3, #10
 8002ace:	d854      	bhi.n	8002b7a <Digital_Pot_Wiper_Set+0xd2>
 8002ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <Digital_Pot_Wiper_Set+0x30>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002b1b 	.word	0x08002b1b
 8002ae4:	08002b25 	.word	0x08002b25
 8002ae8:	08002b31 	.word	0x08002b31
 8002aec:	08002b3b 	.word	0x08002b3b
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002b4f 	.word	0x08002b4f
 8002af8:	08002b5b 	.word	0x08002b5b
 8002afc:	08002b67 	.word	0x08002b67
 8002b00:	08002b71 	.word	0x08002b71
        case 0:
            CSn_PORT = CS0_PORT;
 8002b04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b08:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	827b      	strh	r3, [r7, #18]
            break;
 8002b0e:	e035      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 8002b10:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <Digital_Pot_Wiper_Set+0x104>)
 8002b12:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 8002b14:	2302      	movs	r3, #2
 8002b16:	827b      	strh	r3, [r7, #18]
            break;
 8002b18:	e030      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <Digital_Pot_Wiper_Set+0x108>)
 8002b1c:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	827b      	strh	r3, [r7, #18]
            break;
 8002b22:	e02b      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <Digital_Pot_Wiper_Set+0x104>)
 8002b26:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 8002b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b2c:	827b      	strh	r3, [r7, #18]
            break;
 8002b2e:	e025      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <Digital_Pot_Wiper_Set+0x104>)
 8002b32:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 8002b34:	2340      	movs	r3, #64	@ 0x40
 8002b36:	827b      	strh	r3, [r7, #18]
            break;
 8002b38:	e020      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <Digital_Pot_Wiper_Set+0x10c>)
 8002b3c:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	827b      	strh	r3, [r7, #18]
            break;
 8002b42:	e01b      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <Digital_Pot_Wiper_Set+0x104>)
 8002b46:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	827b      	strh	r3, [r7, #18]
            break;
 8002b4c:	e016      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <Digital_Pot_Wiper_Set+0x10c>)
 8002b50:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 8002b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b56:	827b      	strh	r3, [r7, #18]
            break;
 8002b58:	e010      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 8002b5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b5e:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	827b      	strh	r3, [r7, #18]
            break;
 8002b64:	e00a      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <Digital_Pot_Wiper_Set+0x10c>)
 8002b68:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	827b      	strh	r3, [r7, #18]
            break;
 8002b6e:	e005      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <Digital_Pot_Wiper_Set+0x104>)
 8002b72:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 8002b74:	2301      	movs	r3, #1
 8002b76:	827b      	strh	r3, [r7, #18]
            break;
 8002b78:	e000      	b.n	8002b7c <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 8002b7a:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4619      	mov	r1, r3
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f001 fd12 	bl	80045ac <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8002b88:	f107 0110 	add.w	r1, r7, #16
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4809      	ldr	r0, [pc, #36]	@ (8002bb8 <Digital_Pot_Wiper_Set+0x110>)
 8002b92:	f006 f844 	bl	8008c1e <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 8002b96:	8a7b      	ldrh	r3, [r7, #18]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f001 fd05 	bl	80045ac <HAL_GPIO_WritePin>

	return;
 8002ba2:	bf00      	nop
}
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	48000400 	.word	0x48000400
 8002bb0:	48000c00 	.word	0x48000c00
 8002bb4:	48000800 	.word	0x48000800
 8002bb8:	200002e0 	.word	0x200002e0

08002bbc <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	4822      	ldr	r0, [pc, #136]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002bc6:	f001 fcf1 	bl	80045ac <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2120      	movs	r1, #32
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd2:	f001 fceb 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2102      	movs	r1, #2
 8002bda:	481d      	ldr	r0, [pc, #116]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002bdc:	f001 fce6 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	2104      	movs	r1, #4
 8002be4:	481b      	ldr	r0, [pc, #108]	@ (8002c54 <Synth_Reset_Initialize+0x98>)
 8002be6:	f001 fce1 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 8002bea:	2201      	movs	r2, #1
 8002bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bf0:	4817      	ldr	r0, [pc, #92]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002bf2:	f001 fcdb 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2140      	movs	r1, #64	@ 0x40
 8002bfa:	4815      	ldr	r0, [pc, #84]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002bfc:	f001 fcd6 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 8002c00:	2201      	movs	r2, #1
 8002c02:	2120      	movs	r1, #32
 8002c04:	4814      	ldr	r0, [pc, #80]	@ (8002c58 <Synth_Reset_Initialize+0x9c>)
 8002c06:	f001 fcd1 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	4810      	ldr	r0, [pc, #64]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002c10:	f001 fccc 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c1a:	480f      	ldr	r0, [pc, #60]	@ (8002c58 <Synth_Reset_Initialize+0x9c>)
 8002c1c:	f001 fcc6 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c28:	f001 fcc0 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	2110      	movs	r1, #16
 8002c30:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <Synth_Reset_Initialize+0x9c>)
 8002c32:	f001 fcbb 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 8002c36:	2201      	movs	r2, #1
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <Synth_Reset_Initialize+0x94>)
 8002c3c:	f001 fcb6 	bl	80045ac <HAL_GPIO_WritePin>

	// set gate low
	Gate_Control(0);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f000 fae5 	bl	8003210 <Gate_Control>

	Synth_Initialize_Preset();
 8002c46:	f000 f809 	bl	8002c5c <Synth_Initialize_Preset>

	return;
 8002c4a:	bf00      	nop
}
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	48000400 	.word	0x48000400
 8002c54:	48000c00 	.word	0x48000c00
 8002c58:	48000800 	.word	0x48000800

08002c5c <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source = 1;
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
	SynthParameters.vca_bypass = 1;
 8002c66:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	705a      	strb	r2, [r3, #1]
	SynthParameters.vcf_mod_source = 1;
 8002c6c:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	709a      	strb	r2, [r3, #2]
	SynthParameters.fm1_enable = 0;
 8002c72:	4b4f      	ldr	r3, [pc, #316]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	70da      	strb	r2, [r3, #3]
	SynthParameters.fm2_enable = 0;
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	711a      	strb	r2, [r3, #4]
	SynthParameters.env_invert_mode = 0;
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	715a      	strb	r2, [r3, #5]
	SynthParameters.env_loop_mode = 0;
 8002c84:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	719a      	strb	r2, [r3, #6]
	SynthParameters.lfo_waveform = 1;
 8002c8a:	4b49      	ldr	r3, [pc, #292]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	71da      	strb	r2, [r3, #7]

	// waveform synthesis settings
	SynthParameters.oscillator1 = 4;
 8002c90:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c92:	2204      	movs	r2, #4
 8002c94:	721a      	strb	r2, [r3, #8]
	SynthParameters.oscillator2 = 4;
 8002c96:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c98:	2204      	movs	r2, #4
 8002c9a:	725a      	strb	r2, [r3, #9]
	SynthParameters.note_offset1 = 12;
 8002c9c:	4b44      	ldr	r3, [pc, #272]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	729a      	strb	r2, [r3, #10]
	SynthParameters.note_offset2 = 12;
 8002ca2:	4b43      	ldr	r3, [pc, #268]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002ca4:	220c      	movs	r2, #12
 8002ca6:	72da      	strb	r2, [r3, #11]
	SynthParameters.detune_osc1 = 100;
 8002ca8:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002caa:	2264      	movs	r2, #100	@ 0x64
 8002cac:	731a      	strb	r2, [r3, #12]
	SynthParameters.detune_osc2 = 100;
 8002cae:	4b40      	ldr	r3, [pc, #256]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cb0:	2264      	movs	r2, #100	@ 0x64
 8002cb2:	735a      	strb	r2, [r3, #13]
	SynthParameters.fm_intensity1 = 127;
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cb6:	227f      	movs	r2, #127	@ 0x7f
 8002cb8:	739a      	strb	r2, [r3, #14]
	SynthParameters.fm_intensity2 = 127;
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cbc:	227f      	movs	r2, #127	@ 0x7f
 8002cbe:	73da      	strb	r2, [r3, #15]
	SynthParameters.fm_harmonic1 = 127;
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cc2:	227f      	movs	r2, #127	@ 0x7f
 8002cc4:	741a      	strb	r2, [r3, #16]
	SynthParameters.fm_harmonic2 = 127;
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cc8:	227f      	movs	r2, #127	@ 0x7f
 8002cca:	745a      	strb	r2, [r3, #17]
	SynthParameters.duty_cycle1 = 127;
 8002ccc:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cce:	227f      	movs	r2, #127	@ 0x7f
 8002cd0:	749a      	strb	r2, [r3, #18]
	SynthParameters.duty_cycle2 = 127;
 8002cd2:	4b37      	ldr	r3, [pc, #220]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cd4:	227f      	movs	r2, #127	@ 0x7f
 8002cd6:	74da      	strb	r2, [r3, #19]
	SynthParameters.volume_osc1 = 100;
 8002cd8:	4b35      	ldr	r3, [pc, #212]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cda:	2264      	movs	r2, #100	@ 0x64
 8002cdc:	751a      	strb	r2, [r3, #20]
	SynthParameters.volume_osc2 = 100;
 8002cde:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002ce0:	2264      	movs	r2, #100	@ 0x64
 8002ce2:	755a      	strb	r2, [r3, #21]

	// mixer output level settings
	SynthParameters.dac_mixer_level = 127;
 8002ce4:	4b32      	ldr	r3, [pc, #200]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002ce6:	227f      	movs	r2, #127	@ 0x7f
 8002ce8:	759a      	strb	r2, [r3, #22]
	SynthParameters.filter_out_level = 127;
 8002cea:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cec:	227f      	movs	r2, #127	@ 0x7f
 8002cee:	75da      	strb	r2, [r3, #23]

	// filter modulation source settings
	SynthParameters.vcf_cv_en = 0;
 8002cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	761a      	strb	r2, [r3, #24]
	SynthParameters.vcf_cv_sel = 0;
 8002cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	765a      	strb	r2, [r3, #25]

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity = 127;
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002cfe:	227f      	movs	r2, #127	@ 0x7f
 8002d00:	769a      	strb	r2, [r3, #26]
	SynthParameters.vcf_cutoff = 127;
 8002d02:	4b2b      	ldr	r3, [pc, #172]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d04:	227f      	movs	r2, #127	@ 0x7f
 8002d06:	76da      	strb	r2, [r3, #27]
	SynthParameters.vcf_resonance = 127;
 8002d08:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d0a:	227f      	movs	r2, #127	@ 0x7f
 8002d0c:	771a      	strb	r2, [r3, #28]

	// LFO output settings
	SynthParameters.lfo_output_en = 0;
 8002d0e:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	775a      	strb	r2, [r3, #29]
	SynthParameters.lfo_output_waveform = 0;
 8002d14:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	779a      	strb	r2, [r3, #30]

	// LFO output frequency setting
	SynthParameters.lfo_frequency = 127;
 8002d1a:	4b25      	ldr	r3, [pc, #148]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d1c:	227f      	movs	r2, #127	@ 0x7f
 8002d1e:	77da      	strb	r2, [r3, #31]

	// VCA modulation source settings
	SynthParameters.vca_cv_en = 0;
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]
	SynthParameters.vca_cv_sel = 0;
 8002d28:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en = 1;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	SynthParameters.vca_output_sel = 1;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity = 127;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d42:	227f      	movs	r2, #127	@ 0x7f
 8002d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	SynthParameters.vca_offset = 127;
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d4a:	227f      	movs	r2, #127	@ 0x7f
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	// envelope output settings
	SynthParameters.env_en = 1;
 8002d50:	4b17      	ldr	r3, [pc, #92]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	SynthParameters.env_loop = 0;
 8002d58:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	SynthParameters.env_invert = 0;
 8002d60:	4b13      	ldr	r3, [pc, #76]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	// envelope timing settings
	SynthParameters.env_attack_rate = 127;
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d6a:	227f      	movs	r2, #127	@ 0x7f
 8002d6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	SynthParameters.env_release_rate = 127;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d72:	227f      	movs	r2, #127	@ 0x7f
 8002d74:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	SynthParameters.env_decay_rate = 127;
 8002d78:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <Synth_Initialize_Preset+0x154>)
 8002d7a:	227f      	movs	r2, #127	@ 0x7f
 8002d7c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	Mixer_Digital_Pot_Control();
 8002d80:	f000 f818 	bl	8002db4 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8002d84:	f000 f8a4 	bl	8002ed0 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8002d88:	f000 f8d2 	bl	8002f30 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8002d8c:	f000 f8ec 	bl	8002f68 <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8002d90:	f000 f91a 	bl	8002fc8 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8002d94:	f000 f822 	bl	8002ddc <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8002d98:	f000 f852 	bl	8002e40 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8002d9c:	f000 f882 	bl	8002ea4 <VCA_Digital_Pot_Control>

	Envelope_Mode_Control();
 8002da0:	f000 f920 	bl	8002fe4 <Envelope_Mode_Control>
	Envelope_Digital_Pot_Control();
 8002da4:	f000 f966 	bl	8003074 <Envelope_Digital_Pot_Control>

	return 0;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000344 	.word	0x20000344

08002db4 <Mixer_Digital_Pot_Control>:
//	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, gate_state);
//
//	return;
//}

void Mixer_Digital_Pot_Control(){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8002db8:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <Mixer_Digital_Pot_Control+0x24>)
 8002dba:	7d9b      	ldrb	r3, [r3, #22]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7ff fe71 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8002dc6:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <Mixer_Digital_Pot_Control+0x24>)
 8002dc8:	7ddb      	ldrb	r3, [r3, #23]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7ff fe6a 	bl	8002aa8 <Digital_Pot_Wiper_Set>

    return;
 8002dd4:	bf00      	nop
}
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000344 	.word	0x20000344

08002ddc <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, sys.gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8002de0:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <VCA_Mod_Source_Control+0x5c>)
 8002de2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002de6:	4619      	mov	r1, r3
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <VCA_Mod_Source_Control+0x60>)
 8002dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2207      	movs	r2, #7
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f000 fdd2 	bl	80039a4 <GPIO_State_Change>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <VCA_Mod_Source_Control+0x5c>)
 8002e06:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select modulation source
    sys.gpio_reg = GPIO_State_Change(VCA_SEL_PORT, sys.gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <VCA_Mod_Source_Control+0x5c>)
 8002e0c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e10:	4619      	mov	r1, r3
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <VCA_Mod_Source_Control+0x60>)
 8002e14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2200      	movs	r2, #0
 8002e24:	2001      	movs	r0, #1
 8002e26:	f000 fdbd 	bl	80039a4 <GPIO_State_Change>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b02      	ldr	r3, [pc, #8]	@ (8002e38 <VCA_Mod_Source_Control+0x5c>)
 8002e30:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002e34:	bf00      	nop
}
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000370 	.word	0x20000370
 8002e3c:	20000344 	.word	0x20000344

08002e40 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, sys.gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <VCA_Bypass_Switch_Control+0x5c>)
 8002e46:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <VCA_Bypass_Switch_Control+0x60>)
 8002e4e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf0c      	ite	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	2300      	movne	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2206      	movs	r2, #6
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f000 fda0 	bl	80039a4 <GPIO_State_Change>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <VCA_Bypass_Switch_Control+0x5c>)
 8002e6a:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // update output source selection; true = bypass VCA, false = output through VCA
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_PORT, sys.gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <VCA_Bypass_Switch_Control+0x5c>)
 8002e70:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e74:	4619      	mov	r1, r3
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <VCA_Bypass_Switch_Control+0x60>)
 8002e78:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2205      	movs	r2, #5
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f000 fd8b 	bl	80039a4 <GPIO_State_Change>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <VCA_Bypass_Switch_Control+0x5c>)
 8002e94:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002e98:	bf00      	nop
}
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000370 	.word	0x20000370
 8002ea0:	20000344 	.word	0x20000344

08002ea4 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8002ea8:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <VCA_Digital_Pot_Control+0x28>)
 8002eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	2006      	movs	r0, #6
 8002eb4:	f7ff fdf8 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <VCA_Digital_Pot_Control+0x28>)
 8002eba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	2007      	movs	r0, #7
 8002ec4:	f7ff fdf0 	bl	8002aa8 <Digital_Pot_Wiper_Set>

    return;
 8002ec8:	bf00      	nop
}
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000344 	.word	0x20000344

08002ed0 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, sys.gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <Filter_Mod_Source_Control+0x58>)
 8002ed6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002eda:	4619      	mov	r1, r3
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <Filter_Mod_Source_Control+0x5c>)
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2202      	movs	r2, #2
 8002eec:	2001      	movs	r0, #1
 8002eee:	f000 fd59 	bl	80039a4 <GPIO_State_Change>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <Filter_Mod_Source_Control+0x58>)
 8002ef8:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select modulation source; true = LFO, false = envelope
    sys.gpio_reg = GPIO_State_Change(VCF_SEL_PORT, sys.gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <Filter_Mod_Source_Control+0x58>)
 8002efe:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <Filter_Mod_Source_Control+0x5c>)
 8002f06:	7e5b      	ldrb	r3, [r3, #25]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	2001      	movs	r0, #1
 8002f16:	f000 fd45 	bl	80039a4 <GPIO_State_Change>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b02      	ldr	r3, [pc, #8]	@ (8002f28 <Filter_Mod_Source_Control+0x58>)
 8002f20:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002f24:	bf00      	nop
}
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000370 	.word	0x20000370
 8002f2c:	20000344 	.word	0x20000344

08002f30 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <Filter_Digital_Pot_Control+0x34>)
 8002f36:	7e9b      	ldrb	r3, [r3, #26]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2004      	movs	r0, #4
 8002f3e:	f7ff fdb3 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <Filter_Digital_Pot_Control+0x34>)
 8002f44:	7edb      	ldrb	r3, [r3, #27]
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f7ff fdac 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <Filter_Digital_Pot_Control+0x34>)
 8002f52:	7f1b      	ldrb	r3, [r3, #28]
 8002f54:	2200      	movs	r2, #0
 8002f56:	4619      	mov	r1, r3
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f7ff fda5 	bl	8002aa8 <Digital_Pot_Wiper_Set>

    return;
 8002f5e:	bf00      	nop
}
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000344 	.word	0x20000344

08002f68 <LFO_Output_Control>:

void LFO_Output_Control() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(LFO_EN_PORT, sys.gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <LFO_Output_Control+0x58>)
 8002f6e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <LFO_Output_Control+0x5c>)
 8002f76:	7f5b      	ldrb	r3, [r3, #29]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2207      	movs	r2, #7
 8002f84:	2001      	movs	r0, #1
 8002f86:	f000 fd0d 	bl	80039a4 <GPIO_State_Change>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <LFO_Output_Control+0x58>)
 8002f90:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select LFO output waveform; true = square wave, false = triangle wave
    sys.gpio_reg = GPIO_State_Change(LFO_SEL_PORT, sys.gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <LFO_Output_Control+0x58>)
 8002f96:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <LFO_Output_Control+0x5c>)
 8002f9e:	7f9b      	ldrb	r3, [r3, #30]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2206      	movs	r2, #6
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 fcf9 	bl	80039a4 <GPIO_State_Change>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	4b02      	ldr	r3, [pc, #8]	@ (8002fc0 <LFO_Output_Control+0x58>)
 8002fb8:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002fbc:	bf00      	nop
}
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000370 	.word	0x20000370
 8002fc4:	20000344 	.word	0x20000344

08002fc8 <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <LFO_Digital_Pot_Control+0x18>)
 8002fce:	7fdb      	ldrb	r3, [r3, #31]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	2005      	movs	r0, #5
 8002fd6:	f7ff fd67 	bl	8002aa8 <Digital_Pot_Wiper_Set>

    return;
 8002fda:	bf00      	nop
}
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000344 	.word	0x20000344

08002fe4 <Envelope_Mode_Control>:

void Envelope_Mode_Control() {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(ENV_EN_PORT, sys.gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8002fe8:	4b20      	ldr	r3, [pc, #128]	@ (800306c <Envelope_Mode_Control+0x88>)
 8002fea:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <Envelope_Mode_Control+0x8c>)
 8002ff2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2205      	movs	r2, #5
 8003002:	2001      	movs	r0, #1
 8003004:	f000 fcce 	bl	80039a4 <GPIO_State_Change>
 8003008:	4603      	mov	r3, r0
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <Envelope_Mode_Control+0x88>)
 800300e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    sys.gpio_reg = GPIO_State_Change(ENV_LP_PORT, sys.gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8003012:	4b16      	ldr	r3, [pc, #88]	@ (800306c <Envelope_Mode_Control+0x88>)
 8003014:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003018:	4619      	mov	r1, r3
 800301a:	4b15      	ldr	r3, [pc, #84]	@ (8003070 <Envelope_Mode_Control+0x8c>)
 800301c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2204      	movs	r2, #4
 800302c:	2001      	movs	r0, #1
 800302e:	f000 fcb9 	bl	80039a4 <GPIO_State_Change>
 8003032:	4603      	mov	r3, r0
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <Envelope_Mode_Control+0x88>)
 8003038:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    sys.gpio_reg = GPIO_State_Change(ENV_POL_PORT, sys.gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <Envelope_Mode_Control+0x88>)
 800303e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003042:	4619      	mov	r1, r3
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <Envelope_Mode_Control+0x8c>)
 8003046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2203      	movs	r2, #3
 8003056:	2001      	movs	r0, #1
 8003058:	f000 fca4 	bl	80039a4 <GPIO_State_Change>
 800305c:	4603      	mov	r3, r0
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b02      	ldr	r3, [pc, #8]	@ (800306c <Envelope_Mode_Control+0x88>)
 8003062:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8003066:	bf00      	nop
}
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000370 	.word	0x20000370
 8003070:	20000344 	.word	0x20000344

08003074 <Envelope_Digital_Pot_Control>:

void Envelope_Digital_Pot_Control(){
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <Envelope_Digital_Pot_Control+0x38>)
 800307a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	2008      	movs	r0, #8
 8003084:	f7ff fd10 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <Envelope_Digital_Pot_Control+0x38>)
 800308a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800308e:	2200      	movs	r2, #0
 8003090:	4619      	mov	r1, r3
 8003092:	2009      	movs	r0, #9
 8003094:	f7ff fd08 	bl	8002aa8 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <Envelope_Digital_Pot_Control+0x38>)
 800309a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800309e:	2200      	movs	r2, #0
 80030a0:	4619      	mov	r1, r3
 80030a2:	200a      	movs	r0, #10
 80030a4:	f7ff fd00 	bl	8002aa8 <Digital_Pot_Wiper_Set>

    return;
 80030a8:	bf00      	nop
}
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000344 	.word	0x20000344

080030b0 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 80030b4:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 80030ba:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 0;
 80030c0:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 80030c6:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 80030cc:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 80030d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	619a      	str	r2, [r3, #24]
	sys.write_protect = 0;
 80030de:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	61da      	str	r2, [r3, #28]
	sys.checksum = 0;
 80030e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 80030ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	sys.midi_buf[3] = 0;
 80030f2:	4b28      	ldr	r3, [pc, #160]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	sys.temp_buf[3] = 0;
 80030fa:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <System_Reset_Initialize+0xe4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	sys.temp_buf_index = 0;
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <System_Reset_Initialize+0xe4>)
 8003104:	2200      	movs	r2, #0
 8003106:	66da      	str	r2, [r3, #108]	@ 0x6c

	// communication status flags
	sys.usb_data_present = 0;
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <System_Reset_Initialize+0xe4>)
 800310a:	2200      	movs	r2, #0
 800310c:	671a      	str	r2, [r3, #112]	@ 0x70
	sys.midi_data_present = 0;
 800310e:	4b21      	ldr	r3, [pc, #132]	@ (8003194 <System_Reset_Initialize+0xe4>)
 8003110:	2200      	movs	r2, #0
 8003112:	675a      	str	r2, [r3, #116]	@ 0x74

	// midi variables
	sys.note_status_bit = 0;
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <System_Reset_Initialize+0xe4>)
 8003116:	2200      	movs	r2, #0
 8003118:	679a      	str	r2, [r3, #120]	@ 0x78
	sys.midi_note_input = 0;
 800311a:	4b1e      	ldr	r3, [pc, #120]	@ (8003194 <System_Reset_Initialize+0xe4>)
 800311c:	2200      	movs	r2, #0
 800311e:	67da      	str	r2, [r3, #124]	@ 0x7c
	sys.midi_note_velocity = 0;
 8003120:	4b1c      	ldr	r3, [pc, #112]	@ (8003194 <System_Reset_Initialize+0xe4>)
 8003122:	2200      	movs	r2, #0
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	sys.gate = 0;
 8003128:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <System_Reset_Initialize+0xe4>)
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	sys.velocity_enable = 0;
 8003130:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <System_Reset_Initialize+0xe4>)
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	sys.gpio_reg = 0;
 8003138:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <System_Reset_Initialize+0xe4>)
 800313a:	2200      	movs	r2, #0
 800313c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800314a:	f001 fa2f 	bl	80045ac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 800314e:	2201      	movs	r2, #1
 8003150:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003154:	4810      	ldr	r0, [pc, #64]	@ (8003198 <System_Reset_Initialize+0xe8>)
 8003156:	f001 fa29 	bl	80045ac <HAL_GPIO_WritePin>

	DAC_Register_Init();
 800315a:	f000 fadf 	bl	800371c <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 800315e:	213f      	movs	r1, #63	@ 0x3f
 8003160:	2040      	movs	r0, #64	@ 0x40
 8003162:	f000 fabd 	bl	80036e0 <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 8003166:	213f      	movs	r1, #63	@ 0x3f
 8003168:	2044      	movs	r0, #68	@ 0x44
 800316a:	f000 fab9 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 800316e:	213f      	movs	r1, #63	@ 0x3f
 8003170:	2041      	movs	r0, #65	@ 0x41
 8003172:	f000 fab5 	bl	80036e0 <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 8003176:	213f      	movs	r1, #63	@ 0x3f
 8003178:	2045      	movs	r0, #69	@ 0x45
 800317a:	f000 fab1 	bl	80036e0 <DAC_Register_Write>

	GPIO_Register_Init();
 800317e:	f000 fbfd 	bl	800397c <GPIO_Register_Init>

	Write_Protect_Control();
 8003182:	f000 f80b 	bl	800319c <Write_Protect_Control>
	MIDI_Port_Control();
 8003186:	f000 f819 	bl	80031bc <MIDI_Port_Control>
	Gate_Control();
 800318a:	f000 f841 	bl	8003210 <Gate_Control>

	return;
 800318e:	bf00      	nop
}
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000370 	.word	0x20000370
 8003198:	48000400 	.word	0x48000400

0800319c <Write_Protect_Control>:

// ===========================================================================================================
// system functions

void Write_Protect_Control(){
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0

	// enable or disable write protection for EEPROM (presets)
	HAL_GPIO_WritePin(WRITE_PROTECT_PORT, WRITE_PROTECT_PIN, sys.write_protect);
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <Write_Protect_Control+0x18>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	2180      	movs	r1, #128	@ 0x80
 80031aa:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <Write_Protect_Control+0x1c>)
 80031ac:	f001 f9fe 	bl	80045ac <HAL_GPIO_WritePin>

	return;
 80031b0:	bf00      	nop
}
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000370 	.word	0x20000370
 80031b8:	48000800 	.word	0x48000800

080031bc <MIDI_Port_Control>:

void MIDI_Port_Control(){
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0

	// enable or disable transmit through MIDI port
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_EN_PORT, sys.gpio_reg, MIDI_TX_EN_PIN, sys.midi_tx_en == 0);
 80031c0:	4b12      	ldr	r3, [pc, #72]	@ (800320c <MIDI_Port_Control+0x50>)
 80031c2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80031c6:	4619      	mov	r1, r3
 80031c8:	4b10      	ldr	r3, [pc, #64]	@ (800320c <MIDI_Port_Control+0x50>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	2000      	movs	r0, #0
 80031da:	f000 fbe3 	bl	80039a4 <GPIO_State_Change>
 80031de:	4603      	mov	r3, r0
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <MIDI_Port_Control+0x50>)
 80031e4:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	// toggle polarity of MIDI UART output
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_POL_PORT, sys.gpio_reg, MIDI_TX_POL_PIN, sys.midi_tx_pol);
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <MIDI_Port_Control+0x50>)
 80031ea:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80031ee:	4619      	mov	r1, r3
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <MIDI_Port_Control+0x50>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	2000      	movs	r0, #0
 80031f8:	f000 fbd4 	bl	80039a4 <GPIO_State_Change>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29a      	uxth	r2, r3
 8003200:	4b02      	ldr	r3, [pc, #8]	@ (800320c <MIDI_Port_Control+0x50>)
 8003202:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	return;
 8003206:	bf00      	nop
}
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000370 	.word	0x20000370

08003210 <Gate_Control>:

void Gate_Control(){
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0

	// gate control for envelope trigger and LED indicator
	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, sys.gate);
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <Gate_Control+0x28>)
 8003216:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800321a:	4619      	mov	r1, r3
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <Gate_Control+0x28>)
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003222:	2203      	movs	r2, #3
 8003224:	2000      	movs	r0, #0
 8003226:	f000 fbbd 	bl	80039a4 <GPIO_State_Change>
 800322a:	4603      	mov	r3, r0
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b02      	ldr	r3, [pc, #8]	@ (8003238 <Gate_Control+0x28>)
 8003230:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	return;
 8003234:	bf00      	nop
}
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000370 	.word	0x20000370

0800323c <Command_Response_Handler>:
	}

	return;
}

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	70fb      	strb	r3, [r7, #3]
 800324e:	460b      	mov	r3, r1
 8003250:	70bb      	strb	r3, [r7, #2]
 8003252:	4613      	mov	r3, r2
 8003254:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 8003256:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <Command_Response_Handler+0x98>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d033      	beq.n	80032c6 <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d109      	bne.n	8003278 <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <Command_Response_Handler+0x9c>)
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4611      	mov	r1, r2
 800326e:	8019      	strh	r1, [r3, #0]
 8003270:	3302      	adds	r3, #2
 8003272:	0c12      	lsrs	r2, r2, #16
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e013      	b.n	80032a0 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 8003278:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <Command_Response_Handler+0x98>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d106      	bne.n	800328e <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 8003284:	78bb      	ldrb	r3, [r7, #2]
 8003286:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	73bb      	strb	r3, [r7, #14]
 800328c:	e008      	b.n	80032a0 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 800328e:	4a13      	ldr	r2, [pc, #76]	@ (80032dc <Command_Response_Handler+0xa0>)
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	4611      	mov	r1, r2
 8003298:	8019      	strh	r1, [r3, #0]
 800329a:	3302      	adds	r3, #2
 800329c:	0c12      	lsrs	r2, r2, #16
 800329e:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00c f88c 	bl	800f3c4 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <Command_Response_Handler+0x98>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10a      	bne.n	80032ca <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 80032b4:	f107 010c 	add.w	r1, r7, #12
 80032b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032bc:	2203      	movs	r2, #3
 80032be:	4808      	ldr	r0, [pc, #32]	@ (80032e0 <Command_Response_Handler+0xa4>)
 80032c0:	f006 fbc4 	bl	8009a4c <HAL_UART_Transmit>
    }

	return;
 80032c4:	e001      	b.n	80032ca <Command_Response_Handler+0x8e>
        return;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <Command_Response_Handler+0x90>
	return;
 80032ca:	bf00      	nop
}
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000370 	.word	0x20000370
 80032d8:	08010664 	.word	0x08010664
 80032dc:	08010668 	.word	0x08010668
 80032e0:	2000044c 	.word	0x2000044c

080032e4 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6139      	str	r1, [r7, #16]
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80032f8:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d83a      	bhi.n	8003376 <Command_Error_Check+0x92>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <Command_Error_Check+0x24>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	08003329 	.word	0x08003329
 8003310:	0800333f 	.word	0x0800333f
 8003314:	08003357 	.word	0x08003357
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	bfcc      	ite	gt
 8003320:	2301      	movgt	r3, #1
 8003322:	2300      	movle	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e027      	b.n	8003378 <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	dd03      	ble.n	8003336 <Command_Error_Check+0x52>
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	dd01      	ble.n	800333a <Command_Error_Check+0x56>
 8003336:	2301      	movs	r3, #1
 8003338:	e01e      	b.n	8003378 <Command_Error_Check+0x94>
 800333a:	2300      	movs	r3, #0
 800333c:	e01c      	b.n	8003378 <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b30      	cmp	r3, #48	@ 0x30
 8003342:	dd04      	ble.n	800334e <Command_Error_Check+0x6a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3330      	adds	r3, #48	@ 0x30
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	429a      	cmp	r2, r3
 800334c:	dd01      	ble.n	8003352 <Command_Error_Check+0x6e>
 800334e:	2301      	movs	r3, #1
 8003350:	e012      	b.n	8003378 <Command_Error_Check+0x94>
 8003352:	2300      	movs	r3, #0
 8003354:	e010      	b.n	8003378 <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 8003356:	ed97 7a02 	vldr	s14, [r7, #8]
 800335a:	edd7 7a01 	vldr	s15, [r7, #4]
 800335e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	bf94      	ite	ls
 8003368:	2301      	movls	r3, #1
 800336a:	2300      	movhi	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f083 0301 	eor.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e000      	b.n	8003378 <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 8003376:	2301      	movs	r3, #1
    }
}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d103      	bne.n	800339a <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <Command_Blink_Status_LED+0x2c>)
 8003394:	2201      	movs	r2, #1
 8003396:	615a      	str	r2, [r3, #20]
 8003398:	e002      	b.n	80033a0 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <Command_Blink_Status_LED+0x2c>)
 800339c:	2201      	movs	r2, #1
 800339e:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 80033a0:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <Command_Blink_Status_LED+0x30>)
 80033a2:	f005 ff6f 	bl	8009284 <HAL_TIM_Base_Start_IT>

}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000370 	.word	0x20000370
 80033b4:	20000400 	.word	0x20000400

080033b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d139      	bne.n	800343c <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d118      	bne.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 80033d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	dc0b      	bgt.n	80033f0 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80033d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033e0:	f001 f8fc 	bl	80045dc <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033ec:	6193      	str	r3, [r2, #24]
 80033ee:	e008      	b.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 80033f0:	4814      	ldr	r0, [pc, #80]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80033f2:	f005 ffb7 	bl	8009364 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d118      	bne.n	800343c <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	dc0b      	bgt.n	800342a <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8003412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800341a:	f001 f8df 	bl	80045dc <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 800341e:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	3301      	adds	r3, #1
 8003424:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003426:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 8003428:	e008      	b.n	800343c <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 800342a:	4806      	ldr	r0, [pc, #24]	@ (8003444 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800342c:	f005 ff9a 	bl	8009364 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000400 	.word	0x20000400
 8003448:	20000370 	.word	0x20000370

0800344c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <SystemInit+0x20>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	4a05      	ldr	r2, [pc, #20]	@ (800346c <SystemInit+0x20>)
 8003458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800345c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <MX_TIM6_Init+0x68>)
 8003482:	4a16      	ldr	r2, [pc, #88]	@ (80034dc <MX_TIM6_Init+0x6c>)
 8003484:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <MX_TIM6_Init+0x68>)
 8003488:	f244 129f 	movw	r2, #16799	@ 0x419f
 800348c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <MX_TIM6_Init+0x68>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 8003494:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <MX_TIM6_Init+0x68>)
 8003496:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800349a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <MX_TIM6_Init+0x68>)
 800349e:	2200      	movs	r2, #0
 80034a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034a2:	480d      	ldr	r0, [pc, #52]	@ (80034d8 <MX_TIM6_Init+0x68>)
 80034a4:	f005 fe96 	bl	80091d4 <HAL_TIM_Base_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80034ae:	f7fd ff9e 	bl	80013ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4806      	ldr	r0, [pc, #24]	@ (80034d8 <MX_TIM6_Init+0x68>)
 80034c0:	f006 f9a0 	bl	8009804 <HAL_TIMEx_MasterConfigSynchronization>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80034ca:	f7fd ff90 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000400 	.word	0x20000400
 80034dc:	40001000 	.word	0x40001000

080034e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003524 <HAL_TIM_Base_MspInit+0x44>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d113      	bne.n	800351a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <HAL_TIM_Base_MspInit+0x48>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_TIM_Base_MspInit+0x48>)
 80034f8:	f043 0310 	orr.w	r3, r3, #16
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <HAL_TIM_Base_MspInit+0x48>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2036      	movs	r0, #54	@ 0x36
 8003510:	f000 fc1b 	bl	8003d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003514:	2036      	movs	r0, #54	@ 0x36
 8003516:	f000 fc32 	bl	8003d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40001000 	.word	0x40001000
 8003528:	40021000 	.word	0x40021000

0800352c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003530:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003532:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <MX_USART2_UART_Init+0x9c>)
 8003534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003536:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800353c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353e:	4b21      	ldr	r3, [pc, #132]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003544:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800354a:	4b1e      	ldr	r3, [pc, #120]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003550:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003552:	220c      	movs	r2, #12
 8003554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003562:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003568:	4b16      	ldr	r3, [pc, #88]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800356e:	4b15      	ldr	r3, [pc, #84]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003570:	2208      	movs	r2, #8
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003574:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003576:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800357c:	4811      	ldr	r0, [pc, #68]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 800357e:	f006 fa15 	bl	80099ac <HAL_UART_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003588:	f7fd ff31 	bl	80013ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358c:	2100      	movs	r1, #0
 800358e:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 8003590:	f008 fa8b 	bl	800baaa <HAL_UARTEx_SetTxFifoThreshold>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800359a:	f7fd ff28 	bl	80013ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800359e:	2100      	movs	r1, #0
 80035a0:	4808      	ldr	r0, [pc, #32]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 80035a2:	f008 fac0 	bl	800bb26 <HAL_UARTEx_SetRxFifoThreshold>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80035ac:	f7fd ff1f 	bl	80013ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035b0:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <MX_USART2_UART_Init+0x98>)
 80035b2:	f008 fa41 	bl	800ba38 <HAL_UARTEx_DisableFifoMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80035bc:	f7fd ff17 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000044c 	.word	0x2000044c
 80035c8:	40004400 	.word	0x40004400

080035cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b09e      	sub	sp, #120	@ 0x78
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	2250      	movs	r2, #80	@ 0x50
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f00c fb7b 	bl	800fce8 <memset>
  if(uartHandle->Instance==USART2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <HAL_UART_MspInit+0xb4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d13d      	bne.n	8003678 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035fc:	2302      	movs	r3, #2
 80035fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4618      	mov	r0, r3
 800360a:	f004 fb0f 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003614:	f7fd feeb 	bl	80013ee <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003618:	4b1a      	ldr	r3, [pc, #104]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361c:	4a19      	ldr	r2, [pc, #100]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003622:	6593      	str	r3, [r2, #88]	@ 0x58
 8003624:	4b17      	ldr	r3, [pc, #92]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003634:	4a13      	ldr	r2, [pc, #76]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363c:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_UART_MspInit+0xb8>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003648:	2318      	movs	r3, #24
 800364a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003654:	2300      	movs	r3, #0
 8003656:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003658:	2307      	movs	r3, #7
 800365a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003660:	4619      	mov	r1, r3
 8003662:	4809      	ldr	r0, [pc, #36]	@ (8003688 <HAL_UART_MspInit+0xbc>)
 8003664:	f000 fe20 	bl	80042a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	2026      	movs	r0, #38	@ 0x26
 800366e:	f000 fb6c 	bl	8003d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003672:	2026      	movs	r0, #38	@ 0x26
 8003674:	f000 fb83 	bl	8003d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3778      	adds	r7, #120	@ 0x78
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40004400 	.word	0x40004400
 8003684:	40021000 	.word	0x40021000
 8003688:	48000400 	.word	0x48000400

0800368c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800368c:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800368e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003690:	f7ff fedc 	bl	800344c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003694:	480c      	ldr	r0, [pc, #48]	@ (80036c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003696:	490d      	ldr	r1, [pc, #52]	@ (80036cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003698:	4a0d      	ldr	r2, [pc, #52]	@ (80036d0 <LoopForever+0xe>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036ac:	4c0a      	ldr	r4, [pc, #40]	@ (80036d8 <LoopForever+0x16>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ba:	f00c fb23 	bl	800fd04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036be:	f7fd fdf5 	bl	80012ac <main>

080036c2 <LoopForever>:

LoopForever:
    b LoopForever
 80036c2:	e7fe      	b.n	80036c2 <LoopForever>
  ldr   r0, =_estack
 80036c4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80036d0:	08010f24 	.word	0x08010f24
  ldr r2, =_sbss
 80036d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80036d8:	20001fec 	.word	0x20001fec

080036dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036dc:	e7fe      	b.n	80036dc <ADC1_2_IRQHandler>
	...

080036e0 <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	4603      	mov	r3, r0
 80036e8:	460a      	mov	r2, r1
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	230a      	movs	r3, #10
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	2301      	movs	r3, #1
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2301      	movs	r3, #1
 8003708:	218e      	movs	r1, #142	@ 0x8e
 800370a:	4803      	ldr	r0, [pc, #12]	@ (8003718 <DAC_Register_Write+0x38>)
 800370c:	f001 f81c 	bl	8004748 <HAL_I2C_Mem_Write>

	return;
 8003710:	bf00      	nop
}
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200001f0 	.word	0x200001f0

0800371c <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8003720:	2180      	movs	r1, #128	@ 0x80
 8003722:	2055      	movs	r0, #85	@ 0x55
 8003724:	f7ff ffdc 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8003728:	2127      	movs	r1, #39	@ 0x27
 800372a:	2040      	movs	r0, #64	@ 0x40
 800372c:	f7ff ffd8 	bl	80036e0 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8003730:	2127      	movs	r1, #39	@ 0x27
 8003732:	2041      	movs	r0, #65	@ 0x41
 8003734:	f7ff ffd4 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8003738:	2127      	movs	r1, #39	@ 0x27
 800373a:	2044      	movs	r0, #68	@ 0x44
 800373c:	f7ff ffd0 	bl	80036e0 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 8003740:	2127      	movs	r1, #39	@ 0x27
 8003742:	2045      	movs	r0, #69	@ 0x45
 8003744:	f7ff ffcc 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8003748:	2100      	movs	r1, #0
 800374a:	2046      	movs	r0, #70	@ 0x46
 800374c:	f7ff ffc8 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 8003750:	21e0      	movs	r1, #224	@ 0xe0
 8003752:	2049      	movs	r0, #73	@ 0x49
 8003754:	f7ff ffc4 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8003758:	2101      	movs	r1, #1
 800375a:	2056      	movs	r0, #86	@ 0x56
 800375c:	f7ff ffc0 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 8003760:	2103      	movs	r1, #3
 8003762:	204b      	movs	r0, #75	@ 0x4b
 8003764:	f7ff ffbc 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 8003768:	2111      	movs	r1, #17
 800376a:	2058      	movs	r0, #88	@ 0x58
 800376c:	f7ff ffb8 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 8003770:	21ec      	movs	r1, #236	@ 0xec
 8003772:	2049      	movs	r0, #73	@ 0x49
 8003774:	f7ff ffb4 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 8003778:	2101      	movs	r1, #1
 800377a:	204a      	movs	r0, #74	@ 0x4a
 800377c:	f7ff ffb0 	bl	80036e0 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 8003780:	2130      	movs	r1, #48	@ 0x30
 8003782:	2059      	movs	r0, #89	@ 0x59
 8003784:	f7ff ffac 	bl	80036e0 <DAC_Register_Write>

	return;
 8003788:	bf00      	nop
}
 800378a:	bd80      	pop	{r7, pc}

0800378c <Preset_Write>:
#include "eeprom.h"
#include "system.h"
#include "synth.h"

// write preset to EEPROM and check result
int Preset_Write(int preset_slot){
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378e:	b093      	sub	sp, #76	@ 0x4c
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

	int error_check = 1;
 8003794:	2301      	movs	r3, #1
 8003796:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t page_buf[8];
	uint8_t preset_buf[48];

	// copy synth parameters into buffer
    memcpy(preset_buf, &SynthParameters, sizeof(Synth));
 8003798:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <Preset_Write+0xd8>)
 800379a:	461c      	mov	r4, r3
 800379c:	f107 0608 	add.w	r6, r7, #8
 80037a0:	f104 0c20 	add.w	ip, r4, #32
 80037a4:	4635      	mov	r5, r6
 80037a6:	4623      	mov	r3, r4
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b2:	3410      	adds	r4, #16
 80037b4:	3610      	adds	r6, #16
 80037b6:	4564      	cmp	r4, ip
 80037b8:	d1f4      	bne.n	80037a4 <Preset_Write+0x18>
 80037ba:	4633      	mov	r3, r6
 80037bc:	4622      	mov	r2, r4
 80037be:	6810      	ldr	r0, [r2, #0]
 80037c0:	6851      	ldr	r1, [r2, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	c307      	stmia	r3!, {r0, r1, r2}

    // copy remaining system settings
    preset_buf[44] = sys.serial_cmd_echo;
 80037c6:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <Preset_Write+0xdc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    preset_buf[45] = sys.midi_tx_pol;
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <Preset_Write+0xdc>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    preset_buf[46] = sys.midi_tx_en;
 80037da:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <Preset_Write+0xdc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    sys.checksum = XOR_Checksum(preset_buf, 48);
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	2130      	movs	r1, #48	@ 0x30
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f83e 	bl	800386c <XOR_Checksum>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <Preset_Write+0xdc>)
 80037f6:	621a      	str	r2, [r3, #32]
    preset_buf[47] = sys.checksum;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <Preset_Write+0xdc>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for(int page = 0; page < 6; page++){
 8003802:	2300      	movs	r3, #0
 8003804:	643b      	str	r3, [r7, #64]	@ 0x40
 8003806:	e01b      	b.n	8003840 <Preset_Write+0xb4>

		memcpy(page_buf, &preset_buf[8 * page], 8); // copy one page of data from buffer
 8003808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	f107 0208 	add.w	r2, r7, #8
 8003810:	441a      	add	r2, r3
 8003812:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003816:	6810      	ldr	r0, [r2, #0]
 8003818:	6851      	ldr	r1, [r2, #4]
 800381a:	c303      	stmia	r3!, {r0, r1}
		error_check = EEPROM_Write_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf);
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	1c9a      	adds	r2, r3, #2
 8003828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800382a:	4413      	add	r3, r2
 800382c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f85c 	bl	80038f0 <EEPROM_Write_Page>
 8003838:	6478      	str	r0, [r7, #68]	@ 0x44
	for(int page = 0; page < 6; page++){
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	3301      	adds	r3, #1
 800383e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003842:	2b05      	cmp	r3, #5
 8003844:	dde0      	ble.n	8003808 <Preset_Write+0x7c>

	}

	//int check = Readback_Checksum(preset_slot);

	if(sys.checksum == Readback_Checksum(preset_slot)){
 8003846:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <Preset_Write+0xdc>)
 8003848:	6a1c      	ldr	r4, [r3, #32]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f82e 	bl	80038ac <Readback_Checksum>
 8003850:	4603      	mov	r3, r0
 8003852:	429c      	cmp	r4, r3
 8003854:	d101      	bne.n	800385a <Preset_Write+0xce>
		error_check = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	647b      	str	r3, [r7, #68]	@ 0x44
	}

    return error_check;
 800385a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800385c:	4618      	mov	r0, r3
 800385e:	374c      	adds	r7, #76	@ 0x4c
 8003860:	46bd      	mov	sp, r7
 8003862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003864:	20000344 	.word	0x20000344
 8003868:	20000370 	.word	0x20000370

0800386c <XOR_Checksum>:

// calculate an XOR checksum for an array of data
uint8_t XOR_Checksum(uint8_t *data, int length) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]

    uint8_t checksum = 0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < length; i++) {
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	e009      	b.n	8003894 <XOR_Checksum+0x28>
        checksum ^= data[i]; // XOR each byte
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	4053      	eors	r3, r2
 800388c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	dbf1      	blt.n	8003880 <XOR_Checksum+0x14>
    }

    return checksum;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <Readback_Checksum>:

// read and return checksum value for data
uint8_t Readback_Checksum(int preset_slot){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af04      	add	r7, sp, #16
 80038b2:	6078      	str	r0, [r7, #4]

	uint8_t i2c_buf[1];
	uint8_t checksum_address = (0x3F + (0x30 * preset_slot));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	0052      	lsls	r2, r2, #1
 80038bc:	4413      	add	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	333f      	adds	r3, #63	@ 0x3f
 80038c4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, checksum_address, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	230a      	movs	r3, #10
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	2301      	movs	r3, #1
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	f107 030c 	add.w	r3, r7, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	21a0      	movs	r1, #160	@ 0xa0
 80038dc:	4803      	ldr	r0, [pc, #12]	@ (80038ec <Readback_Checksum+0x40>)
 80038de:	f001 f847 	bl	8004970 <HAL_I2C_Mem_Read>

    return i2c_buf[0];
 80038e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	200001f0 	.word	0x200001f0

080038f0 <EEPROM_Write_Page>:

// write a single page to the EEPROM
int EEPROM_Write_Page(int page_number, uint8_t *data){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af04      	add	r7, sp, #16
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]

	// calculate page start address
    uint8_t start_address = page_number * PAGE_SIZE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	73fb      	strb	r3, [r7, #15]

    // write page data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, start_address, I2C_MEMADD_SIZE_8BIT, data, PAGE_SIZE, 10);
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	b29a      	uxth	r2, r3
 8003906:	230a      	movs	r3, #10
 8003908:	9302      	str	r3, [sp, #8]
 800390a:	2308      	movs	r3, #8
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2301      	movs	r3, #1
 8003914:	21a0      	movs	r1, #160	@ 0xa0
 8003916:	4809      	ldr	r0, [pc, #36]	@ (800393c <EEPROM_Write_Page+0x4c>)
 8003918:	f000 ff16 	bl	8004748 <HAL_I2C_Mem_Write>
 800391c:	4603      	mov	r3, r0
 800391e:	73bb      	strb	r3, [r7, #14]

    // wait for EEPROM write cycle to complete (typically 5ms)
    HAL_Delay(5);
 8003920:	2005      	movs	r0, #5
 8003922:	f000 f915 	bl	8003b50 <HAL_Delay>

    return (result == HAL_OK);
 8003926:	7bbb      	ldrb	r3, [r7, #14]
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200001f0 	.word	0x200001f0

08003940 <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af04      	add	r7, sp, #16
 8003946:	4603      	mov	r3, r0
 8003948:	460a      	mov	r2, r1
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003950:	79bb      	ldrb	r3, [r7, #6]
 8003952:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	b29a      	uxth	r2, r3
 8003958:	230a      	movs	r3, #10
 800395a:	9302      	str	r3, [sp, #8]
 800395c:	2301      	movs	r3, #1
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2301      	movs	r3, #1
 8003968:	21ee      	movs	r1, #238	@ 0xee
 800396a:	4803      	ldr	r0, [pc, #12]	@ (8003978 <GPIO_Register_Write+0x38>)
 800396c:	f000 feec 	bl	8004748 <HAL_I2C_Mem_Write>

	return;
 8003970:	bf00      	nop
}
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200001f0 	.word	0x200001f0

0800397c <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 8003980:	2100      	movs	r1, #0
 8003982:	2006      	movs	r0, #6
 8003984:	f7ff ffdc 	bl	8003940 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003988:	2100      	movs	r1, #0
 800398a:	2007      	movs	r0, #7
 800398c:	f7ff ffd8 	bl	8003940 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 8003990:	2100      	movs	r1, #0
 8003992:	2002      	movs	r0, #2
 8003994:	f7ff ffd4 	bl	8003940 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003998:	2100      	movs	r1, #0
 800399a:	2003      	movs	r0, #3
 800399c:	f7ff ffd0 	bl	8003940 <GPIO_Register_Write>

	return;
 80039a0:	bf00      	nop
}
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	460b      	mov	r3, r1
 80039b2:	817b      	strh	r3, [r7, #10]
 80039b4:	4613      	mov	r3, r2
 80039b6:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b07      	cmp	r3, #7
 80039bc:	dd02      	ble.n	80039c4 <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 80039be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c2:	e051      	b.n	8003a68 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 80039ca:	7a7b      	ldrb	r3, [r7, #9]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 80039d0:	2201      	movs	r2, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	b21a      	sxth	r2, r3
 80039da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039de:	4313      	orrs	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	e00b      	b.n	80039fe <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 80039e6:	2201      	movs	r2, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	b21b      	sxth	r3, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	b21a      	sxth	r2, r3
 80039f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 8003a02:	7dbb      	ldrb	r3, [r7, #22]
 8003a04:	4619      	mov	r1, r3
 8003a06:	2002      	movs	r0, #2
 8003a08:	f7ff ff9a 	bl	8003940 <GPIO_Register_Write>
 8003a0c:	e02b      	b.n	8003a66 <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d125      	bne.n	8003a60 <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 8003a14:	7a7b      	ldrb	r3, [r7, #9]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	b21a      	sxth	r2, r3
 8003a26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	817b      	strh	r3, [r7, #10]
 8003a30:	e00c      	b.n	8003a4c <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3308      	adds	r3, #8
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	b21b      	sxth	r3, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b21b      	sxth	r3, r3
 8003a4a:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	4619      	mov	r1, r3
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f7ff ff71 	bl	8003940 <GPIO_Register_Write>
 8003a5e:	e002      	b.n	8003a66 <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 8003a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a64:	e000      	b.n	8003a68 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 8003a66:	897b      	ldrh	r3, [r7, #10]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7a:	2003      	movs	r0, #3
 8003a7c:	f000 f95a 	bl	8003d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a80:	200f      	movs	r0, #15
 8003a82:	f000 f80d 	bl	8003aa0 <HAL_InitTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	71fb      	strb	r3, [r7, #7]
 8003a90:	e001      	b.n	8003a96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a92:	f7fe ff8d 	bl	80029b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a96:	79fb      	ldrb	r3, [r7, #7]

}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <HAL_InitTick+0x68>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_InitTick+0x6c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <HAL_InitTick+0x68>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f966 	bl	8003d9a <HAL_SYSTICK_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10f      	bne.n	8003af4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d809      	bhi.n	8003aee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ada:	2200      	movs	r2, #0
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	f000 f932 	bl	8003d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <HAL_InitTick+0x70>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e007      	b.n	8003afe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e004      	b.n	8003afe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e001      	b.n	8003afe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_IncTick+0x1c>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <HAL_IncTick+0x20>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	4a03      	ldr	r2, [pc, #12]	@ (8003b30 <HAL_IncTick+0x1c>)
 8003b24:	6013      	str	r3, [r2, #0]
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	200004e0 	.word	0x200004e0
 8003b34:	20000008 	.word	0x20000008

08003b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_GetTick+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	200004e0 	.word	0x200004e0

08003b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff ffee 	bl	8003b38 <HAL_GetTick>
 8003b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d004      	beq.n	8003b74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_Delay+0x40>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b74:	bf00      	nop
 8003b76:	f7ff ffdf 	bl	8003b38 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d8f7      	bhi.n	8003b76 <HAL_Delay+0x26>
  {
  }
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000008 	.word	0x20000008

08003b94 <__NVIC_SetPriorityGrouping>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60d3      	str	r3, [r2, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_GetPriorityGrouping>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4907      	ldr	r1, [pc, #28]	@ (8003c30 <__NVIC_EnableIRQ+0x38>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <__NVIC_SetPriority>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	db0a      	blt.n	8003c5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	490c      	ldr	r1, [pc, #48]	@ (8003c80 <__NVIC_SetPriority+0x4c>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	440b      	add	r3, r1
 8003c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c5c:	e00a      	b.n	8003c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	4908      	ldr	r1, [pc, #32]	@ (8003c84 <__NVIC_SetPriority+0x50>)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3b04      	subs	r3, #4
 8003c6c:	0112      	lsls	r2, r2, #4
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	440b      	add	r3, r1
 8003c72:	761a      	strb	r2, [r3, #24]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000e100 	.word	0xe000e100
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <NVIC_EncodePriority>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	bf28      	it	cs
 8003ca6:	2304      	movcs	r3, #4
 8003ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d902      	bls.n	8003cb8 <NVIC_EncodePriority+0x30>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3b03      	subs	r3, #3
 8003cb6:	e000      	b.n	8003cba <NVIC_EncodePriority+0x32>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	401a      	ands	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce0:	4313      	orrs	r3, r2
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	@ 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d00:	d301      	bcc.n	8003d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d02:	2301      	movs	r3, #1
 8003d04:	e00f      	b.n	8003d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d06:	4a0a      	ldr	r2, [pc, #40]	@ (8003d30 <SysTick_Config+0x40>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d0e:	210f      	movs	r1, #15
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f7ff ff8e 	bl	8003c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <SysTick_Config+0x40>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d1e:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <SysTick_Config+0x40>)
 8003d20:	2207      	movs	r2, #7
 8003d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	e000e010 	.word	0xe000e010

08003d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff29 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d58:	f7ff ff40 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff90 	bl	8003c88 <NVIC_EncodePriority>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff5f 	bl	8003c34 <__NVIC_SetPriority>
}
 8003d76:	bf00      	nop
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff33 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffa4 	bl	8003cf0 <SysTick_Config>
 8003da8:	4603      	mov	r3, r0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e08d      	b.n	8003ee2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <HAL_DMA_Init+0x138>)
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d80f      	bhi.n	8003df2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <HAL_DMA_Init+0x13c>)
 8003dda:	4413      	add	r3, r2
 8003ddc:	4a45      	ldr	r2, [pc, #276]	@ (8003ef4 <HAL_DMA_Init+0x140>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a42      	ldr	r2, [pc, #264]	@ (8003ef8 <HAL_DMA_Init+0x144>)
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8003df0:	e00e      	b.n	8003e10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_DMA_Init+0x148>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef4 <HAL_DMA_Init+0x140>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	009a      	lsls	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f00 <HAL_DMA_Init+0x14c>)
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9be 	bl	80041e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e70:	d102      	bne.n	8003e78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_DMA_Init+0x104>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d80c      	bhi.n	8003eb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9de 	bl	8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e008      	b.n	8003eca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40020407 	.word	0x40020407
 8003ef0:	bffdfff8 	.word	0xbffdfff8
 8003ef4:	cccccccd 	.word	0xcccccccd
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	bffdfbf8 	.word	0xbffdfbf8
 8003f00:	40020400 	.word	0x40020400

08003f04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d005      	beq.n	8003f28 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e037      	b.n	8003f98 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 020e 	bic.w	r2, r2, #14
 8003f36:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f46:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f74:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00c      	beq.n	8003f98 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f96:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d00d      	beq.n	8003fea <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e047      	b.n	800407a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 020e 	bic.w	r2, r2, #14
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f003 021f 	and.w	r2, r3, #31
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004036:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004058:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
    }
  }
  return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2204      	movs	r2, #4
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d026      	beq.n	80040fe <HAL_DMA_IRQHandler+0x7a>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d021      	beq.n	80040fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	2104      	movs	r1, #4
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d071      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040fc:	e06c      	b.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2202      	movs	r2, #2
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d029      	beq.n	8004170 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 020a 	bic.w	r2, r2, #10
 8004138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2102      	movs	r1, #2
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800416e:	e033      	b.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2208      	movs	r2, #8
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02a      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 020e 	bic.w	r2, r2, #14
 800419c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f003 021f 	and.w	r2, r3, #31
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
}
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b16      	ldr	r3, [pc, #88]	@ (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d802      	bhi.n	80041fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80041f8:	4b15      	ldr	r3, [pc, #84]	@ (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e001      	b.n	8004202 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004200:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b08      	subs	r3, #8
 800420e:	4a12      	ldr	r2, [pc, #72]	@ (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a0b      	ldr	r2, [pc, #44]	@ (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800422e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40020407 	.word	0x40020407
 8004250:	40020800 	.word	0x40020800
 8004254:	40020820 	.word	0x40020820
 8004258:	cccccccd 	.word	0xcccccccd
 800425c:	40020880 	.word	0x40020880

08004260 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a08      	ldr	r2, [pc, #32]	@ (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004282:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b01      	subs	r3, #1
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	1000823f 	.word	0x1000823f
 80042a4:	40020940 	.word	0x40020940

080042a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042b6:	e15a      	b.n	800456e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	4013      	ands	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 814c 	beq.w	8004568 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d005      	beq.n	80042e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d130      	bne.n	800434a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800431e:	2201      	movs	r2, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0201 	and.w	r2, r3, #1
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d017      	beq.n	8004386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d123      	bne.n	80043da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3208      	adds	r2, #8
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	220f      	movs	r2, #15
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a6 	beq.w	8004568 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441c:	4b5b      	ldr	r3, [pc, #364]	@ (800458c <HAL_GPIO_Init+0x2e4>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	4a5a      	ldr	r2, [pc, #360]	@ (800458c <HAL_GPIO_Init+0x2e4>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6613      	str	r3, [r2, #96]	@ 0x60
 8004428:	4b58      	ldr	r3, [pc, #352]	@ (800458c <HAL_GPIO_Init+0x2e4>)
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004434:	4a56      	ldr	r2, [pc, #344]	@ (8004590 <HAL_GPIO_Init+0x2e8>)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	3302      	adds	r3, #2
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	220f      	movs	r2, #15
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800445e:	d01f      	beq.n	80044a0 <HAL_GPIO_Init+0x1f8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a4c      	ldr	r2, [pc, #304]	@ (8004594 <HAL_GPIO_Init+0x2ec>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d019      	beq.n	800449c <HAL_GPIO_Init+0x1f4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <HAL_GPIO_Init+0x2f0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_GPIO_Init+0x1f0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a4a      	ldr	r2, [pc, #296]	@ (800459c <HAL_GPIO_Init+0x2f4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00d      	beq.n	8004494 <HAL_GPIO_Init+0x1ec>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a49      	ldr	r2, [pc, #292]	@ (80045a0 <HAL_GPIO_Init+0x2f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <HAL_GPIO_Init+0x1e8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a48      	ldr	r2, [pc, #288]	@ (80045a4 <HAL_GPIO_Init+0x2fc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_GPIO_Init+0x1e4>
 8004488:	2305      	movs	r3, #5
 800448a:	e00a      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 800448c:	2306      	movs	r3, #6
 800448e:	e008      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004490:	2304      	movs	r3, #4
 8004492:	e006      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004494:	2303      	movs	r3, #3
 8004496:	e004      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 8004498:	2302      	movs	r3, #2
 800449a:	e002      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_GPIO_Init+0x1fa>
 80044a0:	2300      	movs	r3, #0
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	f002 0203 	and.w	r2, r2, #3
 80044a8:	0092      	lsls	r2, r2, #2
 80044aa:	4093      	lsls	r3, r2
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b2:	4937      	ldr	r1, [pc, #220]	@ (8004590 <HAL_GPIO_Init+0x2e8>)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3302      	adds	r3, #2
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044c0:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044e4:	4a30      	ldr	r2, [pc, #192]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ea:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800450e:	4a26      	ldr	r2, [pc, #152]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004514:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	43db      	mvns	r3, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004538:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004562:	4a11      	ldr	r2, [pc, #68]	@ (80045a8 <HAL_GPIO_Init+0x300>)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3301      	adds	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f ae9d 	bne.w	80042b8 <HAL_GPIO_Init+0x10>
  }
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40021000 	.word	0x40021000
 8004590:	40010000 	.word	0x40010000
 8004594:	48000400 	.word	0x48000400
 8004598:	48000800 	.word	0x48000800
 800459c:	48000c00 	.word	0x48000c00
 80045a0:	48001000 	.word	0x48001000
 80045a4:	48001400 	.word	0x48001400
 80045a8:	40010400 	.word	0x40010400

080045ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
 80045b8:	4613      	mov	r3, r2
 80045ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045bc:	787b      	ldrb	r3, [r7, #1]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045c8:	e002      	b.n	80045d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4013      	ands	r3, r2
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43d9      	mvns	r1, r3
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	400b      	ands	r3, r1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e08d      	b.n	800473e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fd0e 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	@ 0x24
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004660:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004670:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	e006      	b.n	8004698 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004696:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d108      	bne.n	80046b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e007      	b.n	80046c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69d9      	ldr	r1, [r3, #28]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	4608      	mov	r0, r1
 8004752:	4611      	mov	r1, r2
 8004754:	461a      	mov	r2, r3
 8004756:	4603      	mov	r3, r0
 8004758:	817b      	strh	r3, [r7, #10]
 800475a:	460b      	mov	r3, r1
 800475c:	813b      	strh	r3, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b20      	cmp	r3, #32
 800476c:	f040 80f9 	bne.w	8004962 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_I2C_Mem_Write+0x34>
 8004776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004782:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0ed      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_I2C_Mem_Write+0x4e>
 8004792:	2302      	movs	r3, #2
 8004794:	e0e6      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800479e:	f7ff f9cb 	bl	8003b38 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2319      	movs	r3, #25
 80047aa:	2201      	movs	r2, #1
 80047ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fac3 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0d1      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	@ 0x21
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2240      	movs	r2, #64	@ 0x40
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047e8:	88f8      	ldrh	r0, [r7, #6]
 80047ea:	893a      	ldrh	r2, [r7, #8]
 80047ec:	8979      	ldrh	r1, [r7, #10]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	4603      	mov	r3, r0
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f9d3 	bl	8004ba4 <I2C_RequestMemoryWrite>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0a9      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2bff      	cmp	r3, #255	@ 0xff
 8004818:	d90e      	bls.n	8004838 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	22ff      	movs	r2, #255	@ 0xff
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004824:	b2da      	uxtb	r2, r3
 8004826:	8979      	ldrh	r1, [r7, #10]
 8004828:	2300      	movs	r3, #0
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fc47 	bl	80050c4 <I2C_TransferConfig>
 8004836:	e00f      	b.n	8004858 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	b2da      	uxtb	r2, r3
 8004848:	8979      	ldrh	r1, [r7, #10]
 800484a:	2300      	movs	r3, #0
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fc36 	bl	80050c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fac6 	bl	8004dee <I2C_WaitOnTXISFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e07b      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d034      	beq.n	8004910 <HAL_I2C_Mem_Write+0x1c8>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d130      	bne.n	8004910 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	2200      	movs	r2, #0
 80048b6:	2180      	movs	r1, #128	@ 0x80
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fa3f 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e04d      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2bff      	cmp	r3, #255	@ 0xff
 80048d0:	d90e      	bls.n	80048f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	22ff      	movs	r2, #255	@ 0xff
 80048d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	8979      	ldrh	r1, [r7, #10]
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fbeb 	bl	80050c4 <I2C_TransferConfig>
 80048ee:	e00f      	b.n	8004910 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	8979      	ldrh	r1, [r7, #10]
 8004902:	2300      	movs	r3, #0
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fbda 	bl	80050c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d19e      	bne.n	8004858 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 faac 	bl	8004e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e01a      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2220      	movs	r2, #32
 8004934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <HAL_I2C_Mem_Write+0x224>)
 8004942:	400b      	ands	r3, r1
 8004944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	fe00e800 	.word	0xfe00e800

08004970 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	4608      	mov	r0, r1
 800497a:	4611      	mov	r1, r2
 800497c:	461a      	mov	r2, r3
 800497e:	4603      	mov	r3, r0
 8004980:	817b      	strh	r3, [r7, #10]
 8004982:	460b      	mov	r3, r1
 8004984:	813b      	strh	r3, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	f040 80fd 	bne.w	8004b92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_I2C_Mem_Read+0x34>
 800499e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0f1      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2C_Mem_Read+0x4e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0ea      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049c6:	f7ff f8b7 	bl	8003b38 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2319      	movs	r3, #25
 80049d2:	2201      	movs	r2, #1
 80049d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9af 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0d5      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2222      	movs	r2, #34	@ 0x22
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2240      	movs	r2, #64	@ 0x40
 80049f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a10:	88f8      	ldrh	r0, [r7, #6]
 8004a12:	893a      	ldrh	r2, [r7, #8]
 8004a14:	8979      	ldrh	r1, [r7, #10]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	4603      	mov	r3, r0
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f913 	bl	8004c4c <I2C_RequestMemoryRead>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0ad      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2bff      	cmp	r3, #255	@ 0xff
 8004a40:	d90e      	bls.n	8004a60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	22ff      	movs	r2, #255	@ 0xff
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	8979      	ldrh	r1, [r7, #10]
 8004a50:	4b52      	ldr	r3, [pc, #328]	@ (8004b9c <HAL_I2C_Mem_Read+0x22c>)
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fb33 	bl	80050c4 <I2C_TransferConfig>
 8004a5e:	e00f      	b.n	8004a80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	8979      	ldrh	r1, [r7, #10]
 8004a72:	4b4a      	ldr	r3, [pc, #296]	@ (8004b9c <HAL_I2C_Mem_Read+0x22c>)
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fb22 	bl	80050c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	2200      	movs	r2, #0
 8004a88:	2104      	movs	r1, #4
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f956 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e07c      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d034      	beq.n	8004b40 <HAL_I2C_Mem_Read+0x1d0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d130      	bne.n	8004b40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f927 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e04d      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2bff      	cmp	r3, #255	@ 0xff
 8004b00:	d90e      	bls.n	8004b20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	22ff      	movs	r2, #255	@ 0xff
 8004b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fad3 	bl	80050c4 <I2C_TransferConfig>
 8004b1e:	e00f      	b.n	8004b40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	8979      	ldrh	r1, [r7, #10]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fac2 	bl	80050c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d19a      	bne.n	8004a80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f994 	bl	8004e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e01a      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2220      	movs	r2, #32
 8004b64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_I2C_Mem_Read+0x230>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	80002400 	.word	0x80002400
 8004ba0:	fe00e800 	.word	0xfe00e800

08004ba4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	4608      	mov	r0, r1
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	817b      	strh	r3, [r7, #10]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	813b      	strh	r3, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	8979      	ldrh	r1, [r7, #10]
 8004bc4:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <I2C_RequestMemoryWrite+0xa4>)
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fa79 	bl	80050c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f909 	bl	8004dee <I2C_WaitOnTXISFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e02c      	b.n	8004c40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf6:	e015      	b.n	8004c24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8ef 	bl	8004dee <I2C_WaitOnTXISFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e012      	b.n	8004c40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2180      	movs	r1, #128	@ 0x80
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f884 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	80002000 	.word	0x80002000

08004c4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	813b      	strh	r3, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	8979      	ldrh	r1, [r7, #10]
 8004c6c:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <I2C_RequestMemoryRead+0xa4>)
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa26 	bl	80050c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	69b9      	ldr	r1, [r7, #24]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f8b6 	bl	8004dee <I2C_WaitOnTXISFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e02c      	b.n	8004ce6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d105      	bne.n	8004c9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c9c:	e015      	b.n	8004cca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	69b9      	ldr	r1, [r7, #24]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f89c 	bl	8004dee <I2C_WaitOnTXISFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e012      	b.n	8004ce6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc0:	893b      	ldrh	r3, [r7, #8]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2140      	movs	r1, #64	@ 0x40
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f831 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	80002000 	.word	0x80002000

08004cf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d007      	beq.n	8004d30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	619a      	str	r2, [r3, #24]
  }
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	e03b      	b.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f8d6 	bl	8004f04 <I2C_IsErrorOccurred>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e041      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d02d      	beq.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fee5 	bl	8003b38 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d122      	bne.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d113      	bne.n	8004dc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e00f      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	bf0c      	ite	eq
 8004dd6:	2301      	moveq	r3, #1
 8004dd8:	2300      	movne	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d0b4      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dfa:	e033      	b.n	8004e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f87f 	bl	8004f04 <I2C_IsErrorOccurred>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e031      	b.n	8004e74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d025      	beq.n	8004e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fe fe8e 	bl	8003b38 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11a      	bne.n	8004e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d013      	beq.n	8004e64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e007      	b.n	8004e74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d1c4      	bne.n	8004dfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e88:	e02f      	b.n	8004eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f838 	bl	8004f04 <I2C_IsErrorOccurred>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e02d      	b.n	8004efa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fe fe4b 	bl	8003b38 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11a      	bne.n	8004eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d013      	beq.n	8004eea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e007      	b.n	8004efa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d1c8      	bne.n	8004e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	@ 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d068      	beq.n	8005002 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2210      	movs	r2, #16
 8004f36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f38:	e049      	b.n	8004fce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d045      	beq.n	8004fce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fe fdf9 	bl	8003b38 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <I2C_IsErrorOccurred+0x54>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d13a      	bne.n	8004fce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f7a:	d121      	bne.n	8004fc0 <I2C_IsErrorOccurred+0xbc>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f82:	d01d      	beq.n	8004fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d01a      	beq.n	8004fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f9a:	f7fe fdcd 	bl	8003b38 <HAL_GetTick>
 8004f9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa0:	e00e      	b.n	8004fc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fa2:	f7fe fdc9 	bl	8003b38 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b19      	cmp	r3, #25
 8004fae:	d907      	bls.n	8004fc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	f043 0320 	orr.w	r3, r3, #32
 8004fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004fbe:	e006      	b.n	8004fce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d1e9      	bne.n	8004fa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d003      	beq.n	8004fe4 <I2C_IsErrorOccurred+0xe0>
 8004fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0aa      	beq.n	8004f3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	f043 0304 	orr.w	r3, r3, #4
 8004ffa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005046:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005068:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01c      	beq.n	80050b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fe3b 	bl	8004cf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <I2C_IsErrorOccurred+0x1bc>)
 800508a:	400b      	ands	r3, r1
 800508c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80050b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	@ 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	fe00e800 	.word	0xfe00e800

080050c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	4613      	mov	r3, r2
 80050d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050dc:	7a7b      	ldrb	r3, [r7, #9]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	0d5b      	lsrs	r3, r3, #21
 80050fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005102:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <I2C_TransferConfig+0x60>)
 8005104:	430b      	orrs	r3, r1
 8005106:	43db      	mvns	r3, r3
 8005108:	ea02 0103 	and.w	r1, r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	03ff63ff 	.word	0x03ff63ff

08005128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b20      	cmp	r3, #32
 800513c:	d138      	bne.n	80051b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005148:	2302      	movs	r3, #2
 800514a:	e032      	b.n	80051b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2224      	movs	r2, #36	@ 0x24
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800517a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6819      	ldr	r1, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
  }
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d139      	bne.n	8005248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051de:	2302      	movs	r3, #2
 80051e0:	e033      	b.n	800524a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2224      	movs	r2, #36	@ 0x24
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0d0      	b.n	800540c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb ff6c 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800529a:	f023 030f 	bic.w	r3, r3, #15
 800529e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2202      	movs	r2, #2
 80052a6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d061      	beq.n	8005374 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052b8:	2310      	movs	r3, #16
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e001      	b.n	80052c2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052be:	2320      	movs	r3, #32
 80052c0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d802      	bhi.n	80052d0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80052d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80052d4:	f002 fee6 	bl	80080a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80052d8:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e2:	d125      	bne.n	8005330 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	461a      	mov	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	3305      	adds	r3, #5
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e01f      	b.n	800534e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	fbb2 f2f3 	udiv	r2, r2, r3
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	461a      	mov	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	3305      	adds	r3, #5
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e00e      	b.n	800534e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	fbb2 f2f3 	udiv	r2, r2, r3
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	fbb2 f3f3 	udiv	r3, r2, r3
 800534a:	3305      	adds	r3, #5
 800534c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <HAL_I2S_Init+0x1bc>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	08db      	lsrs	r3, r3, #3
 8005358:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e003      	b.n	800537c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005374:	2302      	movs	r3, #2
 8005376:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d902      	bls.n	8005388 <HAL_I2S_Init+0x130>
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2bff      	cmp	r3, #255	@ 0xff
 8005386:	d907      	bls.n	8005398 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	f043 0210 	orr.w	r2, r3, #16
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e039      	b.n	800540c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	ea42 0103 	orr.w	r1, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053b6:	f023 030f 	bic.w	r3, r3, #15
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6851      	ldr	r1, [r2, #4]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6892      	ldr	r2, [r2, #8]
 80053c2:	4311      	orrs	r1, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68d2      	ldr	r2, [r2, #12]
 80053c8:	4311      	orrs	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6992      	ldr	r2, [r2, #24]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053da:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b30      	cmp	r3, #48	@ 0x30
 80053e2:	d003      	beq.n	80053ec <HAL_I2S_Init+0x194>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2bb0      	cmp	r3, #176	@ 0xb0
 80053ea:	d107      	bne.n	80053fc <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	cccccccd 	.word	0xcccccccd

08005418 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_I2S_Transmit+0x1c>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0d8      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	e0d0      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_I2S_Transmit+0x40>
 8005454:	2302      	movs	r3, #2
 8005456:	e0c8      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d002      	beq.n	800548c <HAL_I2S_Transmit+0x74>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b05      	cmp	r3, #5
 800548a:	d10a      	bne.n	80054a2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	845a      	strh	r2, [r3, #34]	@ 0x22
 80054a0:	e005      	b.n	80054ae <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c4:	d007      	beq.n	80054d6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054d4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	2102      	movs	r1, #2
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f888 	bl	80055f2 <I2S_WaitFlagStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d04e      	beq.n	8005586 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e070      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	881a      	ldrh	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	2102      	movs	r1, #2
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f85d 	bl	80055f2 <I2S_WaitFlagStateUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e045      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d10c      	bne.n	8005586 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	f043 0204 	orr.w	r2, r3, #4
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1bb      	bne.n	8005508 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a4:	d118      	bne.n	80055d8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2180      	movs	r1, #128	@ 0x80
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f820 	bl	80055f2 <I2S_WaitFlagStateUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00f      	beq.n	80055d8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	f043 0201 	orr.w	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e008      	b.n	80055ea <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005602:	f7fe fa99 	bl	8003b38 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005608:	e018      	b.n	800563c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d014      	beq.n	800563c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005612:	f7fe fa91 	bl	8003b38 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d902      	bls.n	8005628 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e00f      	b.n	800565c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	d1d7      	bne.n	800560a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e0c0      	b.n	80057f8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f009 ffe2 	bl	800f654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2203      	movs	r2, #3
 8005694:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f006 fae6 	bl	800bc6e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
 80056a6:	e03e      	b.n	8005726 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	3311      	adds	r3, #17
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	3310      	adds	r3, #16
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	3313      	adds	r3, #19
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	440b      	add	r3, r1
 80056f2:	3320      	adds	r3, #32
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	3324      	adds	r3, #36	@ 0x24
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	3301      	adds	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	429a      	cmp	r2, r3
 800572e:	d3bb      	bcc.n	80056a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	e044      	b.n	80057c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800575e:	7bfa      	ldrb	r2, [r7, #15]
 8005760:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	440b      	add	r3, r1
 800579c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057a4:	7bfa      	ldrb	r2, [r7, #15]
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	3301      	adds	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	791b      	ldrb	r3, [r3, #4]
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3b5      	bcc.n	8005736 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80057d6:	f006 fa65 	bl	800bca4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7a9b      	ldrb	r3, [r3, #10]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d102      	bne.n	80057f6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f001 fc0e 	bl	8007012 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_PCD_Start+0x16>
 8005812:	2302      	movs	r3, #2
 8005814:	e012      	b.n	800583c <HAL_PCD_Start+0x3c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f006 fa0c 	bl	800bc40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f007 ffe9 	bl	800d804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f007 ffee 	bl	800d832 <USB_ReadInterrupts>
 8005856:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fb06 	bl	8005e74 <PCD_EP_ISR_Handler>

    return;
 8005868:	e110      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005886:	b292      	uxth	r2, r2
 8005888:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f009 ff72 	bl	800f776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005892:	2100      	movs	r1, #0
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f8fc 	bl	8005a92 <HAL_PCD_SetAddress>

    return;
 800589a:	e0f7      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058b8:	b292      	uxth	r2, r2
 80058ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80058be:	e0e5      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00c      	beq.n	80058e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058dc:	b292      	uxth	r2, r2
 80058de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80058e2:	e0d3      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d034      	beq.n	8005958 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0204 	bic.w	r2, r2, #4
 8005900:	b292      	uxth	r2, r2
 8005902:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0208 	bic.w	r2, r2, #8
 8005918:	b292      	uxth	r2, r2
 800591a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005930:	2100      	movs	r1, #0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00a f912 	bl	800fb5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f009 ff55 	bl	800f7e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005950:	b292      	uxth	r2, r2
 8005952:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005956:	e099      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595e:	2b00      	cmp	r3, #0
 8005960:	d027      	beq.n	80059b2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0208 	orr.w	r2, r2, #8
 8005974:	b292      	uxth	r2, r2
 8005976:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800598c:	b292      	uxth	r2, r2
 800598e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0204 	orr.w	r2, r2, #4
 80059a4:	b292      	uxth	r2, r2
 80059a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f009 ff02 	bl	800f7b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80059b0:	e06c      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d040      	beq.n	8005a3e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059ce:	b292      	uxth	r2, r2
 80059d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d12b      	bne.n	8005a36 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0204 	orr.w	r2, r2, #4
 80059f0:	b292      	uxth	r2, r2
 80059f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0208 	orr.w	r2, r2, #8
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f00a f894 	bl	800fb5c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005a34:	e02a      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f009 febc 	bl	800f7b4 <HAL_PCD_SuspendCallback>
    return;
 8005a3c:	e026      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00f      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005a5a:	b292      	uxth	r2, r2
 8005a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f009 fe7a 	bl	800f75a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a66:	e011      	b.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a84:	b292      	uxth	r2, r2
 8005a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a8a:	bf00      	nop
  }
}
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_PCD_SetAddress+0x1a>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e012      	b.n	8005ad2 <HAL_PCD_SetAddress+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f007 fe8a 	bl	800d7dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4603      	mov	r3, r0
 8005aea:	70fb      	strb	r3, [r7, #3]
 8005aec:	460b      	mov	r3, r1
 8005aee:	803b      	strh	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0e      	bge.n	8005b1e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 0207 	and.w	r2, r3, #7
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	3310      	adds	r3, #16
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	705a      	strb	r2, [r3, #1]
 8005b1c:	e00e      	b.n	8005b3c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	f003 0207 	and.w	r2, r3, #7
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005b48:	883b      	ldrh	r3, [r7, #0]
 8005b4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	78ba      	ldrb	r2, [r7, #2]
 8005b56:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b58:	78bb      	ldrb	r3, [r7, #2]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d102      	bne.n	8005b64 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_PCD_EP_Open+0x98>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e00e      	b.n	8005b90 <HAL_PCD_EP_Open+0xb6>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f006 f8ad 	bl	800bce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da0e      	bge.n	8005bca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 0207 	and.w	r2, r3, #7
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	3310      	adds	r3, #16
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	705a      	strb	r2, [r3, #1]
 8005bc8:	e00e      	b.n	8005be8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	f003 0207 	and.w	r2, r3, #7
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_PCD_EP_Close+0x6a>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e00e      	b.n	8005c20 <HAL_PCD_EP_Close+0x88>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f006 fd4d 	bl	800c6b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c38:	7afb      	ldrb	r3, [r7, #11]
 8005c3a:	f003 0207 	and.w	r2, r3, #7
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2200      	movs	r2, #0
 8005c66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c68:	7afb      	ldrb	r3, [r7, #11]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f006 ff05 	bl	800ca8a <USB_EPStartXfer>

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 0207 	and.w	r2, r3, #7
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	440b      	add	r3, r1
 8005ca8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005cac:	681b      	ldr	r3, [r3, #0]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	f003 0207 	and.w	r2, r3, #7
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	3310      	adds	r3, #16
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2201      	movs	r2, #1
 8005d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f006 feb6 	bl	800ca8a <USB_EPStartXfer>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	7912      	ldrb	r2, [r2, #4]
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e03e      	b.n	8005dc4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da0e      	bge.n	8005d6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	f003 0207 	and.w	r2, r3, #7
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	3310      	adds	r3, #16
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	705a      	strb	r2, [r3, #1]
 8005d6a:	e00c      	b.n	8005d86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_PCD_EP_SetStall+0x7e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e00e      	b.n	8005dc4 <HAL_PCD_EP_SetStall+0x9c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f007 fc17 	bl	800d5e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	7912      	ldrb	r2, [r2, #4]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e040      	b.n	8005e6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da0e      	bge.n	8005e10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 0207 	and.w	r2, r3, #7
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	3310      	adds	r3, #16
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	705a      	strb	r2, [r3, #1]
 8005e0e:	e00e      	b.n	8005e2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	f003 0207 	and.w	r2, r3, #7
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4413      	add	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_PCD_EP_ClrStall+0x82>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e00e      	b.n	8005e6c <HAL_PCD_EP_ClrStall+0xa0>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f007 fc14 	bl	800d68a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b092      	sub	sp, #72	@ 0x48
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e7c:	e333      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e86:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005e88:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005e94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 8108 	bne.w	80060ae <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005e9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d14c      	bne.n	8005f42 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb8:	813b      	strh	r3, [r7, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	893b      	ldrh	r3, [r7, #8]
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3310      	adds	r3, #16
 8005ed0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	4413      	add	r3, r2
 8005eec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	441a      	add	r2, r3
 8005f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005f08:	2100      	movs	r1, #0
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f009 fc0b 	bl	800f726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	7b1b      	ldrb	r3, [r3, #12]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 82e5 	beq.w	80064e6 <PCD_EP_ISR_Handler+0x672>
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 82e0 	bne.w	80064e6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	731a      	strb	r2, [r3, #12]
 8005f40:	e2d1      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005f52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d032      	beq.n	8005fc2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f007 fc9d 	bl	800d8d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005fa8:	4013      	ands	r3, r2
 8005faa:	817b      	strh	r3, [r7, #10]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	897a      	ldrh	r2, [r7, #10]
 8005fb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f009 fb86 	bl	800f6cc <HAL_PCD_SetupStageCallback>
 8005fc0:	e291      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005fc2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f280 828d 	bge.w	80064e6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005fd8:	4013      	ands	r3, r2
 8005fda:	81fb      	strh	r3, [r7, #14]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	89fa      	ldrh	r2, [r7, #14]
 8005fe2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4413      	add	r3, r2
 8006004:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800600e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006010:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d019      	beq.n	800604e <PCD_EP_ISR_Handler+0x1da>
 800601a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d015      	beq.n	800604e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800602c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800602e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006030:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006032:	b29b      	uxth	r3, r3
 8006034:	f007 fc4f 	bl	800d8d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	441a      	add	r2, r3
 8006042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006044:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006046:	2100      	movs	r1, #0
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f009 fb51 	bl	800f6f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006056:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 8242 	bne.w	80064e6 <PCD_EP_ISR_Handler+0x672>
 8006062:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006064:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800606c:	f000 823b 	beq.w	80064e6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006080:	81bb      	strh	r3, [r7, #12]
 8006082:	89bb      	ldrh	r3, [r7, #12]
 8006084:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006088:	81bb      	strh	r3, [r7, #12]
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006090:	81bb      	strh	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	89bb      	ldrh	r3, [r7, #12]
 8006098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800609c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8013      	strh	r3, [r2, #0]
 80060ac:	e21b      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80060c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f280 80f1 	bge.w	80062ac <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80060e0:	4013      	ands	r3, r2
 80060e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80060f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060f8:	b292      	uxth	r2, r2
 80060fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80060fc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006114:	7b1b      	ldrb	r3, [r3, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d123      	bne.n	8006162 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	4413      	add	r3, r2
 8006134:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800613e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006142:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 808b 	beq.w	8006262 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006152:	6959      	ldr	r1, [r3, #20]
 8006154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006156:	88da      	ldrh	r2, [r3, #6]
 8006158:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800615c:	f007 fbbb 	bl	800d8d6 <USB_ReadPMA>
 8006160:	e07f      	b.n	8006262 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d109      	bne.n	800617e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800616a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800616c:	461a      	mov	r2, r3
 800616e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9c6 	bl	8006502 <HAL_PCD_EP_DB_Receive>
 8006176:	4603      	mov	r3, r0
 8006178:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800617c:	e071      	b.n	8006262 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d022      	beq.n	800621e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006200:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02c      	beq.n	8006262 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	6959      	ldr	r1, [r3, #20]
 8006210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006212:	891a      	ldrh	r2, [r3, #8]
 8006214:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006218:	f007 fb5d 	bl	800d8d6 <USB_ReadPMA>
 800621c:	e021      	b.n	8006262 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006226:	b29b      	uxth	r3, r3
 8006228:	461a      	mov	r2, r3
 800622a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	4413      	add	r3, r2
 8006238:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006242:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006246:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	6959      	ldr	r1, [r3, #20]
 8006256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006258:	895a      	ldrh	r2, [r3, #10]
 800625a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800625e:	f007 fb3a 	bl	800d8d6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800626a:	441a      	add	r2, r3
 800626c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006278:	441a      	add	r2, r3
 800627a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800627e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <PCD_EP_ISR_Handler+0x41e>
 8006286:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800628a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d206      	bcs.n	80062a0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f009 fa29 	bl	800f6f0 <HAL_PCD_DataOutStageCallback>
 800629e:	e005      	b.n	80062ac <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062a6:	4618      	mov	r0, r3
 80062a8:	f006 fbef 	bl	800ca8a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80062ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8117 	beq.w	80064e6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80062b8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	3310      	adds	r3, #16
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80062e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006306:	78db      	ldrb	r3, [r3, #3]
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 80a1 	bne.w	8006450 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800630e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006310:	2200      	movs	r2, #0
 8006312:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006316:	7b1b      	ldrb	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8092 	beq.w	8006442 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800631e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d046      	beq.n	80063b6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d126      	bne.n	800637e <PCD_EP_ISR_Handler+0x50a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800633e:	b29b      	uxth	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	00da      	lsls	r2, r3, #3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006362:	b29a      	uxth	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e061      	b.n	8006442 <PCD_EP_ISR_Handler+0x5ce>
 800637e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d15d      	bne.n	8006442 <PCD_EP_ISR_Handler+0x5ce>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006394:	b29b      	uxth	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	00da      	lsls	r2, r3, #3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2200      	movs	r2, #0
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e045      	b.n	8006442 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d126      	bne.n	8006412 <PCD_EP_ISR_Handler+0x59e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	4413      	add	r3, r2
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
 80063dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00da      	lsls	r2, r3, #3
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29a      	uxth	r2, r3
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e017      	b.n	8006442 <PCD_EP_ISR_Handler+0x5ce>
 8006412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d113      	bne.n	8006442 <PCD_EP_ISR_Handler+0x5ce>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006422:	b29b      	uxth	r3, r3
 8006424:	461a      	mov	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	4413      	add	r3, r2
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800642c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	00da      	lsls	r2, r3, #3
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	4413      	add	r3, r2
 8006436:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800643a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	2200      	movs	r2, #0
 8006440:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f009 f96c 	bl	800f726 <HAL_PCD_DataInStageCallback>
 800644e:	e04a      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006450:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d13f      	bne.n	80064da <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4413      	add	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	4413      	add	r3, r2
 8006474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800647e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8006480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006486:	429a      	cmp	r2, r3
 8006488:	d906      	bls.n	8006498 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800648a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006490:	1ad2      	subs	r2, r2, r3
 8006492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006494:	619a      	str	r2, [r3, #24]
 8006496:	e002      	b.n	800649e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649a:	2200      	movs	r2, #0
 800649c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800649e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f009 f93a 	bl	800f726 <HAL_PCD_DataInStageCallback>
 80064b2:	e018      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80064b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80064ba:	441a      	add	r2, r3
 80064bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064be:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80064c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80064c6:	441a      	add	r2, r3
 80064c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d2:	4618      	mov	r0, r3
 80064d4:	f006 fad9 	bl	800ca8a <USB_EPStartXfer>
 80064d8:	e005      	b.n	80064e6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80064da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064dc:	461a      	mov	r2, r3
 80064de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f917 	bl	8006714 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f6ff acc3 	blt.w	8005e7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3748      	adds	r7, #72	@ 0x48
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b088      	sub	sp, #32
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d07c      	beq.n	8006614 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4413      	add	r3, r2
 8006534:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	8b7b      	ldrh	r3, [r7, #26]
 8006546:	429a      	cmp	r2, r3
 8006548:	d306      	bcc.n	8006558 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	8b7b      	ldrh	r3, [r7, #26]
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	619a      	str	r2, [r3, #24]
 8006556:	e002      	b.n	800655e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d123      	bne.n	80065ae <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800657c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006580:	833b      	strh	r3, [r7, #24]
 8006582:	8b3b      	ldrh	r3, [r7, #24]
 8006584:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006588:	833b      	strh	r3, [r7, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	8b3b      	ldrh	r3, [r7, #24]
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01f      	beq.n	80065f8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d2:	82fb      	strh	r3, [r7, #22]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	8afb      	ldrh	r3, [r7, #22]
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80065f8:	8b7b      	ldrh	r3, [r7, #26]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8085 	beq.w	800670a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6959      	ldr	r1, [r3, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	891a      	ldrh	r2, [r3, #8]
 800660c:	8b7b      	ldrh	r3, [r7, #26]
 800660e:	f007 f962 	bl	800d8d6 <USB_ReadPMA>
 8006612:	e07a      	b.n	800670a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661c:	b29b      	uxth	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	4413      	add	r3, r2
 800662e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006638:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	8b7b      	ldrh	r3, [r7, #26]
 8006640:	429a      	cmp	r2, r3
 8006642:	d306      	bcc.n	8006652 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	8b7b      	ldrh	r3, [r7, #26]
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	619a      	str	r2, [r3, #24]
 8006650:	e002      	b.n	8006658 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d123      	bne.n	80066a8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667a:	83fb      	strh	r3, [r7, #30]
 800667c:	8bfb      	ldrh	r3, [r7, #30]
 800667e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006682:	83fb      	strh	r3, [r7, #30]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	8bfb      	ldrh	r3, [r7, #30]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11f      	bne.n	80066f2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066cc:	83bb      	strh	r3, [r7, #28]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	8bbb      	ldrh	r3, [r7, #28]
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80066f2:	8b7b      	ldrh	r3, [r7, #26]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	895a      	ldrh	r2, [r3, #10]
 8006704:	8b7b      	ldrh	r3, [r7, #26]
 8006706:	f007 f8e6 	bl	800d8d6 <USB_ReadPMA>
    }
  }

  return count;
 800670a:	8b7b      	ldrh	r3, [r7, #26]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b0a6      	sub	sp, #152	@ 0x98
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 81f7 	beq.w	8006b1c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006736:	b29b      	uxth	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	4413      	add	r3, r2
 8006748:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006752:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800675e:	429a      	cmp	r2, r3
 8006760:	d907      	bls.n	8006772 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	619a      	str	r2, [r3, #24]
 8006770:	e002      	b.n	8006778 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 80e1 	bne.w	8006944 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d126      	bne.n	80067d8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	4413      	add	r3, r2
 80067a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	00da      	lsls	r2, r3, #3
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067bc:	b29a      	uxth	r2, r3
 80067be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e01a      	b.n	800680e <HAL_PCD_EP_DB_Transmit+0xfa>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d116      	bne.n	800680e <HAL_PCD_EP_DB_Transmit+0xfa>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	4413      	add	r3, r2
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	00da      	lsls	r2, r3, #3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	4413      	add	r3, r2
 8006802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
 8006808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680a:	2200      	movs	r2, #0
 800680c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d126      	bne.n	800686a <HAL_PCD_EP_DB_Transmit+0x156>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	4413      	add	r3, r2
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	00da      	lsls	r2, r3, #3
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	4413      	add	r3, r2
 800683e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800684e:	b29a      	uxth	r2, r3
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006862:	b29a      	uxth	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e017      	b.n	800689a <HAL_PCD_EP_DB_Transmit+0x186>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d113      	bne.n	800689a <HAL_PCD_EP_DB_Transmit+0x186>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	4413      	add	r3, r2
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	00da      	lsls	r2, r3, #3
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	4413      	add	r3, r2
 800688e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	2200      	movs	r2, #0
 8006898:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d123      	bne.n	80068ea <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068bc:	837b      	strh	r3, [r7, #26]
 80068be:	8b7b      	ldrh	r3, [r7, #26]
 80068c0:	f083 0320 	eor.w	r3, r3, #32
 80068c4:	837b      	strh	r3, [r7, #26]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	8b7b      	ldrh	r3, [r7, #26]
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f008 ff18 	bl	800f726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01f      	beq.n	8006940 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	833b      	strh	r3, [r7, #24]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	441a      	add	r2, r3
 800692a:	8b3b      	ldrh	r3, [r7, #24]
 800692c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693c:	b29b      	uxth	r3, r3
 800693e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	e31f      	b.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d021      	beq.n	8006992 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006968:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800697e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800698a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698e:	b29b      	uxth	r3, r3
 8006990:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006998:	2b01      	cmp	r3, #1
 800699a:	f040 82ca 	bne.w	8006f32 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069a6:	441a      	add	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069b4:	441a      	add	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d309      	bcc.n	80069da <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	621a      	str	r2, [r3, #32]
 80069d8:	e015      	b.n	8006a06 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80069e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069e6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80069f0:	e009      	b.n	8006a06 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d15f      	bne.n	8006ace <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a22:	4413      	add	r3, r2
 8006a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00da      	lsls	r2, r3, #3
 8006a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a44:	801a      	strh	r2, [r3, #0]
 8006a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e051      	b.n	8006b06 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a64:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a66:	d816      	bhi.n	8006a96 <HAL_PCD_EP_DB_Transmit+0x382>
 8006a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	e037      	b.n	8006b06 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006a96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <HAL_PCD_EP_DB_Transmit+0x398>
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	029b      	lsls	r3, r3, #10
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4313      	orrs	r3, r2
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e01b      	b.n	8006b06 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d117      	bne.n	8006b06 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aea:	4413      	add	r3, r2
 8006aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	00da      	lsls	r2, r3, #3
 8006af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af6:	4413      	add	r3, r2
 8006af8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006afc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b04:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6959      	ldr	r1, [r3, #20]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	891a      	ldrh	r2, [r3, #8]
 8006b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f006 fe9c 	bl	800d852 <USB_WritePMA>
 8006b1a:	e20a      	b.n	8006f32 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4413      	add	r3, r2
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b40:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d307      	bcc.n	8006b60 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	619a      	str	r2, [r3, #24]
 8006b5e:	e002      	b.n	8006b66 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 80f6 	bne.w	8006d5c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d126      	bne.n	8006bc6 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b8c:	4413      	add	r3, r2
 8006b8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e01a      	b.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d116      	bne.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006be2:	4413      	add	r3, r2
 8006be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00da      	lsls	r2, r3, #3
 8006bec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bee:	4413      	add	r3, r2
 8006bf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d12f      	bne.n	8006c6c <HAL_PCD_EP_DB_Transmit+0x558>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c24:	4413      	add	r3, r2
 8006c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	00da      	lsls	r2, r3, #3
 8006c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e01c      	b.n	8006ca6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d118      	bne.n	8006ca6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c84:	4413      	add	r3, r2
 8006c86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	00da      	lsls	r2, r3, #3
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	78db      	ldrb	r3, [r3, #3]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d127      	bne.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ccc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006cd0:	f083 0320 	eor.w	r3, r3, #32
 8006cd4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f008 fd0e 	bl	800f726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d121      	bne.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e113      	b.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d121      	bne.n	8006daa <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 80be 	bne.w	8006f32 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dbe:	441a      	add	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dcc:	441a      	add	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d309      	bcc.n	8006df2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dea:	1ad2      	subs	r2, r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	621a      	str	r2, [r3, #32]
 8006df0:	e015      	b.n	8006e1e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006dfa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e08:	e009      	b.n	8006e1e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d15f      	bne.n	8006eec <HAL_PCD_EP_DB_Transmit+0x7d8>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e40:	4413      	add	r3, r2
 8006e42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	00da      	lsls	r2, r3, #3
 8006e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_PCD_EP_DB_Transmit+0x76c>
 8006e6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	e04e      	b.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e82:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e84:	d816      	bhi.n	8006eb4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e88:	085b      	lsrs	r3, r3, #1
 8006e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_PCD_EP_DB_Transmit+0x788>
 8006e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e98:	3301      	adds	r3, #1
 8006e9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e034      	b.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006ec4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e018      	b.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d114      	bne.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f02:	4413      	add	r3, r2
 8006f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00da      	lsls	r2, r3, #3
 8006f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f1c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6959      	ldr	r1, [r3, #20]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	895a      	ldrh	r2, [r3, #10]
 8006f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f006 fc90 	bl	800d852 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f4c:	82fb      	strh	r3, [r7, #22]
 8006f4e:	8afb      	ldrh	r3, [r7, #22]
 8006f50:	f083 0310 	eor.w	r3, r3, #16
 8006f54:	82fb      	strh	r3, [r7, #22]
 8006f56:	8afb      	ldrh	r3, [r7, #22]
 8006f58:	f083 0320 	eor.w	r3, r3, #32
 8006f5c:	82fb      	strh	r3, [r7, #22]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	441a      	add	r2, r3
 8006f6c:	8afb      	ldrh	r3, [r7, #22]
 8006f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3798      	adds	r7, #152	@ 0x98
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006faa:	897b      	ldrh	r3, [r7, #10]
 8006fac:	f003 0207 	and.w	r2, r3, #7
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	3310      	adds	r3, #16
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e009      	b.n	8006fd6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fc2:	897a      	ldrh	r2, [r7, #10]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006fd6:	893b      	ldrh	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d107      	bne.n	8006fec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	80da      	strh	r2, [r3, #6]
 8006fea:	e00b      	b.n	8007004 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007036:	b29b      	uxth	r3, r3
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800704a:	b29b      	uxth	r3, r3
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d141      	bne.n	80070fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007076:	4b4b      	ldr	r3, [pc, #300]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007082:	d131      	bne.n	80070e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007084:	4b47      	ldr	r3, [pc, #284]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708a:	4a46      	ldr	r2, [pc, #280]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007094:	4b43      	ldr	r3, [pc, #268]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800709c:	4a41      	ldr	r2, [pc, #260]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800709e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070a4:	4b40      	ldr	r3, [pc, #256]	@ (80071a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2232      	movs	r2, #50	@ 0x32
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	4a3f      	ldr	r2, [pc, #252]	@ (80071ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	0c9b      	lsrs	r3, r3, #18
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ba:	e002      	b.n	80070c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3b01      	subs	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070c2:	4b38      	ldr	r3, [pc, #224]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ce:	d102      	bne.n	80070d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f2      	bne.n	80070bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070d6:	4b33      	ldr	r3, [pc, #204]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e2:	d158      	bne.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e057      	b.n	8007198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070e8:	4b2e      	ldr	r3, [pc, #184]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ee:	4a2d      	ldr	r2, [pc, #180]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80070f8:	e04d      	b.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007100:	d141      	bne.n	8007186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007102:	4b28      	ldr	r3, [pc, #160]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710e:	d131      	bne.n	8007174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007110:	4b24      	ldr	r3, [pc, #144]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007116:	4a23      	ldr	r2, [pc, #140]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800711c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007120:	4b20      	ldr	r3, [pc, #128]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800712e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007130:	4b1d      	ldr	r3, [pc, #116]	@ (80071a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2232      	movs	r2, #50	@ 0x32
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	0c9b      	lsrs	r3, r3, #18
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007146:	e002      	b.n	800714e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800714e:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800715a:	d102      	bne.n	8007162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f2      	bne.n	8007148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007162:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800716a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716e:	d112      	bne.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e011      	b.n	8007198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007174:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800717a:	4a0a      	ldr	r2, [pc, #40]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007184:	e007      	b.n	8007196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007186:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800718e:	4a05      	ldr	r2, [pc, #20]	@ (80071a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40007000 	.word	0x40007000
 80071a8:	20000000 	.word	0x20000000
 80071ac:	431bde83 	.word	0x431bde83

080071b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	4a04      	ldr	r2, [pc, #16]	@ (80071cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071be:	6093      	str	r3, [r2, #8]
}
 80071c0:	bf00      	nop
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40007000 	.word	0x40007000

080071d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e2fe      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d075      	beq.n	80072da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ee:	4b97      	ldr	r3, [pc, #604]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 030c 	and.w	r3, r3, #12
 80071f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f8:	4b94      	ldr	r3, [pc, #592]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d102      	bne.n	800720e <HAL_RCC_OscConfig+0x3e>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d002      	beq.n	8007214 <HAL_RCC_OscConfig+0x44>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10b      	bne.n	800722c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007214:	4b8d      	ldr	r3, [pc, #564]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d05b      	beq.n	80072d8 <HAL_RCC_OscConfig+0x108>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d157      	bne.n	80072d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e2d9      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007234:	d106      	bne.n	8007244 <HAL_RCC_OscConfig+0x74>
 8007236:	4b85      	ldr	r3, [pc, #532]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a84      	ldr	r2, [pc, #528]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e01d      	b.n	8007280 <HAL_RCC_OscConfig+0xb0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800724c:	d10c      	bne.n	8007268 <HAL_RCC_OscConfig+0x98>
 800724e:	4b7f      	ldr	r3, [pc, #508]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a7e      	ldr	r2, [pc, #504]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b7c      	ldr	r3, [pc, #496]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a7b      	ldr	r2, [pc, #492]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00b      	b.n	8007280 <HAL_RCC_OscConfig+0xb0>
 8007268:	4b78      	ldr	r3, [pc, #480]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a77      	ldr	r2, [pc, #476]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800726e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4b75      	ldr	r3, [pc, #468]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a74      	ldr	r2, [pc, #464]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800727a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800727e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d013      	beq.n	80072b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fc fc56 	bl	8003b38 <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007290:	f7fc fc52 	bl	8003b38 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b64      	cmp	r3, #100	@ 0x64
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e29e      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072a2:	4b6a      	ldr	r3, [pc, #424]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f0      	beq.n	8007290 <HAL_RCC_OscConfig+0xc0>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fc fc42 	bl	8003b38 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b8:	f7fc fc3e 	bl	8003b38 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b64      	cmp	r3, #100	@ 0x64
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e28a      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ca:	4b60      	ldr	r3, [pc, #384]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0xe8>
 80072d6:	e000      	b.n	80072da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d075      	beq.n	80073d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e6:	4b59      	ldr	r3, [pc, #356]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 030c 	and.w	r3, r3, #12
 80072ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072f0:	4b56      	ldr	r3, [pc, #344]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b0c      	cmp	r3, #12
 80072fe:	d102      	bne.n	8007306 <HAL_RCC_OscConfig+0x136>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b02      	cmp	r3, #2
 8007304:	d002      	beq.n	800730c <HAL_RCC_OscConfig+0x13c>
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d11f      	bne.n	800734c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800730c:	4b4f      	ldr	r3, [pc, #316]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_RCC_OscConfig+0x154>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e25d      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007324:	4b49      	ldr	r3, [pc, #292]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	061b      	lsls	r3, r3, #24
 8007332:	4946      	ldr	r1, [pc, #280]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007334:	4313      	orrs	r3, r2
 8007336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007338:	4b45      	ldr	r3, [pc, #276]	@ (8007450 <HAL_RCC_OscConfig+0x280>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f7fc fbaf 	bl	8003aa0 <HAL_InitTick>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d043      	beq.n	80073d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e249      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d023      	beq.n	800739c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007354:	4b3d      	ldr	r3, [pc, #244]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a3c      	ldr	r2, [pc, #240]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800735a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fc fbea 	bl	8003b38 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007368:	f7fc fbe6 	bl	8003b38 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e232      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800737a:	4b34      	ldr	r3, [pc, #208]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4b31      	ldr	r3, [pc, #196]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	492d      	ldr	r1, [pc, #180]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	604b      	str	r3, [r1, #4]
 800739a:	e01a      	b.n	80073d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800739c:	4b2b      	ldr	r3, [pc, #172]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2a      	ldr	r2, [pc, #168]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80073a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fc fbc6 	bl	8003b38 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073b0:	f7fc fbc2 	bl	8003b38 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e20e      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073c2:	4b22      	ldr	r3, [pc, #136]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x1e0>
 80073ce:	e000      	b.n	80073d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d041      	beq.n	8007462 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01c      	beq.n	8007420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e6:	4b19      	ldr	r3, [pc, #100]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80073e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ec:	4a17      	ldr	r2, [pc, #92]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fc fb9f 	bl	8003b38 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fc fb9b 	bl	8003b38 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e1e7      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007410:	4b0e      	ldr	r3, [pc, #56]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCC_OscConfig+0x22e>
 800741e:	e020      	b.n	8007462 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007426:	4a09      	ldr	r2, [pc, #36]	@ (800744c <HAL_RCC_OscConfig+0x27c>)
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007430:	f7fc fb82 	bl	8003b38 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007436:	e00d      	b.n	8007454 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007438:	f7fc fb7e 	bl	8003b38 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d906      	bls.n	8007454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e1ca      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
 800744a:	bf00      	nop
 800744c:	40021000 	.word	0x40021000
 8007450:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007454:	4b8c      	ldr	r3, [pc, #560]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1ea      	bne.n	8007438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80a6 	beq.w	80075bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007470:	2300      	movs	r3, #0
 8007472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007474:	4b84      	ldr	r3, [pc, #528]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_RCC_OscConfig+0x2b4>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_RCC_OscConfig+0x2b6>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00d      	beq.n	80074a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800748a:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800748e:	4a7e      	ldr	r2, [pc, #504]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007494:	6593      	str	r3, [r2, #88]	@ 0x58
 8007496:	4b7c      	ldr	r3, [pc, #496]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80074a2:	2301      	movs	r3, #1
 80074a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074a6:	4b79      	ldr	r3, [pc, #484]	@ (800768c <HAL_RCC_OscConfig+0x4bc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d118      	bne.n	80074e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074b2:	4b76      	ldr	r3, [pc, #472]	@ (800768c <HAL_RCC_OscConfig+0x4bc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a75      	ldr	r2, [pc, #468]	@ (800768c <HAL_RCC_OscConfig+0x4bc>)
 80074b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074be:	f7fc fb3b 	bl	8003b38 <HAL_GetTick>
 80074c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c6:	f7fc fb37 	bl	8003b38 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e183      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d8:	4b6c      	ldr	r3, [pc, #432]	@ (800768c <HAL_RCC_OscConfig+0x4bc>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0f0      	beq.n	80074c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d108      	bne.n	80074fe <HAL_RCC_OscConfig+0x32e>
 80074ec:	4b66      	ldr	r3, [pc, #408]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f2:	4a65      	ldr	r2, [pc, #404]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80074fc:	e024      	b.n	8007548 <HAL_RCC_OscConfig+0x378>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b05      	cmp	r3, #5
 8007504:	d110      	bne.n	8007528 <HAL_RCC_OscConfig+0x358>
 8007506:	4b60      	ldr	r3, [pc, #384]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750c:	4a5e      	ldr	r2, [pc, #376]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800750e:	f043 0304 	orr.w	r3, r3, #4
 8007512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007516:	4b5c      	ldr	r3, [pc, #368]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751c:	4a5a      	ldr	r2, [pc, #360]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007526:	e00f      	b.n	8007548 <HAL_RCC_OscConfig+0x378>
 8007528:	4b57      	ldr	r3, [pc, #348]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	4a56      	ldr	r2, [pc, #344]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007538:	4b53      	ldr	r3, [pc, #332]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753e:	4a52      	ldr	r2, [pc, #328]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007540:	f023 0304 	bic.w	r3, r3, #4
 8007544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d016      	beq.n	800757e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007550:	f7fc faf2 	bl	8003b38 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007556:	e00a      	b.n	800756e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007558:	f7fc faee 	bl	8003b38 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e138      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800756e:	4b46      	ldr	r3, [pc, #280]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0ed      	beq.n	8007558 <HAL_RCC_OscConfig+0x388>
 800757c:	e015      	b.n	80075aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757e:	f7fc fadb 	bl	8003b38 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007584:	e00a      	b.n	800759c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007586:	f7fc fad7 	bl	8003b38 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007594:	4293      	cmp	r3, r2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e121      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800759c:	4b3a      	ldr	r3, [pc, #232]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1ed      	bne.n	8007586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075aa:	7ffb      	ldrb	r3, [r7, #31]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d105      	bne.n	80075bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075b0:	4b35      	ldr	r3, [pc, #212]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b4:	4a34      	ldr	r2, [pc, #208]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80075b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d03c      	beq.n	8007642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01c      	beq.n	800760a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80075d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e0:	f7fc faaa 	bl	8003b38 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075e8:	f7fc faa6 	bl	8003b38 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e0f2      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075fa:	4b23      	ldr	r3, [pc, #140]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 80075fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0ef      	beq.n	80075e8 <HAL_RCC_OscConfig+0x418>
 8007608:	e01b      	b.n	8007642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800760a:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800760c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007610:	4a1d      	ldr	r2, [pc, #116]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761a:	f7fc fa8d 	bl	8003b38 <HAL_GetTick>
 800761e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007622:	f7fc fa89 	bl	8003b38 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e0d5      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007634:	4b14      	ldr	r3, [pc, #80]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1ef      	bne.n	8007622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80c9 	beq.w	80077de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800764c:	4b0e      	ldr	r3, [pc, #56]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b0c      	cmp	r3, #12
 8007656:	f000 8083 	beq.w	8007760 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d15e      	bne.n	8007720 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007662:	4b09      	ldr	r3, [pc, #36]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a08      	ldr	r2, [pc, #32]	@ (8007688 <HAL_RCC_OscConfig+0x4b8>)
 8007668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800766c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766e:	f7fc fa63 	bl	8003b38 <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007674:	e00c      	b.n	8007690 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007676:	f7fc fa5f 	bl	8003b38 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d905      	bls.n	8007690 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e0ab      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
 8007688:	40021000 	.word	0x40021000
 800768c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007690:	4b55      	ldr	r3, [pc, #340]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1ec      	bne.n	8007676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800769c:	4b52      	ldr	r3, [pc, #328]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	4b52      	ldr	r3, [pc, #328]	@ (80077ec <HAL_RCC_OscConfig+0x61c>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6a11      	ldr	r1, [r2, #32]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076ac:	3a01      	subs	r2, #1
 80076ae:	0112      	lsls	r2, r2, #4
 80076b0:	4311      	orrs	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80076b6:	0212      	lsls	r2, r2, #8
 80076b8:	4311      	orrs	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076be:	0852      	lsrs	r2, r2, #1
 80076c0:	3a01      	subs	r2, #1
 80076c2:	0552      	lsls	r2, r2, #21
 80076c4:	4311      	orrs	r1, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80076ca:	0852      	lsrs	r2, r2, #1
 80076cc:	3a01      	subs	r2, #1
 80076ce:	0652      	lsls	r2, r2, #25
 80076d0:	4311      	orrs	r1, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80076d6:	06d2      	lsls	r2, r2, #27
 80076d8:	430a      	orrs	r2, r1
 80076da:	4943      	ldr	r1, [pc, #268]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e0:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a40      	ldr	r2, [pc, #256]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 80076e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076ec:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a3d      	ldr	r2, [pc, #244]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 80076f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fc fa1e 	bl	8003b38 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007700:	f7fc fa1a 	bl	8003b38 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e066      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007712:	4b35      	ldr	r3, [pc, #212]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x530>
 800771e:	e05e      	b.n	80077de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007720:	4b31      	ldr	r3, [pc, #196]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a30      	ldr	r2, [pc, #192]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800772a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fc fa04 	bl	8003b38 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007734:	f7fc fa00 	bl	8003b38 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e04c      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007746:	4b28      	ldr	r3, [pc, #160]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007752:	4b25      	ldr	r3, [pc, #148]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	4924      	ldr	r1, [pc, #144]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 8007758:	4b25      	ldr	r3, [pc, #148]	@ (80077f0 <HAL_RCC_OscConfig+0x620>)
 800775a:	4013      	ands	r3, r2
 800775c:	60cb      	str	r3, [r1, #12]
 800775e:	e03e      	b.n	80077de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e039      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800776c:	4b1e      	ldr	r3, [pc, #120]	@ (80077e8 <HAL_RCC_OscConfig+0x618>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f003 0203 	and.w	r2, r3, #3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d12c      	bne.n	80077da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778a:	3b01      	subs	r3, #1
 800778c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d123      	bne.n	80077da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800779e:	429a      	cmp	r2, r3
 80077a0:	d11b      	bne.n	80077da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d113      	bne.n	80077da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	3b01      	subs	r3, #1
 80077c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d109      	bne.n	80077da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	3b01      	subs	r3, #1
 80077d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d001      	beq.n	80077de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	019f800c 	.word	0x019f800c
 80077f0:	feeefffc 	.word	0xfeeefffc

080077f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077fe:	2300      	movs	r3, #0
 8007800:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e11e      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800780c:	4b91      	ldr	r3, [pc, #580]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d910      	bls.n	800783c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781a:	4b8e      	ldr	r3, [pc, #568]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 020f 	bic.w	r2, r3, #15
 8007822:	498c      	ldr	r1, [pc, #560]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	4313      	orrs	r3, r2
 8007828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800782a:	4b8a      	ldr	r3, [pc, #552]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d001      	beq.n	800783c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e106      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d073      	beq.n	8007930 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b03      	cmp	r3, #3
 800784e:	d129      	bne.n	80078a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007850:	4b81      	ldr	r3, [pc, #516]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0f4      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007860:	f000 f99e 	bl	8007ba0 <RCC_GetSysClockFreqFromPLLSource>
 8007864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4a7c      	ldr	r2, [pc, #496]	@ (8007a5c <HAL_RCC_ClockConfig+0x268>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d93f      	bls.n	80078ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800786e:	4b7a      	ldr	r3, [pc, #488]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007882:	2b00      	cmp	r3, #0
 8007884:	d033      	beq.n	80078ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800788a:	2b00      	cmp	r3, #0
 800788c:	d12f      	bne.n	80078ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800788e:	4b72      	ldr	r3, [pc, #456]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007896:	4a70      	ldr	r2, [pc, #448]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800789c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800789e:	2380      	movs	r3, #128	@ 0x80
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e024      	b.n	80078ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d107      	bne.n	80078bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0c6      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078bc:	4b66      	ldr	r3, [pc, #408]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0be      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078cc:	f000 f8ce 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80078d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4a61      	ldr	r2, [pc, #388]	@ (8007a5c <HAL_RCC_ClockConfig+0x268>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d909      	bls.n	80078ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078da:	4b5f      	ldr	r3, [pc, #380]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e2:	4a5d      	ldr	r2, [pc, #372]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078ea:	2380      	movs	r3, #128	@ 0x80
 80078ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078ee:	4b5a      	ldr	r3, [pc, #360]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f023 0203 	bic.w	r2, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4957      	ldr	r1, [pc, #348]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007900:	f7fc f91a 	bl	8003b38 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007906:	e00a      	b.n	800791e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007908:	f7fc f916 	bl	8003b38 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007916:	4293      	cmp	r3, r2
 8007918:	d901      	bls.n	800791e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e095      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 020c 	and.w	r2, r3, #12
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	429a      	cmp	r2, r3
 800792e:	d1eb      	bne.n	8007908 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d023      	beq.n	8007984 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007948:	4b43      	ldr	r3, [pc, #268]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	4a42      	ldr	r2, [pc, #264]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 800794e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007952:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0308 	and.w	r3, r3, #8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007960:	4b3d      	ldr	r3, [pc, #244]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007968:	4a3b      	ldr	r2, [pc, #236]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 800796a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800796e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007970:	4b39      	ldr	r3, [pc, #228]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	4936      	ldr	r1, [pc, #216]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 800797e:	4313      	orrs	r3, r2
 8007980:	608b      	str	r3, [r1, #8]
 8007982:	e008      	b.n	8007996 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b80      	cmp	r3, #128	@ 0x80
 8007988:	d105      	bne.n	8007996 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800798a:	4b33      	ldr	r3, [pc, #204]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4a32      	ldr	r2, [pc, #200]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007994:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007996:	4b2f      	ldr	r3, [pc, #188]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d21d      	bcs.n	80079e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f023 020f 	bic.w	r2, r3, #15
 80079ac:	4929      	ldr	r1, [pc, #164]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079b4:	f7fc f8c0 	bl	8003b38 <HAL_GetTick>
 80079b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	e00a      	b.n	80079d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079bc:	f7fc f8bc 	bl	8003b38 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e03b      	b.n	8007a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d2:	4b20      	ldr	r3, [pc, #128]	@ (8007a54 <HAL_RCC_ClockConfig+0x260>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d1ed      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4917      	ldr	r1, [pc, #92]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a0a:	4b13      	ldr	r3, [pc, #76]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	490f      	ldr	r1, [pc, #60]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a1e:	f000 f825 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <HAL_RCC_ClockConfig+0x264>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	490c      	ldr	r1, [pc, #48]	@ (8007a60 <HAL_RCC_ClockConfig+0x26c>)
 8007a30:	5ccb      	ldrb	r3, [r1, r3]
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a64 <HAL_RCC_ClockConfig+0x270>)
 8007a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <HAL_RCC_ClockConfig+0x274>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fc f82c 	bl	8003aa0 <HAL_InitTick>
 8007a48:	4603      	mov	r3, r0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40022000 	.word	0x40022000
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	04c4b400 	.word	0x04c4b400
 8007a60:	080106b0 	.word	0x080106b0
 8007a64:	20000000 	.word	0x20000000
 8007a68:	20000004 	.word	0x20000004

08007a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a72:	4b2c      	ldr	r3, [pc, #176]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f003 030c 	and.w	r3, r3, #12
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d102      	bne.n	8007a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	e047      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a84:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 030c 	and.w	r3, r3, #12
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d102      	bne.n	8007a96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a90:	4b26      	ldr	r3, [pc, #152]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e03e      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a96:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 030c 	and.w	r3, r3, #12
 8007a9e:	2b0c      	cmp	r3, #12
 8007aa0:	d136      	bne.n	8007b10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aa2:	4b20      	ldr	r3, [pc, #128]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007aac:	4b1d      	ldr	r3, [pc, #116]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	091b      	lsrs	r3, r3, #4
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d10c      	bne.n	8007ada <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	4a16      	ldr	r2, [pc, #88]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aca:	68d2      	ldr	r2, [r2, #12]
 8007acc:	0a12      	lsrs	r2, r2, #8
 8007ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	617b      	str	r3, [r7, #20]
      break;
 8007ad8:	e00c      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ada:	4a13      	ldr	r2, [pc, #76]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	4a10      	ldr	r2, [pc, #64]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	0a12      	lsrs	r2, r2, #8
 8007ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	617b      	str	r3, [r7, #20]
      break;
 8007af2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007af4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	0e5b      	lsrs	r3, r3, #25
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	e001      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b14:	693b      	ldr	r3, [r7, #16]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	371c      	adds	r7, #28
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40021000 	.word	0x40021000
 8007b28:	00f42400 	.word	0x00f42400
 8007b2c:	016e3600 	.word	0x016e3600

08007b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b34:	4b03      	ldr	r3, [pc, #12]	@ (8007b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b36:	681b      	ldr	r3, [r3, #0]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000000 	.word	0x20000000

08007b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b4c:	f7ff fff0 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	4904      	ldr	r1, [pc, #16]	@ (8007b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	080106c0 	.word	0x080106c0

08007b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b78:	f7ff ffda 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	0adb      	lsrs	r3, r3, #11
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	4904      	ldr	r1, [pc, #16]	@ (8007b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	080106c0 	.word	0x080106c0

08007ba0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d10c      	bne.n	8007bde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bc4:	4a17      	ldr	r2, [pc, #92]	@ (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	4a14      	ldr	r2, [pc, #80]	@ (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bce:	68d2      	ldr	r2, [r2, #12]
 8007bd0:	0a12      	lsrs	r2, r2, #8
 8007bd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	617b      	str	r3, [r7, #20]
    break;
 8007bdc:	e00c      	b.n	8007bf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bde:	4a12      	ldr	r2, [pc, #72]	@ (8007c28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	4a0e      	ldr	r2, [pc, #56]	@ (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007be8:	68d2      	ldr	r2, [r2, #12]
 8007bea:	0a12      	lsrs	r2, r2, #8
 8007bec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007bf0:	fb02 f303 	mul.w	r3, r2, r3
 8007bf4:	617b      	str	r3, [r7, #20]
    break;
 8007bf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bf8:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	0e5b      	lsrs	r3, r3, #25
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	3301      	adds	r3, #1
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c12:	687b      	ldr	r3, [r7, #4]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40021000 	.word	0x40021000
 8007c24:	016e3600 	.word	0x016e3600
 8007c28:	00f42400 	.word	0x00f42400

08007c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c34:	2300      	movs	r3, #0
 8007c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c38:	2300      	movs	r3, #0
 8007c3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8098 	beq.w	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4e:	4b43      	ldr	r3, [pc, #268]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10d      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	4b40      	ldr	r3, [pc, #256]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c66:	4b3d      	ldr	r3, [pc, #244]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	60bb      	str	r3, [r7, #8]
 8007c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c72:	2301      	movs	r3, #1
 8007c74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c76:	4b3a      	ldr	r3, [pc, #232]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a39      	ldr	r2, [pc, #228]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c82:	f7fb ff59 	bl	8003b38 <HAL_GetTick>
 8007c86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c88:	e009      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8a:	f7fb ff55 	bl	8003b38 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d902      	bls.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	74fb      	strb	r3, [r7, #19]
        break;
 8007c9c:	e005      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c9e:	4b30      	ldr	r3, [pc, #192]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0ef      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007caa:	7cfb      	ldrb	r3, [r7, #19]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d159      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01e      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d019      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ccc:	4b23      	ldr	r3, [pc, #140]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cd8:	4b20      	ldr	r3, [pc, #128]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cde:	4a1f      	ldr	r2, [pc, #124]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cee:	4a1b      	ldr	r2, [pc, #108]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cf8:	4a18      	ldr	r2, [pc, #96]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0a:	f7fb ff15 	bl	8003b38 <HAL_GetTick>
 8007d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d10:	e00b      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d12:	f7fb ff11 	bl	8003b38 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d902      	bls.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	74fb      	strb	r3, [r7, #19]
            break;
 8007d28:	e006      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0ec      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d38:	7cfb      	ldrb	r3, [r7, #19]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d3e:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d4c:	4903      	ldr	r1, [pc, #12]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007d54:	e008      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d56:	7cfb      	ldrb	r3, [r7, #19]
 8007d58:	74bb      	strb	r3, [r7, #18]
 8007d5a:	e005      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d5c:	40021000 	.word	0x40021000
 8007d60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d64:	7cfb      	ldrb	r3, [r7, #19]
 8007d66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d68:	7c7b      	ldrb	r3, [r7, #17]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d105      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6e:	4ba7      	ldr	r3, [pc, #668]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	4aa6      	ldr	r2, [pc, #664]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d86:	4ba1      	ldr	r3, [pc, #644]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8c:	f023 0203 	bic.w	r2, r3, #3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	499d      	ldr	r1, [pc, #628]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007da8:	4b98      	ldr	r3, [pc, #608]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dae:	f023 020c 	bic.w	r2, r3, #12
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	4995      	ldr	r1, [pc, #596]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dca:	4b90      	ldr	r3, [pc, #576]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	498c      	ldr	r1, [pc, #560]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dec:	4b87      	ldr	r3, [pc, #540]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	4984      	ldr	r1, [pc, #528]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	497b      	ldr	r1, [pc, #492]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e30:	4b76      	ldr	r3, [pc, #472]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e36:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	4973      	ldr	r1, [pc, #460]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e52:	4b6e      	ldr	r3, [pc, #440]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	496a      	ldr	r1, [pc, #424]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e74:	4b65      	ldr	r3, [pc, #404]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	4962      	ldr	r1, [pc, #392]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e96:	4b5d      	ldr	r3, [pc, #372]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	4959      	ldr	r1, [pc, #356]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eb8:	4b54      	ldr	r3, [pc, #336]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	4951      	ldr	r1, [pc, #324]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d015      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eda:	4b4c      	ldr	r3, [pc, #304]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4948      	ldr	r1, [pc, #288]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef8:	d105      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007efa:	4b44      	ldr	r3, [pc, #272]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	4a43      	ldr	r2, [pc, #268]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f04:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d015      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f12:	4b3e      	ldr	r3, [pc, #248]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f20:	493a      	ldr	r1, [pc, #232]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f30:	d105      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f32:	4b36      	ldr	r3, [pc, #216]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	4a35      	ldr	r2, [pc, #212]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f3c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d015      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f4a:	4b30      	ldr	r3, [pc, #192]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f58:	492c      	ldr	r1, [pc, #176]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f68:	d105      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f6a:	4b28      	ldr	r3, [pc, #160]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	4a27      	ldr	r2, [pc, #156]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f74:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d015      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f82:	4b22      	ldr	r3, [pc, #136]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	491e      	ldr	r1, [pc, #120]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fa0:	d105      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	4a19      	ldr	r2, [pc, #100]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fac:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d015      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fba:	4b14      	ldr	r3, [pc, #80]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc8:	4910      	ldr	r1, [pc, #64]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fd8:	d105      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fda:	4b0c      	ldr	r3, [pc, #48]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	4a0b      	ldr	r2, [pc, #44]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fe4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008000:	4902      	ldr	r1, [pc, #8]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008002:	4313      	orrs	r3, r2
 8008004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	e001      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800800c:	40021000 	.word	0x40021000
 8008010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008016:	d105      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008018:	4b21      	ldr	r3, [pc, #132]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4a20      	ldr	r2, [pc, #128]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800801e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008022:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008030:	4b1b      	ldr	r3, [pc, #108]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008036:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800803e:	4918      	ldr	r1, [pc, #96]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008040:	4313      	orrs	r3, r2
 8008042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800804e:	d105      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008050:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	4a12      	ldr	r2, [pc, #72]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800805a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d015      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008068:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800806a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008076:	490a      	ldr	r1, [pc, #40]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008086:	d105      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	4a04      	ldr	r2, [pc, #16]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800808e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008094:	7cbb      	ldrb	r3, [r7, #18]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40021000 	.word	0x40021000

080080a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80080b6:	d136      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80080b8:	4bb3      	ldr	r3, [pc, #716]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80080ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80080c4:	4bb0      	ldr	r3, [pc, #704]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d108      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d8:	d104      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80080da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	f000 bce6 	b.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80080e4:	4ba8      	ldr	r3, [pc, #672]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d108      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d104      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80080fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80080fe:	61fb      	str	r3, [r7, #28]
 8008100:	f000 bcd6 	b.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008104:	4ba0      	ldr	r3, [pc, #640]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008110:	f040 84ce 	bne.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800811a:	f040 84c9 	bne.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 800811e:	4b9b      	ldr	r3, [pc, #620]	@ (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	f000 bcc5 	b.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8008126:	4b98      	ldr	r3, [pc, #608]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d10c      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008132:	4b95      	ldr	r3, [pc, #596]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800813a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800813e:	d102      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8008140:	4b93      	ldr	r3, [pc, #588]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	e017      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e014      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800814c:	4b8e      	ldr	r3, [pc, #568]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	2b03      	cmp	r3, #3
 8008156:	d10c      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008158:	4b8b      	ldr	r3, [pc, #556]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008164:	d102      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8008166:	4b8b      	ldr	r3, [pc, #556]	@ (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	e004      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	e001      	b.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008176:	4b84      	ldr	r3, [pc, #528]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	3301      	adds	r3, #1
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	fbb2 f3f3 	udiv	r3, r2, r3
 8008188:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008190:	f000 843c 	beq.w	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800819a:	f200 8464 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081a4:	f000 83f7 	beq.w	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ae:	f200 845a 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b8:	f000 83b0 	beq.w	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081c2:	f200 8450 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081cc:	f000 8378 	beq.w	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081d6:	f200 8446 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081e0:	f000 8335 	beq.w	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ea:	f200 843c 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f4:	f000 82f6 	beq.w	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fe:	f200 8432 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008208:	f000 82a8 	beq.w	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008212:	f200 8428 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821c:	f000 825a 	beq.w	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008226:	f200 841e 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008230:	f000 8214 	beq.w	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800823a:	f200 8414 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008244:	f000 81e0 	beq.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824e:	f200 840a 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b80      	cmp	r3, #128	@ 0x80
 8008256:	f000 81b2 	beq.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b80      	cmp	r3, #128	@ 0x80
 800825e:	f200 8402 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b20      	cmp	r3, #32
 8008266:	d84b      	bhi.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 83fb 	beq.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3b01      	subs	r3, #1
 8008274:	2b1f      	cmp	r3, #31
 8008276:	f200 83f6 	bhi.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800827a:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	0800830b 	.word	0x0800830b
 8008284:	0800836d 	.word	0x0800836d
 8008288:	08008a67 	.word	0x08008a67
 800828c:	080083e1 	.word	0x080083e1
 8008290:	08008a67 	.word	0x08008a67
 8008294:	08008a67 	.word	0x08008a67
 8008298:	08008a67 	.word	0x08008a67
 800829c:	08008443 	.word	0x08008443
 80082a0:	08008a67 	.word	0x08008a67
 80082a4:	08008a67 	.word	0x08008a67
 80082a8:	08008a67 	.word	0x08008a67
 80082ac:	08008a67 	.word	0x08008a67
 80082b0:	08008a67 	.word	0x08008a67
 80082b4:	08008a67 	.word	0x08008a67
 80082b8:	08008a67 	.word	0x08008a67
 80082bc:	080084a5 	.word	0x080084a5
 80082c0:	08008a67 	.word	0x08008a67
 80082c4:	08008a67 	.word	0x08008a67
 80082c8:	08008a67 	.word	0x08008a67
 80082cc:	08008a67 	.word	0x08008a67
 80082d0:	08008a67 	.word	0x08008a67
 80082d4:	08008a67 	.word	0x08008a67
 80082d8:	08008a67 	.word	0x08008a67
 80082dc:	08008a67 	.word	0x08008a67
 80082e0:	08008a67 	.word	0x08008a67
 80082e4:	08008a67 	.word	0x08008a67
 80082e8:	08008a67 	.word	0x08008a67
 80082ec:	08008a67 	.word	0x08008a67
 80082f0:	08008a67 	.word	0x08008a67
 80082f4:	08008a67 	.word	0x08008a67
 80082f8:	08008a67 	.word	0x08008a67
 80082fc:	0800850d 	.word	0x0800850d
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b40      	cmp	r3, #64	@ 0x40
 8008304:	f000 8136 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 8008308:	e3ad      	b.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800830a:	4b1f      	ldr	r3, [pc, #124]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800830c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d103      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 800831c:	f7ff fc2a 	bl	8007b74 <HAL_RCC_GetPCLK2Freq>
 8008320:	61f8      	str	r0, [r7, #28]
      break;
 8008322:	e3a2      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 800832a:	f7ff fb9f 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800832e:	61f8      	str	r0, [r7, #28]
      break;
 8008330:	e39b      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8008332:	4b15      	ldr	r3, [pc, #84]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800833a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800833e:	d105      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d102      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 8008346:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008348:	61fb      	str	r3, [r7, #28]
      break;
 800834a:	e38e      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800834c:	4b0e      	ldr	r3, [pc, #56]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b02      	cmp	r3, #2
 8008358:	f040 8387 	bne.w	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b03      	cmp	r3, #3
 8008360:	f040 8383 	bne.w	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 8008364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008368:	61fb      	str	r3, [r7, #28]
      break;
 800836a:	e37e      	b.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800836c:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008372:	f003 030c 	and.w	r3, r3, #12
 8008376:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 800837e:	f7ff fbe3 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 8008382:	61f8      	str	r0, [r7, #28]
      break;
 8008384:	e373      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8008386:	bf00      	nop
 8008388:	40021000 	.word	0x40021000
 800838c:	000b71b0 	.word	0x000b71b0
 8008390:	00f42400 	.word	0x00f42400
 8008394:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b04      	cmp	r3, #4
 800839c:	d103      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 800839e:	f7ff fb65 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80083a2:	61f8      	str	r0, [r7, #28]
      break;
 80083a4:	e363      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80083a6:	4ba3      	ldr	r3, [pc, #652]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083b2:	d105      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d102      	bne.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 80083ba:	4b9f      	ldr	r3, [pc, #636]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80083bc:	61fb      	str	r3, [r7, #28]
      break;
 80083be:	e356      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80083c0:	4b9c      	ldr	r3, [pc, #624]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	f040 834f 	bne.w	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b0c      	cmp	r3, #12
 80083d4:	f040 834b 	bne.w	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 80083d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083dc:	61fb      	str	r3, [r7, #28]
      break;
 80083de:	e346      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80083e0:	4b94      	ldr	r3, [pc, #592]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083ea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 80083f2:	f7ff fba9 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 80083f6:	61f8      	str	r0, [r7, #28]
      break;
 80083f8:	e33b      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d103      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8008400:	f7ff fb34 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008404:	61f8      	str	r0, [r7, #28]
      break;
 8008406:	e334      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008408:	4b8a      	ldr	r3, [pc, #552]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008414:	d105      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d102      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 800841c:	4b86      	ldr	r3, [pc, #536]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800841e:	61fb      	str	r3, [r7, #28]
      break;
 8008420:	e327      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008422:	4b84      	ldr	r3, [pc, #528]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b02      	cmp	r3, #2
 800842e:	f040 8320 	bne.w	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b30      	cmp	r3, #48	@ 0x30
 8008436:	f040 831c 	bne.w	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800843e:	61fb      	str	r3, [r7, #28]
      break;
 8008440:	e317      	b.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008442:	4b7c      	ldr	r3, [pc, #496]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008448:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800844c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d103      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008454:	f7ff fb78 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 8008458:	61f8      	str	r0, [r7, #28]
      break;
 800845a:	e30c      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d103      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8008462:	f7ff fb03 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008466:	61f8      	str	r0, [r7, #28]
      break;
 8008468:	e305      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800846a:	4b72      	ldr	r3, [pc, #456]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008476:	d105      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2b80      	cmp	r3, #128	@ 0x80
 800847c:	d102      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 800847e:	4b6e      	ldr	r3, [pc, #440]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008480:	61fb      	str	r3, [r7, #28]
      break;
 8008482:	e2f8      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008484:	4b6b      	ldr	r3, [pc, #428]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b02      	cmp	r3, #2
 8008490:	f040 82f1 	bne.w	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2bc0      	cmp	r3, #192	@ 0xc0
 8008498:	f040 82ed 	bne.w	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 800849c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a0:	61fb      	str	r3, [r7, #28]
      break;
 80084a2:	e2e8      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80084a4:	4b63      	ldr	r3, [pc, #396]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ae:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80084b6:	f7ff fb47 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 80084ba:	61f8      	str	r0, [r7, #28]
      break;
 80084bc:	e2dd      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c4:	d103      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 80084c6:	f7ff fad1 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80084ca:	61f8      	str	r0, [r7, #28]
      break;
 80084cc:	e2d5      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80084ce:	4b59      	ldr	r3, [pc, #356]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084da:	d106      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e2:	d102      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 80084e4:	4b54      	ldr	r3, [pc, #336]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80084e6:	61fb      	str	r3, [r7, #28]
      break;
 80084e8:	e2c7      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80084ea:	4b52      	ldr	r3, [pc, #328]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80084ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	f040 82c0 	bne.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008500:	f040 82bb 	bne.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8008504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008508:	61fb      	str	r3, [r7, #28]
      break;
 800850a:	e2b6      	b.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800850c:	4b49      	ldr	r3, [pc, #292]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008512:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008516:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 800851e:	f7ff fb13 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 8008522:	61f8      	str	r0, [r7, #28]
      break;
 8008524:	e2ab      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800852c:	d103      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 800852e:	f7ff fa9d 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008532:	61f8      	str	r0, [r7, #28]
      break;
 8008534:	e2a3      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008536:	4b3f      	ldr	r3, [pc, #252]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800853e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008542:	d106      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 800854c:	4b3a      	ldr	r3, [pc, #232]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800854e:	61fb      	str	r3, [r7, #28]
      break;
 8008550:	e295      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008552:	4b38      	ldr	r3, [pc, #224]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b02      	cmp	r3, #2
 800855e:	f040 828e 	bne.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008568:	f040 8289 	bne.w	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 800856c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008570:	61fb      	str	r3, [r7, #28]
      break;
 8008572:	e284      	b.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008574:	4b2f      	ldr	r3, [pc, #188]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800857e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d103      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008586:	f7ff fadf 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800858a:	61f8      	str	r0, [r7, #28]
      break;
 800858c:	e279      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008594:	d103      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8008596:	f7ff fa69 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800859a:	61f8      	str	r0, [r7, #28]
      break;
 800859c:	e271      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800859e:	4b25      	ldr	r3, [pc, #148]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085aa:	f040 826a 	bne.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b4:	f040 8265 	bne.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 80085b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80085ba:	61fb      	str	r3, [r7, #28]
      break;
 80085bc:	e261      	b.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80085be:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085c8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d103      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7ff faba 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 80085d4:	61f8      	str	r0, [r7, #28]
      break;
 80085d6:	e256      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085de:	d103      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 80085e0:	f7ff fa44 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80085e4:	61f8      	str	r0, [r7, #28]
      break;
 80085e6:	e24e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80085e8:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f4:	f040 8247 	bne.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085fe:	f040 8242 	bne.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8008602:	4b0d      	ldr	r3, [pc, #52]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008604:	61fb      	str	r3, [r7, #28]
      break;
 8008606:	e23e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008608:	4b0a      	ldr	r3, [pc, #40]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800860e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008612:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d103      	bne.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800861a:	f7ff fa95 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800861e:	61f8      	str	r0, [r7, #28]
      break;
 8008620:	e233      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008628:	d108      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 800862a:	f7ff fa1f 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800862e:	61f8      	str	r0, [r7, #28]
      break;
 8008630:	e22b      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8008632:	bf00      	nop
 8008634:	40021000 	.word	0x40021000
 8008638:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800863c:	4b9b      	ldr	r3, [pc, #620]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008648:	f040 821f 	bne.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008652:	f040 821a 	bne.w	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8008656:	4b96      	ldr	r3, [pc, #600]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008658:	61fb      	str	r3, [r7, #28]
      break;
 800865a:	e216      	b.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800865c:	4b93      	ldr	r3, [pc, #588]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008662:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008666:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 800866e:	f7ff fa6b 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 8008672:	61f8      	str	r0, [r7, #28]
      break;
 8008674:	e20b      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008676:	4b8d      	ldr	r3, [pc, #564]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d107      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800868a:	d103      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 800868c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	e01e      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008694:	4b85      	ldr	r3, [pc, #532]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a0:	d106      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086a8:	d102      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 80086aa:	4b81      	ldr	r3, [pc, #516]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80086ac:	61fb      	str	r3, [r7, #28]
 80086ae:	e010      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80086b0:	4b7e      	ldr	r3, [pc, #504]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80086b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	f040 81e7 	bne.w	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80086c6:	f040 81e2 	bne.w	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 80086ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ce:	61fb      	str	r3, [r7, #28]
      break;
 80086d0:	e1dd      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80086d2:	e1dc      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80086d4:	4b75      	ldr	r3, [pc, #468]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80086de:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 80086e6:	f7ff f9c1 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80086ea:	61f8      	str	r0, [r7, #28]
      break;
 80086ec:	e1d1      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086f4:	d11b      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80086f6:	4b6d      	ldr	r3, [pc, #436]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 81c7 	beq.w	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008704:	4b69      	ldr	r3, [pc, #420]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	0a1b      	lsrs	r3, r3, #8
 800870a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	fb03 f202 	mul.w	r2, r3, r2
 8008718:	4b64      	ldr	r3, [pc, #400]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	0d5b      	lsrs	r3, r3, #21
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	3301      	adds	r3, #1
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	fbb2 f3f3 	udiv	r3, r2, r3
 800872a:	61fb      	str	r3, [r7, #28]
      break;
 800872c:	e1b1      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008734:	d102      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008736:	4b5f      	ldr	r3, [pc, #380]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008738:	61fb      	str	r3, [r7, #28]
      break;
 800873a:	e1aa      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800873c:	4b5b      	ldr	r3, [pc, #364]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008748:	f040 81a3 	bne.w	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008752:	f040 819e 	bne.w	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8008756:	4b56      	ldr	r3, [pc, #344]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008758:	61fb      	str	r3, [r7, #28]
      break;
 800875a:	e19a      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800875c:	4b53      	ldr	r3, [pc, #332]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008766:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 800876e:	f7ff f97d 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008772:	61f8      	str	r0, [r7, #28]
      break;
 8008774:	e18f      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800877c:	d11b      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800877e:	4b4b      	ldr	r3, [pc, #300]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 8185 	beq.w	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800878c:	4b47      	ldr	r3, [pc, #284]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008796:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	fb03 f202 	mul.w	r2, r3, r2
 80087a0:	4b42      	ldr	r3, [pc, #264]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	0d5b      	lsrs	r3, r3, #21
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	3301      	adds	r3, #1
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b2:	61fb      	str	r3, [r7, #28]
      break;
 80087b4:	e16f      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087bc:	d102      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 80087be:	4b3d      	ldr	r3, [pc, #244]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80087c0:	61fb      	str	r3, [r7, #28]
      break;
 80087c2:	e168      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80087c4:	4b39      	ldr	r3, [pc, #228]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087d0:	f040 8161 	bne.w	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80087da:	f040 815c 	bne.w	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 80087de:	4b34      	ldr	r3, [pc, #208]	@ (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80087e0:	61fb      	str	r3, [r7, #28]
      break;
 80087e2:	e158      	b.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087e4:	4b31      	ldr	r3, [pc, #196]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ea:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80087ee:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f6:	d103      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80087f8:	f7ff f9a6 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 80087fc:	61f8      	str	r0, [r7, #28]
      break;
 80087fe:	e14c      	b.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d102      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8008806:	4b2c      	ldr	r3, [pc, #176]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8008808:	61fb      	str	r3, [r7, #28]
      break;
 800880a:	e146      	b.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008812:	f040 8142 	bne.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008816:	4b25      	ldr	r3, [pc, #148]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 813b 	beq.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008824:	4b21      	ldr	r3, [pc, #132]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	0a1b      	lsrs	r3, r3, #8
 800882a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800882e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	fb03 f202 	mul.w	r2, r3, r2
 8008838:	4b1c      	ldr	r3, [pc, #112]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	0d5b      	lsrs	r3, r3, #21
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	3301      	adds	r3, #1
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	fbb2 f3f3 	udiv	r3, r2, r3
 800884a:	61fb      	str	r3, [r7, #28]
      break;
 800884c:	e125      	b.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 800884e:	4b17      	ldr	r3, [pc, #92]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008854:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008858:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008860:	d114      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008862:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	fb03 f202 	mul.w	r2, r3, r2
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	0d5b      	lsrs	r3, r3, #21
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	3301      	adds	r3, #1
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	fbb2 f3f3 	udiv	r3, r2, r3
 8008888:	61fb      	str	r3, [r7, #28]
      break;
 800888a:	e108      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800888c:	4b07      	ldr	r3, [pc, #28]	@ (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800888e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	f040 8101 	bne.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 80fd 	bne.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 80088a4:	4b05      	ldr	r3, [pc, #20]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80088a6:	61fb      	str	r3, [r7, #28]
      break;
 80088a8:	e0f9      	b.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80088aa:	bf00      	nop
 80088ac:	40021000 	.word	0x40021000
 80088b0:	00f42400 	.word	0x00f42400
 80088b4:	00bb8000 	.word	0x00bb8000
 80088b8:	016e3600 	.word	0x016e3600
 80088bc:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80088c0:	4b7e      	ldr	r3, [pc, #504]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80088c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80088ca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088d2:	d114      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80088d4:	4b79      	ldr	r3, [pc, #484]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	0a1b      	lsrs	r3, r3, #8
 80088da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088de:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	fb03 f202 	mul.w	r2, r3, r2
 80088e8:	4b74      	ldr	r3, [pc, #464]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	0d5b      	lsrs	r3, r3, #21
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	3301      	adds	r3, #1
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	61fb      	str	r3, [r7, #28]
      break;
 80088fc:	e0d1      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80088fe:	4b6f      	ldr	r3, [pc, #444]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b02      	cmp	r3, #2
 800890a:	f040 80ca 	bne.w	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 80c6 	bne.w	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8008916:	4b6a      	ldr	r3, [pc, #424]	@ (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8008918:	61fb      	str	r3, [r7, #28]
      break;
 800891a:	e0c2      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800891c:	4b67      	ldr	r3, [pc, #412]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008926:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800892e:	d129      	bne.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008930:	4b62      	ldr	r3, [pc, #392]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80b4 	beq.w	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800893e:	4b5f      	ldr	r3, [pc, #380]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008948:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800894a:	4b5c      	ldr	r3, [pc, #368]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	0edb      	lsrs	r3, r3, #27
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800895c:	4b57      	ldr	r3, [pc, #348]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008968:	2311      	movs	r3, #17
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	e001      	b.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 800896e:	2307      	movs	r3, #7
 8008970:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	fb03 f202 	mul.w	r2, r3, r2
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008980:	61fb      	str	r3, [r7, #28]
      break;
 8008982:	e090      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800898a:	f040 808c 	bne.w	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 800898e:	f7ff f86d 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008992:	61f8      	str	r0, [r7, #28]
      break;
 8008994:	e087      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8008996:	4b49      	ldr	r3, [pc, #292]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80089a0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a8:	d128      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80089aa:	4b44      	ldr	r3, [pc, #272]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d079      	beq.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80089b6:	4b41      	ldr	r3, [pc, #260]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089c0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80089c2:	4b3e      	ldr	r3, [pc, #248]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	0edb      	lsrs	r3, r3, #27
 80089c8:	f003 031f 	and.w	r3, r3, #31
 80089cc:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80089d4:	4b39      	ldr	r3, [pc, #228]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 80089e0:	2311      	movs	r3, #17
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e001      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 80089e6:	2307      	movs	r3, #7
 80089e8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	fb03 f202 	mul.w	r2, r3, r2
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f8:	61fb      	str	r3, [r7, #28]
      break;
 80089fa:	e056      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a02:	d152      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 8008a04:	f7ff f832 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008a08:	61f8      	str	r0, [r7, #28]
      break;
 8008a0a:	e04e      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8008a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008a16:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a1e:	d114      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a20:	4b26      	ldr	r3, [pc, #152]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	0a1b      	lsrs	r3, r3, #8
 8008a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a2a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	fb03 f202 	mul.w	r2, r3, r2
 8008a34:	4b21      	ldr	r3, [pc, #132]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	0d5b      	lsrs	r3, r3, #21
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	3301      	adds	r3, #1
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a46:	61fb      	str	r3, [r7, #28]
      break;
 8008a48:	e031      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a50:	d102      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8008a52:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8008a54:	61fb      	str	r3, [r7, #28]
      break;
 8008a56:	e02a      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d127      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7ff f805 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8008a62:	61f8      	str	r0, [r7, #28]
      break;
 8008a64:	e023      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008a66:	bf00      	nop
 8008a68:	e022      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a6a:	bf00      	nop
 8008a6c:	e020      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a6e:	bf00      	nop
 8008a70:	e01e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a72:	bf00      	nop
 8008a74:	e01c      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a76:	bf00      	nop
 8008a78:	e01a      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a7a:	bf00      	nop
 8008a7c:	e018      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a7e:	bf00      	nop
 8008a80:	e016      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a82:	bf00      	nop
 8008a84:	e014      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a86:	bf00      	nop
 8008a88:	e012      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a8a:	bf00      	nop
 8008a8c:	e010      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a8e:	bf00      	nop
 8008a90:	e00e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a92:	bf00      	nop
 8008a94:	e00c      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a96:	bf00      	nop
 8008a98:	e00a      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a9a:	bf00      	nop
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008a9e:	bf00      	nop
 8008aa0:	e006      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e004      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008aa6:	bf00      	nop
 8008aa8:	e002      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008aae:	bf00      	nop
    }
  }

  return(frequency);
 8008ab0:	69fb      	ldr	r3, [r7, #28]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3720      	adds	r7, #32
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40021000 	.word	0x40021000
 8008ac0:	02dc6c00 	.word	0x02dc6c00
 8008ac4:	00f42400 	.word	0x00f42400

08008ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e09d      	b.n	8008c16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d108      	bne.n	8008af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aea:	d009      	beq.n	8008b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	61da      	str	r2, [r3, #28]
 8008af2:	e005      	b.n	8008b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7f9 ff04 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b40:	d902      	bls.n	8008b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e002      	b.n	8008b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b56:	d007      	beq.n	8008b68 <HAL_SPI_Init+0xa0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b60:	d002      	beq.n	8008b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	431a      	orrs	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008baa:	ea42 0103 	orr.w	r1, r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	0c1b      	lsrs	r3, r3, #16
 8008bc4:	f003 0204 	and.w	r2, r3, #4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008be4:	ea42 0103 	orr.w	r1, r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b088      	sub	sp, #32
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c2e:	f7fa ff83 	bl	8003b38 <HAL_GetTick>
 8008c32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d001      	beq.n	8008c48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008c44:	2302      	movs	r3, #2
 8008c46:	e15c      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_SPI_Transmit+0x36>
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e154      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_SPI_Transmit+0x48>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e14d      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2203      	movs	r2, #3
 8008c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	88fa      	ldrh	r2, [r7, #6]
 8008c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cb8:	d10f      	bne.n	8008cda <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce4:	2b40      	cmp	r3, #64	@ 0x40
 8008ce6:	d007      	beq.n	8008cf8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d00:	d952      	bls.n	8008da8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <HAL_SPI_Transmit+0xf2>
 8008d0a:	8b7b      	ldrh	r3, [r7, #26]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d145      	bne.n	8008d9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d14:	881a      	ldrh	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	1c9a      	adds	r2, r3, #2
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d34:	e032      	b.n	8008d9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d112      	bne.n	8008d6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	881a      	ldrh	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d54:	1c9a      	adds	r2, r3, #2
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d68:	e018      	b.n	8008d9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d6a:	f7fa fee5 	bl	8003b38 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d803      	bhi.n	8008d82 <HAL_SPI_Transmit+0x164>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d102      	bne.n	8008d88 <HAL_SPI_Transmit+0x16a>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e0b2      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1c7      	bne.n	8008d36 <HAL_SPI_Transmit+0x118>
 8008da6:	e083      	b.n	8008eb0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_SPI_Transmit+0x198>
 8008db0:	8b7b      	ldrh	r3, [r7, #26]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d177      	bne.n	8008ea6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d912      	bls.n	8008de6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc4:	881a      	ldrh	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	1c9a      	adds	r2, r3, #2
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b02      	subs	r3, #2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008de4:	e05f      	b.n	8008ea6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	330c      	adds	r3, #12
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e0c:	e04b      	b.n	8008ea6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d12b      	bne.n	8008e74 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d912      	bls.n	8008e4c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2a:	881a      	ldrh	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	1c9a      	adds	r2, r3, #2
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3b02      	subs	r3, #2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e4a:	e02c      	b.n	8008ea6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008e72:	e018      	b.n	8008ea6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e74:	f7fa fe60 	bl	8003b38 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d803      	bhi.n	8008e8c <HAL_SPI_Transmit+0x26e>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d102      	bne.n	8008e92 <HAL_SPI_Transmit+0x274>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d109      	bne.n	8008ea6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e02d      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1ae      	bne.n	8008e0e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 f947 	bl	8009148 <SPI_EndRxTxTransaction>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008f00:	2300      	movs	r3, #0
  }
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f1c:	f7fa fe0c 	bl	8003b38 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	4413      	add	r3, r2
 8008f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f2c:	f7fa fe04 	bl	8003b38 <HAL_GetTick>
 8008f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f32:	4b39      	ldr	r3, [pc, #228]	@ (8009018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	015b      	lsls	r3, r3, #5
 8008f38:	0d1b      	lsrs	r3, r3, #20
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	fb02 f303 	mul.w	r3, r2, r3
 8008f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f42:	e054      	b.n	8008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d050      	beq.n	8008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f4c:	f7fa fdf4 	bl	8003b38 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d902      	bls.n	8008f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d13d      	bne.n	8008fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f7a:	d111      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f84:	d004      	beq.n	8008f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f8e:	d107      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa8:	d10f      	bne.n	8008fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e017      	b.n	800900e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	bf0c      	ite	eq
 8008ffe:	2301      	moveq	r3, #1
 8009000:	2300      	movne	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	461a      	mov	r2, r3
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d19b      	bne.n	8008f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000000 	.word	0x20000000

0800901c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	@ 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800902e:	f7fa fd83 	bl	8003b38 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4413      	add	r3, r2
 800903c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800903e:	f7fa fd7b 	bl	8003b38 <HAL_GetTick>
 8009042:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800904c:	4b3d      	ldr	r3, [pc, #244]	@ (8009144 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	00da      	lsls	r2, r3, #3
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009064:	e060      	b.n	8009128 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800906c:	d107      	bne.n	800907e <SPI_WaitFifoStateUntilTimeout+0x62>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800907c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d050      	beq.n	8009128 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009086:	f7fa fd57 	bl	8003b38 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009092:	429a      	cmp	r2, r3
 8009094:	d902      	bls.n	800909c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d13d      	bne.n	8009118 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090b4:	d111      	bne.n	80090da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090be:	d004      	beq.n	80090ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c8:	d107      	bne.n	80090da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090e2:	d10f      	bne.n	8009104 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009102:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e010      	b.n	800913a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	3b01      	subs	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4013      	ands	r3, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	d196      	bne.n	8009066 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3728      	adds	r7, #40	@ 0x28
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000000 	.word	0x20000000

08009148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af02      	add	r7, sp, #8
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff ff5b 	bl	800901c <SPI_WaitFifoStateUntilTimeout>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009170:	f043 0220 	orr.w	r2, r3, #32
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e027      	b.n	80091cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	2180      	movs	r1, #128	@ 0x80
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff fec0 	bl	8008f0c <SPI_WaitFlagStateUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d007      	beq.n	80091a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e014      	b.n	80091cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff ff34 	bl	800901c <SPI_WaitFifoStateUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091be:	f043 0220 	orr.w	r2, r3, #32
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e000      	b.n	80091cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e049      	b.n	800927a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fa f970 	bl	80034e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3304      	adds	r3, #4
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f000 fa4c 	bl	80096b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b01      	cmp	r3, #1
 8009296:	d001      	beq.n	800929c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e04f      	b.n	800933c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0201 	orr.w	r2, r2, #1
 80092b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a23      	ldr	r2, [pc, #140]	@ (8009348 <HAL_TIM_Base_Start_IT+0xc4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d01d      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c6:	d018      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <HAL_TIM_Base_Start_IT+0xc8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d013      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009350 <HAL_TIM_Base_Start_IT+0xcc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d00e      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009354 <HAL_TIM_Base_Start_IT+0xd0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d009      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <HAL_TIM_Base_Start_IT+0xd4>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d004      	beq.n	80092fa <HAL_TIM_Base_Start_IT+0x76>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a19      	ldr	r2, [pc, #100]	@ (800935c <HAL_TIM_Base_Start_IT+0xd8>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d115      	bne.n	8009326 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	4b17      	ldr	r3, [pc, #92]	@ (8009360 <HAL_TIM_Base_Start_IT+0xdc>)
 8009302:	4013      	ands	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b06      	cmp	r3, #6
 800930a:	d015      	beq.n	8009338 <HAL_TIM_Base_Start_IT+0xb4>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009312:	d011      	beq.n	8009338 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009324:	e008      	b.n	8009338 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0201 	orr.w	r2, r2, #1
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e000      	b.n	800933a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40012c00 	.word	0x40012c00
 800934c:	40000400 	.word	0x40000400
 8009350:	40000800 	.word	0x40000800
 8009354:	40013400 	.word	0x40013400
 8009358:	40014000 	.word	0x40014000
 800935c:	40015000 	.word	0x40015000
 8009360:	00010007 	.word	0x00010007

08009364 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0201 	bic.w	r2, r2, #1
 800937a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a1a      	ldr	r2, [r3, #32]
 8009382:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009386:	4013      	ands	r3, r2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10f      	bne.n	80093ac <HAL_TIM_Base_Stop_IT+0x48>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6a1a      	ldr	r2, [r3, #32]
 8009392:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009396:	4013      	ands	r3, r2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d107      	bne.n	80093ac <HAL_TIM_Base_Stop_IT+0x48>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d020      	beq.n	8009426 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d01b      	beq.n	8009426 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f06f 0202 	mvn.w	r2, #2
 80093f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f931 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 8009412:	e005      	b.n	8009420 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f923 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f934 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d020      	beq.n	8009472 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01b      	beq.n	8009472 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f06f 0204 	mvn.w	r2, #4
 8009442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f90b 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 800945e:	e005      	b.n	800946c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f8fd 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f90e 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d020      	beq.n	80094be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 0308 	and.w	r3, r3, #8
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01b      	beq.n	80094be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f06f 0208 	mvn.w	r2, #8
 800948e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2204      	movs	r2, #4
 8009494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f8e5 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 80094aa:	e005      	b.n	80094b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f8d7 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f8e8 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d020      	beq.n	800950a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01b      	beq.n	800950a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f06f 0210 	mvn.w	r2, #16
 80094da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2208      	movs	r2, #8
 80094e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8bf 	bl	8009674 <HAL_TIM_IC_CaptureCallback>
 80094f6:	e005      	b.n	8009504 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f8b1 	bl	8009660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8c2 	bl	8009688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00c      	beq.n	800952e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f06f 0201 	mvn.w	r2, #1
 8009526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f9 ff45 	bl	80033b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00c      	beq.n	800955c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009548:	2b00      	cmp	r3, #0
 800954a:	d007      	beq.n	800955c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9ec 	bl	8009934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00c      	beq.n	8009580 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956c:	2b00      	cmp	r3, #0
 800956e:	d007      	beq.n	8009580 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9e4 	bl	8009948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f87c 	bl	800969c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 0320 	and.w	r3, r3, #32
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d007      	beq.n	80095c8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0220 	mvn.w	r2, #32
 80095c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f9ac 	bl	8009920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00c      	beq.n	80095ec <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80095e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9b8 	bl	800995c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00c      	beq.n	8009610 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9b0 	bl	8009970 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00c      	beq.n	8009634 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800962c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9a8 	bl	8009984 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9a0 	bl	8009998 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009658:	bf00      	nop
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a48      	ldr	r2, [pc, #288]	@ (80097e4 <TIM_Base_SetConfig+0x134>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ce:	d00f      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a45      	ldr	r2, [pc, #276]	@ (80097e8 <TIM_Base_SetConfig+0x138>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a44      	ldr	r2, [pc, #272]	@ (80097ec <TIM_Base_SetConfig+0x13c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a43      	ldr	r2, [pc, #268]	@ (80097f0 <TIM_Base_SetConfig+0x140>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_Base_SetConfig+0x40>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a42      	ldr	r2, [pc, #264]	@ (80097f4 <TIM_Base_SetConfig+0x144>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d108      	bne.n	8009702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a37      	ldr	r2, [pc, #220]	@ (80097e4 <TIM_Base_SetConfig+0x134>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d01f      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009710:	d01b      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a34      	ldr	r2, [pc, #208]	@ (80097e8 <TIM_Base_SetConfig+0x138>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d017      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a33      	ldr	r2, [pc, #204]	@ (80097ec <TIM_Base_SetConfig+0x13c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d013      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a32      	ldr	r2, [pc, #200]	@ (80097f0 <TIM_Base_SetConfig+0x140>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00f      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a32      	ldr	r2, [pc, #200]	@ (80097f8 <TIM_Base_SetConfig+0x148>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d00b      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a31      	ldr	r2, [pc, #196]	@ (80097fc <TIM_Base_SetConfig+0x14c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d007      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a30      	ldr	r2, [pc, #192]	@ (8009800 <TIM_Base_SetConfig+0x150>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d003      	beq.n	800974a <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2b      	ldr	r2, [pc, #172]	@ (80097f4 <TIM_Base_SetConfig+0x144>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d108      	bne.n	800975c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4313      	orrs	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a18      	ldr	r2, [pc, #96]	@ (80097e4 <TIM_Base_SetConfig+0x134>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d013      	beq.n	80097b0 <TIM_Base_SetConfig+0x100>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a19      	ldr	r2, [pc, #100]	@ (80097f0 <TIM_Base_SetConfig+0x140>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00f      	beq.n	80097b0 <TIM_Base_SetConfig+0x100>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a19      	ldr	r2, [pc, #100]	@ (80097f8 <TIM_Base_SetConfig+0x148>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00b      	beq.n	80097b0 <TIM_Base_SetConfig+0x100>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <TIM_Base_SetConfig+0x14c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d007      	beq.n	80097b0 <TIM_Base_SetConfig+0x100>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a17      	ldr	r2, [pc, #92]	@ (8009800 <TIM_Base_SetConfig+0x150>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_Base_SetConfig+0x100>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a12      	ldr	r2, [pc, #72]	@ (80097f4 <TIM_Base_SetConfig+0x144>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d103      	bne.n	80097b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	691a      	ldr	r2, [r3, #16]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d105      	bne.n	80097d6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	611a      	str	r2, [r3, #16]
  }
}
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40012c00 	.word	0x40012c00
 80097e8:	40000400 	.word	0x40000400
 80097ec:	40000800 	.word	0x40000800
 80097f0:	40013400 	.word	0x40013400
 80097f4:	40015000 	.word	0x40015000
 80097f8:	40014000 	.word	0x40014000
 80097fc:	40014400 	.word	0x40014400
 8009800:	40014800 	.word	0x40014800

08009804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009818:	2302      	movs	r3, #2
 800981a:	e06f      	b.n	80098fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a31      	ldr	r2, [pc, #196]	@ (8009908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d009      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a30      	ldr	r2, [pc, #192]	@ (800990c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d004      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a2e      	ldr	r2, [pc, #184]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009860:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4313      	orrs	r3, r2
 8009880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1e      	ldr	r2, [pc, #120]	@ (8009908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d01d      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800989c:	d018      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00e      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a15      	ldr	r2, [pc, #84]	@ (800990c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d009      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a16      	ldr	r2, [pc, #88]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d004      	beq.n	80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a11      	ldr	r2, [pc, #68]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10c      	bne.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	40012c00 	.word	0x40012c00
 800990c:	40013400 	.word	0x40013400
 8009910:	40015000 	.word	0x40015000
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40014000 	.word	0x40014000

08009920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e042      	b.n	8009a44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7f9 fdfb 	bl	80035cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2224      	movs	r2, #36	@ 0x24
 80099da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 0201 	bic.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 ff60 	bl	800a8bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fc61 	bl	800a2c4 <UART_SetConfig>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e01b      	b.n	8009a44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0201 	orr.w	r2, r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 ffdf 	bl	800aa00 <UART_CheckIdleState>
 8009a42:	4603      	mov	r3, r0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	@ 0x28
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d17b      	bne.n	8009b5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <HAL_UART_Transmit+0x26>
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e074      	b.n	8009b60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2221      	movs	r2, #33	@ 0x21
 8009a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a86:	f7fa f857 	bl	8003b38 <HAL_GetTick>
 8009a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	88fa      	ldrh	r2, [r7, #6]
 8009a98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa4:	d108      	bne.n	8009ab8 <HAL_UART_Transmit+0x6c>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e003      	b.n	8009ac0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ac0:	e030      	b.n	8009b24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2180      	movs	r1, #128	@ 0x80
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f001 f841 	bl	800ab54 <UART_WaitOnFlagUntilTimeout>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2220      	movs	r2, #32
 8009adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e03d      	b.n	8009b60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	3302      	adds	r3, #2
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	e007      	b.n	8009b12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1c8      	bne.n	8009ac2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2200      	movs	r2, #0
 8009b38:	2140      	movs	r1, #64	@ 0x40
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f001 f80a 	bl	800ab54 <UART_WaitOnFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e006      	b.n	8009b60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e000      	b.n	8009b60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b5e:	2302      	movs	r3, #2
  }
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3720      	adds	r7, #32
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	@ 0x28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d137      	bne.n	8009bf0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <HAL_UART_Receive_IT+0x24>
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e030      	b.n	8009bf2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a18      	ldr	r2, [pc, #96]	@ (8009bfc <HAL_UART_Receive_IT+0x94>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d01f      	beq.n	8009be0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d018      	beq.n	8009be0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	613b      	str	r3, [r7, #16]
   return(result);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	623b      	str	r3, [r7, #32]
 8009bce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	69f9      	ldr	r1, [r7, #28]
 8009bd2:	6a3a      	ldr	r2, [r7, #32]
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e6      	bne.n	8009bae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	461a      	mov	r2, r3
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 f822 	bl	800ac30 <UART_Start_Receive_IT>
 8009bec:	4603      	mov	r3, r0
 8009bee:	e000      	b.n	8009bf2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3728      	adds	r7, #40	@ 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40008000 	.word	0x40008000

08009c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b0ba      	sub	sp, #232	@ 0xe8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009c2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c2e:	4013      	ands	r3, r2
 8009c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d11b      	bne.n	8009c74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c40:	f003 0320 	and.w	r3, r3, #32
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d015      	beq.n	8009c74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d009      	beq.n	8009c74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 8300 	beq.w	800a26a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
      }
      return;
 8009c72:	e2fa      	b.n	800a26a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 8123 	beq.w	8009ec4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c82:	4b8d      	ldr	r3, [pc, #564]	@ (8009eb8 <HAL_UART_IRQHandler+0x2b8>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d106      	bne.n	8009c98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8009ebc <HAL_UART_IRQHandler+0x2bc>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8116 	beq.w	8009ec4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d011      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xc8>
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cbe:	f043 0201 	orr.w	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d011      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xf8>
 8009cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cee:	f043 0204 	orr.w	r2, r3, #4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d011      	beq.n	8009d28 <HAL_UART_IRQHandler+0x128>
 8009d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2204      	movs	r2, #4
 8009d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d1e:	f043 0202 	orr.w	r2, r3, #2
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d017      	beq.n	8009d64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d105      	bne.n	8009d4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d44:	4b5c      	ldr	r3, [pc, #368]	@ (8009eb8 <HAL_UART_IRQHandler+0x2b8>)
 8009d46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2208      	movs	r2, #8
 8009d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d5a:	f043 0208 	orr.w	r2, r3, #8
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d012      	beq.n	8009d96 <HAL_UART_IRQHandler+0x196>
 8009d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00c      	beq.n	8009d96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d8c:	f043 0220 	orr.w	r2, r3, #32
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8266 	beq.w	800a26e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d013      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dea:	2b40      	cmp	r3, #64	@ 0x40
 8009dec:	d005      	beq.n	8009dfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d054      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 f83a 	bl	800ae74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0a:	2b40      	cmp	r3, #64	@ 0x40
 8009e0c:	d146      	bne.n	8009e9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3308      	adds	r3, #8
 8009e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1d9      	bne.n	8009e0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d017      	beq.n	8009e94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e6a:	4a15      	ldr	r2, [pc, #84]	@ (8009ec0 <HAL_UART_IRQHandler+0x2c0>)
 8009e6c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fa f89e 	bl	8003fb6 <HAL_DMA_Abort_IT>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d019      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009e8e:	4610      	mov	r0, r2
 8009e90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e92:	e00f      	b.n	8009eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f9ff 	bl	800a298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9a:	e00b      	b.n	8009eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f9fb 	bl	800a298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea2:	e007      	b.n	8009eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f9f7 	bl	800a298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009eb2:	e1dc      	b.n	800a26e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb4:	bf00      	nop
    return;
 8009eb6:	e1da      	b.n	800a26e <HAL_UART_IRQHandler+0x66e>
 8009eb8:	10000001 	.word	0x10000001
 8009ebc:	04000120 	.word	0x04000120
 8009ec0:	0800af41 	.word	0x0800af41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	f040 8170 	bne.w	800a1ae <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed2:	f003 0310 	and.w	r3, r3, #16
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 8169 	beq.w	800a1ae <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 8162 	beq.w	800a1ae <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2210      	movs	r2, #16
 8009ef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009efc:	2b40      	cmp	r3, #64	@ 0x40
 8009efe:	f040 80d8 	bne.w	800a0b2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 80af 	beq.w	800a078 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f24:	429a      	cmp	r2, r3
 8009f26:	f080 80a7 	bcs.w	800a078 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f040 8087 	bne.w	800a056 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1da      	bne.n	8009f48 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e1      	bne.n	8009f92 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3308      	adds	r3, #8
 8009fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ff2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ff8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e3      	bne.n	8009fce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a024:	f023 0310 	bic.w	r3, r3, #16
 800a028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a036:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a038:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a03c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e4      	bne.n	800a014 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a050:	4618      	mov	r0, r3
 800a052:	f7f9 ff57 	bl	8003f04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2202      	movs	r2, #2
 800a05a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a068:	b29b      	uxth	r3, r3
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f91b 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a076:	e0fc      	b.n	800a272 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a082:	429a      	cmp	r2, r3
 800a084:	f040 80f5 	bne.w	800a272 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b20      	cmp	r3, #32
 800a098:	f040 80eb 	bne.w	800a272 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8fe 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
      return;
 800a0b0:	e0df      	b.n	800a272 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80d1 	beq.w	800a276 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a0d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 80cc 	beq.w	800a276 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a100:	647b      	str	r3, [r7, #68]	@ 0x44
 800a102:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e4      	bne.n	800a0de <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	623b      	str	r3, [r7, #32]
   return(result);
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a12a:	f023 0301 	bic.w	r3, r3, #1
 800a12e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a13c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e1      	bne.n	800a114 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	60fb      	str	r3, [r7, #12]
   return(result);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f023 0310 	bic.w	r3, r3, #16
 800a178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a186:	61fb      	str	r3, [r7, #28]
 800a188:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	69b9      	ldr	r1, [r7, #24]
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	617b      	str	r3, [r7, #20]
   return(result);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e4      	bne.n	800a164 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2202      	movs	r2, #2
 800a19e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f880 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1ac:	e063      	b.n	800a276 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00e      	beq.n	800a1d8 <HAL_UART_IRQHandler+0x5d8>
 800a1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fc13 	bl	800b9fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1d6:	e051      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d014      	beq.n	800a20e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d105      	bne.n	800a1fc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d008      	beq.n	800a20e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a200:	2b00      	cmp	r3, #0
 800a202:	d03a      	beq.n	800a27a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	4798      	blx	r3
    }
    return;
 800a20c:	e035      	b.n	800a27a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <HAL_UART_IRQHandler+0x62e>
 800a21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fe9c 	bl	800af64 <UART_EndTransmit_IT>
    return;
 800a22c:	e026      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <HAL_UART_IRQHandler+0x64e>
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 fbec 	bl	800ba24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a24c:	e016      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d010      	beq.n	800a27c <HAL_UART_IRQHandler+0x67c>
 800a25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	da0c      	bge.n	800a27c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fbd4 	bl	800ba10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a268:	e008      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
      return;
 800a26a:	bf00      	nop
 800a26c:	e006      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
    return;
 800a26e:	bf00      	nop
 800a270:	e004      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
      return;
 800a272:	bf00      	nop
 800a274:	e002      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
      return;
 800a276:	bf00      	nop
 800a278:	e000      	b.n	800a27c <HAL_UART_IRQHandler+0x67c>
    return;
 800a27a:	bf00      	nop
  }
}
 800a27c:	37e8      	adds	r7, #232	@ 0xe8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop

0800a284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2c8:	b08c      	sub	sp, #48	@ 0x30
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4baa      	ldr	r3, [pc, #680]	@ (800a59c <UART_SetConfig+0x2d8>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a9f      	ldr	r2, [pc, #636]	@ (800a5a0 <UART_SetConfig+0x2dc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d004      	beq.n	800a330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a32c:	4313      	orrs	r3, r2
 800a32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a33a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a344:	430b      	orrs	r3, r1
 800a346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34e:	f023 010f 	bic.w	r1, r3, #15
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a90      	ldr	r2, [pc, #576]	@ (800a5a4 <UART_SetConfig+0x2e0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d125      	bne.n	800a3b4 <UART_SetConfig+0xf0>
 800a368:	4b8f      	ldr	r3, [pc, #572]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d81a      	bhi.n	800a3ac <UART_SetConfig+0xe8>
 800a376:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <UART_SetConfig+0xb8>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a38d 	.word	0x0800a38d
 800a380:	0800a39d 	.word	0x0800a39d
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a3a5 	.word	0x0800a3a5
 800a38c:	2301      	movs	r3, #1
 800a38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a392:	e116      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a394:	2302      	movs	r3, #2
 800a396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a39a:	e112      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a39c:	2304      	movs	r3, #4
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3a2:	e10e      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3aa:	e10a      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b2:	e106      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a7c      	ldr	r2, [pc, #496]	@ (800a5ac <UART_SetConfig+0x2e8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d138      	bne.n	800a430 <UART_SetConfig+0x16c>
 800a3be:	4b7a      	ldr	r3, [pc, #488]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3c4:	f003 030c 	and.w	r3, r3, #12
 800a3c8:	2b0c      	cmp	r3, #12
 800a3ca:	d82d      	bhi.n	800a428 <UART_SetConfig+0x164>
 800a3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d4 <UART_SetConfig+0x110>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a409 	.word	0x0800a409
 800a3d8:	0800a429 	.word	0x0800a429
 800a3dc:	0800a429 	.word	0x0800a429
 800a3e0:	0800a429 	.word	0x0800a429
 800a3e4:	0800a419 	.word	0x0800a419
 800a3e8:	0800a429 	.word	0x0800a429
 800a3ec:	0800a429 	.word	0x0800a429
 800a3f0:	0800a429 	.word	0x0800a429
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a429 	.word	0x0800a429
 800a3fc:	0800a429 	.word	0x0800a429
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a421 	.word	0x0800a421
 800a408:	2300      	movs	r3, #0
 800a40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a40e:	e0d8      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a410:	2302      	movs	r3, #2
 800a412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a416:	e0d4      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a418:	2304      	movs	r3, #4
 800a41a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a41e:	e0d0      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a420:	2308      	movs	r3, #8
 800a422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a426:	e0cc      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a428:	2310      	movs	r3, #16
 800a42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a42e:	e0c8      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a5e      	ldr	r2, [pc, #376]	@ (800a5b0 <UART_SetConfig+0x2ec>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d125      	bne.n	800a486 <UART_SetConfig+0x1c2>
 800a43a:	4b5b      	ldr	r3, [pc, #364]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a440:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a444:	2b30      	cmp	r3, #48	@ 0x30
 800a446:	d016      	beq.n	800a476 <UART_SetConfig+0x1b2>
 800a448:	2b30      	cmp	r3, #48	@ 0x30
 800a44a:	d818      	bhi.n	800a47e <UART_SetConfig+0x1ba>
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d00a      	beq.n	800a466 <UART_SetConfig+0x1a2>
 800a450:	2b20      	cmp	r3, #32
 800a452:	d814      	bhi.n	800a47e <UART_SetConfig+0x1ba>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <UART_SetConfig+0x19a>
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d008      	beq.n	800a46e <UART_SetConfig+0x1aa>
 800a45c:	e00f      	b.n	800a47e <UART_SetConfig+0x1ba>
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a464:	e0ad      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a466:	2302      	movs	r3, #2
 800a468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46c:	e0a9      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a46e:	2304      	movs	r3, #4
 800a470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a474:	e0a5      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a476:	2308      	movs	r3, #8
 800a478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47c:	e0a1      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a47e:	2310      	movs	r3, #16
 800a480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a484:	e09d      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a4a      	ldr	r2, [pc, #296]	@ (800a5b4 <UART_SetConfig+0x2f0>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d125      	bne.n	800a4dc <UART_SetConfig+0x218>
 800a490:	4b45      	ldr	r3, [pc, #276]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a496:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a49a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a49c:	d016      	beq.n	800a4cc <UART_SetConfig+0x208>
 800a49e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4a0:	d818      	bhi.n	800a4d4 <UART_SetConfig+0x210>
 800a4a2:	2b80      	cmp	r3, #128	@ 0x80
 800a4a4:	d00a      	beq.n	800a4bc <UART_SetConfig+0x1f8>
 800a4a6:	2b80      	cmp	r3, #128	@ 0x80
 800a4a8:	d814      	bhi.n	800a4d4 <UART_SetConfig+0x210>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <UART_SetConfig+0x1f0>
 800a4ae:	2b40      	cmp	r3, #64	@ 0x40
 800a4b0:	d008      	beq.n	800a4c4 <UART_SetConfig+0x200>
 800a4b2:	e00f      	b.n	800a4d4 <UART_SetConfig+0x210>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ba:	e082      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c2:	e07e      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ca:	e07a      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d2:	e076      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e072      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a35      	ldr	r2, [pc, #212]	@ (800a5b8 <UART_SetConfig+0x2f4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d12a      	bne.n	800a53c <UART_SetConfig+0x278>
 800a4e6:	4b30      	ldr	r3, [pc, #192]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4f4:	d01a      	beq.n	800a52c <UART_SetConfig+0x268>
 800a4f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4fa:	d81b      	bhi.n	800a534 <UART_SetConfig+0x270>
 800a4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a500:	d00c      	beq.n	800a51c <UART_SetConfig+0x258>
 800a502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a506:	d815      	bhi.n	800a534 <UART_SetConfig+0x270>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <UART_SetConfig+0x250>
 800a50c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a510:	d008      	beq.n	800a524 <UART_SetConfig+0x260>
 800a512:	e00f      	b.n	800a534 <UART_SetConfig+0x270>
 800a514:	2300      	movs	r3, #0
 800a516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a51a:	e052      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a51c:	2302      	movs	r3, #2
 800a51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a522:	e04e      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a524:	2304      	movs	r3, #4
 800a526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a52a:	e04a      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a52c:	2308      	movs	r3, #8
 800a52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a532:	e046      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a534:	2310      	movs	r3, #16
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53a:	e042      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a17      	ldr	r2, [pc, #92]	@ (800a5a0 <UART_SetConfig+0x2dc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d13a      	bne.n	800a5bc <UART_SetConfig+0x2f8>
 800a546:	4b18      	ldr	r3, [pc, #96]	@ (800a5a8 <UART_SetConfig+0x2e4>)
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a54c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a554:	d01a      	beq.n	800a58c <UART_SetConfig+0x2c8>
 800a556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a55a:	d81b      	bhi.n	800a594 <UART_SetConfig+0x2d0>
 800a55c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a560:	d00c      	beq.n	800a57c <UART_SetConfig+0x2b8>
 800a562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a566:	d815      	bhi.n	800a594 <UART_SetConfig+0x2d0>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <UART_SetConfig+0x2b0>
 800a56c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a570:	d008      	beq.n	800a584 <UART_SetConfig+0x2c0>
 800a572:	e00f      	b.n	800a594 <UART_SetConfig+0x2d0>
 800a574:	2300      	movs	r3, #0
 800a576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a57a:	e022      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a57c:	2302      	movs	r3, #2
 800a57e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a582:	e01e      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a584:	2304      	movs	r3, #4
 800a586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58a:	e01a      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a58c:	2308      	movs	r3, #8
 800a58e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a592:	e016      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a594:	2310      	movs	r3, #16
 800a596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59a:	e012      	b.n	800a5c2 <UART_SetConfig+0x2fe>
 800a59c:	cfff69f3 	.word	0xcfff69f3
 800a5a0:	40008000 	.word	0x40008000
 800a5a4:	40013800 	.word	0x40013800
 800a5a8:	40021000 	.word	0x40021000
 800a5ac:	40004400 	.word	0x40004400
 800a5b0:	40004800 	.word	0x40004800
 800a5b4:	40004c00 	.word	0x40004c00
 800a5b8:	40005000 	.word	0x40005000
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4aae      	ldr	r2, [pc, #696]	@ (800a880 <UART_SetConfig+0x5bc>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	f040 8097 	bne.w	800a6fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5d2:	2b08      	cmp	r3, #8
 800a5d4:	d823      	bhi.n	800a61e <UART_SetConfig+0x35a>
 800a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <UART_SetConfig+0x318>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a601 	.word	0x0800a601
 800a5e0:	0800a61f 	.word	0x0800a61f
 800a5e4:	0800a609 	.word	0x0800a609
 800a5e8:	0800a61f 	.word	0x0800a61f
 800a5ec:	0800a60f 	.word	0x0800a60f
 800a5f0:	0800a61f 	.word	0x0800a61f
 800a5f4:	0800a61f 	.word	0x0800a61f
 800a5f8:	0800a61f 	.word	0x0800a61f
 800a5fc:	0800a617 	.word	0x0800a617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a600:	f7fd faa2 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800a604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a606:	e010      	b.n	800a62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a608:	4b9e      	ldr	r3, [pc, #632]	@ (800a884 <UART_SetConfig+0x5c0>)
 800a60a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a60c:	e00d      	b.n	800a62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a60e:	f7fd fa2d 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800a612:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a614:	e009      	b.n	800a62a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a616:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a61a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a61c:	e005      	b.n	800a62a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8130 	beq.w	800a892 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a636:	4a94      	ldr	r2, [pc, #592]	@ (800a888 <UART_SetConfig+0x5c4>)
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	fbb3 f3f2 	udiv	r3, r3, r2
 800a644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	4613      	mov	r3, r2
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	4413      	add	r3, r2
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	429a      	cmp	r2, r3
 800a654:	d305      	bcc.n	800a662 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a668:	e113      	b.n	800a892 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	2200      	movs	r2, #0
 800a66e:	60bb      	str	r3, [r7, #8]
 800a670:	60fa      	str	r2, [r7, #12]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	4a84      	ldr	r2, [pc, #528]	@ (800a888 <UART_SetConfig+0x5c4>)
 800a678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2200      	movs	r2, #0
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a68c:	f7f6 fa0a 	bl	8000aa4 <__aeabi_uldivmod>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4610      	mov	r0, r2
 800a696:	4619      	mov	r1, r3
 800a698:	f04f 0200 	mov.w	r2, #0
 800a69c:	f04f 0300 	mov.w	r3, #0
 800a6a0:	020b      	lsls	r3, r1, #8
 800a6a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6a6:	0202      	lsls	r2, r0, #8
 800a6a8:	6979      	ldr	r1, [r7, #20]
 800a6aa:	6849      	ldr	r1, [r1, #4]
 800a6ac:	0849      	lsrs	r1, r1, #1
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	eb12 0804 	adds.w	r8, r2, r4
 800a6b8:	eb43 0905 	adc.w	r9, r3, r5
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	469a      	mov	sl, r3
 800a6c4:	4693      	mov	fp, r2
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	465b      	mov	r3, fp
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f6 f9e9 	bl	8000aa4 <__aeabi_uldivmod>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6e0:	d308      	bcc.n	800a6f4 <UART_SetConfig+0x430>
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e8:	d204      	bcs.n	800a6f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	60da      	str	r2, [r3, #12]
 800a6f2:	e0ce      	b.n	800a892 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a6fa:	e0ca      	b.n	800a892 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	69db      	ldr	r3, [r3, #28]
 800a700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a704:	d166      	bne.n	800a7d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	d827      	bhi.n	800a75e <UART_SetConfig+0x49a>
 800a70e:	a201      	add	r2, pc, #4	@ (adr r2, 800a714 <UART_SetConfig+0x450>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a749 	.word	0x0800a749
 800a720:	0800a75f 	.word	0x0800a75f
 800a724:	0800a74f 	.word	0x0800a74f
 800a728:	0800a75f 	.word	0x0800a75f
 800a72c:	0800a75f 	.word	0x0800a75f
 800a730:	0800a75f 	.word	0x0800a75f
 800a734:	0800a757 	.word	0x0800a757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a738:	f7fd fa06 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800a73c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a73e:	e014      	b.n	800a76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a740:	f7fd fa18 	bl	8007b74 <HAL_RCC_GetPCLK2Freq>
 800a744:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a746:	e010      	b.n	800a76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a748:	4b4e      	ldr	r3, [pc, #312]	@ (800a884 <UART_SetConfig+0x5c0>)
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a74c:	e00d      	b.n	800a76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a74e:	f7fd f98d 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800a752:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a754:	e009      	b.n	800a76a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a75a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a75c:	e005      	b.n	800a76a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 8090 	beq.w	800a892 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a776:	4a44      	ldr	r2, [pc, #272]	@ (800a888 <UART_SetConfig+0x5c4>)
 800a778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a780:	fbb3 f3f2 	udiv	r3, r3, r2
 800a784:	005a      	lsls	r2, r3, #1
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	085b      	lsrs	r3, r3, #1
 800a78c:	441a      	add	r2, r3
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	fbb2 f3f3 	udiv	r3, r2, r3
 800a796:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	2b0f      	cmp	r3, #15
 800a79c:	d916      	bls.n	800a7cc <UART_SetConfig+0x508>
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a4:	d212      	bcs.n	800a7cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f023 030f 	bic.w	r3, r3, #15
 800a7ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	8bfb      	ldrh	r3, [r7, #30]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	8bfa      	ldrh	r2, [r7, #30]
 800a7c8:	60da      	str	r2, [r3, #12]
 800a7ca:	e062      	b.n	800a892 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a7d2:	e05e      	b.n	800a892 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7d8:	2b08      	cmp	r3, #8
 800a7da:	d828      	bhi.n	800a82e <UART_SetConfig+0x56a>
 800a7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e4 <UART_SetConfig+0x520>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a811 	.word	0x0800a811
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	0800a82f 	.word	0x0800a82f
 800a7f4:	0800a81f 	.word	0x0800a81f
 800a7f8:	0800a82f 	.word	0x0800a82f
 800a7fc:	0800a82f 	.word	0x0800a82f
 800a800:	0800a82f 	.word	0x0800a82f
 800a804:	0800a827 	.word	0x0800a827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a808:	f7fd f99e 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 800a80c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a80e:	e014      	b.n	800a83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a810:	f7fd f9b0 	bl	8007b74 <HAL_RCC_GetPCLK2Freq>
 800a814:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a816:	e010      	b.n	800a83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a818:	4b1a      	ldr	r3, [pc, #104]	@ (800a884 <UART_SetConfig+0x5c0>)
 800a81a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a81c:	e00d      	b.n	800a83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a81e:	f7fd f925 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 800a822:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a824:	e009      	b.n	800a83a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a82a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a82c:	e005      	b.n	800a83a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a838:	bf00      	nop
    }

    if (pclk != 0U)
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d028      	beq.n	800a892 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a844:	4a10      	ldr	r2, [pc, #64]	@ (800a888 <UART_SetConfig+0x5c4>)
 800a846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a84a:	461a      	mov	r2, r3
 800a84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	441a      	add	r2, r3
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a862:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d910      	bls.n	800a88c <UART_SetConfig+0x5c8>
 800a86a:	6a3b      	ldr	r3, [r7, #32]
 800a86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a870:	d20c      	bcs.n	800a88c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	b29a      	uxth	r2, r3
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60da      	str	r2, [r3, #12]
 800a87c:	e009      	b.n	800a892 <UART_SetConfig+0x5ce>
 800a87e:	bf00      	nop
 800a880:	40008000 	.word	0x40008000
 800a884:	00f42400 	.word	0x00f42400
 800a888:	080106c8 	.word	0x080106c8
      }
      else
      {
        ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2201      	movs	r2, #1
 800a896:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a8ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3730      	adds	r7, #48	@ 0x30
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a8bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c8:	f003 0308 	and.w	r3, r3, #8
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00a      	beq.n	800a8e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	430a      	orrs	r2, r1
 800a906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a90c:	f003 0302 	and.w	r3, r3, #2
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00a      	beq.n	800a92a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	430a      	orrs	r2, r1
 800a94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a950:	f003 0310 	and.w	r3, r3, #16
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00a      	beq.n	800a96e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01a      	beq.n	800a9d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ba:	d10a      	bne.n	800a9d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	605a      	str	r2, [r3, #4]
  }
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b098      	sub	sp, #96	@ 0x60
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa10:	f7f9 f892 	bl	8003b38 <HAL_GetTick>
 800aa14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0308 	and.w	r3, r3, #8
 800aa20:	2b08      	cmp	r3, #8
 800aa22:	d12f      	bne.n	800aa84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f88e 	bl	800ab54 <UART_WaitOnFlagUntilTimeout>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d022      	beq.n	800aa84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa52:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e6      	bne.n	800aa3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2220      	movs	r2, #32
 800aa74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e063      	b.n	800ab4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d149      	bne.n	800ab26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f857 	bl	800ab54 <UART_WaitOnFlagUntilTimeout>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d03c      	beq.n	800ab26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	623b      	str	r3, [r7, #32]
   return(result);
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaca:	633b      	str	r3, [r7, #48]	@ 0x30
 800aacc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e6      	bne.n	800aaac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aafe:	61fa      	str	r2, [r7, #28]
 800ab00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab02:	69b9      	ldr	r1, [r7, #24]
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	e841 2300 	strex	r3, r2, [r1]
 800ab0a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1e5      	bne.n	800aade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2220      	movs	r2, #32
 800ab16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e012      	b.n	800ab4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3758      	adds	r7, #88	@ 0x58
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	4613      	mov	r3, r2
 800ab62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab64:	e04f      	b.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d04b      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab6e:	f7f8 ffe3 	bl	8003b38 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d302      	bcc.n	800ab84 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e04e      	b.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0304 	and.w	r3, r3, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d037      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b80      	cmp	r3, #128	@ 0x80
 800ab9a:	d034      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2b40      	cmp	r3, #64	@ 0x40
 800aba0:	d031      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	f003 0308 	and.w	r3, r3, #8
 800abac:	2b08      	cmp	r3, #8
 800abae:	d110      	bne.n	800abd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2208      	movs	r2, #8
 800abb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f95b 	bl	800ae74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2208      	movs	r2, #8
 800abc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e029      	b.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abe0:	d111      	bne.n	800ac06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 f941 	bl	800ae74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2220      	movs	r2, #32
 800abf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e00f      	b.n	800ac26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4013      	ands	r3, r2
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	bf0c      	ite	eq
 800ac16:	2301      	moveq	r3, #1
 800ac18:	2300      	movne	r3, #0
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d0a0      	beq.n	800ab66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b0a3      	sub	sp, #140	@ 0x8c
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	88fa      	ldrh	r2, [r7, #6]
 800ac50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac62:	d10e      	bne.n	800ac82 <UART_Start_Receive_IT+0x52>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d105      	bne.n	800ac78 <UART_Start_Receive_IT+0x48>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ac72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ac76:	e02d      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	22ff      	movs	r2, #255	@ 0xff
 800ac7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ac80:	e028      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10d      	bne.n	800aca6 <UART_Start_Receive_IT+0x76>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d104      	bne.n	800ac9c <UART_Start_Receive_IT+0x6c>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	22ff      	movs	r2, #255	@ 0xff
 800ac96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ac9a:	e01b      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	227f      	movs	r2, #127	@ 0x7f
 800aca0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aca4:	e016      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acae:	d10d      	bne.n	800accc <UART_Start_Receive_IT+0x9c>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <UART_Start_Receive_IT+0x92>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	227f      	movs	r2, #127	@ 0x7f
 800acbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acc0:	e008      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	223f      	movs	r2, #63	@ 0x3f
 800acc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acca:	e003      	b.n	800acd4 <UART_Start_Receive_IT+0xa4>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2222      	movs	r2, #34	@ 0x22
 800ace0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3308      	adds	r3, #8
 800acea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acee:	e853 3f00 	ldrex	r3, [r3]
 800acf2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800acf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad08:	673a      	str	r2, [r7, #112]	@ 0x70
 800ad0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ad0e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ad16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e3      	bne.n	800ace4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad24:	d14f      	bne.n	800adc6 <UART_Start_Receive_IT+0x196>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad2c:	88fa      	ldrh	r2, [r7, #6]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d349      	bcc.n	800adc6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad3a:	d107      	bne.n	800ad4c <UART_Start_Receive_IT+0x11c>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d103      	bne.n	800ad4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	4a47      	ldr	r2, [pc, #284]	@ (800ae64 <UART_Start_Receive_IT+0x234>)
 800ad48:	675a      	str	r2, [r3, #116]	@ 0x74
 800ad4a:	e002      	b.n	800ad52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4a46      	ldr	r2, [pc, #280]	@ (800ae68 <UART_Start_Receive_IT+0x238>)
 800ad50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d01a      	beq.n	800ad90 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ad7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad7e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ad82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ad8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e4      	bne.n	800ad5a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ada6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3308      	adds	r3, #8
 800adae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800adb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800adb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800adbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e5      	bne.n	800ad90 <UART_Start_Receive_IT+0x160>
 800adc4:	e046      	b.n	800ae54 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adce:	d107      	bne.n	800ade0 <UART_Start_Receive_IT+0x1b0>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d103      	bne.n	800ade0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4a24      	ldr	r2, [pc, #144]	@ (800ae6c <UART_Start_Receive_IT+0x23c>)
 800addc:	675a      	str	r2, [r3, #116]	@ 0x74
 800adde:	e002      	b.n	800ade6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4a23      	ldr	r2, [pc, #140]	@ (800ae70 <UART_Start_Receive_IT+0x240>)
 800ade4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d019      	beq.n	800ae22 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ae02:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e6      	bne.n	800adee <UART_Start_Receive_IT+0x1be>
 800ae20:	e018      	b.n	800ae54 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	e853 3f00 	ldrex	r3, [r3]
 800ae2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f043 0320 	orr.w	r3, r3, #32
 800ae36:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae40:	623b      	str	r3, [r7, #32]
 800ae42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	69f9      	ldr	r1, [r7, #28]
 800ae46:	6a3a      	ldr	r2, [r7, #32]
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e6      	bne.n	800ae22 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	378c      	adds	r7, #140	@ 0x8c
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	0800b691 	.word	0x0800b691
 800ae68:	0800b32d 	.word	0x0800b32d
 800ae6c:	0800b175 	.word	0x0800b175
 800ae70:	0800afbd 	.word	0x0800afbd

0800ae74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b095      	sub	sp, #84	@ 0x54
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e6      	bne.n	800ae7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	61fb      	str	r3, [r7, #28]
   return(result);
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aec4:	f023 0301 	bic.w	r3, r3, #1
 800aec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	3308      	adds	r3, #8
 800aed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e3      	bne.n	800aeae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d118      	bne.n	800af20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f023 0310 	bic.w	r3, r3, #16
 800af02:	647b      	str	r3, [r7, #68]	@ 0x44
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af0c:	61bb      	str	r3, [r7, #24]
 800af0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6979      	ldr	r1, [r7, #20]
 800af12:	69ba      	ldr	r2, [r7, #24]
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	613b      	str	r3, [r7, #16]
   return(result);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e6      	bne.n	800aeee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2220      	movs	r2, #32
 800af24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af34:	bf00      	nop
 800af36:	3754      	adds	r7, #84	@ 0x54
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff f99e 	bl	800a298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	60bb      	str	r3, [r7, #8]
   return(result);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af80:	61fb      	str	r3, [r7, #28]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	61bb      	str	r3, [r7, #24]
 800af8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6979      	ldr	r1, [r7, #20]
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	613b      	str	r3, [r7, #16]
   return(result);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e6      	bne.n	800af6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff f969 	bl	800a284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afb2:	bf00      	nop
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b09c      	sub	sp, #112	@ 0x70
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afd4:	2b22      	cmp	r3, #34	@ 0x22
 800afd6:	f040 80be 	bne.w	800b156 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800afe4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800afe8:	b2d9      	uxtb	r1, r3
 800afea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aff4:	400a      	ands	r2, r1
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f040 80a1 	bne.w	800b166 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b042:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b044:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e6      	bne.n	800b024 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3308      	adds	r3, #8
 800b05c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	e853 3f00 	ldrex	r3, [r3]
 800b064:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b068:	f023 0301 	bic.w	r3, r3, #1
 800b06c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b076:	647a      	str	r2, [r7, #68]	@ 0x44
 800b078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b07c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e5      	bne.n	800b056 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a33      	ldr	r2, [pc, #204]	@ (800b170 <UART_RxISR_8BIT+0x1b4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d01f      	beq.n	800b0e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d018      	beq.n	800b0e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e6      	bne.n	800b0b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d12e      	bne.n	800b14e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	60fb      	str	r3, [r7, #12]
   return(result);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 0310 	bic.w	r3, r3, #16
 800b10a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b114:	61fb      	str	r3, [r7, #28]
 800b116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	69b9      	ldr	r1, [r7, #24]
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	617b      	str	r3, [r7, #20]
   return(result);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e6      	bne.n	800b0f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	69db      	ldr	r3, [r3, #28]
 800b12e:	f003 0310 	and.w	r3, r3, #16
 800b132:	2b10      	cmp	r3, #16
 800b134:	d103      	bne.n	800b13e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2210      	movs	r2, #16
 800b13c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff f8b0 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b14c:	e00b      	b.n	800b166 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7f6 f9be 	bl	80014d0 <HAL_UART_RxCpltCallback>
}
 800b154:	e007      	b.n	800b166 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	699a      	ldr	r2, [r3, #24]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f042 0208 	orr.w	r2, r2, #8
 800b164:	619a      	str	r2, [r3, #24]
}
 800b166:	bf00      	nop
 800b168:	3770      	adds	r7, #112	@ 0x70
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	40008000 	.word	0x40008000

0800b174 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b09c      	sub	sp, #112	@ 0x70
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b182:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b18c:	2b22      	cmp	r3, #34	@ 0x22
 800b18e:	f040 80be 	bne.w	800b30e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b198:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b1a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1b6:	1c9a      	adds	r2, r3, #2
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f040 80a1 	bne.w	800b31e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1e4:	e853 3f00 	ldrex	r3, [r3]
 800b1e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b1ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b200:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e6      	bne.n	800b1dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3308      	adds	r3, #8
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	f023 0301 	bic.w	r3, r3, #1
 800b224:	663b      	str	r3, [r7, #96]	@ 0x60
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b22e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b230:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e5      	bne.n	800b20e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2220      	movs	r2, #32
 800b246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a33      	ldr	r2, [pc, #204]	@ (800b328 <UART_RxISR_16BIT+0x1b4>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d01f      	beq.n	800b2a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d018      	beq.n	800b2a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	e853 3f00 	ldrex	r3, [r3]
 800b27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b282:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	461a      	mov	r2, r3
 800b28a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b28e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b294:	e841 2300 	strex	r3, r2, [r1]
 800b298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e6      	bne.n	800b26e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d12e      	bne.n	800b306 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f023 0310 	bic.w	r3, r3, #16
 800b2c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2cc:	61bb      	str	r3, [r7, #24]
 800b2ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6979      	ldr	r1, [r7, #20]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e6      	bne.n	800b2ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f003 0310 	and.w	r3, r3, #16
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d103      	bne.n	800b2f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2210      	movs	r2, #16
 800b2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fe ffd4 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b304:	e00b      	b.n	800b31e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7f6 f8e2 	bl	80014d0 <HAL_UART_RxCpltCallback>
}
 800b30c:	e007      	b.n	800b31e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	699a      	ldr	r2, [r3, #24]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f042 0208 	orr.w	r2, r2, #8
 800b31c:	619a      	str	r2, [r3, #24]
}
 800b31e:	bf00      	nop
 800b320:	3770      	adds	r7, #112	@ 0x70
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	40008000 	.word	0x40008000

0800b32c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b0ac      	sub	sp, #176	@ 0xb0
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b33a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b362:	2b22      	cmp	r3, #34	@ 0x22
 800b364:	f040 8183 	bne.w	800b66e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b36e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b372:	e126      	b.n	800b5c2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b37e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b382:	b2d9      	uxtb	r1, r3
 800b384:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b38e:	400a      	ands	r2, r1
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d053      	beq.n	800b46e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d011      	beq.n	800b3f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b3d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ec:	f043 0201 	orr.w	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d011      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00b      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2202      	movs	r2, #2
 800b414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b41c:	f043 0204 	orr.w	r2, r3, #4
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d011      	beq.n	800b456 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2204      	movs	r2, #4
 800b444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b44c:	f043 0202 	orr.w	r2, r3, #2
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7fe ff19 	bl	800a298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 80a3 	bne.w	800b5c2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b48a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b48c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b49e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4a0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b4a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b4ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e4      	bne.n	800b47c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4bc:	e853 3f00 	ldrex	r3, [r3]
 800b4c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b4c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4c8:	f023 0301 	bic.w	r3, r3, #1
 800b4cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4da:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b4dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b4e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b4e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e1      	bne.n	800b4b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a60      	ldr	r2, [pc, #384]	@ (800b688 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d021      	beq.n	800b550 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01a      	beq.n	800b550 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b52a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b52e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b53c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b53e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b542:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e4      	bne.n	800b51a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d130      	bne.n	800b5ba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	f023 0310 	bic.w	r3, r3, #16
 800b572:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b580:	643b      	str	r3, [r7, #64]	@ 0x40
 800b582:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b586:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e4      	bne.n	800b55e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f003 0310 	and.w	r3, r3, #16
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d103      	bne.n	800b5aa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2210      	movs	r2, #16
 800b5a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7fe fe7a 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b5b8:	e00e      	b.n	800b5d8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7f5 ff88 	bl	80014d0 <HAL_UART_RxCpltCallback>
        break;
 800b5c0:	e00a      	b.n	800b5d8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5c2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f47f aece 	bne.w	800b374 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d049      	beq.n	800b67e <UART_RxISR_8BIT_FIFOEN+0x352>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5f0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d242      	bcs.n	800b67e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	e853 3f00 	ldrex	r3, [r3]
 800b606:	61fb      	str	r3, [r7, #28]
   return(result);
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b60e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3308      	adds	r3, #8
 800b618:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b61c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b624:	e841 2300 	strex	r3, r2, [r1]
 800b628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1e3      	bne.n	800b5f8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a16      	ldr	r2, [pc, #88]	@ (800b68c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b634:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	60bb      	str	r3, [r7, #8]
   return(result);
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f043 0320 	orr.w	r3, r3, #32
 800b64a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b658:	61bb      	str	r3, [r7, #24]
 800b65a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	6979      	ldr	r1, [r7, #20]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	e841 2300 	strex	r3, r2, [r1]
 800b664:	613b      	str	r3, [r7, #16]
   return(result);
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e4      	bne.n	800b636 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b66c:	e007      	b.n	800b67e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f042 0208 	orr.w	r2, r2, #8
 800b67c:	619a      	str	r2, [r3, #24]
}
 800b67e:	bf00      	nop
 800b680:	37b0      	adds	r7, #176	@ 0xb0
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	40008000 	.word	0x40008000
 800b68c:	0800afbd 	.word	0x0800afbd

0800b690 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b0ae      	sub	sp, #184	@ 0xb8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b69e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6c6:	2b22      	cmp	r3, #34	@ 0x22
 800b6c8:	f040 8187 	bne.w	800b9da <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b6d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b6d6:	e12a      	b.n	800b92e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6de:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b6ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b6ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b700:	1c9a      	adds	r2, r3, #2
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b726:	f003 0307 	and.w	r3, r3, #7
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d053      	beq.n	800b7d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b72e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	d011      	beq.n	800b75e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b73a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b73e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00b      	beq.n	800b75e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2201      	movs	r2, #1
 800b74c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b754:	f043 0201 	orr.w	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b75e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b762:	f003 0302 	and.w	r3, r3, #2
 800b766:	2b00      	cmp	r3, #0
 800b768:	d011      	beq.n	800b78e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b76a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00b      	beq.n	800b78e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2202      	movs	r2, #2
 800b77c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b784:	f043 0204 	orr.w	r2, r3, #4
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b78e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b792:	f003 0304 	and.w	r3, r3, #4
 800b796:	2b00      	cmp	r3, #0
 800b798:	d011      	beq.n	800b7be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b79a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2204      	movs	r2, #4
 800b7ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b4:	f043 0202 	orr.w	r2, r3, #2
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7fe fd65 	bl	800a298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f040 80a5 	bne.w	800b92e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b7f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b806:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b80a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b80e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b812:	e841 2300 	strex	r3, r2, [r1]
 800b816:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1e2      	bne.n	800b7e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3308      	adds	r3, #8
 800b824:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b828:	e853 3f00 	ldrex	r3, [r3]
 800b82c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b82e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b834:	f023 0301 	bic.w	r3, r3, #1
 800b838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b84c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e1      	bne.n	800b81e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a60      	ldr	r2, [pc, #384]	@ (800b9f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d021      	beq.n	800b8bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d01a      	beq.n	800b8bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b89a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b8a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e4      	bne.n	800b886 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d130      	bne.n	800b926 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8da:	f023 0310 	bic.w	r3, r3, #16
 800b8de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e4      	bne.n	800b8ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	f003 0310 	and.w	r3, r3, #16
 800b90a:	2b10      	cmp	r3, #16
 800b90c:	d103      	bne.n	800b916 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2210      	movs	r2, #16
 800b914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7fe fcc4 	bl	800a2ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b924:	e00e      	b.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7f5 fdd2 	bl	80014d0 <HAL_UART_RxCpltCallback>
        break;
 800b92c:	e00a      	b.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b92e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b93a:	f003 0320 	and.w	r3, r3, #32
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f47f aeca 	bne.w	800b6d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b94a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b94e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b952:	2b00      	cmp	r3, #0
 800b954:	d049      	beq.n	800b9ea <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b95c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b960:	429a      	cmp	r2, r3
 800b962:	d242      	bcs.n	800b9ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3308      	adds	r3, #8
 800b96a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96e:	e853 3f00 	ldrex	r3, [r3]
 800b972:	623b      	str	r3, [r7, #32]
   return(result);
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b97a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b988:	633a      	str	r2, [r7, #48]	@ 0x30
 800b98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e3      	bne.n	800b964 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a16      	ldr	r2, [pc, #88]	@ (800b9f8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b9a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	e853 3f00 	ldrex	r3, [r3]
 800b9ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f043 0320 	orr.w	r3, r3, #32
 800b9b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9c4:	61fb      	str	r3, [r7, #28]
 800b9c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	69b9      	ldr	r1, [r7, #24]
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e4      	bne.n	800b9a2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9d8:	e007      	b.n	800b9ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	699a      	ldr	r2, [r3, #24]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f042 0208 	orr.w	r2, r2, #8
 800b9e8:	619a      	str	r2, [r3, #24]
}
 800b9ea:	bf00      	nop
 800b9ec:	37b8      	adds	r7, #184	@ 0xb8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	40008000 	.word	0x40008000
 800b9f8:	0800b175 	.word	0x0800b175

0800b9fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e027      	b.n	800ba9e <HAL_UARTEx_DisableFifoMode+0x66>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2224      	movs	r2, #36	@ 0x24
 800ba5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0201 	bic.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ba7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800babe:	2302      	movs	r3, #2
 800bac0:	e02d      	b.n	800bb1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2224      	movs	r2, #36	@ 0x24
 800bace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f022 0201 	bic.w	r2, r2, #1
 800bae8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f850 	bl	800bba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d101      	bne.n	800bb3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e02d      	b.n	800bb9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2224      	movs	r2, #36	@ 0x24
 800bb4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0201 	bic.w	r2, r2, #1
 800bb64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f812 	bl	800bba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d108      	bne.n	800bbc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbc4:	e031      	b.n	800bc2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbc6:	2308      	movs	r3, #8
 800bbc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbca:	2308      	movs	r3, #8
 800bbcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	0e5b      	lsrs	r3, r3, #25
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	f003 0307 	and.w	r3, r3, #7
 800bbdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	0f5b      	lsrs	r3, r3, #29
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 0307 	and.w	r3, r3, #7
 800bbec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	7b3a      	ldrb	r2, [r7, #12]
 800bbf2:	4911      	ldr	r1, [pc, #68]	@ (800bc38 <UARTEx_SetNbDataToProcess+0x94>)
 800bbf4:	5c8a      	ldrb	r2, [r1, r2]
 800bbf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbfa:	7b3a      	ldrb	r2, [r7, #12]
 800bbfc:	490f      	ldr	r1, [pc, #60]	@ (800bc3c <UARTEx_SetNbDataToProcess+0x98>)
 800bbfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc00:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	7b7a      	ldrb	r2, [r7, #13]
 800bc10:	4909      	ldr	r1, [pc, #36]	@ (800bc38 <UARTEx_SetNbDataToProcess+0x94>)
 800bc12:	5c8a      	ldrb	r2, [r1, r2]
 800bc14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc18:	7b7a      	ldrb	r2, [r7, #13]
 800bc1a:	4908      	ldr	r1, [pc, #32]	@ (800bc3c <UARTEx_SetNbDataToProcess+0x98>)
 800bc1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc2a:	bf00      	nop
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	080106e0 	.word	0x080106e0
 800bc3c:	080106e8 	.word	0x080106e8

0800bc40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc50:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bc54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b085      	sub	sp, #20
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bc7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	43db      	mvns	r3, r3
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	1d3b      	adds	r3, r7, #4
 800bcae:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b0a7      	sub	sp, #156	@ 0x9c
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bd02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd06:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	78db      	ldrb	r3, [r3, #3]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d81f      	bhi.n	800bd52 <USB_ActivateEndpoint+0x72>
 800bd12:	a201      	add	r2, pc, #4	@ (adr r2, 800bd18 <USB_ActivateEndpoint+0x38>)
 800bd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd45 	.word	0x0800bd45
 800bd20:	0800bd5b 	.word	0x0800bd5b
 800bd24:	0800bd37 	.word	0x0800bd37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bd28:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd30:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bd34:	e012      	b.n	800bd5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bd36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd3a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bd3e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bd42:	e00b      	b.n	800bd5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bd44:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd4c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bd50:	e004      	b.n	800bd5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800bd58:	e000      	b.n	800bd5c <USB_ActivateEndpoint+0x7c>
      break;
 800bd5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	441a      	add	r2, r3
 800bd66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bd6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	b21b      	sxth	r3, r3
 800bd8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd96:	b21a      	sxth	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b21b      	sxth	r3, r3
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	b21b      	sxth	r3, r3
 800bda2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	441a      	add	r2, r3
 800bdb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bdb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	7b1b      	ldrb	r3, [r3, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f040 8180 	bne.w	800c0d2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 8084 	beq.w	800bee4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	461a      	mov	r2, r3
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	4413      	add	r3, r2
 800bdee:	61bb      	str	r3, [r7, #24]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	00da      	lsls	r2, r3, #3
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	88db      	ldrh	r3, [r3, #6]
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	b29b      	uxth	r3, r3
 800be08:	005b      	lsls	r3, r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	827b      	strh	r3, [r7, #18]
 800be1e:	8a7b      	ldrh	r3, [r7, #18]
 800be20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01b      	beq.n	800be60 <USB_ActivateEndpoint+0x180>
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	b29b      	uxth	r3, r3
 800be36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be3e:	823b      	strh	r3, [r7, #16]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	441a      	add	r2, r3
 800be4a:	8a3b      	ldrh	r3, [r7, #16]
 800be4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	78db      	ldrb	r3, [r3, #3]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d020      	beq.n	800beaa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be7e:	81bb      	strh	r3, [r7, #12]
 800be80:	89bb      	ldrh	r3, [r7, #12]
 800be82:	f083 0320 	eor.w	r3, r3, #32
 800be86:	81bb      	strh	r3, [r7, #12]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	441a      	add	r2, r3
 800be92:	89bb      	ldrh	r3, [r7, #12]
 800be94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	8013      	strh	r3, [r2, #0]
 800bea8:	e3f9      	b.n	800c69e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec0:	81fb      	strh	r3, [r7, #14]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	441a      	add	r2, r3
 800becc:	89fb      	ldrh	r3, [r7, #14]
 800bece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bede:	b29b      	uxth	r3, r3
 800bee0:	8013      	strh	r3, [r2, #0]
 800bee2:	e3dc      	b.n	800c69e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800beee:	b29b      	uxth	r3, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	4413      	add	r3, r2
 800bef6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	00da      	lsls	r2, r3, #3
 800befe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf00:	4413      	add	r3, r2
 800bf02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	88db      	ldrh	r3, [r3, #6]
 800bf0c:	085b      	lsrs	r3, r3, #1
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf28:	4413      	add	r3, r2
 800bf2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00da      	lsls	r2, r3, #3
 800bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf34:	4413      	add	r3, r2
 800bf36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <USB_ActivateEndpoint+0x28a>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf66:	801a      	strh	r2, [r3, #0]
 800bf68:	e041      	b.n	800bfee <USB_ActivateEndpoint+0x30e>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf70:	d81c      	bhi.n	800bfac <USB_ActivateEndpoint+0x2cc>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	085b      	lsrs	r3, r3, #1
 800bf78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d004      	beq.n	800bf92 <USB_ActivateEndpoint+0x2b2>
 800bf88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	029b      	lsls	r3, r3, #10
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	801a      	strh	r2, [r3, #0]
 800bfaa:	e020      	b.n	800bfee <USB_ActivateEndpoint+0x30e>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	f003 031f 	and.w	r3, r3, #31
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d104      	bne.n	800bfcc <USB_ActivateEndpoint+0x2ec>
 800bfc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	029b      	lsls	r3, r3, #10
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bffc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d01b      	beq.n	800c03e <USB_ActivateEndpoint+0x35e>
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	b29b      	uxth	r3, r3
 800c014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c01c:	843b      	strh	r3, [r7, #32]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	441a      	add	r2, r3
 800c028:	8c3b      	ldrh	r3, [r7, #32]
 800c02a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c02e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d124      	bne.n	800c090 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	b29b      	uxth	r3, r3
 800c054:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05c:	83bb      	strh	r3, [r7, #28]
 800c05e:	8bbb      	ldrh	r3, [r7, #28]
 800c060:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c064:	83bb      	strh	r3, [r7, #28]
 800c066:	8bbb      	ldrh	r3, [r7, #28]
 800c068:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c06c:	83bb      	strh	r3, [r7, #28]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	441a      	add	r2, r3
 800c078:	8bbb      	ldrh	r3, [r7, #28]
 800c07a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c07e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	8013      	strh	r3, [r2, #0]
 800c08e:	e306      	b.n	800c69e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0a6:	83fb      	strh	r3, [r7, #30]
 800c0a8:	8bfb      	ldrh	r3, [r7, #30]
 800c0aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0ae:	83fb      	strh	r3, [r7, #30]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	441a      	add	r2, r3
 800c0ba:	8bfb      	ldrh	r3, [r7, #30]
 800c0bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	8013      	strh	r3, [r2, #0]
 800c0d0:	e2e5      	b.n	800c69e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	78db      	ldrb	r3, [r3, #3]
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d11e      	bne.n	800c118 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0f0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	441a      	add	r2, r3
 800c0fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c10a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c112:	b29b      	uxth	r3, r3
 800c114:	8013      	strh	r3, [r2, #0]
 800c116:	e01d      	b.n	800c154 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	881b      	ldrh	r3, [r3, #0]
 800c124:	b29b      	uxth	r3, r3
 800c126:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c12a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c12e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	441a      	add	r2, r3
 800c13c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c150:	b29b      	uxth	r3, r3
 800c152:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c15e:	b29b      	uxth	r3, r3
 800c160:	461a      	mov	r2, r3
 800c162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c164:	4413      	add	r3, r2
 800c166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	00da      	lsls	r2, r3, #3
 800c16e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c170:	4413      	add	r3, r2
 800c172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c176:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	891b      	ldrh	r3, [r3, #8]
 800c17c:	085b      	lsrs	r3, r3, #1
 800c17e:	b29b      	uxth	r3, r3
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	b29a      	uxth	r2, r3
 800c184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c186:	801a      	strh	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c192:	b29b      	uxth	r3, r3
 800c194:	461a      	mov	r2, r3
 800c196:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c198:	4413      	add	r3, r2
 800c19a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	00da      	lsls	r2, r3, #3
 800c1a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c1aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	895b      	ldrh	r3, [r3, #10]
 800c1b0:	085b      	lsrs	r3, r3, #1
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	785b      	ldrb	r3, [r3, #1]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f040 81af 	bne.w	800c524 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c1d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c1da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d01d      	beq.n	800c21e <USB_ActivateEndpoint+0x53e>
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1f8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	441a      	add	r2, r3
 800c206:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c20a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c20e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c212:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c22e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c236:	2b00      	cmp	r3, #0
 800c238:	d01d      	beq.n	800c276 <USB_ActivateEndpoint+0x596>
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	b29b      	uxth	r3, r3
 800c248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c24c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c250:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	441a      	add	r2, r3
 800c25e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c26a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c26e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c272:	b29b      	uxth	r3, r3
 800c274:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d16b      	bne.n	800c356 <USB_ActivateEndpoint+0x676>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c288:	b29b      	uxth	r3, r3
 800c28a:	461a      	mov	r2, r3
 800c28c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c28e:	4413      	add	r3, r2
 800c290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	00da      	lsls	r2, r3, #3
 800c298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c29a:	4413      	add	r3, r2
 800c29c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2b0:	801a      	strh	r2, [r3, #0]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10a      	bne.n	800c2d0 <USB_ActivateEndpoint+0x5f0>
 800c2ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2cc:	801a      	strh	r2, [r3, #0]
 800c2ce:	e05d      	b.n	800c38c <USB_ActivateEndpoint+0x6ac>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2d6:	d81c      	bhi.n	800c312 <USB_ActivateEndpoint+0x632>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	085b      	lsrs	r3, r3, #1
 800c2de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <USB_ActivateEndpoint+0x618>
 800c2ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c302:	b29b      	uxth	r3, r3
 800c304:	029b      	lsls	r3, r3, #10
 800c306:	b29b      	uxth	r3, r3
 800c308:	4313      	orrs	r3, r2
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c30e:	801a      	strh	r2, [r3, #0]
 800c310:	e03c      	b.n	800c38c <USB_ActivateEndpoint+0x6ac>
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	095b      	lsrs	r3, r3, #5
 800c318:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	f003 031f 	and.w	r3, r3, #31
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <USB_ActivateEndpoint+0x652>
 800c328:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c32c:	3b01      	subs	r3, #1
 800c32e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	b29a      	uxth	r2, r3
 800c338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	029b      	lsls	r3, r3, #10
 800c340:	b29b      	uxth	r3, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	b29b      	uxth	r3, r3
 800c346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c34a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c34e:	b29a      	uxth	r2, r3
 800c350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c352:	801a      	strh	r2, [r3, #0]
 800c354:	e01a      	b.n	800c38c <USB_ActivateEndpoint+0x6ac>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	785b      	ldrb	r3, [r3, #1]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d116      	bne.n	800c38c <USB_ActivateEndpoint+0x6ac>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	657b      	str	r3, [r7, #84]	@ 0x54
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c368:	b29b      	uxth	r3, r3
 800c36a:	461a      	mov	r2, r3
 800c36c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c36e:	4413      	add	r3, r2
 800c370:	657b      	str	r3, [r7, #84]	@ 0x54
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	00da      	lsls	r2, r3, #3
 800c378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c37a:	4413      	add	r3, r2
 800c37c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c380:	653b      	str	r3, [r7, #80]	@ 0x50
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	b29a      	uxth	r2, r3
 800c388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c38a:	801a      	strh	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d16b      	bne.n	800c470 <USB_ActivateEndpoint+0x790>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a8:	4413      	add	r3, r2
 800c3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	00da      	lsls	r2, r3, #3
 800c3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ca:	801a      	strh	r2, [r3, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10a      	bne.n	800c3ea <USB_ActivateEndpoint+0x70a>
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e6:	801a      	strh	r2, [r3, #0]
 800c3e8:	e05b      	b.n	800c4a2 <USB_ActivateEndpoint+0x7c2>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3f0:	d81c      	bhi.n	800c42c <USB_ActivateEndpoint+0x74c>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	085b      	lsrs	r3, r3, #1
 800c3f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <USB_ActivateEndpoint+0x732>
 800c408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c40c:	3301      	adds	r3, #1
 800c40e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	b29a      	uxth	r2, r3
 800c418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	029b      	lsls	r3, r3, #10
 800c420:	b29b      	uxth	r3, r3
 800c422:	4313      	orrs	r3, r2
 800c424:	b29a      	uxth	r2, r3
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	801a      	strh	r2, [r3, #0]
 800c42a:	e03a      	b.n	800c4a2 <USB_ActivateEndpoint+0x7c2>
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	095b      	lsrs	r3, r3, #5
 800c432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	f003 031f 	and.w	r3, r3, #31
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d104      	bne.n	800c44c <USB_ActivateEndpoint+0x76c>
 800c442:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c446:	3b01      	subs	r3, #1
 800c448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	b29a      	uxth	r2, r3
 800c452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c456:	b29b      	uxth	r3, r3
 800c458:	029b      	lsls	r3, r3, #10
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4313      	orrs	r3, r2
 800c45e:	b29b      	uxth	r3, r3
 800c460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c468:	b29a      	uxth	r2, r3
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	801a      	strh	r2, [r3, #0]
 800c46e:	e018      	b.n	800c4a2 <USB_ActivateEndpoint+0x7c2>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d114      	bne.n	800c4a2 <USB_ActivateEndpoint+0x7c2>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c47e:	b29b      	uxth	r3, r3
 800c480:	461a      	mov	r2, r3
 800c482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c484:	4413      	add	r3, r2
 800c486:	647b      	str	r3, [r7, #68]	@ 0x44
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	00da      	lsls	r2, r3, #3
 800c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c490:	4413      	add	r3, r2
 800c492:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c496:	643b      	str	r3, [r7, #64]	@ 0x40
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c4ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c4c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	441a      	add	r2, r3
 800c4d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c500:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	441a      	add	r2, r3
 800c50c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c50e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c51e:	b29b      	uxth	r3, r3
 800c520:	8013      	strh	r3, [r2, #0]
 800c522:	e0bc      	b.n	800c69e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c534:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d01d      	beq.n	800c57c <USB_ActivateEndpoint+0x89c>
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	881b      	ldrh	r3, [r3, #0]
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c556:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	441a      	add	r2, r3
 800c564:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c56c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c578:	b29b      	uxth	r3, r3
 800c57a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c58c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01d      	beq.n	800c5d4 <USB_ActivateEndpoint+0x8f4>
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ae:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	441a      	add	r2, r3
 800c5bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c5c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	78db      	ldrb	r3, [r3, #3]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d024      	beq.n	800c626 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c5f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c5fa:	f083 0320 	eor.w	r3, r3, #32
 800c5fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	441a      	add	r2, r3
 800c60c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c61c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c620:	b29b      	uxth	r3, r3
 800c622:	8013      	strh	r3, [r2, #0]
 800c624:	e01d      	b.n	800c662 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	b29b      	uxth	r3, r3
 800c634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c63c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	441a      	add	r2, r3
 800c64a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c64e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c65a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65e:	b29b      	uxth	r3, r3
 800c660:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c678:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	441a      	add	r2, r3
 800c686:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c68a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c68e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c69e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	379c      	adds	r7, #156	@ 0x9c
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b08d      	sub	sp, #52	@ 0x34
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	7b1b      	ldrb	r3, [r3, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f040 808e 	bne.w	800c7e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	785b      	ldrb	r3, [r3, #1]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d044      	beq.n	800c756 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	81bb      	strh	r3, [r7, #12]
 800c6da:	89bb      	ldrh	r3, [r7, #12]
 800c6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d01b      	beq.n	800c71c <USB_DeactivateEndpoint+0x6c>
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6fa:	817b      	strh	r3, [r7, #10]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	441a      	add	r2, r3
 800c706:	897b      	ldrh	r3, [r7, #10]
 800c708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c70c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c714:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c718:	b29b      	uxth	r3, r3
 800c71a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c72e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c732:	813b      	strh	r3, [r7, #8]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	441a      	add	r2, r3
 800c73e:	893b      	ldrh	r3, [r7, #8]
 800c740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c74c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c750:	b29b      	uxth	r3, r3
 800c752:	8013      	strh	r3, [r2, #0]
 800c754:	e192      	b.n	800ca7c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	827b      	strh	r3, [r7, #18]
 800c764:	8a7b      	ldrh	r3, [r7, #18]
 800c766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d01b      	beq.n	800c7a6 <USB_DeactivateEndpoint+0xf6>
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c784:	823b      	strh	r3, [r7, #16]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	441a      	add	r2, r3
 800c790:	8a3b      	ldrh	r3, [r7, #16]
 800c792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c79a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4413      	add	r3, r2
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7bc:	81fb      	strh	r3, [r7, #14]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	441a      	add	r2, r3
 800c7c8:	89fb      	ldrh	r3, [r7, #14]
 800c7ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	8013      	strh	r3, [r2, #0]
 800c7de:	e14d      	b.n	800ca7c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	785b      	ldrb	r3, [r3, #1]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f040 80a5 	bne.w	800c934 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	843b      	strh	r3, [r7, #32]
 800c7f8:	8c3b      	ldrh	r3, [r7, #32]
 800c7fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d01b      	beq.n	800c83a <USB_DeactivateEndpoint+0x18a>
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	b29b      	uxth	r3, r3
 800c810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c818:	83fb      	strh	r3, [r7, #30]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	441a      	add	r2, r3
 800c824:	8bfb      	ldrh	r3, [r7, #30]
 800c826:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c82a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c82e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c836:	b29b      	uxth	r3, r3
 800c838:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	83bb      	strh	r3, [r7, #28]
 800c848:	8bbb      	ldrh	r3, [r7, #28]
 800c84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d01b      	beq.n	800c88a <USB_DeactivateEndpoint+0x1da>
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c868:	837b      	strh	r3, [r7, #26]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	441a      	add	r2, r3
 800c874:	8b7b      	ldrh	r3, [r7, #26]
 800c876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c87a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c87e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c882:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c886:	b29b      	uxth	r3, r3
 800c888:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	b29b      	uxth	r3, r3
 800c898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8a0:	833b      	strh	r3, [r7, #24]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	441a      	add	r2, r3
 800c8ac:	8b3b      	ldrh	r3, [r7, #24]
 800c8ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8d8:	82fb      	strh	r3, [r7, #22]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	8afb      	ldrh	r3, [r7, #22]
 800c8e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b29b      	uxth	r3, r3
 800c908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c90c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c910:	82bb      	strh	r3, [r7, #20]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	441a      	add	r2, r3
 800c91c:	8abb      	ldrh	r3, [r7, #20]
 800c91e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c92a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c92e:	b29b      	uxth	r3, r3
 800c930:	8013      	strh	r3, [r2, #0]
 800c932:	e0a3      	b.n	800ca7c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c942:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01b      	beq.n	800c984 <USB_DeactivateEndpoint+0x2d4>
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c95e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c962:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	441a      	add	r2, r3
 800c96e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c97c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c980:	b29b      	uxth	r3, r3
 800c982:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c992:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01b      	beq.n	800c9d4 <USB_DeactivateEndpoint+0x324>
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	441a      	add	r2, r3
 800c9be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c9c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	441a      	add	r2, r3
 800c9f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	441a      	add	r2, r3
 800ca2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	441a      	add	r2, r3
 800ca66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3734      	adds	r7, #52	@ 0x34
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b0ac      	sub	sp, #176	@ 0xb0
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	f040 84ca 	bne.w	800d432 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d904      	bls.n	800cab4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cab2:	e003      	b.n	800cabc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	7b1b      	ldrb	r3, [r3, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d122      	bne.n	800cb0a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6959      	ldr	r1, [r3, #20]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	88da      	ldrh	r2, [r3, #6]
 800cacc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 febd 	bl	800d852 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	613b      	str	r3, [r7, #16]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	461a      	mov	r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4413      	add	r3, r2
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	00da      	lsls	r2, r3, #3
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	4413      	add	r3, r2
 800caf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	801a      	strh	r2, [r3, #0]
 800cb06:	f000 bc6f 	b.w	800d3e8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	78db      	ldrb	r3, [r3, #3]
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	f040 831e 	bne.w	800d150 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	6a1a      	ldr	r2, [r3, #32]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	f240 82cf 	bls.w	800d0c0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	441a      	add	r2, r3
 800cb46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cb4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cb56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	6a1a      	ldr	r2, [r3, #32]
 800cb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb66:	1ad2      	subs	r2, r2, r3
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	881b      	ldrh	r3, [r3, #0]
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 814f 	beq.w	800ce22 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	785b      	ldrb	r3, [r3, #1]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d16b      	bne.n	800cc68 <USB_EPStartXfer+0x1de>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	4413      	add	r3, r2
 800cba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	00da      	lsls	r2, r3, #3
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	4413      	add	r3, r2
 800cbae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cbb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc2:	801a      	strh	r2, [r3, #0]
 800cbc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10a      	bne.n	800cbe2 <USB_EPStartXfer+0x158>
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	801a      	strh	r2, [r3, #0]
 800cbe0:	e05b      	b.n	800cc9a <USB_EPStartXfer+0x210>
 800cbe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbe6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbe8:	d81c      	bhi.n	800cc24 <USB_EPStartXfer+0x19a>
 800cbea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbee:	085b      	lsrs	r3, r3, #1
 800cbf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cbf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <USB_EPStartXfer+0x180>
 800cc00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc04:	3301      	adds	r3, #1
 800cc06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	029b      	lsls	r3, r3, #10
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc20:	801a      	strh	r2, [r3, #0]
 800cc22:	e03a      	b.n	800cc9a <USB_EPStartXfer+0x210>
 800cc24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc28:	095b      	lsrs	r3, r3, #5
 800cc2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc32:	f003 031f 	and.w	r3, r3, #31
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d104      	bne.n	800cc44 <USB_EPStartXfer+0x1ba>
 800cc3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	029b      	lsls	r3, r3, #10
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	4313      	orrs	r3, r2
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	801a      	strh	r2, [r3, #0]
 800cc66:	e018      	b.n	800cc9a <USB_EPStartXfer+0x210>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	785b      	ldrb	r3, [r3, #1]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d114      	bne.n	800cc9a <USB_EPStartXfer+0x210>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	461a      	mov	r2, r3
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7c:	4413      	add	r3, r2
 800cc7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	00da      	lsls	r2, r3, #3
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	4413      	add	r3, r2
 800cc8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	895b      	ldrh	r3, [r3, #10]
 800cc9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	6959      	ldr	r1, [r3, #20]
 800cca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fdce 	bl	800d852 <USB_WritePMA>
            ep->xfer_buff += len;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	695a      	ldr	r2, [r3, #20]
 800ccba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccbe:	441a      	add	r2, r3
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	6a1a      	ldr	r2, [r3, #32]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d907      	bls.n	800cce0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	6a1a      	ldr	r2, [r3, #32]
 800ccd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccd8:	1ad2      	subs	r2, r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	621a      	str	r2, [r3, #32]
 800ccde:	e006      	b.n	800ccee <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	6a1b      	ldr	r3, [r3, #32]
 800cce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	785b      	ldrb	r3, [r3, #1]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d16b      	bne.n	800cdce <USB_EPStartXfer+0x344>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	461a      	mov	r2, r3
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	4413      	add	r3, r2
 800cd08:	61bb      	str	r3, [r7, #24]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	00da      	lsls	r2, r3, #3
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	4413      	add	r3, r2
 800cd14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	801a      	strh	r2, [r3, #0]
 800cd2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10a      	bne.n	800cd48 <USB_EPStartXfer+0x2be>
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	801a      	strh	r2, [r3, #0]
 800cd46:	e05d      	b.n	800ce04 <USB_EPStartXfer+0x37a>
 800cd48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd4e:	d81c      	bhi.n	800cd8a <USB_EPStartXfer+0x300>
 800cd50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd54:	085b      	lsrs	r3, r3, #1
 800cd56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d004      	beq.n	800cd70 <USB_EPStartXfer+0x2e6>
 800cd66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	029b      	lsls	r3, r3, #10
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	801a      	strh	r2, [r3, #0]
 800cd88:	e03c      	b.n	800ce04 <USB_EPStartXfer+0x37a>
 800cd8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd8e:	095b      	lsrs	r3, r3, #5
 800cd90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd98:	f003 031f 	and.w	r3, r3, #31
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d104      	bne.n	800cdaa <USB_EPStartXfer+0x320>
 800cda0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cda4:	3b01      	subs	r3, #1
 800cda6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	881b      	ldrh	r3, [r3, #0]
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	029b      	lsls	r3, r3, #10
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	801a      	strh	r2, [r3, #0]
 800cdcc:	e01a      	b.n	800ce04 <USB_EPStartXfer+0x37a>
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d116      	bne.n	800ce04 <USB_EPStartXfer+0x37a>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	623b      	str	r3, [r7, #32]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	461a      	mov	r2, r3
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	4413      	add	r3, r2
 800cde8:	623b      	str	r3, [r7, #32]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	00da      	lsls	r2, r3, #3
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cdf8:	61fb      	str	r3, [r7, #28]
 800cdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	891b      	ldrh	r3, [r3, #8]
 800ce08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	6959      	ldr	r1, [r3, #20]
 800ce10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fd19 	bl	800d852 <USB_WritePMA>
 800ce20:	e2e2      	b.n	800d3e8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d16b      	bne.n	800cf02 <USB_EPStartXfer+0x478>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce3a:	4413      	add	r3, r2
 800ce3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	00da      	lsls	r2, r3, #3
 800ce44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce46:	4413      	add	r3, r2
 800ce48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce50:	881b      	ldrh	r3, [r3, #0]
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce5c:	801a      	strh	r2, [r3, #0]
 800ce5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10a      	bne.n	800ce7c <USB_EPStartXfer+0x3f2>
 800ce66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce78:	801a      	strh	r2, [r3, #0]
 800ce7a:	e05d      	b.n	800cf38 <USB_EPStartXfer+0x4ae>
 800ce7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce80:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce82:	d81c      	bhi.n	800cebe <USB_EPStartXfer+0x434>
 800ce84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce88:	085b      	lsrs	r3, r3, #1
 800ce8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d004      	beq.n	800cea4 <USB_EPStartXfer+0x41a>
 800ce9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce9e:	3301      	adds	r3, #1
 800cea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	029b      	lsls	r3, r3, #10
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceba:	801a      	strh	r2, [r3, #0]
 800cebc:	e03c      	b.n	800cf38 <USB_EPStartXfer+0x4ae>
 800cebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cec2:	095b      	lsrs	r3, r3, #5
 800cec4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cecc:	f003 031f 	and.w	r3, r3, #31
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d104      	bne.n	800cede <USB_EPStartXfer+0x454>
 800ced4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ced8:	3b01      	subs	r3, #1
 800ceda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	029b      	lsls	r3, r3, #10
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	4313      	orrs	r3, r2
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cefe:	801a      	strh	r2, [r3, #0]
 800cf00:	e01a      	b.n	800cf38 <USB_EPStartXfer+0x4ae>
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d116      	bne.n	800cf38 <USB_EPStartXfer+0x4ae>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	461a      	mov	r2, r3
 800cf18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf1a:	4413      	add	r3, r2
 800cf1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	00da      	lsls	r2, r3, #3
 800cf24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf26:	4413      	add	r3, r2
 800cf28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	891b      	ldrh	r3, [r3, #8]
 800cf3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	6959      	ldr	r1, [r3, #20]
 800cf44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fc7f 	bl	800d852 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	695a      	ldr	r2, [r3, #20]
 800cf58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf5c:	441a      	add	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	6a1a      	ldr	r2, [r3, #32]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	691b      	ldr	r3, [r3, #16]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d907      	bls.n	800cf7e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	6a1a      	ldr	r2, [r3, #32]
 800cf72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf76:	1ad2      	subs	r2, r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	621a      	str	r2, [r3, #32]
 800cf7c:	e006      	b.n	800cf8c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	6a1b      	ldr	r3, [r3, #32]
 800cf82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d16b      	bne.n	800d070 <USB_EPStartXfer+0x5e6>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa8:	4413      	add	r3, r2
 800cfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	00da      	lsls	r2, r3, #3
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfca:	801a      	strh	r2, [r3, #0]
 800cfcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <USB_EPStartXfer+0x560>
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe6:	801a      	strh	r2, [r3, #0]
 800cfe8:	e05b      	b.n	800d0a2 <USB_EPStartXfer+0x618>
 800cfea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfee:	2b3e      	cmp	r3, #62	@ 0x3e
 800cff0:	d81c      	bhi.n	800d02c <USB_EPStartXfer+0x5a2>
 800cff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cff6:	085b      	lsrs	r3, r3, #1
 800cff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <USB_EPStartXfer+0x588>
 800d008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d00c:	3301      	adds	r3, #1
 800d00e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	b29a      	uxth	r2, r3
 800d018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	029b      	lsls	r3, r3, #10
 800d020:	b29b      	uxth	r3, r3
 800d022:	4313      	orrs	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d028:	801a      	strh	r2, [r3, #0]
 800d02a:	e03a      	b.n	800d0a2 <USB_EPStartXfer+0x618>
 800d02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d030:	095b      	lsrs	r3, r3, #5
 800d032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d03a:	f003 031f 	and.w	r3, r3, #31
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d104      	bne.n	800d04c <USB_EPStartXfer+0x5c2>
 800d042:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d046:	3b01      	subs	r3, #1
 800d048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	b29a      	uxth	r2, r3
 800d052:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d056:	b29b      	uxth	r3, r3
 800d058:	029b      	lsls	r3, r3, #10
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	b29b      	uxth	r3, r3
 800d060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d068:	b29a      	uxth	r2, r3
 800d06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d06c:	801a      	strh	r2, [r3, #0]
 800d06e:	e018      	b.n	800d0a2 <USB_EPStartXfer+0x618>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d114      	bne.n	800d0a2 <USB_EPStartXfer+0x618>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d07e:	b29b      	uxth	r3, r3
 800d080:	461a      	mov	r2, r3
 800d082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d084:	4413      	add	r3, r2
 800d086:	643b      	str	r3, [r7, #64]	@ 0x40
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	00da      	lsls	r2, r3, #3
 800d08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d090:	4413      	add	r3, r2
 800d092:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	895b      	ldrh	r3, [r3, #10]
 800d0a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	6959      	ldr	r1, [r3, #20]
 800d0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fbca 	bl	800d852 <USB_WritePMA>
 800d0be:	e193      	b.n	800d3e8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	6a1b      	ldr	r3, [r3, #32]
 800d0c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	881b      	ldrh	r3, [r3, #0]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0de:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	441a      	add	r2, r3
 800d0ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d0f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d100:	b29b      	uxth	r3, r3
 800d102:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d10e:	b29b      	uxth	r3, r3
 800d110:	461a      	mov	r2, r3
 800d112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d114:	4413      	add	r3, r2
 800d116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	00da      	lsls	r2, r3, #3
 800d11e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d120:	4413      	add	r3, r2
 800d122:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d126:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d130:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	891b      	ldrh	r3, [r3, #8]
 800d136:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	6959      	ldr	r1, [r3, #20]
 800d13e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d142:	b29b      	uxth	r3, r3
 800d144:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fb82 	bl	800d852 <USB_WritePMA>
 800d14e:	e14b      	b.n	800d3e8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	6a1a      	ldr	r2, [r3, #32]
 800d154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d158:	1ad2      	subs	r2, r2, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 809a 	beq.w	800d2aa <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	673b      	str	r3, [r7, #112]	@ 0x70
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	785b      	ldrb	r3, [r3, #1]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d16b      	bne.n	800d25a <USB_EPStartXfer+0x7d0>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	461a      	mov	r2, r3
 800d190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d192:	4413      	add	r3, r2
 800d194:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	00da      	lsls	r2, r3, #3
 800d19c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d19e:	4413      	add	r3, r2
 800d1a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d1a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10a      	bne.n	800d1d4 <USB_EPStartXfer+0x74a>
 800d1be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1d0:	801a      	strh	r2, [r3, #0]
 800d1d2:	e05b      	b.n	800d28c <USB_EPStartXfer+0x802>
 800d1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1da:	d81c      	bhi.n	800d216 <USB_EPStartXfer+0x78c>
 800d1dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1e0:	085b      	lsrs	r3, r3, #1
 800d1e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d004      	beq.n	800d1fc <USB_EPStartXfer+0x772>
 800d1f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	b29a      	uxth	r2, r3
 800d202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d206:	b29b      	uxth	r3, r3
 800d208:	029b      	lsls	r3, r3, #10
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	4313      	orrs	r3, r2
 800d20e:	b29a      	uxth	r2, r3
 800d210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d212:	801a      	strh	r2, [r3, #0]
 800d214:	e03a      	b.n	800d28c <USB_EPStartXfer+0x802>
 800d216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d21a:	095b      	lsrs	r3, r3, #5
 800d21c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d224:	f003 031f 	and.w	r3, r3, #31
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d104      	bne.n	800d236 <USB_EPStartXfer+0x7ac>
 800d22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d230:	3b01      	subs	r3, #1
 800d232:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d240:	b29b      	uxth	r3, r3
 800d242:	029b      	lsls	r3, r3, #10
 800d244:	b29b      	uxth	r3, r3
 800d246:	4313      	orrs	r3, r2
 800d248:	b29b      	uxth	r3, r3
 800d24a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d24e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d252:	b29a      	uxth	r2, r3
 800d254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d256:	801a      	strh	r2, [r3, #0]
 800d258:	e018      	b.n	800d28c <USB_EPStartXfer+0x802>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d114      	bne.n	800d28c <USB_EPStartXfer+0x802>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d268:	b29b      	uxth	r3, r3
 800d26a:	461a      	mov	r2, r3
 800d26c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d26e:	4413      	add	r3, r2
 800d270:	673b      	str	r3, [r7, #112]	@ 0x70
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	00da      	lsls	r2, r3, #3
 800d278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d27a:	4413      	add	r3, r2
 800d27c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d280:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d286:	b29a      	uxth	r2, r3
 800d288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d28a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	6959      	ldr	r1, [r3, #20]
 800d298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fad5 	bl	800d852 <USB_WritePMA>
 800d2a8:	e09e      	b.n	800d3e8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d16b      	bne.n	800d38a <USB_EPStartXfer+0x900>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d2c2:	4413      	add	r3, r2
 800d2c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	00da      	lsls	r2, r3, #3
 800d2cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d2ce:	4413      	add	r3, r2
 800d2d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d2d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <USB_EPStartXfer+0x87a>
 800d2ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d300:	801a      	strh	r2, [r3, #0]
 800d302:	e063      	b.n	800d3cc <USB_EPStartXfer+0x942>
 800d304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d308:	2b3e      	cmp	r3, #62	@ 0x3e
 800d30a:	d81c      	bhi.n	800d346 <USB_EPStartXfer+0x8bc>
 800d30c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d004      	beq.n	800d32c <USB_EPStartXfer+0x8a2>
 800d322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d326:	3301      	adds	r3, #1
 800d328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d32c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	b29a      	uxth	r2, r3
 800d332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d336:	b29b      	uxth	r3, r3
 800d338:	029b      	lsls	r3, r3, #10
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	4313      	orrs	r3, r2
 800d33e:	b29a      	uxth	r2, r3
 800d340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d342:	801a      	strh	r2, [r3, #0]
 800d344:	e042      	b.n	800d3cc <USB_EPStartXfer+0x942>
 800d346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d34a:	095b      	lsrs	r3, r3, #5
 800d34c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d354:	f003 031f 	and.w	r3, r3, #31
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d104      	bne.n	800d366 <USB_EPStartXfer+0x8dc>
 800d35c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d360:	3b01      	subs	r3, #1
 800d362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d370:	b29b      	uxth	r3, r3
 800d372:	029b      	lsls	r3, r3, #10
 800d374:	b29b      	uxth	r3, r3
 800d376:	4313      	orrs	r3, r2
 800d378:	b29b      	uxth	r3, r3
 800d37a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d37e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d382:	b29a      	uxth	r2, r3
 800d384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d386:	801a      	strh	r2, [r3, #0]
 800d388:	e020      	b.n	800d3cc <USB_EPStartXfer+0x942>
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d11c      	bne.n	800d3cc <USB_EPStartXfer+0x942>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	00da      	lsls	r2, r3, #3
 800d3b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d3ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	891b      	ldrh	r3, [r3, #8]
 800d3d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	6959      	ldr	r1, [r3, #20]
 800d3d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa35 	bl	800d852 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d3fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3fe:	817b      	strh	r3, [r7, #10]
 800d400:	897b      	ldrh	r3, [r7, #10]
 800d402:	f083 0310 	eor.w	r3, r3, #16
 800d406:	817b      	strh	r3, [r7, #10]
 800d408:	897b      	ldrh	r3, [r7, #10]
 800d40a:	f083 0320 	eor.w	r3, r3, #32
 800d40e:	817b      	strh	r3, [r7, #10]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	441a      	add	r2, r3
 800d41a:	897b      	ldrh	r3, [r7, #10]
 800d41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	8013      	strh	r3, [r2, #0]
 800d430:	e0d5      	b.n	800d5de <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	7b1b      	ldrb	r3, [r3, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d156      	bne.n	800d4e8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d122      	bne.n	800d488 <USB_EPStartXfer+0x9fe>
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	78db      	ldrb	r3, [r3, #3]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d11e      	bne.n	800d488 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4413      	add	r3, r2
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	b29b      	uxth	r3, r3
 800d458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d45c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d460:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	441a      	add	r2, r3
 800d46e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d47a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d482:	b29b      	uxth	r3, r3
 800d484:	8013      	strh	r3, [r2, #0]
 800d486:	e01d      	b.n	800d4c4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	b29b      	uxth	r3, r3
 800d496:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d49a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d49e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	441a      	add	r2, r3
 800d4ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d4b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	699a      	ldr	r2, [r3, #24]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d907      	bls.n	800d4e0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	699a      	ldr	r2, [r3, #24]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	1ad2      	subs	r2, r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	619a      	str	r2, [r3, #24]
 800d4de:	e054      	b.n	800d58a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	619a      	str	r2, [r3, #24]
 800d4e6:	e050      	b.n	800d58a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	78db      	ldrb	r3, [r3, #3]
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	d142      	bne.n	800d576 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d048      	beq.n	800d58a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	4413      	add	r3, r2
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d508:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d50c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d510:	2b00      	cmp	r3, #0
 800d512:	d005      	beq.n	800d520 <USB_EPStartXfer+0xa96>
 800d514:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10b      	bne.n	800d538 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d520:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d12e      	bne.n	800d58a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d52c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d534:	2b00      	cmp	r3, #0
 800d536:	d128      	bne.n	800d58a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	b29b      	uxth	r3, r3
 800d546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d54a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d54e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	441a      	add	r2, r3
 800d55c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d56c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d570:	b29b      	uxth	r3, r3
 800d572:	8013      	strh	r3, [r2, #0]
 800d574:	e009      	b.n	800d58a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	78db      	ldrb	r3, [r3, #3]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d103      	bne.n	800d586 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2200      	movs	r2, #0
 800d582:	619a      	str	r2, [r3, #24]
 800d584:	e001      	b.n	800d58a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e02a      	b.n	800d5e0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4413      	add	r3, r2
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d59c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d5a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d5a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d5b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d5b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d5b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	441a      	add	r2, r3
 800d5c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d5ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	37b0      	adds	r7, #176	@ 0xb0
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	785b      	ldrb	r3, [r3, #1]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d020      	beq.n	800d63c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4413      	add	r3, r2
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	b29b      	uxth	r3, r3
 800d608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d60c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d610:	81bb      	strh	r3, [r7, #12]
 800d612:	89bb      	ldrh	r3, [r7, #12]
 800d614:	f083 0310 	eor.w	r3, r3, #16
 800d618:	81bb      	strh	r3, [r7, #12]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	441a      	add	r2, r3
 800d624:	89bb      	ldrh	r3, [r7, #12]
 800d626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d62a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d62e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d636:	b29b      	uxth	r3, r3
 800d638:	8013      	strh	r3, [r2, #0]
 800d63a:	e01f      	b.n	800d67c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4413      	add	r3, r2
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d64e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d652:	81fb      	strh	r3, [r7, #14]
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d65a:	81fb      	strh	r3, [r7, #14]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	441a      	add	r2, r3
 800d666:	89fb      	ldrh	r3, [r7, #14]
 800d668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d66c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d678:	b29b      	uxth	r3, r3
 800d67a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3714      	adds	r7, #20
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b087      	sub	sp, #28
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	785b      	ldrb	r3, [r3, #1]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d04c      	beq.n	800d736 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	823b      	strh	r3, [r7, #16]
 800d6aa:	8a3b      	ldrh	r3, [r7, #16]
 800d6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01b      	beq.n	800d6ec <USB_EPClearStall+0x62>
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ca:	81fb      	strh	r3, [r7, #14]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	441a      	add	r2, r3
 800d6d6:	89fb      	ldrh	r3, [r7, #14]
 800d6d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d06c      	beq.n	800d7ce <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	b29b      	uxth	r3, r3
 800d702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d70a:	81bb      	strh	r3, [r7, #12]
 800d70c:	89bb      	ldrh	r3, [r7, #12]
 800d70e:	f083 0320 	eor.w	r3, r3, #32
 800d712:	81bb      	strh	r3, [r7, #12]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	009b      	lsls	r3, r3, #2
 800d71c:	441a      	add	r2, r3
 800d71e:	89bb      	ldrh	r3, [r7, #12]
 800d720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d730:	b29b      	uxth	r3, r3
 800d732:	8013      	strh	r3, [r2, #0]
 800d734:	e04b      	b.n	800d7ce <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	82fb      	strh	r3, [r7, #22]
 800d744:	8afb      	ldrh	r3, [r7, #22]
 800d746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d01b      	beq.n	800d786 <USB_EPClearStall+0xfc>
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d764:	82bb      	strh	r3, [r7, #20]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	441a      	add	r2, r3
 800d770:	8abb      	ldrh	r3, [r7, #20]
 800d772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d77a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d77e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d782:	b29b      	uxth	r3, r3
 800d784:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	4413      	add	r3, r2
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	b29b      	uxth	r3, r3
 800d794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d79c:	827b      	strh	r3, [r7, #18]
 800d79e:	8a7b      	ldrh	r3, [r7, #18]
 800d7a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d7a4:	827b      	strh	r3, [r7, #18]
 800d7a6:	8a7b      	ldrh	r3, [r7, #18]
 800d7a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7ac:	827b      	strh	r3, [r7, #18]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	441a      	add	r2, r3
 800d7b8:	8a7b      	ldrh	r3, [r7, #18]
 800d7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	371c      	adds	r7, #28
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d7e8:	78fb      	ldrb	r3, [r7, #3]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d103      	bne.n	800d7f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2280      	movs	r2, #128	@ 0x80
 800d7f2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d812:	b29b      	uxth	r3, r3
 800d814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d832:	b480      	push	{r7}
 800d834:	b085      	sub	sp, #20
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d840:	b29b      	uxth	r3, r3
 800d842:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d844:	68fb      	ldr	r3, [r7, #12]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d852:	b480      	push	{r7}
 800d854:	b08b      	sub	sp, #44	@ 0x2c
 800d856:	af00      	add	r7, sp, #0
 800d858:	60f8      	str	r0, [r7, #12]
 800d85a:	60b9      	str	r1, [r7, #8]
 800d85c:	4611      	mov	r1, r2
 800d85e:	461a      	mov	r2, r3
 800d860:	460b      	mov	r3, r1
 800d862:	80fb      	strh	r3, [r7, #6]
 800d864:	4613      	mov	r3, r2
 800d866:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d868:	88bb      	ldrh	r3, [r7, #4]
 800d86a:	3301      	adds	r3, #1
 800d86c:	085b      	lsrs	r3, r3, #1
 800d86e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d878:	88fa      	ldrh	r2, [r7, #6]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	4413      	add	r3, r2
 800d87e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d882:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	627b      	str	r3, [r7, #36]	@ 0x24
 800d888:	e01b      	b.n	800d8c2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	3301      	adds	r3, #1
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	b21a      	sxth	r2, r3
 800d89a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	b21b      	sxth	r3, r3
 800d8a2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	8a7a      	ldrh	r2, [r7, #18]
 800d8a8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1e0      	bne.n	800d88a <USB_WritePMA+0x38>
  }
}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	372c      	adds	r7, #44	@ 0x2c
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b08b      	sub	sp, #44	@ 0x2c
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	80fb      	strh	r3, [r7, #6]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d8ec:	88bb      	ldrh	r3, [r7, #4]
 800d8ee:	085b      	lsrs	r3, r3, #1
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8fc:	88fa      	ldrh	r2, [r7, #6]
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	4413      	add	r3, r2
 800d902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d906:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d90c:	e018      	b.n	800d940 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	b29b      	uxth	r3, r3
 800d914:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	3302      	adds	r3, #2
 800d91a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	3301      	adds	r3, #1
 800d928:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	0a1b      	lsrs	r3, r3, #8
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	3301      	adds	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93c:	3b01      	subs	r3, #1
 800d93e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e3      	bne.n	800d90e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d946:	88bb      	ldrh	r3, [r7, #4]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	881b      	ldrh	r3, [r3, #0]
 800d956:	b29b      	uxth	r3, r3
 800d958:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	701a      	strb	r2, [r3, #0]
  }
}
 800d962:	bf00      	nop
 800d964:	372c      	adds	r7, #44	@ 0x2c
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	460b      	mov	r3, r1
 800d978:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d97a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d97e:	f002 f923 	bl	800fbc8 <USBD_static_malloc>
 800d982:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d105      	bne.n	800d996 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d992:	2302      	movs	r3, #2
 800d994:	e066      	b.n	800da64 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7c1b      	ldrb	r3, [r3, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d119      	bne.n	800d9da <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	2181      	movs	r1, #129	@ 0x81
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f001 ffb1 	bl	800f916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d9be:	2202      	movs	r2, #2
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f001 ffa7 	bl	800f916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2210      	movs	r2, #16
 800d9d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d9d8:	e016      	b.n	800da08 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9da:	2340      	movs	r3, #64	@ 0x40
 800d9dc:	2202      	movs	r2, #2
 800d9de:	2181      	movs	r1, #129	@ 0x81
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f001 ff98 	bl	800f916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9ec:	2340      	movs	r3, #64	@ 0x40
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f001 ff8f 	bl	800f916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2210      	movs	r2, #16
 800da04:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da08:	2308      	movs	r3, #8
 800da0a:	2203      	movs	r2, #3
 800da0c:	2182      	movs	r1, #130	@ 0x82
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f001 ff81 	bl	800f916 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2200      	movs	r2, #0
 800da32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7c1b      	ldrb	r3, [r3, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d109      	bne.n	800da52 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da48:	2101      	movs	r1, #1
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f002 f852 	bl	800faf4 <USBD_LL_PrepareReceive>
 800da50:	e007      	b.n	800da62 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da58:	2340      	movs	r3, #64	@ 0x40
 800da5a:	2101      	movs	r1, #1
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f002 f849 	bl	800faf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800da78:	2181      	movs	r1, #129	@ 0x81
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f001 ff71 	bl	800f962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800da86:	2101      	movs	r1, #1
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f001 ff6a 	bl	800f962 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800da96:	2182      	movs	r1, #130	@ 0x82
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f001 ff62 	bl	800f962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00e      	beq.n	800dad6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dac8:	4618      	mov	r0, r3
 800daca:	f002 f88b 	bl	800fbe4 <USBD_static_free>
    pdev->pClassData = NULL;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800daf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800daf2:	2300      	movs	r3, #0
 800daf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800db04:	2303      	movs	r3, #3
 800db06:	e0af      	b.n	800dc68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db10:	2b00      	cmp	r3, #0
 800db12:	d03f      	beq.n	800db94 <USBD_CDC_Setup+0xb4>
 800db14:	2b20      	cmp	r3, #32
 800db16:	f040 809f 	bne.w	800dc58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	88db      	ldrh	r3, [r3, #6]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d02e      	beq.n	800db80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	b25b      	sxtb	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	da16      	bge.n	800db5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800db38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	88d2      	ldrh	r2, [r2, #6]
 800db3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	88db      	ldrh	r3, [r3, #6]
 800db44:	2b07      	cmp	r3, #7
 800db46:	bf28      	it	cs
 800db48:	2307      	movcs	r3, #7
 800db4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	89fa      	ldrh	r2, [r7, #14]
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f001 facd 	bl	800f0f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800db58:	e085      	b.n	800dc66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	785a      	ldrb	r2, [r3, #1]
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	88db      	ldrh	r3, [r3, #6]
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800db70:	6939      	ldr	r1, [r7, #16]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	88db      	ldrh	r3, [r3, #6]
 800db76:	461a      	mov	r2, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f001 fae6 	bl	800f14a <USBD_CtlPrepareRx>
      break;
 800db7e:	e072      	b.n	800dc66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	683a      	ldr	r2, [r7, #0]
 800db8a:	7850      	ldrb	r0, [r2, #1]
 800db8c:	2200      	movs	r2, #0
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	4798      	blx	r3
      break;
 800db92:	e068      	b.n	800dc66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	785b      	ldrb	r3, [r3, #1]
 800db98:	2b0b      	cmp	r3, #11
 800db9a:	d852      	bhi.n	800dc42 <USBD_CDC_Setup+0x162>
 800db9c:	a201      	add	r2, pc, #4	@ (adr r2, 800dba4 <USBD_CDC_Setup+0xc4>)
 800db9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba2:	bf00      	nop
 800dba4:	0800dbd5 	.word	0x0800dbd5
 800dba8:	0800dc51 	.word	0x0800dc51
 800dbac:	0800dc43 	.word	0x0800dc43
 800dbb0:	0800dc43 	.word	0x0800dc43
 800dbb4:	0800dc43 	.word	0x0800dc43
 800dbb8:	0800dc43 	.word	0x0800dc43
 800dbbc:	0800dc43 	.word	0x0800dc43
 800dbc0:	0800dc43 	.word	0x0800dc43
 800dbc4:	0800dc43 	.word	0x0800dc43
 800dbc8:	0800dc43 	.word	0x0800dc43
 800dbcc:	0800dbff 	.word	0x0800dbff
 800dbd0:	0800dc29 	.word	0x0800dc29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d107      	bne.n	800dbf0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dbe0:	f107 030a 	add.w	r3, r7, #10
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 fa82 	bl	800f0f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dbee:	e032      	b.n	800dc56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f001 fa0c 	bl	800f010 <USBD_CtlError>
            ret = USBD_FAIL;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	75fb      	strb	r3, [r7, #23]
          break;
 800dbfc:	e02b      	b.n	800dc56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d107      	bne.n	800dc1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc0a:	f107 030d 	add.w	r3, r7, #13
 800dc0e:	2201      	movs	r2, #1
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fa6d 	bl	800f0f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc18:	e01d      	b.n	800dc56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f001 f9f7 	bl	800f010 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc22:	2303      	movs	r3, #3
 800dc24:	75fb      	strb	r3, [r7, #23]
          break;
 800dc26:	e016      	b.n	800dc56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d00f      	beq.n	800dc54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 f9ea 	bl	800f010 <USBD_CtlError>
            ret = USBD_FAIL;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dc40:	e008      	b.n	800dc54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 f9e3 	bl	800f010 <USBD_CtlError>
          ret = USBD_FAIL;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	75fb      	strb	r3, [r7, #23]
          break;
 800dc4e:	e002      	b.n	800dc56 <USBD_CDC_Setup+0x176>
          break;
 800dc50:	bf00      	nop
 800dc52:	e008      	b.n	800dc66 <USBD_CDC_Setup+0x186>
          break;
 800dc54:	bf00      	nop
      }
      break;
 800dc56:	e006      	b.n	800dc66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f001 f9d8 	bl	800f010 <USBD_CtlError>
      ret = USBD_FAIL;
 800dc60:	2303      	movs	r3, #3
 800dc62:	75fb      	strb	r3, [r7, #23]
      break;
 800dc64:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dc82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e04f      	b.n	800dd32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dc98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	440b      	add	r3, r1
 800dca8:	3318      	adds	r3, #24
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d029      	beq.n	800dd04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dcb0:	78fa      	ldrb	r2, [r7, #3]
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	440b      	add	r3, r1
 800dcbe:	3318      	adds	r3, #24
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	78f9      	ldrb	r1, [r7, #3]
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	440b      	add	r3, r1
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	4403      	add	r3, r0
 800dcd0:	3320      	adds	r3, #32
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcd8:	fb01 f303 	mul.w	r3, r1, r3
 800dcdc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d110      	bne.n	800dd04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dce2:	78fa      	ldrb	r2, [r7, #3]
 800dce4:	6879      	ldr	r1, [r7, #4]
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	440b      	add	r3, r1
 800dcf0:	3318      	adds	r3, #24
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dcf6:	78f9      	ldrb	r1, [r7, #3]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f001 fed8 	bl	800fab2 <USBD_LL_Transmit>
 800dd02:	e015      	b.n	800dd30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00b      	beq.n	800dd30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	68ba      	ldr	r2, [r7, #8]
 800dd22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	460b      	mov	r3, r1
 800dd44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e015      	b.n	800dd88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f001 fee8 	bl	800fb36 <USBD_LL_GetRxDataSize>
 800dd66:	4602      	mov	r2, r0
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dd82:	4611      	mov	r1, r2
 800dd84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dda6:	2303      	movs	r3, #3
 800dda8:	e01a      	b.n	800dde0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d014      	beq.n	800ddde <USBD_CDC_EP0_RxReady+0x4e>
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ddba:	2bff      	cmp	r3, #255	@ 0xff
 800ddbc:	d00f      	beq.n	800ddde <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	68fa      	ldr	r2, [r7, #12]
 800ddc8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ddcc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	22ff      	movs	r2, #255	@ 0xff
 800ddda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2243      	movs	r2, #67	@ 0x43
 800ddf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	20000094 	.word	0x20000094

0800de08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2243      	movs	r2, #67	@ 0x43
 800de14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800de16:	4b03      	ldr	r3, [pc, #12]	@ (800de24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	20000050 	.word	0x20000050

0800de28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2243      	movs	r2, #67	@ 0x43
 800de34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800de36:	4b03      	ldr	r3, [pc, #12]	@ (800de44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	200000d8 	.word	0x200000d8

0800de48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	220a      	movs	r2, #10
 800de54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de56:	4b03      	ldr	r3, [pc, #12]	@ (800de64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	2000000c 	.word	0x2000000c

0800de68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de78:	2303      	movs	r3, #3
 800de7a:	e004      	b.n	800de86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	683a      	ldr	r2, [r7, #0]
 800de80:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de92:	b480      	push	{r7}
 800de94:	b087      	sub	sp, #28
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dea4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800deac:	2303      	movs	r3, #3
 800deae:	e008      	b.n	800dec2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dece:	b480      	push	{r7}
 800ded0:	b085      	sub	sp, #20
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dede:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e004      	b.n	800def4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800df10:	2301      	movs	r3, #1
 800df12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800df1e:	2303      	movs	r3, #3
 800df20:	e01a      	b.n	800df58 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d114      	bne.n	800df56 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2201      	movs	r2, #1
 800df30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800df4a:	2181      	movs	r1, #129	@ 0x81
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f001 fdb0 	bl	800fab2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800df56:	7bfb      	ldrb	r3, [r7, #15]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e016      	b.n	800dfac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7c1b      	ldrb	r3, [r3, #16]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d109      	bne.n	800df9a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df90:	2101      	movs	r1, #1
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f001 fdae 	bl	800faf4 <USBD_LL_PrepareReceive>
 800df98:	e007      	b.n	800dfaa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfa0:	2340      	movs	r3, #64	@ 0x40
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f001 fda5 	bl	800faf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfaa:	2300      	movs	r3, #0
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	e01f      	b.n	800e00c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2201      	movs	r2, #1
 800dff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	79fa      	ldrb	r2, [r7, #7]
 800dffe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f001 fc0d 	bl	800f820 <USBD_LL_Init>
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e01e:	2300      	movs	r3, #0
 800e020:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e028:	2303      	movs	r3, #3
 800e02a:	e016      	b.n	800e05a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e048:	f107 020e 	add.w	r2, r7, #14
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
 800e050:	4602      	mov	r2, r0
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f001 fc38 	bl	800f8e0 <USBD_LL_Start>
 800e070:	4603      	mov	r3, r0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b083      	sub	sp, #12
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e09c:	2303      	movs	r3, #3
 800e09e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d009      	beq.n	800e0be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	78fa      	ldrb	r2, [r7, #3]
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	4798      	blx	r3
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d007      	beq.n	800e0ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	78fa      	ldrb	r2, [r7, #3]
 800e0e8:	4611      	mov	r1, r2
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	4798      	blx	r3
  }

  return USBD_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 ff46 	bl	800ef9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e11e:	461a      	mov	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e12c:	f003 031f 	and.w	r3, r3, #31
 800e130:	2b02      	cmp	r3, #2
 800e132:	d01a      	beq.n	800e16a <USBD_LL_SetupStage+0x72>
 800e134:	2b02      	cmp	r3, #2
 800e136:	d822      	bhi.n	800e17e <USBD_LL_SetupStage+0x86>
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <USBD_LL_SetupStage+0x4a>
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d00a      	beq.n	800e156 <USBD_LL_SetupStage+0x5e>
 800e140:	e01d      	b.n	800e17e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f9ee 	bl	800e52c <USBD_StdDevReq>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]
      break;
 800e154:	e020      	b.n	800e198 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fa52 	bl	800e608 <USBD_StdItfReq>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]
      break;
 800e168:	e016      	b.n	800e198 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa91 	bl	800e69a <USBD_StdEPReq>
 800e178:	4603      	mov	r3, r0
 800e17a:	73fb      	strb	r3, [r7, #15]
      break;
 800e17c:	e00c      	b.n	800e198 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e184:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	4619      	mov	r1, r3
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 fc07 	bl	800f9a0 <USBD_LL_StallEP>
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]
      break;
 800e196:	bf00      	nop
  }

  return ret;
 800e198:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b086      	sub	sp, #24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d138      	bne.n	800e228 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e1bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d14a      	bne.n	800e25e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d913      	bls.n	800e1fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	689a      	ldr	r2, [r3, #8]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	1ad2      	subs	r2, r2, r3
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	68da      	ldr	r2, [r3, #12]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	bf28      	it	cs
 800e1ee:	4613      	movcs	r3, r2
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 ffc5 	bl	800f184 <USBD_CtlContinueRx>
 800e1fa:	e030      	b.n	800e25e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b03      	cmp	r3, #3
 800e206:	d10b      	bne.n	800e220 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d005      	beq.n	800e220 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 ffc0 	bl	800f1a6 <USBD_CtlSendStatus>
 800e226:	e01a      	b.n	800e25e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b03      	cmp	r3, #3
 800e232:	d114      	bne.n	800e25e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00e      	beq.n	800e25e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	7afa      	ldrb	r2, [r7, #11]
 800e24a:	4611      	mov	r1, r2
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	4798      	blx	r3
 800e250:	4603      	mov	r3, r0
 800e252:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e254:	7dfb      	ldrb	r3, [r7, #23]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e25a:	7dfb      	ldrb	r3, [r7, #23]
 800e25c:	e000      	b.n	800e260 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	460b      	mov	r3, r1
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e276:	7afb      	ldrb	r3, [r7, #11]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d16b      	bne.n	800e354 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	3314      	adds	r3, #20
 800e280:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d156      	bne.n	800e33a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	689a      	ldr	r2, [r3, #8]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	429a      	cmp	r2, r3
 800e296:	d914      	bls.n	800e2c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	689a      	ldr	r2, [r3, #8]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	1ad2      	subs	r2, r2, r3
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 ff3a 	bl	800f128 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f001 fc1a 	bl	800faf4 <USBD_LL_PrepareReceive>
 800e2c0:	e03b      	b.n	800e33a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	68da      	ldr	r2, [r3, #12]
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d11c      	bne.n	800e308 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d316      	bcc.n	800e308 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d20f      	bcs.n	800e308 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f000 ff1b 	bl	800f128 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2100      	movs	r1, #0
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f001 fbf7 	bl	800faf4 <USBD_LL_PrepareReceive>
 800e306:	e018      	b.n	800e33a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b03      	cmp	r3, #3
 800e312:	d10b      	bne.n	800e32c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d005      	beq.n	800e32c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e32c:	2180      	movs	r1, #128	@ 0x80
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f001 fb36 	bl	800f9a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f000 ff49 	bl	800f1cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e340:	2b01      	cmp	r3, #1
 800e342:	d122      	bne.n	800e38a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f7ff fe98 	bl	800e07a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e352:	e01a      	b.n	800e38a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	d114      	bne.n	800e38a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00e      	beq.n	800e38a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	7afa      	ldrb	r2, [r7, #11]
 800e376:	4611      	mov	r1, r2
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	4798      	blx	r3
 800e37c:	4603      	mov	r3, r0
 800e37e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e380:	7dfb      	ldrb	r3, [r7, #23]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e386:	7dfb      	ldrb	r3, [r7, #23]
 800e388:	e000      	b.n	800e38c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e02f      	b.n	800e428 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00f      	beq.n	800e3f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d009      	beq.n	800e3f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	6852      	ldr	r2, [r2, #4]
 800e3ea:	b2d2      	uxtb	r2, r2
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3f2:	2340      	movs	r3, #64	@ 0x40
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f001 fa8c 	bl	800f916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2201      	movs	r2, #1
 800e402:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2240      	movs	r2, #64	@ 0x40
 800e40a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e40e:	2340      	movs	r3, #64	@ 0x40
 800e410:	2200      	movs	r2, #0
 800e412:	2180      	movs	r1, #128	@ 0x80
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 fa7e 	bl	800f916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2201      	movs	r2, #1
 800e41e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2240      	movs	r2, #64	@ 0x40
 800e424:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	78fa      	ldrb	r2, [r7, #3]
 800e440:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2204      	movs	r2, #4
 800e46a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b04      	cmp	r3, #4
 800e48e:	d106      	bne.n	800e49e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e496:	b2da      	uxtb	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e012      	b.n	800e4e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d10b      	bne.n	800e4e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	3301      	adds	r3, #1
 800e506:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e50e:	8a3b      	ldrh	r3, [r7, #16]
 800e510:	021b      	lsls	r3, r3, #8
 800e512:	b21a      	sxth	r2, r3
 800e514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e518:	4313      	orrs	r3, r2
 800e51a:	b21b      	sxth	r3, r3
 800e51c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e51e:	89fb      	ldrh	r3, [r7, #14]
}
 800e520:	4618      	mov	r0, r3
 800e522:	371c      	adds	r7, #28
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e536:	2300      	movs	r3, #0
 800e538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e542:	2b40      	cmp	r3, #64	@ 0x40
 800e544:	d005      	beq.n	800e552 <USBD_StdDevReq+0x26>
 800e546:	2b40      	cmp	r3, #64	@ 0x40
 800e548:	d853      	bhi.n	800e5f2 <USBD_StdDevReq+0xc6>
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <USBD_StdDevReq+0x3a>
 800e54e:	2b20      	cmp	r3, #32
 800e550:	d14f      	bne.n	800e5f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	4798      	blx	r3
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
      break;
 800e564:	e04a      	b.n	800e5fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	785b      	ldrb	r3, [r3, #1]
 800e56a:	2b09      	cmp	r3, #9
 800e56c:	d83b      	bhi.n	800e5e6 <USBD_StdDevReq+0xba>
 800e56e:	a201      	add	r2, pc, #4	@ (adr r2, 800e574 <USBD_StdDevReq+0x48>)
 800e570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e574:	0800e5c9 	.word	0x0800e5c9
 800e578:	0800e5dd 	.word	0x0800e5dd
 800e57c:	0800e5e7 	.word	0x0800e5e7
 800e580:	0800e5d3 	.word	0x0800e5d3
 800e584:	0800e5e7 	.word	0x0800e5e7
 800e588:	0800e5a7 	.word	0x0800e5a7
 800e58c:	0800e59d 	.word	0x0800e59d
 800e590:	0800e5e7 	.word	0x0800e5e7
 800e594:	0800e5bf 	.word	0x0800e5bf
 800e598:	0800e5b1 	.word	0x0800e5b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f9de 	bl	800e960 <USBD_GetDescriptor>
          break;
 800e5a4:	e024      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fb6d 	bl	800ec88 <USBD_SetAddress>
          break;
 800e5ae:	e01f      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fbac 	bl	800ed10 <USBD_SetConfig>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73fb      	strb	r3, [r7, #15]
          break;
 800e5bc:	e018      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fc4b 	bl	800ee5c <USBD_GetConfig>
          break;
 800e5c6:	e013      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fc7c 	bl	800eec8 <USBD_GetStatus>
          break;
 800e5d0:	e00e      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fcab 	bl	800ef30 <USBD_SetFeature>
          break;
 800e5da:	e009      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fcba 	bl	800ef58 <USBD_ClrFeature>
          break;
 800e5e4:	e004      	b.n	800e5f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e5e6:	6839      	ldr	r1, [r7, #0]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fd11 	bl	800f010 <USBD_CtlError>
          break;
 800e5ee:	bf00      	nop
      }
      break;
 800e5f0:	e004      	b.n	800e5fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fd0b 	bl	800f010 <USBD_CtlError>
      break;
 800e5fa:	bf00      	nop
  }

  return ret;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop

0800e608 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e61e:	2b40      	cmp	r3, #64	@ 0x40
 800e620:	d005      	beq.n	800e62e <USBD_StdItfReq+0x26>
 800e622:	2b40      	cmp	r3, #64	@ 0x40
 800e624:	d82f      	bhi.n	800e686 <USBD_StdItfReq+0x7e>
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <USBD_StdItfReq+0x26>
 800e62a:	2b20      	cmp	r3, #32
 800e62c:	d12b      	bne.n	800e686 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e634:	b2db      	uxtb	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d81d      	bhi.n	800e678 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	889b      	ldrh	r3, [r3, #4]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b01      	cmp	r3, #1
 800e644:	d813      	bhi.n	800e66e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	4798      	blx	r3
 800e654:	4603      	mov	r3, r0
 800e656:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	88db      	ldrh	r3, [r3, #6]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d110      	bne.n	800e682 <USBD_StdItfReq+0x7a>
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10d      	bne.n	800e682 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 fd9d 	bl	800f1a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e66c:	e009      	b.n	800e682 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fccd 	bl	800f010 <USBD_CtlError>
          break;
 800e676:	e004      	b.n	800e682 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fcc8 	bl	800f010 <USBD_CtlError>
          break;
 800e680:	e000      	b.n	800e684 <USBD_StdItfReq+0x7c>
          break;
 800e682:	bf00      	nop
      }
      break;
 800e684:	e004      	b.n	800e690 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 fcc1 	bl	800f010 <USBD_CtlError>
      break;
 800e68e:	bf00      	nop
  }

  return ret;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	889b      	ldrh	r3, [r3, #4]
 800e6ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6b6:	2b40      	cmp	r3, #64	@ 0x40
 800e6b8:	d007      	beq.n	800e6ca <USBD_StdEPReq+0x30>
 800e6ba:	2b40      	cmp	r3, #64	@ 0x40
 800e6bc:	f200 8145 	bhi.w	800e94a <USBD_StdEPReq+0x2b0>
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00c      	beq.n	800e6de <USBD_StdEPReq+0x44>
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	f040 8140 	bne.w	800e94a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	4798      	blx	r3
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]
      break;
 800e6dc:	e13a      	b.n	800e954 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	d007      	beq.n	800e6f6 <USBD_StdEPReq+0x5c>
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	f300 8129 	bgt.w	800e93e <USBD_StdEPReq+0x2a4>
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d07f      	beq.n	800e7f0 <USBD_StdEPReq+0x156>
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d03c      	beq.n	800e76e <USBD_StdEPReq+0xd4>
 800e6f4:	e123      	b.n	800e93e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b02      	cmp	r3, #2
 800e700:	d002      	beq.n	800e708 <USBD_StdEPReq+0x6e>
 800e702:	2b03      	cmp	r3, #3
 800e704:	d016      	beq.n	800e734 <USBD_StdEPReq+0x9a>
 800e706:	e02c      	b.n	800e762 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e708:	7bbb      	ldrb	r3, [r7, #14]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00d      	beq.n	800e72a <USBD_StdEPReq+0x90>
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
 800e710:	2b80      	cmp	r3, #128	@ 0x80
 800e712:	d00a      	beq.n	800e72a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e714:	7bbb      	ldrb	r3, [r7, #14]
 800e716:	4619      	mov	r1, r3
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f001 f941 	bl	800f9a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e71e:	2180      	movs	r1, #128	@ 0x80
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f001 f93d 	bl	800f9a0 <USBD_LL_StallEP>
 800e726:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e728:	e020      	b.n	800e76c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fc6f 	bl	800f010 <USBD_CtlError>
              break;
 800e732:	e01b      	b.n	800e76c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	885b      	ldrh	r3, [r3, #2]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10e      	bne.n	800e75a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00b      	beq.n	800e75a <USBD_StdEPReq+0xc0>
 800e742:	7bbb      	ldrb	r3, [r7, #14]
 800e744:	2b80      	cmp	r3, #128	@ 0x80
 800e746:	d008      	beq.n	800e75a <USBD_StdEPReq+0xc0>
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	88db      	ldrh	r3, [r3, #6]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d104      	bne.n	800e75a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e750:	7bbb      	ldrb	r3, [r7, #14]
 800e752:	4619      	mov	r1, r3
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f001 f923 	bl	800f9a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fd23 	bl	800f1a6 <USBD_CtlSendStatus>

              break;
 800e760:	e004      	b.n	800e76c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fc53 	bl	800f010 <USBD_CtlError>
              break;
 800e76a:	bf00      	nop
          }
          break;
 800e76c:	e0ec      	b.n	800e948 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b02      	cmp	r3, #2
 800e778:	d002      	beq.n	800e780 <USBD_StdEPReq+0xe6>
 800e77a:	2b03      	cmp	r3, #3
 800e77c:	d016      	beq.n	800e7ac <USBD_StdEPReq+0x112>
 800e77e:	e030      	b.n	800e7e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00d      	beq.n	800e7a2 <USBD_StdEPReq+0x108>
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	2b80      	cmp	r3, #128	@ 0x80
 800e78a:	d00a      	beq.n	800e7a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
 800e78e:	4619      	mov	r1, r3
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f001 f905 	bl	800f9a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e796:	2180      	movs	r1, #128	@ 0x80
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f001 f901 	bl	800f9a0 <USBD_LL_StallEP>
 800e79e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e7a0:	e025      	b.n	800e7ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fc33 	bl	800f010 <USBD_CtlError>
              break;
 800e7aa:	e020      	b.n	800e7ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	885b      	ldrh	r3, [r3, #2]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d11b      	bne.n	800e7ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e7b4:	7bbb      	ldrb	r3, [r7, #14]
 800e7b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e7be:	7bbb      	ldrb	r3, [r7, #14]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f001 f90b 	bl	800f9de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f000 fcec 	bl	800f1a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	4798      	blx	r3
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e7e0:	e004      	b.n	800e7ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fc13 	bl	800f010 <USBD_CtlError>
              break;
 800e7ea:	e000      	b.n	800e7ee <USBD_StdEPReq+0x154>
              break;
 800e7ec:	bf00      	nop
          }
          break;
 800e7ee:	e0ab      	b.n	800e948 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d002      	beq.n	800e802 <USBD_StdEPReq+0x168>
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	d032      	beq.n	800e866 <USBD_StdEPReq+0x1cc>
 800e800:	e097      	b.n	800e932 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e802:	7bbb      	ldrb	r3, [r7, #14]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d007      	beq.n	800e818 <USBD_StdEPReq+0x17e>
 800e808:	7bbb      	ldrb	r3, [r7, #14]
 800e80a:	2b80      	cmp	r3, #128	@ 0x80
 800e80c:	d004      	beq.n	800e818 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fbfd 	bl	800f010 <USBD_CtlError>
                break;
 800e816:	e091      	b.n	800e93c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	da0b      	bge.n	800e838 <USBD_StdEPReq+0x19e>
 800e820:	7bbb      	ldrb	r3, [r7, #14]
 800e822:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e826:	4613      	mov	r3, r2
 800e828:	009b      	lsls	r3, r3, #2
 800e82a:	4413      	add	r3, r2
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	3310      	adds	r3, #16
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	4413      	add	r3, r2
 800e834:	3304      	adds	r3, #4
 800e836:	e00b      	b.n	800e850 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e83e:	4613      	mov	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	4413      	add	r3, r2
 800e84e:	3304      	adds	r3, #4
 800e850:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	2202      	movs	r2, #2
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fc47 	bl	800f0f2 <USBD_CtlSendData>
              break;
 800e864:	e06a      	b.n	800e93c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	da11      	bge.n	800e892 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e86e:	7bbb      	ldrb	r3, [r7, #14]
 800e870:	f003 020f 	and.w	r2, r3, #15
 800e874:	6879      	ldr	r1, [r7, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	440b      	add	r3, r1
 800e880:	3324      	adds	r3, #36	@ 0x24
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d117      	bne.n	800e8b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 fbc0 	bl	800f010 <USBD_CtlError>
                  break;
 800e890:	e054      	b.n	800e93c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e892:	7bbb      	ldrb	r3, [r7, #14]
 800e894:	f003 020f 	and.w	r2, r3, #15
 800e898:	6879      	ldr	r1, [r7, #4]
 800e89a:	4613      	mov	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	440b      	add	r3, r1
 800e8a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d104      	bne.n	800e8b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fbad 	bl	800f010 <USBD_CtlError>
                  break;
 800e8b6:	e041      	b.n	800e93c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	da0b      	bge.n	800e8d8 <USBD_StdEPReq+0x23e>
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	4413      	add	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	3310      	adds	r3, #16
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	e00b      	b.n	800e8f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8d8:	7bbb      	ldrb	r3, [r7, #14]
 800e8da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8de:	4613      	mov	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e8f2:	7bbb      	ldrb	r3, [r7, #14]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <USBD_StdEPReq+0x264>
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
 800e8fa:	2b80      	cmp	r3, #128	@ 0x80
 800e8fc:	d103      	bne.n	800e906 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2200      	movs	r2, #0
 800e902:	601a      	str	r2, [r3, #0]
 800e904:	e00e      	b.n	800e924 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e906:	7bbb      	ldrb	r3, [r7, #14]
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f001 f886 	bl	800fa1c <USBD_LL_IsStallEP>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2201      	movs	r2, #1
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	e002      	b.n	800e924 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2202      	movs	r2, #2
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fbe1 	bl	800f0f2 <USBD_CtlSendData>
              break;
 800e930:	e004      	b.n	800e93c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e932:	6839      	ldr	r1, [r7, #0]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 fb6b 	bl	800f010 <USBD_CtlError>
              break;
 800e93a:	bf00      	nop
          }
          break;
 800e93c:	e004      	b.n	800e948 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e93e:	6839      	ldr	r1, [r7, #0]
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 fb65 	bl	800f010 <USBD_CtlError>
          break;
 800e946:	bf00      	nop
      }
      break;
 800e948:	e004      	b.n	800e954 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fb5f 	bl	800f010 <USBD_CtlError>
      break;
 800e952:	bf00      	nop
  }

  return ret;
 800e954:	7bfb      	ldrb	r3, [r7, #15]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e96a:	2300      	movs	r3, #0
 800e96c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e972:	2300      	movs	r3, #0
 800e974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	885b      	ldrh	r3, [r3, #2]
 800e97a:	0a1b      	lsrs	r3, r3, #8
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	3b01      	subs	r3, #1
 800e980:	2b0e      	cmp	r3, #14
 800e982:	f200 8152 	bhi.w	800ec2a <USBD_GetDescriptor+0x2ca>
 800e986:	a201      	add	r2, pc, #4	@ (adr r2, 800e98c <USBD_GetDescriptor+0x2c>)
 800e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98c:	0800e9fd 	.word	0x0800e9fd
 800e990:	0800ea15 	.word	0x0800ea15
 800e994:	0800ea55 	.word	0x0800ea55
 800e998:	0800ec2b 	.word	0x0800ec2b
 800e99c:	0800ec2b 	.word	0x0800ec2b
 800e9a0:	0800ebcb 	.word	0x0800ebcb
 800e9a4:	0800ebf7 	.word	0x0800ebf7
 800e9a8:	0800ec2b 	.word	0x0800ec2b
 800e9ac:	0800ec2b 	.word	0x0800ec2b
 800e9b0:	0800ec2b 	.word	0x0800ec2b
 800e9b4:	0800ec2b 	.word	0x0800ec2b
 800e9b8:	0800ec2b 	.word	0x0800ec2b
 800e9bc:	0800ec2b 	.word	0x0800ec2b
 800e9c0:	0800ec2b 	.word	0x0800ec2b
 800e9c4:	0800e9c9 	.word	0x0800e9c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9ce:	69db      	ldr	r3, [r3, #28]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00b      	beq.n	800e9ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	7c12      	ldrb	r2, [r2, #16]
 800e9e0:	f107 0108 	add.w	r1, r7, #8
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	4798      	blx	r3
 800e9e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9ea:	e126      	b.n	800ec3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fb0e 	bl	800f010 <USBD_CtlError>
        err++;
 800e9f4:	7afb      	ldrb	r3, [r7, #11]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	72fb      	strb	r3, [r7, #11]
      break;
 800e9fa:	e11e      	b.n	800ec3a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	7c12      	ldrb	r2, [r2, #16]
 800ea08:	f107 0108 	add.w	r1, r7, #8
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	4798      	blx	r3
 800ea10:	60f8      	str	r0, [r7, #12]
      break;
 800ea12:	e112      	b.n	800ec3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	7c1b      	ldrb	r3, [r3, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10d      	bne.n	800ea38 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea24:	f107 0208 	add.w	r2, r7, #8
 800ea28:	4610      	mov	r0, r2
 800ea2a:	4798      	blx	r3
 800ea2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	3301      	adds	r3, #1
 800ea32:	2202      	movs	r2, #2
 800ea34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea36:	e100      	b.n	800ec3a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea40:	f107 0208 	add.w	r2, r7, #8
 800ea44:	4610      	mov	r0, r2
 800ea46:	4798      	blx	r3
 800ea48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	2202      	movs	r2, #2
 800ea50:	701a      	strb	r2, [r3, #0]
      break;
 800ea52:	e0f2      	b.n	800ec3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	885b      	ldrh	r3, [r3, #2]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b05      	cmp	r3, #5
 800ea5c:	f200 80ac 	bhi.w	800ebb8 <USBD_GetDescriptor+0x258>
 800ea60:	a201      	add	r2, pc, #4	@ (adr r2, 800ea68 <USBD_GetDescriptor+0x108>)
 800ea62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea66:	bf00      	nop
 800ea68:	0800ea81 	.word	0x0800ea81
 800ea6c:	0800eab5 	.word	0x0800eab5
 800ea70:	0800eae9 	.word	0x0800eae9
 800ea74:	0800eb1d 	.word	0x0800eb1d
 800ea78:	0800eb51 	.word	0x0800eb51
 800ea7c:	0800eb85 	.word	0x0800eb85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00b      	beq.n	800eaa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	7c12      	ldrb	r2, [r2, #16]
 800ea98:	f107 0108 	add.w	r1, r7, #8
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	4798      	blx	r3
 800eaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eaa2:	e091      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fab2 	bl	800f010 <USBD_CtlError>
            err++;
 800eaac:	7afb      	ldrb	r3, [r7, #11]
 800eaae:	3301      	adds	r3, #1
 800eab0:	72fb      	strb	r3, [r7, #11]
          break;
 800eab2:	e089      	b.n	800ebc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00b      	beq.n	800ead8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	7c12      	ldrb	r2, [r2, #16]
 800eacc:	f107 0108 	add.w	r1, r7, #8
 800ead0:	4610      	mov	r0, r2
 800ead2:	4798      	blx	r3
 800ead4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ead6:	e077      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fa98 	bl	800f010 <USBD_CtlError>
            err++;
 800eae0:	7afb      	ldrb	r3, [r7, #11]
 800eae2:	3301      	adds	r3, #1
 800eae4:	72fb      	strb	r3, [r7, #11]
          break;
 800eae6:	e06f      	b.n	800ebc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00b      	beq.n	800eb0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	7c12      	ldrb	r2, [r2, #16]
 800eb00:	f107 0108 	add.w	r1, r7, #8
 800eb04:	4610      	mov	r0, r2
 800eb06:	4798      	blx	r3
 800eb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb0a:	e05d      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 fa7e 	bl	800f010 <USBD_CtlError>
            err++;
 800eb14:	7afb      	ldrb	r3, [r7, #11]
 800eb16:	3301      	adds	r3, #1
 800eb18:	72fb      	strb	r3, [r7, #11]
          break;
 800eb1a:	e055      	b.n	800ebc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	7c12      	ldrb	r2, [r2, #16]
 800eb34:	f107 0108 	add.w	r1, r7, #8
 800eb38:	4610      	mov	r0, r2
 800eb3a:	4798      	blx	r3
 800eb3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb3e:	e043      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 fa64 	bl	800f010 <USBD_CtlError>
            err++;
 800eb48:	7afb      	ldrb	r3, [r7, #11]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	72fb      	strb	r3, [r7, #11]
          break;
 800eb4e:	e03b      	b.n	800ebc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb56:	695b      	ldr	r3, [r3, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00b      	beq.n	800eb74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	7c12      	ldrb	r2, [r2, #16]
 800eb68:	f107 0108 	add.w	r1, r7, #8
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4798      	blx	r3
 800eb70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb72:	e029      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eb74:	6839      	ldr	r1, [r7, #0]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fa4a 	bl	800f010 <USBD_CtlError>
            err++;
 800eb7c:	7afb      	ldrb	r3, [r7, #11]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	72fb      	strb	r3, [r7, #11]
          break;
 800eb82:	e021      	b.n	800ebc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00b      	beq.n	800eba8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eb96:	699b      	ldr	r3, [r3, #24]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	7c12      	ldrb	r2, [r2, #16]
 800eb9c:	f107 0108 	add.w	r1, r7, #8
 800eba0:	4610      	mov	r0, r2
 800eba2:	4798      	blx	r3
 800eba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eba6:	e00f      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eba8:	6839      	ldr	r1, [r7, #0]
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 fa30 	bl	800f010 <USBD_CtlError>
            err++;
 800ebb0:	7afb      	ldrb	r3, [r7, #11]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ebb6:	e007      	b.n	800ebc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa28 	bl	800f010 <USBD_CtlError>
          err++;
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ebc6:	bf00      	nop
      }
      break;
 800ebc8:	e037      	b.n	800ec3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7c1b      	ldrb	r3, [r3, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebda:	f107 0208 	add.w	r2, r7, #8
 800ebde:	4610      	mov	r0, r2
 800ebe0:	4798      	blx	r3
 800ebe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebe4:	e029      	b.n	800ec3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ebe6:	6839      	ldr	r1, [r7, #0]
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 fa11 	bl	800f010 <USBD_CtlError>
        err++;
 800ebee:	7afb      	ldrb	r3, [r7, #11]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	72fb      	strb	r3, [r7, #11]
      break;
 800ebf4:	e021      	b.n	800ec3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	7c1b      	ldrb	r3, [r3, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10d      	bne.n	800ec1a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec06:	f107 0208 	add.w	r2, r7, #8
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	4798      	blx	r3
 800ec0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	3301      	adds	r3, #1
 800ec14:	2207      	movs	r2, #7
 800ec16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec18:	e00f      	b.n	800ec3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 f9f7 	bl	800f010 <USBD_CtlError>
        err++;
 800ec22:	7afb      	ldrb	r3, [r7, #11]
 800ec24:	3301      	adds	r3, #1
 800ec26:	72fb      	strb	r3, [r7, #11]
      break;
 800ec28:	e007      	b.n	800ec3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f9ef 	bl	800f010 <USBD_CtlError>
      err++;
 800ec32:	7afb      	ldrb	r3, [r7, #11]
 800ec34:	3301      	adds	r3, #1
 800ec36:	72fb      	strb	r3, [r7, #11]
      break;
 800ec38:	bf00      	nop
  }

  if (err != 0U)
 800ec3a:	7afb      	ldrb	r3, [r7, #11]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d11e      	bne.n	800ec7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	88db      	ldrh	r3, [r3, #6]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d016      	beq.n	800ec76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ec48:	893b      	ldrh	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00e      	beq.n	800ec6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	88da      	ldrh	r2, [r3, #6]
 800ec52:	893b      	ldrh	r3, [r7, #8]
 800ec54:	4293      	cmp	r3, r2
 800ec56:	bf28      	it	cs
 800ec58:	4613      	movcs	r3, r2
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec5e:	893b      	ldrh	r3, [r7, #8]
 800ec60:	461a      	mov	r2, r3
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 fa44 	bl	800f0f2 <USBD_CtlSendData>
 800ec6a:	e009      	b.n	800ec80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f9ce 	bl	800f010 <USBD_CtlError>
 800ec74:	e004      	b.n	800ec80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fa95 	bl	800f1a6 <USBD_CtlSendStatus>
 800ec7c:	e000      	b.n	800ec80 <USBD_GetDescriptor+0x320>
    return;
 800ec7e:	bf00      	nop
  }
}
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop

0800ec88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	889b      	ldrh	r3, [r3, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d131      	bne.n	800ecfe <USBD_SetAddress+0x76>
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	88db      	ldrh	r3, [r3, #6]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d12d      	bne.n	800ecfe <USBD_SetAddress+0x76>
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	885b      	ldrh	r3, [r3, #2]
 800eca6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eca8:	d829      	bhi.n	800ecfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	885b      	ldrh	r3, [r3, #2]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	2b03      	cmp	r3, #3
 800ecc0:	d104      	bne.n	800eccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 f9a3 	bl	800f010 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecca:	e01d      	b.n	800ed08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	7bfa      	ldrb	r2, [r7, #15]
 800ecd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 fecb 	bl	800fa74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fa61 	bl	800f1a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d004      	beq.n	800ecf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2202      	movs	r2, #2
 800ecee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecf2:	e009      	b.n	800ed08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecfc:	e004      	b.n	800ed08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 f985 	bl	800f010 <USBD_CtlError>
  }
}
 800ed06:	bf00      	nop
 800ed08:	bf00      	nop
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	885b      	ldrh	r3, [r3, #2]
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	4b4c      	ldr	r3, [pc, #304]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed28:	4b4b      	ldr	r3, [pc, #300]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d905      	bls.n	800ed3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed30:	6839      	ldr	r1, [r7, #0]
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f96c 	bl	800f010 <USBD_CtlError>
    return USBD_FAIL;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e088      	b.n	800ee4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d002      	beq.n	800ed4e <USBD_SetConfig+0x3e>
 800ed48:	2b03      	cmp	r3, #3
 800ed4a:	d025      	beq.n	800ed98 <USBD_SetConfig+0x88>
 800ed4c:	e071      	b.n	800ee32 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed4e:	4b42      	ldr	r3, [pc, #264]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d01c      	beq.n	800ed90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ed56:	4b40      	ldr	r3, [pc, #256]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed60:	4b3d      	ldr	r3, [pc, #244]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7ff f992 	bl	800e090 <USBD_SetClassConfig>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d004      	beq.n	800ed80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f949 	bl	800f010 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ed7e:	e065      	b.n	800ee4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fa10 	bl	800f1a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2203      	movs	r2, #3
 800ed8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ed8e:	e05d      	b.n	800ee4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fa08 	bl	800f1a6 <USBD_CtlSendStatus>
      break;
 800ed96:	e059      	b.n	800ee4c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ed98:	4b2f      	ldr	r3, [pc, #188]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d112      	bne.n	800edc6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2202      	movs	r2, #2
 800eda4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800eda8:	4b2b      	ldr	r3, [pc, #172]	@ (800ee58 <USBD_SetConfig+0x148>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edb2:	4b29      	ldr	r3, [pc, #164]	@ (800ee58 <USBD_SetConfig+0x148>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	4619      	mov	r1, r3
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff f985 	bl	800e0c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f9f1 	bl	800f1a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edc4:	e042      	b.n	800ee4c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800edc6:	4b24      	ldr	r3, [pc, #144]	@ (800ee58 <USBD_SetConfig+0x148>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d02a      	beq.n	800ee2a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4619      	mov	r1, r3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff f973 	bl	800e0c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ede2:	4b1d      	ldr	r3, [pc, #116]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edec:	4b1a      	ldr	r3, [pc, #104]	@ (800ee58 <USBD_SetConfig+0x148>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff f94c 	bl	800e090 <USBD_SetClassConfig>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00f      	beq.n	800ee22 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 f903 	bl	800f010 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	4619      	mov	r1, r3
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f7ff f958 	bl	800e0c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ee20:	e014      	b.n	800ee4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f9bf 	bl	800f1a6 <USBD_CtlSendStatus>
      break;
 800ee28:	e010      	b.n	800ee4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 f9bb 	bl	800f1a6 <USBD_CtlSendStatus>
      break;
 800ee30:	e00c      	b.n	800ee4c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ee32:	6839      	ldr	r1, [r7, #0]
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 f8eb 	bl	800f010 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee3a:	4b07      	ldr	r3, [pc, #28]	@ (800ee58 <USBD_SetConfig+0x148>)
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7ff f941 	bl	800e0c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee46:	2303      	movs	r3, #3
 800ee48:	73fb      	strb	r3, [r7, #15]
      break;
 800ee4a:	bf00      	nop
  }

  return ret;
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	200004e4 	.word	0x200004e4

0800ee5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	88db      	ldrh	r3, [r3, #6]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d004      	beq.n	800ee78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee6e:	6839      	ldr	r1, [r7, #0]
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f8cd 	bl	800f010 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ee76:	e023      	b.n	800eec0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	dc02      	bgt.n	800ee8a <USBD_GetConfig+0x2e>
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dc03      	bgt.n	800ee90 <USBD_GetConfig+0x34>
 800ee88:	e015      	b.n	800eeb6 <USBD_GetConfig+0x5a>
 800ee8a:	2b03      	cmp	r3, #3
 800ee8c:	d00b      	beq.n	800eea6 <USBD_GetConfig+0x4a>
 800ee8e:	e012      	b.n	800eeb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f927 	bl	800f0f2 <USBD_CtlSendData>
        break;
 800eea4:	e00c      	b.n	800eec0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	3304      	adds	r3, #4
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4619      	mov	r1, r3
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f91f 	bl	800f0f2 <USBD_CtlSendData>
        break;
 800eeb4:	e004      	b.n	800eec0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eeb6:	6839      	ldr	r1, [r7, #0]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f8a9 	bl	800f010 <USBD_CtlError>
        break;
 800eebe:	bf00      	nop
}
 800eec0:	bf00      	nop
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	3b01      	subs	r3, #1
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d81e      	bhi.n	800ef1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	88db      	ldrh	r3, [r3, #6]
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d004      	beq.n	800eef2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 f890 	bl	800f010 <USBD_CtlError>
        break;
 800eef0:	e01a      	b.n	800ef28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2201      	movs	r2, #1
 800eef6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d005      	beq.n	800ef0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	f043 0202 	orr.w	r2, r3, #2
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	330c      	adds	r3, #12
 800ef12:	2202      	movs	r2, #2
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f8eb 	bl	800f0f2 <USBD_CtlSendData>
      break;
 800ef1c:	e004      	b.n	800ef28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef1e:	6839      	ldr	r1, [r7, #0]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 f875 	bl	800f010 <USBD_CtlError>
      break;
 800ef26:	bf00      	nop
  }
}
 800ef28:	bf00      	nop
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	885b      	ldrh	r3, [r3, #2]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d106      	bne.n	800ef50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f92b 	bl	800f1a6 <USBD_CtlSendStatus>
  }
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d80b      	bhi.n	800ef88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	885b      	ldrh	r3, [r3, #2]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d10c      	bne.n	800ef92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f910 	bl	800f1a6 <USBD_CtlSendStatus>
      }
      break;
 800ef86:	e004      	b.n	800ef92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 f840 	bl	800f010 <USBD_CtlError>
      break;
 800ef90:	e000      	b.n	800ef94 <USBD_ClrFeature+0x3c>
      break;
 800ef92:	bf00      	nop
  }
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	781a      	ldrb	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3301      	adds	r3, #1
 800efb6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	781a      	ldrb	r2, [r3, #0]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	3301      	adds	r3, #1
 800efc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7ff fa92 	bl	800e4f0 <SWAPBYTE>
 800efcc:	4603      	mov	r3, r0
 800efce:	461a      	mov	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	3301      	adds	r3, #1
 800efd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3301      	adds	r3, #1
 800efde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f7ff fa85 	bl	800e4f0 <SWAPBYTE>
 800efe6:	4603      	mov	r3, r0
 800efe8:	461a      	mov	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3301      	adds	r3, #1
 800eff2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3301      	adds	r3, #1
 800eff8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff fa78 	bl	800e4f0 <SWAPBYTE>
 800f000:	4603      	mov	r3, r0
 800f002:	461a      	mov	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	80da      	strh	r2, [r3, #6]
}
 800f008:	bf00      	nop
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f01a:	2180      	movs	r1, #128	@ 0x80
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 fcbf 	bl	800f9a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f022:	2100      	movs	r1, #0
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fcbb 	bl	800f9a0 <USBD_LL_StallEP>
}
 800f02a:	bf00      	nop
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	60f8      	str	r0, [r7, #12]
 800f03a:	60b9      	str	r1, [r7, #8]
 800f03c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d036      	beq.n	800f0b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f04c:	6938      	ldr	r0, [r7, #16]
 800f04e:	f000 f836 	bl	800f0be <USBD_GetLen>
 800f052:	4603      	mov	r3, r0
 800f054:	3301      	adds	r3, #1
 800f056:	b29b      	uxth	r3, r3
 800f058:	005b      	lsls	r3, r3, #1
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f060:	7dfb      	ldrb	r3, [r7, #23]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	4413      	add	r3, r2
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	7812      	ldrb	r2, [r2, #0]
 800f06a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	3301      	adds	r3, #1
 800f070:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	4413      	add	r3, r2
 800f078:	2203      	movs	r2, #3
 800f07a:	701a      	strb	r2, [r3, #0]
  idx++;
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	3301      	adds	r3, #1
 800f080:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f082:	e013      	b.n	800f0ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f084:	7dfb      	ldrb	r3, [r7, #23]
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	4413      	add	r3, r2
 800f08a:	693a      	ldr	r2, [r7, #16]
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	3301      	adds	r3, #1
 800f094:	613b      	str	r3, [r7, #16]
    idx++;
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	3301      	adds	r3, #1
 800f09a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0a6:	7dfb      	ldrb	r3, [r7, #23]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e7      	bne.n	800f084 <USBD_GetString+0x52>
 800f0b4:	e000      	b.n	800f0b8 <USBD_GetString+0x86>
    return;
 800f0b6:	bf00      	nop
  }
}
 800f0b8:	3718      	adds	r7, #24
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b085      	sub	sp, #20
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f0ce:	e005      	b.n	800f0dc <USBD_GetLen+0x1e>
  {
    len++;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1f5      	bne.n	800f0d0 <USBD_GetLen+0x12>
  }

  return len;
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2202      	movs	r2, #2
 800f102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	2100      	movs	r1, #0
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f000 fcca 	bl	800fab2 <USBD_LL_Transmit>

  return USBD_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	2100      	movs	r1, #0
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f000 fcb9 	bl	800fab2 <USBD_LL_Transmit>

  return USBD_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	60f8      	str	r0, [r7, #12]
 800f152:	60b9      	str	r1, [r7, #8]
 800f154:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2203      	movs	r2, #3
 800f15a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	2100      	movs	r1, #0
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f000 fcbd 	bl	800faf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	2100      	movs	r1, #0
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f000 fcac 	bl	800faf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b082      	sub	sp, #8
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2204      	movs	r2, #4
 800f1b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fc78 	bl	800fab2 <USBD_LL_Transmit>

  return USBD_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2205      	movs	r2, #5
 800f1d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1dc:	2300      	movs	r3, #0
 800f1de:	2200      	movs	r2, #0
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fc86 	bl	800faf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
	...

0800f1f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	2120      	movs	r1, #32
 800f1fc:	4818      	ldr	r0, [pc, #96]	@ (800f260 <MX_USB_Device_Init+0x6c>)
 800f1fe:	f7f5 f9d5 	bl	80045ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800f202:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f206:	f7f4 fca3 	bl	8003b50 <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800f20a:	2201      	movs	r2, #1
 800f20c:	2120      	movs	r1, #32
 800f20e:	4814      	ldr	r0, [pc, #80]	@ (800f260 <MX_USB_Device_Init+0x6c>)
 800f210:	f7f5 f9cc 	bl	80045ac <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f214:	2200      	movs	r2, #0
 800f216:	4913      	ldr	r1, [pc, #76]	@ (800f264 <MX_USB_Device_Init+0x70>)
 800f218:	4813      	ldr	r0, [pc, #76]	@ (800f268 <MX_USB_Device_Init+0x74>)
 800f21a:	f7fe fecb 	bl	800dfb4 <USBD_Init>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800f224:	f7f2 f8e3 	bl	80013ee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f228:	4910      	ldr	r1, [pc, #64]	@ (800f26c <MX_USB_Device_Init+0x78>)
 800f22a:	480f      	ldr	r0, [pc, #60]	@ (800f268 <MX_USB_Device_Init+0x74>)
 800f22c:	f7fe fef2 	bl	800e014 <USBD_RegisterClass>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <MX_USB_Device_Init+0x46>
    Error_Handler();
 800f236:	f7f2 f8da 	bl	80013ee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f23a:	490d      	ldr	r1, [pc, #52]	@ (800f270 <MX_USB_Device_Init+0x7c>)
 800f23c:	480a      	ldr	r0, [pc, #40]	@ (800f268 <MX_USB_Device_Init+0x74>)
 800f23e:	f7fe fe13 	bl	800de68 <USBD_CDC_RegisterInterface>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <MX_USB_Device_Init+0x58>
    Error_Handler();
 800f248:	f7f2 f8d1 	bl	80013ee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f24c:	4806      	ldr	r0, [pc, #24]	@ (800f268 <MX_USB_Device_Init+0x74>)
 800f24e:	f7fe ff08 	bl	800e062 <USBD_Start>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <MX_USB_Device_Init+0x68>
    Error_Handler();
 800f258:	f7f2 f8c9 	bl	80013ee <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f25c:	bf00      	nop
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	48000400 	.word	0x48000400
 800f264:	20000130 	.word	0x20000130
 800f268:	200004e8 	.word	0x200004e8
 800f26c:	20000018 	.word	0x20000018
 800f270:	2000011c 	.word	0x2000011c

0800f274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f278:	2200      	movs	r2, #0
 800f27a:	4905      	ldr	r1, [pc, #20]	@ (800f290 <CDC_Init_FS+0x1c>)
 800f27c:	4805      	ldr	r0, [pc, #20]	@ (800f294 <CDC_Init_FS+0x20>)
 800f27e:	f7fe fe08 	bl	800de92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f282:	4905      	ldr	r1, [pc, #20]	@ (800f298 <CDC_Init_FS+0x24>)
 800f284:	4803      	ldr	r0, [pc, #12]	@ (800f294 <CDC_Init_FS+0x20>)
 800f286:	f7fe fe22 	bl	800dece <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f28a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	20000fb8 	.word	0x20000fb8
 800f294:	200004e8 	.word	0x200004e8
 800f298:	200007b8 	.word	0x200007b8

0800f29c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f29c:	b480      	push	{r7}
 800f29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f2a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	6039      	str	r1, [r7, #0]
 800f2b6:	71fb      	strb	r3, [r7, #7]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	2b23      	cmp	r3, #35	@ 0x23
 800f2c0:	d84a      	bhi.n	800f358 <CDC_Control_FS+0xac>
 800f2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c8 <CDC_Control_FS+0x1c>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f359 	.word	0x0800f359
 800f2cc:	0800f359 	.word	0x0800f359
 800f2d0:	0800f359 	.word	0x0800f359
 800f2d4:	0800f359 	.word	0x0800f359
 800f2d8:	0800f359 	.word	0x0800f359
 800f2dc:	0800f359 	.word	0x0800f359
 800f2e0:	0800f359 	.word	0x0800f359
 800f2e4:	0800f359 	.word	0x0800f359
 800f2e8:	0800f359 	.word	0x0800f359
 800f2ec:	0800f359 	.word	0x0800f359
 800f2f0:	0800f359 	.word	0x0800f359
 800f2f4:	0800f359 	.word	0x0800f359
 800f2f8:	0800f359 	.word	0x0800f359
 800f2fc:	0800f359 	.word	0x0800f359
 800f300:	0800f359 	.word	0x0800f359
 800f304:	0800f359 	.word	0x0800f359
 800f308:	0800f359 	.word	0x0800f359
 800f30c:	0800f359 	.word	0x0800f359
 800f310:	0800f359 	.word	0x0800f359
 800f314:	0800f359 	.word	0x0800f359
 800f318:	0800f359 	.word	0x0800f359
 800f31c:	0800f359 	.word	0x0800f359
 800f320:	0800f359 	.word	0x0800f359
 800f324:	0800f359 	.word	0x0800f359
 800f328:	0800f359 	.word	0x0800f359
 800f32c:	0800f359 	.word	0x0800f359
 800f330:	0800f359 	.word	0x0800f359
 800f334:	0800f359 	.word	0x0800f359
 800f338:	0800f359 	.word	0x0800f359
 800f33c:	0800f359 	.word	0x0800f359
 800f340:	0800f359 	.word	0x0800f359
 800f344:	0800f359 	.word	0x0800f359
 800f348:	0800f359 	.word	0x0800f359
 800f34c:	0800f359 	.word	0x0800f359
 800f350:	0800f359 	.word	0x0800f359
 800f354:	0800f359 	.word	0x0800f359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f358:	bf00      	nop
  }

  return (USBD_OK);
 800f35a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f372:	6879      	ldr	r1, [r7, #4]
 800f374:	4810      	ldr	r0, [pc, #64]	@ (800f3b8 <CDC_Receive_FS+0x50>)
 800f376:	f7fe fdaa 	bl	800dece <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f37a:	480f      	ldr	r0, [pc, #60]	@ (800f3b8 <CDC_Receive_FS+0x50>)
 800f37c:	f7fe fdf0 	bl	800df60 <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800f380:	4b0e      	ldr	r3, [pc, #56]	@ (800f3bc <CDC_Receive_FS+0x54>)
 800f382:	2201      	movs	r2, #1
 800f384:	671a      	str	r2, [r3, #112]	@ 0x70

  uint8_t len = (uint8_t) *Len;
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800f38c:	2240      	movs	r2, #64	@ 0x40
 800f38e:	2100      	movs	r1, #0
 800f390:	480b      	ldr	r0, [pc, #44]	@ (800f3c0 <CDC_Receive_FS+0x58>)
 800f392:	f000 fca9 	bl	800fce8 <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	461a      	mov	r2, r3
 800f39a:	6879      	ldr	r1, [r7, #4]
 800f39c:	4808      	ldr	r0, [pc, #32]	@ (800f3c0 <CDC_Receive_FS+0x58>)
 800f39e:	f000 fcd5 	bl	800fd4c <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800f3a2:	2240      	movs	r2, #64	@ 0x40
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fc9e 	bl	800fce8 <memset>

  return (USBD_OK);
 800f3ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	200004e8 	.word	0x200004e8
 800f3bc:	20000370 	.word	0x20000370
 800f3c0:	20000394 	.word	0x20000394

0800f3c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f40c <CDC_Transmit_FS+0x48>)
 800f3d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f3da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e00b      	b.n	800f402 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f3ea:	887b      	ldrh	r3, [r7, #2]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	6879      	ldr	r1, [r7, #4]
 800f3f0:	4806      	ldr	r0, [pc, #24]	@ (800f40c <CDC_Transmit_FS+0x48>)
 800f3f2:	f7fe fd4e 	bl	800de92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f3f6:	4805      	ldr	r0, [pc, #20]	@ (800f40c <CDC_Transmit_FS+0x48>)
 800f3f8:	f7fe fd82 	bl	800df00 <USBD_CDC_TransmitPacket>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f400:	7bfb      	ldrb	r3, [r7, #15]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200004e8 	.word	0x200004e8

0800f410 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	4613      	mov	r3, r2
 800f41c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f426:	4618      	mov	r0, r3
 800f428:	371c      	adds	r7, #28
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
	...

0800f434 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	2212      	movs	r2, #18
 800f444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f446:	4b03      	ldr	r3, [pc, #12]	@ (800f454 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr
 800f454:	20000150 	.word	0x20000150

0800f458 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	4603      	mov	r3, r0
 800f460:	6039      	str	r1, [r7, #0]
 800f462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	2204      	movs	r2, #4
 800f468:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f46a:	4b03      	ldr	r3, [pc, #12]	@ (800f478 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	20000164 	.word	0x20000164

0800f47c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	4603      	mov	r3, r0
 800f484:	6039      	str	r1, [r7, #0]
 800f486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f488:	79fb      	ldrb	r3, [r7, #7]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d105      	bne.n	800f49a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	4907      	ldr	r1, [pc, #28]	@ (800f4b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f492:	4808      	ldr	r0, [pc, #32]	@ (800f4b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f494:	f7ff fdcd 	bl	800f032 <USBD_GetString>
 800f498:	e004      	b.n	800f4a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f49a:	683a      	ldr	r2, [r7, #0]
 800f49c:	4904      	ldr	r1, [pc, #16]	@ (800f4b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f49e:	4805      	ldr	r0, [pc, #20]	@ (800f4b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f4a0:	f7ff fdc7 	bl	800f032 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4a4:	4b02      	ldr	r3, [pc, #8]	@ (800f4b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200017b8 	.word	0x200017b8
 800f4b4:	0801066c 	.word	0x0801066c

0800f4b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	6039      	str	r1, [r7, #0]
 800f4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f4c4:	683a      	ldr	r2, [r7, #0]
 800f4c6:	4904      	ldr	r1, [pc, #16]	@ (800f4d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f4c8:	4804      	ldr	r0, [pc, #16]	@ (800f4dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f4ca:	f7ff fdb2 	bl	800f032 <USBD_GetString>
  return USBD_StrDesc;
 800f4ce:	4b02      	ldr	r3, [pc, #8]	@ (800f4d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200017b8 	.word	0x200017b8
 800f4dc:	08010680 	.word	0x08010680

0800f4e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6039      	str	r1, [r7, #0]
 800f4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	221a      	movs	r2, #26
 800f4f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f4f2:	f000 f843 	bl	800f57c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f4f6:	4b02      	ldr	r3, [pc, #8]	@ (800f500 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	20000168 	.word	0x20000168

0800f504 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d105      	bne.n	800f522 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	4907      	ldr	r1, [pc, #28]	@ (800f538 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f51a:	4808      	ldr	r0, [pc, #32]	@ (800f53c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f51c:	f7ff fd89 	bl	800f032 <USBD_GetString>
 800f520:	e004      	b.n	800f52c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f522:	683a      	ldr	r2, [r7, #0]
 800f524:	4904      	ldr	r1, [pc, #16]	@ (800f538 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f526:	4805      	ldr	r0, [pc, #20]	@ (800f53c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f528:	f7ff fd83 	bl	800f032 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f52c:	4b02      	ldr	r3, [pc, #8]	@ (800f538 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3708      	adds	r7, #8
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	200017b8 	.word	0x200017b8
 800f53c:	08010694 	.word	0x08010694

0800f540 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	4603      	mov	r3, r0
 800f548:	6039      	str	r1, [r7, #0]
 800f54a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f54c:	79fb      	ldrb	r3, [r7, #7]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d105      	bne.n	800f55e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f552:	683a      	ldr	r2, [r7, #0]
 800f554:	4907      	ldr	r1, [pc, #28]	@ (800f574 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f556:	4808      	ldr	r0, [pc, #32]	@ (800f578 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f558:	f7ff fd6b 	bl	800f032 <USBD_GetString>
 800f55c:	e004      	b.n	800f568 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f55e:	683a      	ldr	r2, [r7, #0]
 800f560:	4904      	ldr	r1, [pc, #16]	@ (800f574 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f562:	4805      	ldr	r0, [pc, #20]	@ (800f578 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f564:	f7ff fd65 	bl	800f032 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f568:	4b02      	ldr	r3, [pc, #8]	@ (800f574 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	200017b8 	.word	0x200017b8
 800f578:	080106a0 	.word	0x080106a0

0800f57c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f582:	4b0f      	ldr	r3, [pc, #60]	@ (800f5c0 <Get_SerialNum+0x44>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f588:	4b0e      	ldr	r3, [pc, #56]	@ (800f5c4 <Get_SerialNum+0x48>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f58e:	4b0e      	ldr	r3, [pc, #56]	@ (800f5c8 <Get_SerialNum+0x4c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4413      	add	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d009      	beq.n	800f5b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	4909      	ldr	r1, [pc, #36]	@ (800f5cc <Get_SerialNum+0x50>)
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 f814 	bl	800f5d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f5ac:	2204      	movs	r2, #4
 800f5ae:	4908      	ldr	r1, [pc, #32]	@ (800f5d0 <Get_SerialNum+0x54>)
 800f5b0:	68b8      	ldr	r0, [r7, #8]
 800f5b2:	f000 f80f 	bl	800f5d4 <IntToUnicode>
  }
}
 800f5b6:	bf00      	nop
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	1fff7590 	.word	0x1fff7590
 800f5c4:	1fff7594 	.word	0x1fff7594
 800f5c8:	1fff7598 	.word	0x1fff7598
 800f5cc:	2000016a 	.word	0x2000016a
 800f5d0:	2000017a 	.word	0x2000017a

0800f5d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	75fb      	strb	r3, [r7, #23]
 800f5ea:	e027      	b.n	800f63c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	0f1b      	lsrs	r3, r3, #28
 800f5f0:	2b09      	cmp	r3, #9
 800f5f2:	d80b      	bhi.n	800f60c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	0f1b      	lsrs	r3, r3, #28
 800f5f8:	b2da      	uxtb	r2, r3
 800f5fa:	7dfb      	ldrb	r3, [r7, #23]
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4619      	mov	r1, r3
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	440b      	add	r3, r1
 800f604:	3230      	adds	r2, #48	@ 0x30
 800f606:	b2d2      	uxtb	r2, r2
 800f608:	701a      	strb	r2, [r3, #0]
 800f60a:	e00a      	b.n	800f622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	0f1b      	lsrs	r3, r3, #28
 800f610:	b2da      	uxtb	r2, r3
 800f612:	7dfb      	ldrb	r3, [r7, #23]
 800f614:	005b      	lsls	r3, r3, #1
 800f616:	4619      	mov	r1, r3
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	440b      	add	r3, r1
 800f61c:	3237      	adds	r2, #55	@ 0x37
 800f61e:	b2d2      	uxtb	r2, r2
 800f620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	011b      	lsls	r3, r3, #4
 800f626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f628:	7dfb      	ldrb	r3, [r7, #23]
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	3301      	adds	r3, #1
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	4413      	add	r3, r2
 800f632:	2200      	movs	r2, #0
 800f634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	3301      	adds	r3, #1
 800f63a:	75fb      	strb	r3, [r7, #23]
 800f63c:	7dfa      	ldrb	r2, [r7, #23]
 800f63e:	79fb      	ldrb	r3, [r7, #7]
 800f640:	429a      	cmp	r2, r3
 800f642:	d3d3      	bcc.n	800f5ec <IntToUnicode+0x18>
  }
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
	...

0800f654 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b098      	sub	sp, #96	@ 0x60
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f65c:	f107 0310 	add.w	r3, r7, #16
 800f660:	2250      	movs	r2, #80	@ 0x50
 800f662:	2100      	movs	r1, #0
 800f664:	4618      	mov	r0, r3
 800f666:	f000 fb3f 	bl	800fce8 <memset>
  if(pcdHandle->Instance==USB)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a15      	ldr	r2, [pc, #84]	@ (800f6c4 <HAL_PCD_MspInit+0x70>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d122      	bne.n	800f6ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f678:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f67a:	2300      	movs	r3, #0
 800f67c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f67e:	f107 0310 	add.w	r3, r7, #16
 800f682:	4618      	mov	r0, r3
 800f684:	f7f8 fad2 	bl	8007c2c <HAL_RCCEx_PeriphCLKConfig>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d001      	beq.n	800f692 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f68e:	f7f1 feae 	bl	80013ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f692:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c8 <HAL_PCD_MspInit+0x74>)
 800f694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f696:	4a0c      	ldr	r2, [pc, #48]	@ (800f6c8 <HAL_PCD_MspInit+0x74>)
 800f698:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f69c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f69e:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c8 <HAL_PCD_MspInit+0x74>)
 800f6a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f6a6:	60fb      	str	r3, [r7, #12]
 800f6a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	2014      	movs	r0, #20
 800f6b0:	f7f4 fb4b 	bl	8003d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f6b4:	2014      	movs	r0, #20
 800f6b6:	f7f4 fb62 	bl	8003d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f6ba:	bf00      	nop
 800f6bc:	3760      	adds	r7, #96	@ 0x60
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	40005c00 	.word	0x40005c00
 800f6c8:	40021000 	.word	0x40021000

0800f6cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7fe fd08 	bl	800e0f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f6e8:	bf00      	nop
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f702:	78fa      	ldrb	r2, [r7, #3]
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	4613      	mov	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	00db      	lsls	r3, r3, #3
 800f70e:	440b      	add	r3, r1
 800f710:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	78fb      	ldrb	r3, [r7, #3]
 800f718:	4619      	mov	r1, r3
 800f71a:	f7fe fd42 	bl	800e1a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b082      	sub	sp, #8
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
 800f72e:	460b      	mov	r3, r1
 800f730:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f738:	78fa      	ldrb	r2, [r7, #3]
 800f73a:	6879      	ldr	r1, [r7, #4]
 800f73c:	4613      	mov	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4413      	add	r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3324      	adds	r3, #36	@ 0x24
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	78fb      	ldrb	r3, [r7, #3]
 800f74c:	4619      	mov	r1, r3
 800f74e:	f7fe fd8b 	bl	800e268 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f752:	bf00      	nop
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b082      	sub	sp, #8
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe fe9f 	bl	800e4ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b084      	sub	sp, #16
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f77e:	2301      	movs	r3, #1
 800f780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	795b      	ldrb	r3, [r3, #5]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d001      	beq.n	800f78e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f78a:	f7f1 fe30 	bl	80013ee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f794:	7bfa      	ldrb	r2, [r7, #15]
 800f796:	4611      	mov	r1, r2
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fe fe49 	bl	800e430 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fdf5 	bl	800e394 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f7aa:	bf00      	nop
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
	...

0800f7b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fe fe44 	bl	800e450 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	7a5b      	ldrb	r3, [r3, #9]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d005      	beq.n	800f7dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7d0:	4b04      	ldr	r3, [pc, #16]	@ (800f7e4 <HAL_PCD_SuspendCallback+0x30>)
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	4a03      	ldr	r2, [pc, #12]	@ (800f7e4 <HAL_PCD_SuspendCallback+0x30>)
 800f7d6:	f043 0306 	orr.w	r3, r3, #6
 800f7da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	e000ed00 	.word	0xe000ed00

0800f7e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7a5b      	ldrb	r3, [r3, #9]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d007      	beq.n	800f808 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7f8:	4b08      	ldr	r3, [pc, #32]	@ (800f81c <HAL_PCD_ResumeCallback+0x34>)
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	4a07      	ldr	r2, [pc, #28]	@ (800f81c <HAL_PCD_ResumeCallback+0x34>)
 800f7fe:	f023 0306 	bic.w	r3, r3, #6
 800f802:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f804:	f000 f9f8 	bl	800fbf8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fe fe34 	bl	800e47c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f814:	bf00      	nop
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	e000ed00 	.word	0xe000ed00

0800f820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f828:	4a2b      	ldr	r2, [pc, #172]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a29      	ldr	r2, [pc, #164]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f834:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f838:	4b27      	ldr	r3, [pc, #156]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f83a:	4a28      	ldr	r2, [pc, #160]	@ (800f8dc <USBD_LL_Init+0xbc>)
 800f83c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f83e:	4b26      	ldr	r3, [pc, #152]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f840:	2208      	movs	r2, #8
 800f842:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f844:	4b24      	ldr	r3, [pc, #144]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f846:	2202      	movs	r2, #2
 800f848:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f84a:	4b23      	ldr	r3, [pc, #140]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f84c:	2202      	movs	r2, #2
 800f84e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f850:	4b21      	ldr	r3, [pc, #132]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f852:	2200      	movs	r2, #0
 800f854:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f856:	4b20      	ldr	r3, [pc, #128]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f858:	2200      	movs	r2, #0
 800f85a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f85c:	4b1e      	ldr	r3, [pc, #120]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f85e:	2200      	movs	r2, #0
 800f860:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f862:	4b1d      	ldr	r3, [pc, #116]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f864:	2200      	movs	r2, #0
 800f866:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f868:	481b      	ldr	r0, [pc, #108]	@ (800f8d8 <USBD_LL_Init+0xb8>)
 800f86a:	f7f5 fefb 	bl	8005664 <HAL_PCD_Init>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f874:	f7f1 fdbb 	bl	80013ee <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f87e:	2318      	movs	r3, #24
 800f880:	2200      	movs	r2, #0
 800f882:	2100      	movs	r1, #0
 800f884:	f7f7 fb82 	bl	8006f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f88e:	2358      	movs	r3, #88	@ 0x58
 800f890:	2200      	movs	r2, #0
 800f892:	2180      	movs	r1, #128	@ 0x80
 800f894:	f7f7 fb7a 	bl	8006f8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f89e:	23c0      	movs	r3, #192	@ 0xc0
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	2181      	movs	r1, #129	@ 0x81
 800f8a4:	f7f7 fb72 	bl	8006f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f8ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	f7f7 fb69 	bl	8006f8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f8c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2182      	movs	r1, #130	@ 0x82
 800f8c8:	f7f7 fb60 	bl	8006f8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	200019b8 	.word	0x200019b8
 800f8dc:	40005c00 	.word	0x40005c00

0800f8e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7f5 ff82 	bl	8005800 <HAL_PCD_Start>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	4618      	mov	r0, r3
 800f904:	f000 f97e 	bl	800fc04 <USBD_Get_USB_Status>
 800f908:	4603      	mov	r3, r0
 800f90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3710      	adds	r7, #16
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	4608      	mov	r0, r1
 800f920:	4611      	mov	r1, r2
 800f922:	461a      	mov	r2, r3
 800f924:	4603      	mov	r3, r0
 800f926:	70fb      	strb	r3, [r7, #3]
 800f928:	460b      	mov	r3, r1
 800f92a:	70bb      	strb	r3, [r7, #2]
 800f92c:	4613      	mov	r3, r2
 800f92e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f934:	2300      	movs	r3, #0
 800f936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f93e:	78bb      	ldrb	r3, [r7, #2]
 800f940:	883a      	ldrh	r2, [r7, #0]
 800f942:	78f9      	ldrb	r1, [r7, #3]
 800f944:	f7f6 f8c9 	bl	8005ada <HAL_PCD_EP_Open>
 800f948:	4603      	mov	r3, r0
 800f94a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	4618      	mov	r0, r3
 800f950:	f000 f958 	bl	800fc04 <USBD_Get_USB_Status>
 800f954:	4603      	mov	r3, r0
 800f956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f958:	7bbb      	ldrb	r3, [r7, #14]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b084      	sub	sp, #16
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f96e:	2300      	movs	r3, #0
 800f970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f97c:	78fa      	ldrb	r2, [r7, #3]
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f7f6 f909 	bl	8005b98 <HAL_PCD_EP_Close>
 800f986:	4603      	mov	r3, r0
 800f988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f939 	bl	800fc04 <USBD_Get_USB_Status>
 800f992:	4603      	mov	r3, r0
 800f994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f996:	7bbb      	ldrb	r3, [r7, #14]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f9ba:	78fa      	ldrb	r2, [r7, #3]
 800f9bc:	4611      	mov	r1, r2
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7f6 f9b2 	bl	8005d28 <HAL_PCD_EP_SetStall>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f000 f91a 	bl	800fc04 <USBD_Get_USB_Status>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f9f8:	78fa      	ldrb	r2, [r7, #3]
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f6 f9e5 	bl	8005dcc <HAL_PCD_EP_ClrStall>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 f8fb 	bl	800fc04 <USBD_Get_USB_Status>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa12:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	460b      	mov	r3, r1
 800fa26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fa2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	da0b      	bge.n	800fa50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa38:	78fb      	ldrb	r3, [r7, #3]
 800fa3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa3e:	68f9      	ldr	r1, [r7, #12]
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	440b      	add	r3, r1
 800fa4a:	3312      	adds	r3, #18
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	e00b      	b.n	800fa68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa50:	78fb      	ldrb	r3, [r7, #3]
 800fa52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa56:	68f9      	ldr	r1, [r7, #12]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	4413      	add	r3, r2
 800fa5e:	00db      	lsls	r3, r3, #3
 800fa60:	440b      	add	r3, r1
 800fa62:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800fa66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3714      	adds	r7, #20
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa80:	2300      	movs	r3, #0
 800fa82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fa8e:	78fa      	ldrb	r2, [r7, #3]
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f5 fffd 	bl	8005a92 <HAL_PCD_SetAddress>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 f8b0 	bl	800fc04 <USBD_Get_USB_Status>
 800faa4:	4603      	mov	r3, r0
 800faa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3710      	adds	r7, #16
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b086      	sub	sp, #24
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	60f8      	str	r0, [r7, #12]
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	603b      	str	r3, [r7, #0]
 800fabe:	460b      	mov	r3, r1
 800fac0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac6:	2300      	movs	r3, #0
 800fac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fad0:	7af9      	ldrb	r1, [r7, #11]
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	f7f6 f8f0 	bl	8005cba <HAL_PCD_EP_Transmit>
 800fada:	4603      	mov	r3, r0
 800fadc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 f88f 	bl	800fc04 <USBD_Get_USB_Status>
 800fae6:	4603      	mov	r3, r0
 800fae8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800faea:	7dbb      	ldrb	r3, [r7, #22]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3718      	adds	r7, #24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b086      	sub	sp, #24
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	607a      	str	r2, [r7, #4]
 800fafe:	603b      	str	r3, [r7, #0]
 800fb00:	460b      	mov	r3, r1
 800fb02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb12:	7af9      	ldrb	r1, [r7, #11]
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	f7f6 f886 	bl	8005c28 <HAL_PCD_EP_Receive>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 f86e 	bl	800fc04 <USBD_Get_USB_Status>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b082      	sub	sp, #8
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb48:	78fa      	ldrb	r2, [r7, #3]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7f6 f89c 	bl	8005c8a <HAL_PCD_EP_GetRxCount>
 800fb52:	4603      	mov	r3, r0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	460b      	mov	r3, r1
 800fb66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fb68:	78fb      	ldrb	r3, [r7, #3]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d002      	beq.n	800fb74 <HAL_PCDEx_LPM_Callback+0x18>
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d013      	beq.n	800fb9a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fb72:	e023      	b.n	800fbbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	7a5b      	ldrb	r3, [r3, #9]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d007      	beq.n	800fb8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fb7c:	f000 f83c 	bl	800fbf8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb80:	4b10      	ldr	r3, [pc, #64]	@ (800fbc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	4a0f      	ldr	r2, [pc, #60]	@ (800fbc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800fb86:	f023 0306 	bic.w	r3, r3, #6
 800fb8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe fc72 	bl	800e47c <USBD_LL_Resume>
    break;
 800fb98:	e010      	b.n	800fbbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fe fc55 	bl	800e450 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	7a5b      	ldrb	r3, [r3, #9]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d005      	beq.n	800fbba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbae:	4b05      	ldr	r3, [pc, #20]	@ (800fbc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	4a04      	ldr	r2, [pc, #16]	@ (800fbc4 <HAL_PCDEx_LPM_Callback+0x68>)
 800fbb4:	f043 0306 	orr.w	r3, r3, #6
 800fbb8:	6113      	str	r3, [r2, #16]
    break;
 800fbba:	bf00      	nop
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	e000ed00 	.word	0xe000ed00

0800fbc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbd0:	4b03      	ldr	r3, [pc, #12]	@ (800fbe0 <USBD_static_malloc+0x18>)
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	370c      	adds	r7, #12
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	20001c94 	.word	0x20001c94

0800fbe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]

}
 800fbec:	bf00      	nop
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fbfc:	f7f1 fbac 	bl	8001358 <SystemClock_Config>
}
 800fc00:	bf00      	nop
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc12:	79fb      	ldrb	r3, [r7, #7]
 800fc14:	2b03      	cmp	r3, #3
 800fc16:	d817      	bhi.n	800fc48 <USBD_Get_USB_Status+0x44>
 800fc18:	a201      	add	r2, pc, #4	@ (adr r2, 800fc20 <USBD_Get_USB_Status+0x1c>)
 800fc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1e:	bf00      	nop
 800fc20:	0800fc31 	.word	0x0800fc31
 800fc24:	0800fc37 	.word	0x0800fc37
 800fc28:	0800fc3d 	.word	0x0800fc3d
 800fc2c:	0800fc43 	.word	0x0800fc43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
    break;
 800fc34:	e00b      	b.n	800fc4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc36:	2303      	movs	r3, #3
 800fc38:	73fb      	strb	r3, [r7, #15]
    break;
 800fc3a:	e008      	b.n	800fc4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc40:	e005      	b.n	800fc4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc42:	2303      	movs	r3, #3
 800fc44:	73fb      	strb	r3, [r7, #15]
    break;
 800fc46:	e002      	b.n	800fc4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc4c:	bf00      	nop
  }
  return usb_status;
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <arm_sin_f32>:
 800fc5c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800fcdc <arm_sin_f32+0x80>
 800fc60:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fc70:	d504      	bpl.n	800fc7c <arm_sin_f32+0x20>
 800fc72:	ee17 3a90 	vmov	r3, s15
 800fc76:	3b01      	subs	r3, #1
 800fc78:	ee07 3a90 	vmov	s15, r3
 800fc7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc80:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800fce0 <arm_sin_f32+0x84>
 800fc84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc88:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fc8c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fc90:	ee17 3a90 	vmov	r3, s15
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc9a:	d21a      	bcs.n	800fcd2 <arm_sin_f32+0x76>
 800fc9c:	ee07 3a90 	vmov	s15, r3
 800fca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca4:	1c59      	adds	r1, r3, #1
 800fca6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fcaa:	4a0e      	ldr	r2, [pc, #56]	@ (800fce4 <arm_sin_f32+0x88>)
 800fcac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fcb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fcb8:	ed93 7a00 	vldr	s14, [r3]
 800fcbc:	edd2 6a00 	vldr	s13, [r2]
 800fcc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fcc4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fcc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fccc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fcd0:	4770      	bx	lr
 800fcd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fcd6:	2101      	movs	r1, #1
 800fcd8:	2300      	movs	r3, #0
 800fcda:	e7e6      	b.n	800fcaa <arm_sin_f32+0x4e>
 800fcdc:	3e22f983 	.word	0x3e22f983
 800fce0:	44000000 	.word	0x44000000
 800fce4:	080106f0 	.word	0x080106f0

0800fce8 <memset>:
 800fce8:	4402      	add	r2, r0
 800fcea:	4603      	mov	r3, r0
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d100      	bne.n	800fcf2 <memset+0xa>
 800fcf0:	4770      	bx	lr
 800fcf2:	f803 1b01 	strb.w	r1, [r3], #1
 800fcf6:	e7f9      	b.n	800fcec <memset+0x4>

0800fcf8 <__errno>:
 800fcf8:	4b01      	ldr	r3, [pc, #4]	@ (800fd00 <__errno+0x8>)
 800fcfa:	6818      	ldr	r0, [r3, #0]
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	20000184 	.word	0x20000184

0800fd04 <__libc_init_array>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	4d0d      	ldr	r5, [pc, #52]	@ (800fd3c <__libc_init_array+0x38>)
 800fd08:	4c0d      	ldr	r4, [pc, #52]	@ (800fd40 <__libc_init_array+0x3c>)
 800fd0a:	1b64      	subs	r4, r4, r5
 800fd0c:	10a4      	asrs	r4, r4, #2
 800fd0e:	2600      	movs	r6, #0
 800fd10:	42a6      	cmp	r6, r4
 800fd12:	d109      	bne.n	800fd28 <__libc_init_array+0x24>
 800fd14:	4d0b      	ldr	r5, [pc, #44]	@ (800fd44 <__libc_init_array+0x40>)
 800fd16:	4c0c      	ldr	r4, [pc, #48]	@ (800fd48 <__libc_init_array+0x44>)
 800fd18:	f000 fc92 	bl	8010640 <_init>
 800fd1c:	1b64      	subs	r4, r4, r5
 800fd1e:	10a4      	asrs	r4, r4, #2
 800fd20:	2600      	movs	r6, #0
 800fd22:	42a6      	cmp	r6, r4
 800fd24:	d105      	bne.n	800fd32 <__libc_init_array+0x2e>
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd2c:	4798      	blx	r3
 800fd2e:	3601      	adds	r6, #1
 800fd30:	e7ee      	b.n	800fd10 <__libc_init_array+0xc>
 800fd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd36:	4798      	blx	r3
 800fd38:	3601      	adds	r6, #1
 800fd3a:	e7f2      	b.n	800fd22 <__libc_init_array+0x1e>
 800fd3c:	08010f1c 	.word	0x08010f1c
 800fd40:	08010f1c 	.word	0x08010f1c
 800fd44:	08010f1c 	.word	0x08010f1c
 800fd48:	08010f20 	.word	0x08010f20

0800fd4c <memcpy>:
 800fd4c:	440a      	add	r2, r1
 800fd4e:	4291      	cmp	r1, r2
 800fd50:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd54:	d100      	bne.n	800fd58 <memcpy+0xc>
 800fd56:	4770      	bx	lr
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd62:	4291      	cmp	r1, r2
 800fd64:	d1f9      	bne.n	800fd5a <memcpy+0xe>
 800fd66:	bd10      	pop	{r4, pc}

0800fd68 <fmodf>:
 800fd68:	b508      	push	{r3, lr}
 800fd6a:	ed2d 8b02 	vpush	{d8}
 800fd6e:	eef0 8a40 	vmov.f32	s17, s0
 800fd72:	eeb0 8a60 	vmov.f32	s16, s1
 800fd76:	f000 f879 	bl	800fe6c <__ieee754_fmodf>
 800fd7a:	eef4 8a48 	vcmp.f32	s17, s16
 800fd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd82:	d60c      	bvs.n	800fd9e <fmodf+0x36>
 800fd84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fda4 <fmodf+0x3c>
 800fd88:	eeb4 8a68 	vcmp.f32	s16, s17
 800fd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd90:	d105      	bne.n	800fd9e <fmodf+0x36>
 800fd92:	f7ff ffb1 	bl	800fcf8 <__errno>
 800fd96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fd9a:	2321      	movs	r3, #33	@ 0x21
 800fd9c:	6003      	str	r3, [r0, #0]
 800fd9e:	ecbd 8b02 	vpop	{d8}
 800fda2:	bd08      	pop	{r3, pc}
 800fda4:	00000000 	.word	0x00000000

0800fda8 <powf>:
 800fda8:	b508      	push	{r3, lr}
 800fdaa:	ed2d 8b04 	vpush	{d8-d9}
 800fdae:	eeb0 8a60 	vmov.f32	s16, s1
 800fdb2:	eeb0 9a40 	vmov.f32	s18, s0
 800fdb6:	f000 f8db 	bl	800ff70 <__ieee754_powf>
 800fdba:	eeb4 8a48 	vcmp.f32	s16, s16
 800fdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc2:	eef0 8a40 	vmov.f32	s17, s0
 800fdc6:	d63e      	bvs.n	800fe46 <powf+0x9e>
 800fdc8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd0:	d112      	bne.n	800fdf8 <powf+0x50>
 800fdd2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdda:	d039      	beq.n	800fe50 <powf+0xa8>
 800fddc:	eeb0 0a48 	vmov.f32	s0, s16
 800fde0:	f000 f839 	bl	800fe56 <finitef>
 800fde4:	b378      	cbz	r0, 800fe46 <powf+0x9e>
 800fde6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	d52a      	bpl.n	800fe46 <powf+0x9e>
 800fdf0:	f7ff ff82 	bl	800fcf8 <__errno>
 800fdf4:	2322      	movs	r3, #34	@ 0x22
 800fdf6:	e014      	b.n	800fe22 <powf+0x7a>
 800fdf8:	f000 f82d 	bl	800fe56 <finitef>
 800fdfc:	b998      	cbnz	r0, 800fe26 <powf+0x7e>
 800fdfe:	eeb0 0a49 	vmov.f32	s0, s18
 800fe02:	f000 f828 	bl	800fe56 <finitef>
 800fe06:	b170      	cbz	r0, 800fe26 <powf+0x7e>
 800fe08:	eeb0 0a48 	vmov.f32	s0, s16
 800fe0c:	f000 f823 	bl	800fe56 <finitef>
 800fe10:	b148      	cbz	r0, 800fe26 <powf+0x7e>
 800fe12:	eef4 8a68 	vcmp.f32	s17, s17
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	d7e9      	bvc.n	800fdf0 <powf+0x48>
 800fe1c:	f7ff ff6c 	bl	800fcf8 <__errno>
 800fe20:	2321      	movs	r3, #33	@ 0x21
 800fe22:	6003      	str	r3, [r0, #0]
 800fe24:	e00f      	b.n	800fe46 <powf+0x9e>
 800fe26:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	d10a      	bne.n	800fe46 <powf+0x9e>
 800fe30:	eeb0 0a49 	vmov.f32	s0, s18
 800fe34:	f000 f80f 	bl	800fe56 <finitef>
 800fe38:	b128      	cbz	r0, 800fe46 <powf+0x9e>
 800fe3a:	eeb0 0a48 	vmov.f32	s0, s16
 800fe3e:	f000 f80a 	bl	800fe56 <finitef>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d1d4      	bne.n	800fdf0 <powf+0x48>
 800fe46:	eeb0 0a68 	vmov.f32	s0, s17
 800fe4a:	ecbd 8b04 	vpop	{d8-d9}
 800fe4e:	bd08      	pop	{r3, pc}
 800fe50:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800fe54:	e7f7      	b.n	800fe46 <powf+0x9e>

0800fe56 <finitef>:
 800fe56:	ee10 3a10 	vmov	r3, s0
 800fe5a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800fe5e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800fe62:	bfac      	ite	ge
 800fe64:	2000      	movge	r0, #0
 800fe66:	2001      	movlt	r0, #1
 800fe68:	4770      	bx	lr
	...

0800fe6c <__ieee754_fmodf>:
 800fe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe6e:	ee10 5a90 	vmov	r5, s1
 800fe72:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800fe76:	1e43      	subs	r3, r0, #1
 800fe78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe7c:	d206      	bcs.n	800fe8c <__ieee754_fmodf+0x20>
 800fe7e:	ee10 3a10 	vmov	r3, s0
 800fe82:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800fe86:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800fe8a:	d304      	bcc.n	800fe96 <__ieee754_fmodf+0x2a>
 800fe8c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800fe90:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800fe94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe96:	4286      	cmp	r6, r0
 800fe98:	dbfc      	blt.n	800fe94 <__ieee754_fmodf+0x28>
 800fe9a:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800fe9e:	d105      	bne.n	800feac <__ieee754_fmodf+0x40>
 800fea0:	4b32      	ldr	r3, [pc, #200]	@ (800ff6c <__ieee754_fmodf+0x100>)
 800fea2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800fea6:	ed93 0a00 	vldr	s0, [r3]
 800feaa:	e7f3      	b.n	800fe94 <__ieee754_fmodf+0x28>
 800feac:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800feb0:	d140      	bne.n	800ff34 <__ieee754_fmodf+0xc8>
 800feb2:	0232      	lsls	r2, r6, #8
 800feb4:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800feb8:	2a00      	cmp	r2, #0
 800feba:	dc38      	bgt.n	800ff2e <__ieee754_fmodf+0xc2>
 800febc:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800fec0:	d13e      	bne.n	800ff40 <__ieee754_fmodf+0xd4>
 800fec2:	0207      	lsls	r7, r0, #8
 800fec4:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800fec8:	2f00      	cmp	r7, #0
 800feca:	da36      	bge.n	800ff3a <__ieee754_fmodf+0xce>
 800fecc:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800fed0:	bfb9      	ittee	lt
 800fed2:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800fed6:	1a5b      	sublt	r3, r3, r1
 800fed8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800fedc:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800fee0:	bfb8      	it	lt
 800fee2:	fa06 f303 	lsllt.w	r3, r6, r3
 800fee6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800feea:	bfb5      	itete	lt
 800feec:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800fef0:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800fef4:	1aad      	sublt	r5, r5, r2
 800fef6:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800fefa:	bfb8      	it	lt
 800fefc:	40a8      	lsllt	r0, r5
 800fefe:	1a89      	subs	r1, r1, r2
 800ff00:	1a1d      	subs	r5, r3, r0
 800ff02:	bb01      	cbnz	r1, 800ff46 <__ieee754_fmodf+0xda>
 800ff04:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800ff08:	bf38      	it	cc
 800ff0a:	462b      	movcc	r3, r5
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d0c7      	beq.n	800fea0 <__ieee754_fmodf+0x34>
 800ff10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ff14:	db1f      	blt.n	800ff56 <__ieee754_fmodf+0xea>
 800ff16:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800ff1a:	db1f      	blt.n	800ff5c <__ieee754_fmodf+0xf0>
 800ff1c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800ff20:	327f      	adds	r2, #127	@ 0x7f
 800ff22:	4323      	orrs	r3, r4
 800ff24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ff28:	ee00 3a10 	vmov	s0, r3
 800ff2c:	e7b2      	b.n	800fe94 <__ieee754_fmodf+0x28>
 800ff2e:	3901      	subs	r1, #1
 800ff30:	0052      	lsls	r2, r2, #1
 800ff32:	e7c1      	b.n	800feb8 <__ieee754_fmodf+0x4c>
 800ff34:	15f1      	asrs	r1, r6, #23
 800ff36:	397f      	subs	r1, #127	@ 0x7f
 800ff38:	e7c0      	b.n	800febc <__ieee754_fmodf+0x50>
 800ff3a:	3a01      	subs	r2, #1
 800ff3c:	007f      	lsls	r7, r7, #1
 800ff3e:	e7c3      	b.n	800fec8 <__ieee754_fmodf+0x5c>
 800ff40:	15c2      	asrs	r2, r0, #23
 800ff42:	3a7f      	subs	r2, #127	@ 0x7f
 800ff44:	e7c2      	b.n	800fecc <__ieee754_fmodf+0x60>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	da02      	bge.n	800ff50 <__ieee754_fmodf+0xe4>
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	3901      	subs	r1, #1
 800ff4e:	e7d7      	b.n	800ff00 <__ieee754_fmodf+0x94>
 800ff50:	d0a6      	beq.n	800fea0 <__ieee754_fmodf+0x34>
 800ff52:	006b      	lsls	r3, r5, #1
 800ff54:	e7fa      	b.n	800ff4c <__ieee754_fmodf+0xe0>
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	3a01      	subs	r2, #1
 800ff5a:	e7d9      	b.n	800ff10 <__ieee754_fmodf+0xa4>
 800ff5c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800ff60:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ff64:	3282      	adds	r2, #130	@ 0x82
 800ff66:	4113      	asrs	r3, r2
 800ff68:	4323      	orrs	r3, r4
 800ff6a:	e7dd      	b.n	800ff28 <__ieee754_fmodf+0xbc>
 800ff6c:	08010ef4 	.word	0x08010ef4

0800ff70 <__ieee754_powf>:
 800ff70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff74:	ee10 4a90 	vmov	r4, s1
 800ff78:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ff7c:	ed2d 8b02 	vpush	{d8}
 800ff80:	ee10 6a10 	vmov	r6, s0
 800ff84:	eeb0 8a40 	vmov.f32	s16, s0
 800ff88:	eef0 8a60 	vmov.f32	s17, s1
 800ff8c:	d10c      	bne.n	800ffa8 <__ieee754_powf+0x38>
 800ff8e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ff92:	0076      	lsls	r6, r6, #1
 800ff94:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ff98:	f240 829c 	bls.w	80104d4 <__ieee754_powf+0x564>
 800ff9c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ffa0:	ecbd 8b02 	vpop	{d8}
 800ffa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ffac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ffb0:	d802      	bhi.n	800ffb8 <__ieee754_powf+0x48>
 800ffb2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ffb6:	d908      	bls.n	800ffca <__ieee754_powf+0x5a>
 800ffb8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ffbc:	d1ee      	bne.n	800ff9c <__ieee754_powf+0x2c>
 800ffbe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ffc2:	0064      	lsls	r4, r4, #1
 800ffc4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ffc8:	e7e6      	b.n	800ff98 <__ieee754_powf+0x28>
 800ffca:	2e00      	cmp	r6, #0
 800ffcc:	da1e      	bge.n	801000c <__ieee754_powf+0x9c>
 800ffce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ffd2:	d22b      	bcs.n	801002c <__ieee754_powf+0xbc>
 800ffd4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ffd8:	d332      	bcc.n	8010040 <__ieee754_powf+0xd0>
 800ffda:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ffde:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ffe2:	fa49 f503 	asr.w	r5, r9, r3
 800ffe6:	fa05 f303 	lsl.w	r3, r5, r3
 800ffea:	454b      	cmp	r3, r9
 800ffec:	d126      	bne.n	801003c <__ieee754_powf+0xcc>
 800ffee:	f005 0501 	and.w	r5, r5, #1
 800fff2:	f1c5 0502 	rsb	r5, r5, #2
 800fff6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800fffa:	d122      	bne.n	8010042 <__ieee754_powf+0xd2>
 800fffc:	2c00      	cmp	r4, #0
 800fffe:	f280 826f 	bge.w	80104e0 <__ieee754_powf+0x570>
 8010002:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010006:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801000a:	e7c9      	b.n	800ffa0 <__ieee754_powf+0x30>
 801000c:	2500      	movs	r5, #0
 801000e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010012:	d1f0      	bne.n	800fff6 <__ieee754_powf+0x86>
 8010014:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010018:	f000 825c 	beq.w	80104d4 <__ieee754_powf+0x564>
 801001c:	d908      	bls.n	8010030 <__ieee754_powf+0xc0>
 801001e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8010380 <__ieee754_powf+0x410>
 8010022:	2c00      	cmp	r4, #0
 8010024:	bfa8      	it	ge
 8010026:	eeb0 0a68 	vmovge.f32	s0, s17
 801002a:	e7b9      	b.n	800ffa0 <__ieee754_powf+0x30>
 801002c:	2502      	movs	r5, #2
 801002e:	e7ee      	b.n	801000e <__ieee754_powf+0x9e>
 8010030:	2c00      	cmp	r4, #0
 8010032:	f280 8252 	bge.w	80104da <__ieee754_powf+0x56a>
 8010036:	eeb1 0a68 	vneg.f32	s0, s17
 801003a:	e7b1      	b.n	800ffa0 <__ieee754_powf+0x30>
 801003c:	2500      	movs	r5, #0
 801003e:	e7da      	b.n	800fff6 <__ieee754_powf+0x86>
 8010040:	2500      	movs	r5, #0
 8010042:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010046:	d102      	bne.n	801004e <__ieee754_powf+0xde>
 8010048:	ee28 0a08 	vmul.f32	s0, s16, s16
 801004c:	e7a8      	b.n	800ffa0 <__ieee754_powf+0x30>
 801004e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010052:	d109      	bne.n	8010068 <__ieee754_powf+0xf8>
 8010054:	2e00      	cmp	r6, #0
 8010056:	db07      	blt.n	8010068 <__ieee754_powf+0xf8>
 8010058:	eeb0 0a48 	vmov.f32	s0, s16
 801005c:	ecbd 8b02 	vpop	{d8}
 8010060:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010064:	f000 bae8 	b.w	8010638 <__ieee754_sqrtf>
 8010068:	eeb0 0a48 	vmov.f32	s0, s16
 801006c:	f000 fa50 	bl	8010510 <fabsf>
 8010070:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010074:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010078:	4647      	mov	r7, r8
 801007a:	d002      	beq.n	8010082 <__ieee754_powf+0x112>
 801007c:	f1b8 0f00 	cmp.w	r8, #0
 8010080:	d117      	bne.n	80100b2 <__ieee754_powf+0x142>
 8010082:	2c00      	cmp	r4, #0
 8010084:	bfbc      	itt	lt
 8010086:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801008a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801008e:	2e00      	cmp	r6, #0
 8010090:	da86      	bge.n	800ffa0 <__ieee754_powf+0x30>
 8010092:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010096:	ea58 0805 	orrs.w	r8, r8, r5
 801009a:	d104      	bne.n	80100a6 <__ieee754_powf+0x136>
 801009c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80100a0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80100a4:	e77c      	b.n	800ffa0 <__ieee754_powf+0x30>
 80100a6:	2d01      	cmp	r5, #1
 80100a8:	f47f af7a 	bne.w	800ffa0 <__ieee754_powf+0x30>
 80100ac:	eeb1 0a40 	vneg.f32	s0, s0
 80100b0:	e776      	b.n	800ffa0 <__ieee754_powf+0x30>
 80100b2:	0ff0      	lsrs	r0, r6, #31
 80100b4:	3801      	subs	r0, #1
 80100b6:	ea55 0300 	orrs.w	r3, r5, r0
 80100ba:	d104      	bne.n	80100c6 <__ieee754_powf+0x156>
 80100bc:	ee38 8a48 	vsub.f32	s16, s16, s16
 80100c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80100c4:	e76c      	b.n	800ffa0 <__ieee754_powf+0x30>
 80100c6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80100ca:	d973      	bls.n	80101b4 <__ieee754_powf+0x244>
 80100cc:	4bad      	ldr	r3, [pc, #692]	@ (8010384 <__ieee754_powf+0x414>)
 80100ce:	4598      	cmp	r8, r3
 80100d0:	d808      	bhi.n	80100e4 <__ieee754_powf+0x174>
 80100d2:	2c00      	cmp	r4, #0
 80100d4:	da0b      	bge.n	80100ee <__ieee754_powf+0x17e>
 80100d6:	2000      	movs	r0, #0
 80100d8:	ecbd 8b02 	vpop	{d8}
 80100dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100e0:	f000 baa4 	b.w	801062c <__math_oflowf>
 80100e4:	4ba8      	ldr	r3, [pc, #672]	@ (8010388 <__ieee754_powf+0x418>)
 80100e6:	4598      	cmp	r8, r3
 80100e8:	d908      	bls.n	80100fc <__ieee754_powf+0x18c>
 80100ea:	2c00      	cmp	r4, #0
 80100ec:	dcf3      	bgt.n	80100d6 <__ieee754_powf+0x166>
 80100ee:	2000      	movs	r0, #0
 80100f0:	ecbd 8b02 	vpop	{d8}
 80100f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100f8:	f000 ba92 	b.w	8010620 <__math_uflowf>
 80100fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010100:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010104:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801038c <__ieee754_powf+0x41c>
 8010108:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801010c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010110:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010114:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010118:	ee20 7a00 	vmul.f32	s14, s0, s0
 801011c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010120:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8010390 <__ieee754_powf+0x420>
 8010124:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010128:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8010394 <__ieee754_powf+0x424>
 801012c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010130:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8010398 <__ieee754_powf+0x428>
 8010134:	eef0 6a67 	vmov.f32	s13, s15
 8010138:	eee0 6a07 	vfma.f32	s13, s0, s14
 801013c:	ee16 3a90 	vmov	r3, s13
 8010140:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010144:	f023 030f 	bic.w	r3, r3, #15
 8010148:	ee06 3a90 	vmov	s13, r3
 801014c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8010150:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010154:	3d01      	subs	r5, #1
 8010156:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801015a:	4305      	orrs	r5, r0
 801015c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010160:	f024 040f 	bic.w	r4, r4, #15
 8010164:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010168:	bf18      	it	ne
 801016a:	eeb0 8a47 	vmovne.f32	s16, s14
 801016e:	ee07 4a10 	vmov	s14, r4
 8010172:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010176:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801017a:	ee07 3a90 	vmov	s15, r3
 801017e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010182:	ee07 4a10 	vmov	s14, r4
 8010186:	ee67 7a87 	vmul.f32	s15, s15, s14
 801018a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801018e:	ee17 1a10 	vmov	r1, s14
 8010192:	2900      	cmp	r1, #0
 8010194:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010198:	f340 80dd 	ble.w	8010356 <__ieee754_powf+0x3e6>
 801019c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80101a0:	f240 80ca 	bls.w	8010338 <__ieee754_powf+0x3c8>
 80101a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80101a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ac:	bf4c      	ite	mi
 80101ae:	2001      	movmi	r0, #1
 80101b0:	2000      	movpl	r0, #0
 80101b2:	e791      	b.n	80100d8 <__ieee754_powf+0x168>
 80101b4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80101b8:	bf01      	itttt	eq
 80101ba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801039c <__ieee754_powf+0x42c>
 80101be:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80101c2:	f06f 0317 	mvneq.w	r3, #23
 80101c6:	ee17 7a90 	vmoveq	r7, s15
 80101ca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80101ce:	bf18      	it	ne
 80101d0:	2300      	movne	r3, #0
 80101d2:	3a7f      	subs	r2, #127	@ 0x7f
 80101d4:	441a      	add	r2, r3
 80101d6:	4b72      	ldr	r3, [pc, #456]	@ (80103a0 <__ieee754_powf+0x430>)
 80101d8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80101dc:	429f      	cmp	r7, r3
 80101de:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80101e2:	dd06      	ble.n	80101f2 <__ieee754_powf+0x282>
 80101e4:	4b6f      	ldr	r3, [pc, #444]	@ (80103a4 <__ieee754_powf+0x434>)
 80101e6:	429f      	cmp	r7, r3
 80101e8:	f340 80a4 	ble.w	8010334 <__ieee754_powf+0x3c4>
 80101ec:	3201      	adds	r2, #1
 80101ee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80101f2:	2600      	movs	r6, #0
 80101f4:	4b6c      	ldr	r3, [pc, #432]	@ (80103a8 <__ieee754_powf+0x438>)
 80101f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80101fa:	ee07 1a10 	vmov	s14, r1
 80101fe:	edd3 5a00 	vldr	s11, [r3]
 8010202:	4b6a      	ldr	r3, [pc, #424]	@ (80103ac <__ieee754_powf+0x43c>)
 8010204:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801020c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010210:	1049      	asrs	r1, r1, #1
 8010212:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010216:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801021a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801021e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010222:	ee07 1a90 	vmov	s15, r1
 8010226:	ee26 5a24 	vmul.f32	s10, s12, s9
 801022a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801022e:	ee15 7a10 	vmov	r7, s10
 8010232:	401f      	ands	r7, r3
 8010234:	ee06 7a90 	vmov	s13, r7
 8010238:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801023c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010240:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010244:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010248:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80103b0 <__ieee754_powf+0x440>
 801024c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80103b4 <__ieee754_powf+0x444>
 8010250:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010254:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80103b8 <__ieee754_powf+0x448>
 8010258:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801025c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801038c <__ieee754_powf+0x41c>
 8010260:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010264:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80103bc <__ieee754_powf+0x44c>
 8010268:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801026c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80103c0 <__ieee754_powf+0x450>
 8010270:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010274:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010278:	ee35 7a26 	vadd.f32	s14, s10, s13
 801027c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010280:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010284:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010288:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801028c:	eef0 5a67 	vmov.f32	s11, s15
 8010290:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010294:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010298:	ee15 1a90 	vmov	r1, s11
 801029c:	4019      	ands	r1, r3
 801029e:	ee05 1a90 	vmov	s11, r1
 80102a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80102a6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80102aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80102b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80102b6:	eeb0 6a67 	vmov.f32	s12, s15
 80102ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80102be:	ee16 1a10 	vmov	r1, s12
 80102c2:	4019      	ands	r1, r3
 80102c4:	ee06 1a10 	vmov	s12, r1
 80102c8:	eeb0 7a46 	vmov.f32	s14, s12
 80102cc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80102d0:	493c      	ldr	r1, [pc, #240]	@ (80103c4 <__ieee754_powf+0x454>)
 80102d2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80102d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102da:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80103c8 <__ieee754_powf+0x458>
 80102de:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80103cc <__ieee754_powf+0x45c>
 80102e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80103d0 <__ieee754_powf+0x460>
 80102ea:	eee6 7a07 	vfma.f32	s15, s12, s14
 80102ee:	ed91 7a00 	vldr	s14, [r1]
 80102f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102f6:	ee07 2a10 	vmov	s14, r2
 80102fa:	eef0 6a67 	vmov.f32	s13, s15
 80102fe:	4a35      	ldr	r2, [pc, #212]	@ (80103d4 <__ieee754_powf+0x464>)
 8010300:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010304:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010308:	ed92 5a00 	vldr	s10, [r2]
 801030c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010310:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010314:	ee76 6a87 	vadd.f32	s13, s13, s14
 8010318:	ee16 2a90 	vmov	r2, s13
 801031c:	4013      	ands	r3, r2
 801031e:	ee06 3a90 	vmov	s13, r3
 8010322:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010326:	ee37 7a45 	vsub.f32	s14, s14, s10
 801032a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801032e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010332:	e70f      	b.n	8010154 <__ieee754_powf+0x1e4>
 8010334:	2601      	movs	r6, #1
 8010336:	e75d      	b.n	80101f4 <__ieee754_powf+0x284>
 8010338:	d152      	bne.n	80103e0 <__ieee754_powf+0x470>
 801033a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80103d8 <__ieee754_powf+0x468>
 801033e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010342:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010346:	eef4 6ac7 	vcmpe.f32	s13, s14
 801034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034e:	f73f af29 	bgt.w	80101a4 <__ieee754_powf+0x234>
 8010352:	2386      	movs	r3, #134	@ 0x86
 8010354:	e048      	b.n	80103e8 <__ieee754_powf+0x478>
 8010356:	4a21      	ldr	r2, [pc, #132]	@ (80103dc <__ieee754_powf+0x46c>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d907      	bls.n	801036c <__ieee754_powf+0x3fc>
 801035c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010364:	bf4c      	ite	mi
 8010366:	2001      	movmi	r0, #1
 8010368:	2000      	movpl	r0, #0
 801036a:	e6c1      	b.n	80100f0 <__ieee754_powf+0x180>
 801036c:	d138      	bne.n	80103e0 <__ieee754_powf+0x470>
 801036e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010372:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	dbea      	blt.n	8010352 <__ieee754_powf+0x3e2>
 801037c:	e7ee      	b.n	801035c <__ieee754_powf+0x3ec>
 801037e:	bf00      	nop
 8010380:	00000000 	.word	0x00000000
 8010384:	3f7ffff3 	.word	0x3f7ffff3
 8010388:	3f800007 	.word	0x3f800007
 801038c:	3eaaaaab 	.word	0x3eaaaaab
 8010390:	3fb8aa3b 	.word	0x3fb8aa3b
 8010394:	36eca570 	.word	0x36eca570
 8010398:	3fb8aa00 	.word	0x3fb8aa00
 801039c:	4b800000 	.word	0x4b800000
 80103a0:	001cc471 	.word	0x001cc471
 80103a4:	005db3d6 	.word	0x005db3d6
 80103a8:	08010f0c 	.word	0x08010f0c
 80103ac:	fffff000 	.word	0xfffff000
 80103b0:	3e6c3255 	.word	0x3e6c3255
 80103b4:	3e53f142 	.word	0x3e53f142
 80103b8:	3e8ba305 	.word	0x3e8ba305
 80103bc:	3edb6db7 	.word	0x3edb6db7
 80103c0:	3f19999a 	.word	0x3f19999a
 80103c4:	08010efc 	.word	0x08010efc
 80103c8:	3f76384f 	.word	0x3f76384f
 80103cc:	3f763800 	.word	0x3f763800
 80103d0:	369dc3a0 	.word	0x369dc3a0
 80103d4:	08010f04 	.word	0x08010f04
 80103d8:	3338aa3c 	.word	0x3338aa3c
 80103dc:	43160000 	.word	0x43160000
 80103e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80103e4:	d971      	bls.n	80104ca <__ieee754_powf+0x55a>
 80103e6:	15db      	asrs	r3, r3, #23
 80103e8:	3b7e      	subs	r3, #126	@ 0x7e
 80103ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80103ee:	4118      	asrs	r0, r3
 80103f0:	4408      	add	r0, r1
 80103f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80103f6:	4a3c      	ldr	r2, [pc, #240]	@ (80104e8 <__ieee754_powf+0x578>)
 80103f8:	3b7f      	subs	r3, #127	@ 0x7f
 80103fa:	411a      	asrs	r2, r3
 80103fc:	4002      	ands	r2, r0
 80103fe:	ee07 2a10 	vmov	s14, r2
 8010402:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010406:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801040a:	f1c3 0317 	rsb	r3, r3, #23
 801040e:	4118      	asrs	r0, r3
 8010410:	2900      	cmp	r1, #0
 8010412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010416:	bfb8      	it	lt
 8010418:	4240      	neglt	r0, r0
 801041a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801041e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80104ec <__ieee754_powf+0x57c>
 8010422:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80104f0 <__ieee754_powf+0x580>
 8010426:	ee17 3a10 	vmov	r3, s14
 801042a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801042e:	f023 030f 	bic.w	r3, r3, #15
 8010432:	ee07 3a10 	vmov	s14, r3
 8010436:	ee77 7a67 	vsub.f32	s15, s14, s15
 801043a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801043e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010442:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80104f4 <__ieee754_powf+0x584>
 8010446:	ee67 7a27 	vmul.f32	s15, s14, s15
 801044a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801044e:	eef0 6a67 	vmov.f32	s13, s15
 8010452:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010456:	eef0 5a66 	vmov.f32	s11, s13
 801045a:	eee7 5a46 	vfms.f32	s11, s14, s12
 801045e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010462:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010466:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80104f8 <__ieee754_powf+0x588>
 801046a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80104fc <__ieee754_powf+0x58c>
 801046e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010472:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8010500 <__ieee754_powf+0x590>
 8010476:	eee6 5a07 	vfma.f32	s11, s12, s14
 801047a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010504 <__ieee754_powf+0x594>
 801047e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010482:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8010508 <__ieee754_powf+0x598>
 8010486:	eee6 5a07 	vfma.f32	s11, s12, s14
 801048a:	eeb0 6a66 	vmov.f32	s12, s13
 801048e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8010492:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010496:	ee66 5a86 	vmul.f32	s11, s13, s12
 801049a:	ee36 6a47 	vsub.f32	s12, s12, s14
 801049e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80104a2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80104a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80104ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104b2:	ee10 3a10 	vmov	r3, s0
 80104b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80104ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80104be:	da06      	bge.n	80104ce <__ieee754_powf+0x55e>
 80104c0:	f000 f82e 	bl	8010520 <scalbnf>
 80104c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80104c8:	e56a      	b.n	800ffa0 <__ieee754_powf+0x30>
 80104ca:	2000      	movs	r0, #0
 80104cc:	e7a5      	b.n	801041a <__ieee754_powf+0x4aa>
 80104ce:	ee00 3a10 	vmov	s0, r3
 80104d2:	e7f7      	b.n	80104c4 <__ieee754_powf+0x554>
 80104d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80104d8:	e562      	b.n	800ffa0 <__ieee754_powf+0x30>
 80104da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801050c <__ieee754_powf+0x59c>
 80104de:	e55f      	b.n	800ffa0 <__ieee754_powf+0x30>
 80104e0:	eeb0 0a48 	vmov.f32	s0, s16
 80104e4:	e55c      	b.n	800ffa0 <__ieee754_powf+0x30>
 80104e6:	bf00      	nop
 80104e8:	ff800000 	.word	0xff800000
 80104ec:	3f317218 	.word	0x3f317218
 80104f0:	3f317200 	.word	0x3f317200
 80104f4:	35bfbe8c 	.word	0x35bfbe8c
 80104f8:	b5ddea0e 	.word	0xb5ddea0e
 80104fc:	3331bb4c 	.word	0x3331bb4c
 8010500:	388ab355 	.word	0x388ab355
 8010504:	bb360b61 	.word	0xbb360b61
 8010508:	3e2aaaab 	.word	0x3e2aaaab
 801050c:	00000000 	.word	0x00000000

08010510 <fabsf>:
 8010510:	ee10 3a10 	vmov	r3, s0
 8010514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010518:	ee00 3a10 	vmov	s0, r3
 801051c:	4770      	bx	lr
	...

08010520 <scalbnf>:
 8010520:	ee10 3a10 	vmov	r3, s0
 8010524:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010528:	d02b      	beq.n	8010582 <scalbnf+0x62>
 801052a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801052e:	d302      	bcc.n	8010536 <scalbnf+0x16>
 8010530:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010534:	4770      	bx	lr
 8010536:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801053a:	d123      	bne.n	8010584 <scalbnf+0x64>
 801053c:	4b24      	ldr	r3, [pc, #144]	@ (80105d0 <scalbnf+0xb0>)
 801053e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80105d4 <scalbnf+0xb4>
 8010542:	4298      	cmp	r0, r3
 8010544:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010548:	db17      	blt.n	801057a <scalbnf+0x5a>
 801054a:	ee10 3a10 	vmov	r3, s0
 801054e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010552:	3a19      	subs	r2, #25
 8010554:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010558:	4288      	cmp	r0, r1
 801055a:	dd15      	ble.n	8010588 <scalbnf+0x68>
 801055c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80105d8 <scalbnf+0xb8>
 8010560:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80105dc <scalbnf+0xbc>
 8010564:	ee10 3a10 	vmov	r3, s0
 8010568:	eeb0 7a67 	vmov.f32	s14, s15
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfb8      	it	lt
 8010570:	eef0 7a66 	vmovlt.f32	s15, s13
 8010574:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010578:	4770      	bx	lr
 801057a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80105e0 <scalbnf+0xc0>
 801057e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010582:	4770      	bx	lr
 8010584:	0dd2      	lsrs	r2, r2, #23
 8010586:	e7e5      	b.n	8010554 <scalbnf+0x34>
 8010588:	4410      	add	r0, r2
 801058a:	28fe      	cmp	r0, #254	@ 0xfe
 801058c:	dce6      	bgt.n	801055c <scalbnf+0x3c>
 801058e:	2800      	cmp	r0, #0
 8010590:	dd06      	ble.n	80105a0 <scalbnf+0x80>
 8010592:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010596:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801059a:	ee00 3a10 	vmov	s0, r3
 801059e:	4770      	bx	lr
 80105a0:	f110 0f16 	cmn.w	r0, #22
 80105a4:	da09      	bge.n	80105ba <scalbnf+0x9a>
 80105a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80105e0 <scalbnf+0xc0>
 80105aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80105e4 <scalbnf+0xc4>
 80105ae:	ee10 3a10 	vmov	r3, s0
 80105b2:	eeb0 7a67 	vmov.f32	s14, s15
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	e7d9      	b.n	801056e <scalbnf+0x4e>
 80105ba:	3019      	adds	r0, #25
 80105bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80105c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80105c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80105e8 <scalbnf+0xc8>
 80105c8:	ee07 3a90 	vmov	s15, r3
 80105cc:	e7d7      	b.n	801057e <scalbnf+0x5e>
 80105ce:	bf00      	nop
 80105d0:	ffff3cb0 	.word	0xffff3cb0
 80105d4:	4c000000 	.word	0x4c000000
 80105d8:	7149f2ca 	.word	0x7149f2ca
 80105dc:	f149f2ca 	.word	0xf149f2ca
 80105e0:	0da24260 	.word	0x0da24260
 80105e4:	8da24260 	.word	0x8da24260
 80105e8:	33000000 	.word	0x33000000

080105ec <with_errnof>:
 80105ec:	b510      	push	{r4, lr}
 80105ee:	ed2d 8b02 	vpush	{d8}
 80105f2:	eeb0 8a40 	vmov.f32	s16, s0
 80105f6:	4604      	mov	r4, r0
 80105f8:	f7ff fb7e 	bl	800fcf8 <__errno>
 80105fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010600:	ecbd 8b02 	vpop	{d8}
 8010604:	6004      	str	r4, [r0, #0]
 8010606:	bd10      	pop	{r4, pc}

08010608 <xflowf>:
 8010608:	b130      	cbz	r0, 8010618 <xflowf+0x10>
 801060a:	eef1 7a40 	vneg.f32	s15, s0
 801060e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010612:	2022      	movs	r0, #34	@ 0x22
 8010614:	f7ff bfea 	b.w	80105ec <with_errnof>
 8010618:	eef0 7a40 	vmov.f32	s15, s0
 801061c:	e7f7      	b.n	801060e <xflowf+0x6>
	...

08010620 <__math_uflowf>:
 8010620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010628 <__math_uflowf+0x8>
 8010624:	f7ff bff0 	b.w	8010608 <xflowf>
 8010628:	10000000 	.word	0x10000000

0801062c <__math_oflowf>:
 801062c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010634 <__math_oflowf+0x8>
 8010630:	f7ff bfea 	b.w	8010608 <xflowf>
 8010634:	70000000 	.word	0x70000000

08010638 <__ieee754_sqrtf>:
 8010638:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801063c:	4770      	bx	lr
	...

08010640 <_init>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	bf00      	nop
 8010644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010646:	bc08      	pop	{r3}
 8010648:	469e      	mov	lr, r3
 801064a:	4770      	bx	lr

0801064c <_fini>:
 801064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801064e:	bf00      	nop
 8010650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010652:	bc08      	pop	{r3}
 8010654:	469e      	mov	lr, r3
 8010656:	4770      	bx	lr
