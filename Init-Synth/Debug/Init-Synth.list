
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08010898  08010898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011184  08011184  000131d4  2**0
                  CONTENTS
  4 .ARM          00000008  08011184  08011184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801118c  0801118c  000131d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801118c  0801118c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011190  08011190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08011194  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e18  200001d4  08011368  000131d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fec  08011368  00013fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e320  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006862  00000000  00000000  00041524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002090  00000000  00000000  00047d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018e0  00000000  00000000  00049e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026739  00000000  00000000  0004b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ef92  00000000  00000000  00071e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb1c  00000000  00000000  000a0dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017c8df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a24  00000000  00000000  0017c998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001853bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0018542b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00185525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010880 	.word	0x08010880

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	08010880 	.word	0x08010880

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f003 f8db 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f003 f8f2 	bl	8003fbe <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 fca9 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 fca2 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 fc9c 	bl	80047ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 fc97 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f003 fb06 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f003 faf9 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f003 faec 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f003 fade 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f003 face 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f003 fabf 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f003 fab2 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f003 faa4 	bl	80044e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f003 fa96 	bl	80044e8 <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f003 fc1c 	bl	8004850 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9e4 	bl	80013ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f004 f99f 	bl	8005368 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9db 	bl	80013ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f004 f9e1 	bl	80053fe <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9d2 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e ff55 	bl	800ff28 <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fee8 	bl	8007e6c <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9a2 	bl	80013ea <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f003 fa04 	bl	80044e8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f004 f9a9 	bl	8005498 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f94d 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e fed3 	bl	800ff28 <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fe66 	bl	8007e6c <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f920 	bl	80013ea <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f003 f96a 	bl	80044e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f003 f95a 	bl	80044e8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 febf 	bl	8003ff4 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8b5 	bl	80013ea <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 fcfd 	bl	8003cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f84d 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 fb1b 	bl	8002904 <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00e f8b1 	bl	800f434 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f002 f953 	bl	800357c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f002 f8f3 	bl	80034c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4819      	ldr	r0, [pc, #100]	@ (8001340 <main+0x94>)
 80012dc:	f008 f8f2 	bl	80094c4 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f001 ff0e 	bl	8003100 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 fc96 	bl	8002c14 <Synth_Reset_Initialize>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 80012e8:	2201      	movs	r2, #1
 80012ea:	4916      	ldr	r1, [pc, #88]	@ (8001344 <main+0x98>)
 80012ec:	4816      	ldr	r0, [pc, #88]	@ (8001348 <main+0x9c>)
 80012ee:	f008 fd5b 	bl	8009da8 <HAL_UART_Receive_IT>

  uint8_t data[] = "INIT-READY\n";
 80012f2:	4a16      	ldr	r2, [pc, #88]	@ (800134c <main+0xa0>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	220a      	movs	r2, #10
 8001304:	4810      	ldr	r0, [pc, #64]	@ (8001348 <main+0x9c>)
 8001306:	f008 fcc1 	bl	8009c8c <HAL_UART_Transmit>
	  //Preset_Write(4);
	  //Preset_Write_test(0);



	  if(sys.midi_data_present == 1){
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <main+0xa4>)
 800130c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <main+0x6a>
		  MIDI_Decode_Handler();
 8001312:	f000 f871 	bl	80013f8 <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <main+0xa4>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <main+0x76>
		  Serial_Command_Handler();
 800131e:	f000 fc9d 	bl	8001c5c <Serial_Command_Handler>
	  }

	  //Gate_Control();

	  if((sys.note_status_bit == 1)){
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <main+0xa4>)
 8001324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001326:	2b01      	cmp	r3, #1
 8001328:	d1ef      	bne.n	800130a <main+0x5e>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <main+0xa4>)
 800132c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <main+0xa4>)
 8001330:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fa8c 	bl	8001854 <Waveform_Synthesis_Handler>
	  if(sys.midi_data_present == 1){
 800133c:	e7e5      	b.n	800130a <main+0x5e>
 800133e:	bf00      	nop
 8001340:	20000400 	.word	0x20000400
 8001344:	200003d7 	.word	0x200003d7
 8001348:	2000044c 	.word	0x2000044c
 800134c:	08010898 	.word	0x08010898
 8001350:	20000370 	.word	0x20000370

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	2238      	movs	r2, #56	@ 0x38
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f00e fde0 	bl	800ff28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001376:	2000      	movs	r0, #0
 8001378:	f005 ff96 	bl	80072a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800137c:	2321      	movs	r3, #33	@ 0x21
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001384:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138a:	2302      	movs	r3, #2
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138e:	2303      	movs	r3, #3
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001392:	2302      	movs	r3, #2
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8001396:	231c      	movs	r3, #28
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 f830 	bl	8007410 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013b6:	f000 f818 	bl	80013ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2303      	movs	r3, #3
 80013c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2104      	movs	r1, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fb2e 	bl	8007a34 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013de:	f000 f804 	bl	80013ea <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	@ 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ee:	b672      	cpsid	i
}
 80013f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <Error_Handler+0x8>
	...

080013f8 <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0

	int status_byte = sys.midi_buf[0];
 80013fe:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001400:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001404:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001408:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 800140c:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 800140e:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001410:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001414:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b7f      	cmp	r3, #127	@ 0x7f
 800141a:	dc0a      	bgt.n	8001432 <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 800141c:	f000 fc1e 	bl	8001c5c <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001422:	2200      	movs	r2, #0
 8001424:	66da      	str	r2, [r3, #108]	@ 0x6c
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 8001426:	2203      	movs	r2, #3
 8001428:	2100      	movs	r1, #0
 800142a:	4827      	ldr	r0, [pc, #156]	@ (80014c8 <MIDI_Decode_Handler+0xd0>)
 800142c:	f00e fd7c 	bl	800ff28 <memset>

	    return;
 8001430:	e044      	b.n	80014bc <MIDI_Decode_Handler+0xc4>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 8001432:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001434:	2200      	movs	r2, #0
 8001436:	675a      	str	r2, [r3, #116]	@ 0x74

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800143e:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b80      	cmp	r3, #128	@ 0x80
 8001444:	d113      	bne.n	800146e <MIDI_Decode_Handler+0x76>
    	sys.note_status_bit    =  0; // note off
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001448:	2200      	movs	r2, #0
 800144a:	679a      	str	r2, [r3, #120]	@ 0x78
    	sys.midi_note_input    = data_byte1;
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	67d3      	str	r3, [r2, #124]	@ 0x7c
    	sys.midi_note_velocity = data_byte2;
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

    	sys.gate = 0;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    	Gate_Control();
 8001462:	f001 fefd 	bl	8003260 <Gate_Control>
    	Command_Blink_Status_LED(0); // report no error
 8001466:	2000      	movs	r0, #0
 8001468:	f001 ffb4 	bl	80033d4 <Command_Blink_Status_LED>
 800146c:	e01d      	b.n	80014aa <MIDI_Decode_Handler+0xb2>
    }
    else if(status_byte == 0x90){
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b90      	cmp	r3, #144	@ 0x90
 8001472:	d113      	bne.n	800149c <MIDI_Decode_Handler+0xa4>
    	sys.note_status_bit    =  1; // note on
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001476:	2201      	movs	r2, #1
 8001478:	679a      	str	r2, [r3, #120]	@ 0x78
    	sys.midi_note_input    = data_byte1;
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    	sys.midi_note_velocity = data_byte2;
 8001480:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

    	sys.gate = 1;
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 800148a:	2201      	movs	r2, #1
 800148c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    	Gate_Control();
 8001490:	f001 fee6 	bl	8003260 <Gate_Control>
    	Command_Blink_Status_LED(0);
 8001494:	2000      	movs	r0, #0
 8001496:	f001 ff9d 	bl	80033d4 <Command_Blink_Status_LED>
 800149a:	e006      	b.n	80014aa <MIDI_Decode_Handler+0xb2>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 800149e:	f04f 32ff 	mov.w	r2, #4294967295
 80014a2:	679a      	str	r2, [r3, #120]	@ 0x78
    	Command_Blink_Status_LED(1); // report an error;
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 ff95 	bl	80033d4 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MIDI_Decode_Handler+0xcc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014b0:	2203      	movs	r2, #3
 80014b2:	2100      	movs	r1, #0
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <MIDI_Decode_Handler+0xd0>)
 80014b6:	f00e fd37 	bl	800ff28 <memset>

    return;
 80014ba:	bf00      	nop
}
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000370 	.word	0x20000370
 80014c8:	200003d4 	.word	0x200003d4

080014cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014da:	f892 1067 	ldrb.w	r1, [r2, #103]	@ 0x67
 80014de:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014e0:	4413      	add	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014f0:	66d3      	str	r3, [r2, #108]	@ 0x6c
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	dd05      	ble.n	8001506 <HAL_UART_RxCpltCallback+0x3a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	66da      	str	r2, [r3, #108]	@ 0x6c
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 8001502:	2201      	movs	r2, #1
 8001504:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	4904      	ldr	r1, [pc, #16]	@ (800151c <HAL_UART_RxCpltCallback+0x50>)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <HAL_UART_RxCpltCallback+0x54>)
 800150c:	f008 fc4c 	bl	8009da8 <HAL_UART_Receive_IT>

}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000370 	.word	0x20000370
 800151c:	200003d7 	.word	0x200003d7
 8001520:	2000044c 	.word	0x2000044c

08001524 <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe ffd6 	bl	80004e0 <__aeabi_f2d>
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <Calculate_Frequency+0x78>)
 800153a:	f7fe fe71 	bl	8000220 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <Calculate_Frequency+0x7c>)
 800154c:	f7ff f94a 	bl	80007e4 <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa54 	bl	8000a04 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	ee00 3a90 	vmov	s1, r3
 8001562:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001566:	f00e fd3f 	bl	800ffe8 <powf>
 800156a:	ee10 3a10 	vmov	r3, s0
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffb6 	bl	80004e0 <__aeabi_f2d>
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <Calculate_Frequency+0x80>)
 800157a:	f7ff f809 	bl	8000590 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fa3d 	bl	8000a04 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	ee07 3a90 	vmov	s15, r3
}
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40514000 	.word	0x40514000
 80015a0:	40280000 	.word	0x40280000
 80015a4:	407b8000 	.word	0x407b8000

080015a8 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f7fe ff92 	bl	80004e0 <__aeabi_f2d>
 80015bc:	a317      	add	r3, pc, #92	@ (adr r3, 800161c <Synthesize_Sine_Wave+0x74>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe ffe5 	bl	8000590 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe ff86 	bl	80004e0 <__aeabi_f2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4620      	mov	r0, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	f7fe ffd8 	bl	8000590 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa0c 	bl	8000a04 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	ee00 3a10 	vmov	s0, r3
 80015f2:	f00e fc53 	bl	800fe9c <arm_sin_f32>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001618 <Synthesize_Sine_Wave+0x70>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 3a90 	vmov	r3, s15
 800160a:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 800160c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bdb0      	pop	{r4, r5, r7, pc}
 8001618:	46fffe00 	.word	0x46fffe00
 800161c:	54442d18 	.word	0x54442d18
 8001620:	401921fb 	.word	0x401921fb
 8001624:	00000000 	.word	0x00000000

08001628 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001632:	edc7 0a02 	vstr	s1, [r7, #8]
 8001636:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 800163a:	ed97 7a03 	vldr	s14, [r7, #12]
 800163e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f00e fcab 	bl	800ffa8 <fmodf>
 8001652:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 8001656:	ed97 7a05 	vldr	s14, [r7, #20]
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d503      	bpl.n	8001670 <Synthesize_Pulse_Wave+0x48>
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	490e      	ldr	r1, [pc, #56]	@ (80016a8 <Synthesize_Pulse_Wave+0x80>)
 800166e:	e002      	b.n	8001676 <Synthesize_Pulse_Wave+0x4e>
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	490d      	ldr	r1, [pc, #52]	@ (80016ac <Synthesize_Pulse_Wave+0x84>)
 8001676:	a30a      	add	r3, pc, #40	@ (adr r3, 80016a0 <Synthesize_Pulse_Wave+0x78>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ff88 	bl	8000590 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff f994 	bl	80009b4 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	827b      	strh	r3, [r7, #18]

	return sample;
 8001690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40dfffc0 	.word	0x40dfffc0
 80016a8:	3ff00000 	.word	0x3ff00000
 80016ac:	bff00000 	.word	0xbff00000

080016b0 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ba:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016be:	ed97 7a01 	vldr	s14, [r7, #4]
 80016c2:	edd7 7a00 	vldr	s15, [r7]
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	f00e fc69 	bl	800ffa8 <fmodf>
 80016d6:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016da:	edd7 7a02 	vldr	s15, [r7, #8]
 80016de:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d519      	bpl.n	8001720 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f7fe fef7 	bl	80004e0 <__aeabi_f2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b36      	ldr	r3, [pc, #216]	@ (80017d0 <Synthesize_Triangle_Wave+0x120>)
 80016f8:	f7fe ff4a 	bl	8000590 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	a330      	add	r3, pc, #192	@ (adr r3, 80017c8 <Synthesize_Triangle_Wave+0x118>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff41 	bl	8000590 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f94d 	bl	80009b4 <__aeabi_d2iz>
 800171a:	4603      	mov	r3, r0
 800171c:	81fb      	strh	r3, [r7, #14]
 800171e:	e04c      	b.n	80017ba <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001720:	edd7 7a02 	vldr	s15, [r7, #8]
 8001724:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	d521      	bpl.n	8001776 <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 8001732:	68b8      	ldr	r0, [r7, #8]
 8001734:	f7fe fed4 	bl	80004e0 <__aeabi_f2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <Synthesize_Triangle_Wave+0x120>)
 800173e:	f7fe ff27 	bl	8000590 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800174e:	f7fe fd67 	bl	8000220 <__aeabi_dsub>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a31b      	add	r3, pc, #108	@ (adr r3, 80017c8 <Synthesize_Triangle_Wave+0x118>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff16 	bl	8000590 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f922 	bl	80009b4 <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	81fb      	strh	r3, [r7, #14]
 8001774:	e021      	b.n	80017ba <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f7fe feb2 	bl	80004e0 <__aeabi_f2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <Synthesize_Triangle_Wave+0x124>)
 8001782:	f7fe fd4d 	bl	8000220 <__aeabi_dsub>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <Synthesize_Triangle_Wave+0x120>)
 8001794:	f7fe fefc 	bl	8000590 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a309      	add	r3, pc, #36	@ (adr r3, 80017c8 <Synthesize_Triangle_Wave+0x118>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f8ff 	bl	80009b4 <__aeabi_d2iz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40dfffc0 	.word	0x40dfffc0
 80017d0:	40100000 	.word	0x40100000
 80017d4:	3ff00000 	.word	0x3ff00000

080017d8 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ea:	edd7 7a00 	vldr	s15, [r7]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	f00e fbd5 	bl	800ffa8 <fmodf>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001850 <Synthesize_Sawtooth_Wave+0x78>
 8001806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f7fe fe67 	bl	80004e0 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	f7fe fd05 	bl	8000224 <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	a309      	add	r3, pc, #36	@ (adr r3, 8001848 <Synthesize_Sawtooth_Wave+0x70>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fcfa 	bl	8000220 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f8be 	bl	80009b4 <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	81fb      	strh	r3, [r7, #14]

	return sample;
 800183c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	00000000 	.word	0x00000000
 800184c:	40dfffc0 	.word	0x40dfffc0
 8001850:	46fffe00 	.word	0x46fffe00

08001854 <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001862:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001866:	6018      	str	r0, [r3, #0]
 8001868:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800186c:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001870:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 8001872:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8001876:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800187a:	f102 0218 	add.w	r2, r2, #24
 800187e:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001880:	4bce      	ldr	r3, [pc, #824]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001882:	7a9b      	ldrb	r3, [r3, #10]
 8001884:	f1a3 020c 	sub.w	r2, r3, #12
 8001888:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800188c:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f7ff fe40 	bl	8001524 <Calculate_Frequency>
 80018a4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018a8:	f103 0314 	add.w	r3, r3, #20
 80018ac:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018b0:	4bc2      	ldr	r3, [pc, #776]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 80018b2:	7adb      	ldrb	r3, [r3, #11]
 80018b4:	f1a3 020c 	sub.w	r2, r3, #12
 80018b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018bc:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	f7ff fe28 	bl	8001524 <Calculate_Frequency>
 80018d4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018d8:	f103 0310 	add.w	r3, r3, #16
 80018dc:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018e6:	f102 021c 	add.w	r2, r2, #28
 80018ea:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018ec:	e158      	b.n	8001ba0 <Waveform_Synthesis_Handler+0x34c>
        float t = ((float)i/2.0)/((float)nsamples);
 80018ee:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018f2:	f103 031c 	add.w	r3, r3, #28
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f7fe fdec 	bl	80004e0 <__aeabi_f2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001910:	f7fe ff68 	bl	80007e4 <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	461d      	mov	r5, r3
 800191c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001920:	f103 0318 	add.w	r3, r3, #24
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	ee17 0a90 	vmov	r0, s15
 8001932:	f7fe fdd5 	bl	80004e0 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe ff51 	bl	80007e4 <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f85b 	bl	8000a04 <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001954:	f102 0208 	add.w	r2, r2, #8
 8001958:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 800195a:	4b98      	ldr	r3, [pc, #608]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 800195c:	7a1b      	ldrb	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11b      	bne.n	800199a <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 8001962:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001966:	f103 0314 	add.w	r3, r3, #20
 800196a:	edd3 0a00 	vldr	s1, [r3]
 800196e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001972:	f103 0308 	add.w	r3, r3, #8
 8001976:	ed93 0a00 	vldr	s0, [r3]
 800197a:	f7ff fe15 	bl	80015a8 <Synthesize_Sine_Wave>
 800197e:	4603      	mov	r3, r0
 8001980:	4619      	mov	r1, r3
 8001982:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001986:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 800198a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800198e:	f102 021c 	add.w	r2, r2, #28
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001998:	e069      	b.n	8001a6e <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 800199a:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 800199c:	7a1b      	ldrb	r3, [r3, #8]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d123      	bne.n	80019ea <Waveform_Synthesis_Handler+0x196>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 80019a2:	4b86      	ldr	r3, [pc, #536]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 80019a4:	7c9b      	ldrb	r3, [r3, #18]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ae:	eeb0 1a67 	vmov.f32	s2, s15
 80019b2:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019b6:	f103 0314 	add.w	r3, r3, #20
 80019ba:	edd3 0a00 	vldr	s1, [r3]
 80019be:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019c2:	f103 0308 	add.w	r3, r3, #8
 80019c6:	ed93 0a00 	vldr	s0, [r3]
 80019ca:	f7ff fe2d 	bl	8001628 <Synthesize_Pulse_Wave>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019d6:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019da:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019de:	f102 021c 	add.w	r2, r2, #28
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019e8:	e041      	b.n	8001a6e <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019ea:	4b74      	ldr	r3, [pc, #464]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 80019ec:	7a1b      	ldrb	r3, [r3, #8]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d11b      	bne.n	8001a2a <Waveform_Synthesis_Handler+0x1d6>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019f2:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019f6:	f103 0314 	add.w	r3, r3, #20
 80019fa:	edd3 0a00 	vldr	s1, [r3]
 80019fe:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a02:	f103 0308 	add.w	r3, r3, #8
 8001a06:	ed93 0a00 	vldr	s0, [r3]
 8001a0a:	f7ff fe51 	bl	80016b0 <Synthesize_Triangle_Wave>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a16:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a1a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a1e:	f102 021c 	add.w	r2, r2, #28
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a28:	e021      	b.n	8001a6e <Waveform_Synthesis_Handler+0x21a>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a2a:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001a2c:	7a1b      	ldrb	r3, [r3, #8]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d11b      	bne.n	8001a6a <Waveform_Synthesis_Handler+0x216>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a32:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a36:	f103 0314 	add.w	r3, r3, #20
 8001a3a:	edd3 0a00 	vldr	s1, [r3]
 8001a3e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a42:	f103 0308 	add.w	r3, r3, #8
 8001a46:	ed93 0a00 	vldr	s0, [r3]
 8001a4a:	f7ff fec5 	bl	80017d8 <Synthesize_Sawtooth_Wave>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4619      	mov	r1, r3
 8001a52:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a56:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a5a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a5e:	f102 021c 	add.w	r2, r2, #28
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a68:	e001      	b.n	8001a6e <Waveform_Synthesis_Handler+0x21a>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0d6      	b.n	8001c1c <Waveform_Synthesis_Handler+0x3c8>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a6e:	4b53      	ldr	r3, [pc, #332]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001a70:	7a5b      	ldrb	r3, [r3, #9]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d11c      	bne.n	8001ab0 <Waveform_Synthesis_Handler+0x25c>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a76:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a7a:	f103 031c 	add.w	r3, r3, #28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	1c5c      	adds	r4, r3, #1
 8001a82:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a86:	f103 0310 	add.w	r3, r3, #16
 8001a8a:	edd3 0a00 	vldr	s1, [r3]
 8001a8e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a92:	f103 0308 	add.w	r3, r3, #8
 8001a96:	ed93 0a00 	vldr	s0, [r3]
 8001a9a:	f7ff fd85 	bl	80015a8 <Synthesize_Sine_Wave>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001aa6:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001aaa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001aae:	e06c      	b.n	8001b8a <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001ab0:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001ab2:	7a5b      	ldrb	r3, [r3, #9]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d124      	bne.n	8001b02 <Waveform_Synthesis_Handler+0x2ae>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001ab8:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001aba:	7cdb      	ldrb	r3, [r3, #19]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ac8:	f103 031c 	add.w	r3, r3, #28
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5c      	adds	r4, r3, #1
 8001ad0:	eeb0 1a67 	vmov.f32	s2, s15
 8001ad4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ad8:	f103 0310 	add.w	r3, r3, #16
 8001adc:	edd3 0a00 	vldr	s1, [r3]
 8001ae0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ae4:	f103 0308 	add.w	r3, r3, #8
 8001ae8:	ed93 0a00 	vldr	s0, [r3]
 8001aec:	f7ff fd9c 	bl	8001628 <Synthesize_Pulse_Wave>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001af8:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001afc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b00:	e043      	b.n	8001b8a <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001b02:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001b04:	7a5b      	ldrb	r3, [r3, #9]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d11c      	bne.n	8001b44 <Waveform_Synthesis_Handler+0x2f0>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001b0a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b0e:	f103 031c 	add.w	r3, r3, #28
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1c5c      	adds	r4, r3, #1
 8001b16:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b1a:	f103 0310 	add.w	r3, r3, #16
 8001b1e:	edd3 0a00 	vldr	s1, [r3]
 8001b22:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b26:	f103 0308 	add.w	r3, r3, #8
 8001b2a:	ed93 0a00 	vldr	s0, [r3]
 8001b2e:	f7ff fdbf 	bl	80016b0 <Synthesize_Triangle_Wave>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b3a:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b3e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b42:	e022      	b.n	8001b8a <Waveform_Synthesis_Handler+0x336>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b44:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <Waveform_Synthesis_Handler+0x368>)
 8001b46:	7a5b      	ldrb	r3, [r3, #9]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11c      	bne.n	8001b86 <Waveform_Synthesis_Handler+0x332>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b4c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b50:	f103 031c 	add.w	r3, r3, #28
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	1c5c      	adds	r4, r3, #1
 8001b58:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b5c:	f103 0310 	add.w	r3, r3, #16
 8001b60:	edd3 0a00 	vldr	s1, [r3]
 8001b64:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b68:	f103 0308 	add.w	r3, r3, #8
 8001b6c:	ed93 0a00 	vldr	s0, [r3]
 8001b70:	f7ff fe32 	bl	80017d8 <Synthesize_Sawtooth_Wave>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b7c:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b80:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b84:	e001      	b.n	8001b8a <Waveform_Synthesis_Handler+0x336>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e048      	b.n	8001c1c <Waveform_Synthesis_Handler+0x3c8>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b8a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b8e:	f103 031c 	add.w	r3, r3, #28
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3302      	adds	r3, #2
 8001b96:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001b9a:	f102 021c 	add.w	r2, r2, #28
 8001b9e:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001ba0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ba4:	f103 031c 	add.w	r3, r3, #28
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bae:	f103 0318 	add.w	r3, r3, #24
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f6ff ae9a 	blt.w	80018ee <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001bba:	e02a      	b.n	8001c12 <Waveform_Synthesis_Handler+0x3be>
 8001bbc:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bc0:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bc4:	f103 0318 	add.w	r3, r3, #24
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f107 0120 	add.w	r1, r7, #32
 8001bd0:	3918      	subs	r1, #24
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <Waveform_Synthesis_Handler+0x3d4>)
 8001bd8:	f003 fd3e 	bl	8005658 <HAL_I2S_Transmit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001be2:	f102 020f 	add.w	r2, r2, #15
 8001be6:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001be8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bec:	f103 030f 	add.w	r3, r3, #15
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <Waveform_Synthesis_Handler+0x3b2>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c00:	f002 fdf4 	bl	80047ec <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001c04:	e009      	b.n	8001c1a <Waveform_Synthesis_Handler+0x3c6>
        }

        if((sys.midi_data_present == 1)){
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <Waveform_Synthesis_Handler+0x3d8>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <Waveform_Synthesis_Handler+0x3be>
        	MIDI_Decode_Handler();
 8001c0e:	f7ff fbf3 	bl	80013f8 <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <Waveform_Synthesis_Handler+0x3d8>)
 8001c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d0d2      	beq.n	8001bc0 <Waveform_Synthesis_Handler+0x36c>
        }
    }

    return 0;
 8001c1a:	2300      	movs	r3, #0

}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bdb0      	pop	{r4, r5, r7, pc}
 8001c28:	20000244 	.word	0x20000244
 8001c2c:	20000370 	.word	0x20000370

08001c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c34:	f3bf 8f4f 	dsb	sy
}
 8001c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <__NVIC_SystemReset+0x24>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c42:	4904      	ldr	r1, [pc, #16]	@ (8001c54 <__NVIC_SystemReset+0x24>)
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_SystemReset+0x28>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4a:	f3bf 8f4f 	dsb	sy
}
 8001c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <__NVIC_SystemReset+0x20>
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	05fa0004 	.word	0x05fa0004

08001c5c <Serial_Command_Handler>:
#include "serial.h"
#include "system.h"

//extern System sys;

void Serial_Command_Handler(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0

	int error_check = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]

	int command_byte;
	int address_byte;
	int data_byte;

	sys.value_returned = 0;
 8001c66:	4b61      	ldr	r3, [pc, #388]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]

    if(sys.usb_data_present == 1){
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10e      	bne.n	8001c92 <Serial_Command_Handler+0x36>
    	sys.usb_data_present = 0;
 8001c74:	4b5d      	ldr	r3, [pc, #372]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	671a      	str	r2, [r3, #112]	@ 0x70

        command_byte = sys.usb_vcp_buffer[0];
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c80:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8001c82:	4b5a      	ldr	r3, [pc, #360]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c88:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 8001c8a:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c90:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8001c92:	4b56      	ldr	r3, [pc, #344]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10e      	bne.n	8001cb8 <Serial_Command_Handler+0x5c>
    	sys.midi_data_present = 0;
 8001c9a:	4b54      	ldr	r3, [pc, #336]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	675a      	str	r2, [r3, #116]	@ 0x74

        command_byte = sys.midi_buf[0];
 8001ca0:	4b52      	ldr	r3, [pc, #328]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001ca2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001ca6:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 8001ca8:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001caa:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001cae:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dec <Serial_Command_Handler+0x190>)
 8001cb2:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001cb6:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3b41      	subs	r3, #65	@ 0x41
 8001cbc:	2b19      	cmp	r3, #25
 8001cbe:	d87f      	bhi.n	8001dc0 <Serial_Command_Handler+0x164>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <Serial_Command_Handler+0x6c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001d31 	.word	0x08001d31
 8001ccc:	08001dc1 	.word	0x08001dc1
 8001cd0:	08001d3d 	.word	0x08001d3d
 8001cd4:	08001dc1 	.word	0x08001dc1
 8001cd8:	08001d49 	.word	0x08001d49
 8001cdc:	08001d55 	.word	0x08001d55
 8001ce0:	08001dc1 	.word	0x08001dc1
 8001ce4:	08001dc1 	.word	0x08001dc1
 8001ce8:	08001d61 	.word	0x08001d61
 8001cec:	08001dc1 	.word	0x08001dc1
 8001cf0:	08001dc1 	.word	0x08001dc1
 8001cf4:	08001dc1 	.word	0x08001dc1
 8001cf8:	08001d69 	.word	0x08001d69
 8001cfc:	08001dc1 	.word	0x08001dc1
 8001d00:	08001d75 	.word	0x08001d75
 8001d04:	08001d81 	.word	0x08001d81
 8001d08:	08001dc1 	.word	0x08001dc1
 8001d0c:	08001d8d 	.word	0x08001d8d
 8001d10:	08001dc1 	.word	0x08001dc1
 8001d14:	08001dc1 	.word	0x08001dc1
 8001d18:	08001dc1 	.word	0x08001dc1
 8001d1c:	08001dc1 	.word	0x08001dc1
 8001d20:	08001dc1 	.word	0x08001dc1
 8001d24:	08001dc1 	.word	0x08001dc1
 8001d28:	08001dc1 	.word	0x08001dc1
 8001d2c:	08001dc1 	.word	0x08001dc1
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f85e 	bl	8001df4 <VCA_Command_Handler>
 8001d38:	6178      	str	r0, [r7, #20]

            break;
 8001d3a:	e042      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'C': // communication settings command

        	error_check = Communication_Command_Handler(address_byte, data_byte);
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f96e 	bl	8002020 <Communication_Command_Handler>
 8001d44:	6178      	str	r0, [r7, #20]

            break;
 8001d46:	e03c      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f9c0 	bl	80020d0 <Envelope_Command_Handler>
 8001d50:	6178      	str	r0, [r7, #20]

            break;
 8001d52:	e036      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fb06 	bl	8002368 <Filter_Command_Handler>
 8001d5c:	6178      	str	r0, [r7, #20]

            break;
 8001d5e:	e030      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8001d60:	f000 ffa4 	bl	8002cac <Synth_Initialize_Preset>
 8001d64:	6178      	str	r0, [r7, #20]

            break;
 8001d66:	e02c      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'L': // load preset command

            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fc02 	bl	8002574 <Mixer_Command_Handler>
 8001d70:	6178      	str	r0, [r7, #20]

            break;
 8001d72:	e026      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fcb4 	bl	80026e4 <LFO_Command_Handler>
 8001d7c:	6178      	str	r0, [r7, #20]

            break;
 8001d7e:	e020      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fd76 	bl	8002874 <Preset_Command_Handler>
 8001d88:	6178      	str	r0, [r7, #20]

            break;
 8001d8a:	e01a      	b.n	8001dc2 <Serial_Command_Handler+0x166>
        case 'R': // reset command

        	for(int i=0; i <6 ; i++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	e011      	b.n	8001db6 <Serial_Command_Handler+0x15a>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8001d92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d9a:	f002 fd3f 	bl	800481c <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8001d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f002 fd39 	bl	800481c <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8001daa:	207d      	movs	r0, #125	@ 0x7d
 8001dac:	f001 fff0 	bl	8003d90 <HAL_Delay>
        	for(int i=0; i <6 ; i++){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	ddea      	ble.n	8001d92 <Serial_Command_Handler+0x136>
        	}

			NVIC_SystemReset();
 8001dbc:	f7ff ff38 	bl	8001c30 <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

            break;
 8001dc0:	bf00      	nop
    }

    Command_Blink_Status_LED(error_check);
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f001 fb06 	bl	80033d4 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	b2d9      	uxtb	r1, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f001 fa59 	bl	800328c <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <Serial_Command_Handler+0x194>)
 8001de0:	f00e f8a2 	bl	800ff28 <memset>

}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000370 	.word	0x20000370
 8001df0:	20000394 	.word	0x20000394

08001df4 <VCA_Command_Handler>:

// ===========================================================================================================
// A - VCA functions

int VCA_Command_Handler(int address, int data){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3b31      	subs	r3, #49	@ 0x31
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	f200 8083 	bhi.w	8001f12 <VCA_Command_Handler+0x11e>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <VCA_Command_Handler+0x20>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e29 	.word	0x08001e29
 8001e18:	08001e55 	.word	0x08001e55
 8001e1c:	08001e81 	.word	0x08001e81
 8001e20:	08001eb5 	.word	0x08001eb5
 8001e24:	08001ee9 	.word	0x08001ee9
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e28:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e2c:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e30:	22ff      	movs	r2, #255	@ 0xff
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	2000      	movs	r0, #0
 8001e36:	f001 fa7d 	bl	8003334 <Command_Error_Check>
 8001e3a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <VCA_Command_Handler+0x5c>
                SynthParameters.vca_offset = data;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                VCA_Digital_Pot_Control();
 8001e4c:	f001 f852 	bl	8002ef4 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	e05f      	b.n	8001f14 <VCA_Command_Handler+0x120>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e54:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e58:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e5c:	22ff      	movs	r2, #255	@ 0xff
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	2000      	movs	r0, #0
 8001e62:	f001 fa67 	bl	8003334 <Command_Error_Check>
 8001e66:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <VCA_Command_Handler+0x88>
                SynthParameters.vca_cv_intensity = data;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                VCA_Digital_Pot_Control();
 8001e78:	f001 f83c 	bl	8002ef4 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	e049      	b.n	8001f14 <VCA_Command_Handler+0x120>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8001e80:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e84:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001e88:	2203      	movs	r2, #3
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f001 fa51 	bl	8003334 <Command_Error_Check>
 8001e92:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <VCA_Command_Handler+0xbc>
                SynthParameters.vca_mod_source = data;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001ea0:	701a      	strb	r2, [r3, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f83e 	bl	8001f28 <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8001eac:	f000 ffbe 	bl	8002e2c <VCA_Mod_Source_Control>
            }

        	return error_check;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	e02f      	b.n	8001f14 <VCA_Command_Handler+0x120>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8001eb4:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001eb8:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f001 fa37 	bl	8003334 <Command_Error_Check>
 8001ec6:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <VCA_Command_Handler+0xf0>
                SynthParameters.vca_bypass = data;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001ed4:	705a      	strb	r2, [r3, #1]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <VCA_Command_Handler+0x12c>)
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f824 	bl	8001f28 <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8001ee0:	f000 ffd6 	bl	8002e90 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	e015      	b.n	8001f14 <VCA_Command_Handler+0x120>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8001ee8:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001eec:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001f1c <VCA_Command_Handler+0x128>
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f001 fa1d 	bl	8003334 <Command_Error_Check>
 8001efa:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <VCA_Command_Handler+0x11a>
            	VCA_Value_Query(data);
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f000 f842 	bl	8001f8c <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <VCA_Command_Handler+0x130>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	e000      	b.n	8001f14 <VCA_Command_Handler+0x120>
        default:
            // do nothing on invalid command

        	return error_check;
 8001f12:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	00000000 	.word	0x00000000
 8001f20:	20000344 	.word	0x20000344
 8001f24:	20000370 	.word	0x20000370

08001f28 <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <VCA_Mod_Source_Decode+0x3e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	dc1d      	bgt.n	8001f78 <VCA_Mod_Source_Decode+0x50>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d003      	beq.n	8001f4a <VCA_Mod_Source_Decode+0x22>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d005      	beq.n	8001f54 <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8001f48:	e016      	b.n	8001f78 <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <VCA_Mod_Source_Decode+0x60>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 8001f52:	e012      	b.n	8001f7a <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <VCA_Mod_Source_Decode+0x60>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 1;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <VCA_Mod_Source_Decode+0x60>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 8001f64:	e009      	b.n	8001f7a <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <VCA_Mod_Source_Decode+0x60>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]
        	SynthParameters.vca_cv_sel = 0;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <VCA_Mod_Source_Decode+0x60>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            break;
 8001f76:	e000      	b.n	8001f7a <VCA_Mod_Source_Decode+0x52>
            break;
 8001f78:	bf00      	nop
    }

	return;
 8001f7a:	bf00      	nop
}
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000344 	.word	0x20000344

08001f8c <VCA_Value_Query>:
    }

	return;
}

void VCA_Value_Query(int data){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8001f94:	2341      	movs	r3, #65	@ 0x41
 8001f96:	733b      	strb	r3, [r7, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	737b      	strb	r3, [r7, #13]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3b31      	subs	r3, #49	@ 0x31
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d81c      	bhi.n	8001fe4 <VCA_Value_Query+0x58>
 8001faa:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb0 <VCA_Value_Query+0x24>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fcb 	.word	0x08001fcb
 8001fb8:	08001fd5 	.word	0x08001fd5
 8001fbc:	08001fdd 	.word	0x08001fdd
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <VCA_Value_Query+0x88>)
 8001fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fc6:	73bb      	strb	r3, [r7, #14]
            break;
 8001fc8:	e00d      	b.n	8001fe6 <VCA_Value_Query+0x5a>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <VCA_Value_Query+0x88>)
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fd2:	e008      	b.n	8001fe6 <VCA_Value_Query+0x5a>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <VCA_Value_Query+0x88>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	73bb      	strb	r3, [r7, #14]
            break;
 8001fda:	e004      	b.n	8001fe6 <VCA_Value_Query+0x5a>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <VCA_Value_Query+0x88>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fe2:	e000      	b.n	8001fe6 <VCA_Value_Query+0x5a>
        default:  // do nothing on invalid command

            break;
 8001fe4:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	2103      	movs	r1, #3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00d fb09 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <VCA_Value_Query+0x8c>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <VCA_Value_Query+0x80>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8001ffa:	f107 010c 	add.w	r1, r7, #12
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	2203      	movs	r2, #3
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <VCA_Value_Query+0x90>)
 8002006:	f007 fe41 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 800200a:	bf00      	nop
 800200c:	bf00      	nop
}
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000344 	.word	0x20000344
 8002018:	20000370 	.word	0x20000370
 800201c:	2000044c 	.word	0x2000044c

08002020 <Communication_Command_Handler>:

// ===========================================================================================================
// C - communication settings function

int Communication_Command_Handler(int address, int data){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b33      	cmp	r3, #51	@ 0x33
 8002032:	d02f      	beq.n	8002094 <Communication_Command_Handler+0x74>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b33      	cmp	r3, #51	@ 0x33
 8002038:	dc40      	bgt.n	80020bc <Communication_Command_Handler+0x9c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b31      	cmp	r3, #49	@ 0x31
 800203e:	d003      	beq.n	8002048 <Communication_Command_Handler+0x28>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b32      	cmp	r3, #50	@ 0x32
 8002044:	d012      	beq.n	800206c <Communication_Command_Handler+0x4c>
 8002046:	e039      	b.n	80020bc <Communication_Command_Handler+0x9c>
        case '1': // echo command/acknowledge response setting; true = echo, false = acknowledge

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002048:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80020c8 <Communication_Command_Handler+0xa8>
 800204c:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80020c8 <Communication_Command_Handler+0xa8>
 8002050:	2201      	movs	r2, #1
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	2000      	movs	r0, #0
 8002056:	f001 f96d 	bl	8003334 <Command_Error_Check>
 800205a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <Communication_Command_Handler+0x48>
            	sys.serial_cmd_echo = data;
 8002062:	4a1a      	ldr	r2, [pc, #104]	@ (80020cc <Communication_Command_Handler+0xac>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	e028      	b.n	80020be <Communication_Command_Handler+0x9e>
        case '2': // MIDI transmit enable setting; true = enabled, false = disabled

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800206c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80020c8 <Communication_Command_Handler+0xa8>
 8002070:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80020c8 <Communication_Command_Handler+0xa8>
 8002074:	2201      	movs	r2, #1
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	2000      	movs	r0, #0
 800207a:	f001 f95b 	bl	8003334 <Command_Error_Check>
 800207e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d104      	bne.n	8002090 <Communication_Command_Handler+0x70>
            	sys.midi_tx_en = data;
 8002086:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <Communication_Command_Handler+0xac>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6093      	str	r3, [r2, #8]
            	MIDI_Port_Control();
 800208c:	f001 f8be 	bl	800320c <MIDI_Port_Control>
            }

        	return error_check;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	e014      	b.n	80020be <Communication_Command_Handler+0x9e>
        case '3': // MIDI transmit output polarity setting; true = inverted, false = non-inverted

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002094:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80020c8 <Communication_Command_Handler+0xa8>
 8002098:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80020c8 <Communication_Command_Handler+0xa8>
 800209c:	2201      	movs	r2, #1
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	2000      	movs	r0, #0
 80020a2:	f001 f947 	bl	8003334 <Command_Error_Check>
 80020a6:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d104      	bne.n	80020b8 <Communication_Command_Handler+0x98>
            	sys.midi_tx_pol = data;
 80020ae:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <Communication_Command_Handler+0xac>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6053      	str	r3, [r2, #4]
            	MIDI_Port_Control();
 80020b4:	f001 f8aa 	bl	800320c <MIDI_Port_Control>
            }

        	return error_check;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	e000      	b.n	80020be <Communication_Command_Handler+0x9e>
        default:
            // do nothing on invalid command

        	return error_check;
 80020bc:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	00000000 	.word	0x00000000
 80020cc:	20000370 	.word	0x20000370

080020d0 <Envelope_Command_Handler>:

// ===========================================================================================================
// E - envelope functions

int Envelope_Command_Handler(int address, int data){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3b31      	subs	r3, #49	@ 0x31
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	f200 809b 	bhi.w	800221e <Envelope_Command_Handler+0x14e>
 80020e8:	a201      	add	r2, pc, #4	@ (adr r2, 80020f0 <Envelope_Command_Handler+0x20>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002109 	.word	0x08002109
 80020f4:	08002135 	.word	0x08002135
 80020f8:	08002161 	.word	0x08002161
 80020fc:	0800218d 	.word	0x0800218d
 8002100:	080021c1 	.word	0x080021c1
 8002104:	080021f5 	.word	0x080021f5
        case '1': // envelope attack rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002108:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8002228 <Envelope_Command_Handler+0x158>
 800210c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002110:	22ff      	movs	r2, #255	@ 0xff
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	2000      	movs	r0, #0
 8002116:	f001 f90d 	bl	8003334 <Command_Error_Check>
 800211a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <Envelope_Command_Handler+0x60>
                SynthParameters.env_attack_rate = data;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b41      	ldr	r3, [pc, #260]	@ (800222c <Envelope_Command_Handler+0x15c>)
 8002128:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                Envelope_Digital_Pot_Control();
 800212c:	f000 ffca 	bl	80030c4 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	e075      	b.n	8002220 <Envelope_Command_Handler+0x150>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002134:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002138:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002228 <Envelope_Command_Handler+0x158>
 800213c:	22ff      	movs	r2, #255	@ 0xff
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	2000      	movs	r0, #0
 8002142:	f001 f8f7 	bl	8003334 <Command_Error_Check>
 8002146:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <Envelope_Command_Handler+0x8c>
                SynthParameters.env_decay_rate = data;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b36      	ldr	r3, [pc, #216]	@ (800222c <Envelope_Command_Handler+0x15c>)
 8002154:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
                Envelope_Digital_Pot_Control();
 8002158:	f000 ffb4 	bl	80030c4 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	e05f      	b.n	8002220 <Envelope_Command_Handler+0x150>
        case '3': // envelope release rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002160:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002164:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002168:	22ff      	movs	r2, #255	@ 0xff
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	2000      	movs	r0, #0
 800216e:	f001 f8e1 	bl	8003334 <Command_Error_Check>
 8002172:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <Envelope_Command_Handler+0xb8>
                SynthParameters.env_release_rate = data;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <Envelope_Command_Handler+0x15c>)
 8002180:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                Envelope_Digital_Pot_Control();
 8002184:	f000 ff9e 	bl	80030c4 <Envelope_Digital_Pot_Control>
            }

        	return error_check;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	e049      	b.n	8002220 <Envelope_Command_Handler+0x150>
        case '4': // envelope output polarity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800218c:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002190:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002228 <Envelope_Command_Handler+0x158>
 8002194:	2201      	movs	r2, #1
 8002196:	6839      	ldr	r1, [r7, #0]
 8002198:	2000      	movs	r0, #0
 800219a:	f001 f8cb 	bl	8003334 <Command_Error_Check>
 800219e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <Envelope_Command_Handler+0xec>
                SynthParameters.env_invert_mode = data;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <Envelope_Command_Handler+0x15c>)
 80021ac:	715a      	strb	r2, [r3, #5]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <Envelope_Command_Handler+0x15c>)
 80021b0:	795b      	ldrb	r3, [r3, #5]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f83e 	bl	8002234 <Envelope_Output_Polarity_Decode>
                Envelope_Mode_Control();
 80021b8:	f000 ff3c 	bl	8003034 <Envelope_Mode_Control>
            }

        	return error_check;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	e02f      	b.n	8002220 <Envelope_Command_Handler+0x150>
        case '5': // envelope loop mode control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80021c0:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8002228 <Envelope_Command_Handler+0x158>
 80021c4:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002228 <Envelope_Command_Handler+0x158>
 80021c8:	2201      	movs	r2, #1
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	2000      	movs	r0, #0
 80021ce:	f001 f8b1 	bl	8003334 <Command_Error_Check>
 80021d2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <Envelope_Command_Handler+0x120>
                SynthParameters.env_loop_mode = data;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <Envelope_Command_Handler+0x15c>)
 80021e0:	719a      	strb	r2, [r3, #6]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <Envelope_Command_Handler+0x15c>)
 80021e4:	799b      	ldrb	r3, [r3, #6]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f848 	bl	800227c <Envelope_Loop_Mode_Decode>
                Envelope_Mode_Control();
 80021ec:	f000 ff22 	bl	8003034 <Envelope_Mode_Control>
            }

        	return error_check;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	e015      	b.n	8002220 <Envelope_Command_Handler+0x150>
        case '6': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 5, 0, 0);
 80021f4:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8002228 <Envelope_Command_Handler+0x158>
 80021f8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002228 <Envelope_Command_Handler+0x158>
 80021fc:	2205      	movs	r2, #5
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	2002      	movs	r0, #2
 8002202:	f001 f897 	bl	8003334 <Command_Error_Check>
 8002206:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <Envelope_Command_Handler+0x14a>
            	Envelope_Value_Query(data);
 800220e:	6838      	ldr	r0, [r7, #0]
 8002210:	f000 f858 	bl	80022c4 <Envelope_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <Envelope_Command_Handler+0x160>)
 8002216:	2201      	movs	r2, #1
 8002218:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	e000      	b.n	8002220 <Envelope_Command_Handler+0x150>
        default:
            // do nothing on invalid command

        	return error_check;
 800221e:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	00000000 	.word	0x00000000
 800222c:	20000344 	.word	0x20000344
 8002230:	20000370 	.word	0x20000370

08002234 <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <Envelope_Output_Polarity_Decode+0x44>)
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 1;
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <Envelope_Output_Polarity_Decode+0x44>)
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 8002252:	e00b      	b.n	800226c <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d108      	bne.n	800226c <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <Envelope_Output_Polarity_Decode+0x44>)
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_invert = 0;
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <Envelope_Output_Polarity_Decode+0x44>)
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	return;
 800226a:	bf00      	nop
 800226c:	bf00      	nop
}
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	20000344 	.word	0x20000344

0800227c <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <Envelope_Loop_Mode_Decode+0x44>)
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 1;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <Envelope_Loop_Mode_Decode+0x44>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 800229a:	e00b      	b.n	80022b4 <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <Envelope_Loop_Mode_Decode+0x44>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	SynthParameters.env_loop = 0;
 80022aa:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <Envelope_Loop_Mode_Decode+0x44>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	return;
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
}
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000344 	.word	0x20000344

080022c4 <Envelope_Value_Query>:

void Envelope_Value_Query(int data){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'E', data , 0};
 80022cc:	2345      	movs	r3, #69	@ 0x45
 80022ce:	733b      	strb	r3, [r7, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	737b      	strb	r3, [r7, #13]
 80022d6:	2300      	movs	r3, #0
 80022d8:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3b31      	subs	r3, #49	@ 0x31
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d823      	bhi.n	800232a <Envelope_Value_Query+0x66>
 80022e2:	a201      	add	r2, pc, #4	@ (adr r2, 80022e8 <Envelope_Value_Query+0x24>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022fd 	.word	0x080022fd
 80022ec:	08002307 	.word	0x08002307
 80022f0:	08002311 	.word	0x08002311
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	08002323 	.word	0x08002323
        case '1': // envelope attack rate
        	return_data[2] = SynthParameters.env_attack_rate;
 80022fc:	4b17      	ldr	r3, [pc, #92]	@ (800235c <Envelope_Value_Query+0x98>)
 80022fe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002302:	73bb      	strb	r3, [r7, #14]
            break;
 8002304:	e012      	b.n	800232c <Envelope_Value_Query+0x68>
        case '2': // envelope sustain level/decay rate
        	return_data[2] = SynthParameters.env_decay_rate;
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <Envelope_Value_Query+0x98>)
 8002308:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800230c:	73bb      	strb	r3, [r7, #14]
            break;
 800230e:	e00d      	b.n	800232c <Envelope_Value_Query+0x68>
        case '3': // envelope release rate
        	return_data[2] = SynthParameters.env_release_rate;
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <Envelope_Value_Query+0x98>)
 8002312:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002316:	73bb      	strb	r3, [r7, #14]
            break;
 8002318:	e008      	b.n	800232c <Envelope_Value_Query+0x68>
        case '4': // envelope output polarity
        	return_data[2] = SynthParameters.env_invert_mode;
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <Envelope_Value_Query+0x98>)
 800231c:	795b      	ldrb	r3, [r3, #5]
 800231e:	73bb      	strb	r3, [r7, #14]
            break;
 8002320:	e004      	b.n	800232c <Envelope_Value_Query+0x68>
        case '5': // envelope loop mode control
        	return_data[2] = SynthParameters.env_loop_mode;
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <Envelope_Value_Query+0x98>)
 8002324:	799b      	ldrb	r3, [r3, #6]
 8002326:	73bb      	strb	r3, [r7, #14]
            break;
 8002328:	e000      	b.n	800232c <Envelope_Value_Query+0x68>
        default:  // do nothing on invalid command

            break;
 800232a:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2103      	movs	r1, #3
 8002332:	4618      	mov	r0, r3
 8002334:	f00d f966 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <Envelope_Value_Query+0x9c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <Envelope_Value_Query+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002340:	f107 010c 	add.w	r1, r7, #12
 8002344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002348:	2203      	movs	r2, #3
 800234a:	4806      	ldr	r0, [pc, #24]	@ (8002364 <Envelope_Value_Query+0xa0>)
 800234c:	f007 fc9e 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 8002350:	bf00      	nop
 8002352:	bf00      	nop
}
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000344 	.word	0x20000344
 8002360:	20000370 	.word	0x20000370
 8002364:	2000044c 	.word	0x2000044c

08002368 <Filter_Command_Handler>:

// ===========================================================================================================
// F - filter functions

int Filter_Command_Handler(int address, int data){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3b31      	subs	r3, #49	@ 0x31
 800237a:	2b04      	cmp	r3, #4
 800237c:	d87a      	bhi.n	8002474 <Filter_Command_Handler+0x10c>
 800237e:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <Filter_Command_Handler+0x1c>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	08002399 	.word	0x08002399
 8002388:	080023c3 	.word	0x080023c3
 800238c:	080023ed 	.word	0x080023ed
 8002390:	08002417 	.word	0x08002417
 8002394:	0800244b 	.word	0x0800244b
        case '1': // filter cutoff

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8002398:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002480 <Filter_Command_Handler+0x118>
 800239c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002480 <Filter_Command_Handler+0x118>
 80023a0:	22ff      	movs	r2, #255	@ 0xff
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 ffc5 	bl	8003334 <Command_Error_Check>
 80023aa:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <Filter_Command_Handler+0x56>
                SynthParameters.vcf_cutoff = data;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <Filter_Command_Handler+0x11c>)
 80023b8:	76da      	strb	r2, [r3, #27]
                Filter_Digital_Pot_Control();
 80023ba:	f000 fde1 	bl	8002f80 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	e059      	b.n	8002476 <Filter_Command_Handler+0x10e>
        case '2': // filter resonance intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023c2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002480 <Filter_Command_Handler+0x118>
 80023c6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002480 <Filter_Command_Handler+0x118>
 80023ca:	22ff      	movs	r2, #255	@ 0xff
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 ffb0 	bl	8003334 <Command_Error_Check>
 80023d4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <Filter_Command_Handler+0x80>
                SynthParameters.vcf_resonance = data;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <Filter_Command_Handler+0x11c>)
 80023e2:	771a      	strb	r2, [r3, #28]
                Filter_Digital_Pot_Control();
 80023e4:	f000 fdcc 	bl	8002f80 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	e044      	b.n	8002476 <Filter_Command_Handler+0x10e>
        case '3': // filter modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80023ec:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002480 <Filter_Command_Handler+0x118>
 80023f0:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002480 <Filter_Command_Handler+0x118>
 80023f4:	22ff      	movs	r2, #255	@ 0xff
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 ff9b 	bl	8003334 <Command_Error_Check>
 80023fe:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_cv_intensity = data;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <Filter_Command_Handler+0x11c>)
 800240c:	769a      	strb	r2, [r3, #26]
                Filter_Digital_Pot_Control();
 800240e:	f000 fdb7 	bl	8002f80 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	e02f      	b.n	8002476 <Filter_Command_Handler+0x10e>
        case '4': // filter modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8002416:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002480 <Filter_Command_Handler+0x118>
 800241a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8002480 <Filter_Command_Handler+0x118>
 800241e:	2203      	movs	r2, #3
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	2001      	movs	r0, #1
 8002424:	f000 ff86 	bl	8003334 <Command_Error_Check>
 8002428:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <Filter_Command_Handler+0xde>
                SynthParameters.vcf_mod_source = data;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <Filter_Command_Handler+0x11c>)
 8002436:	709a      	strb	r2, [r3, #2]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <Filter_Command_Handler+0x11c>)
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f825 	bl	800248c <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 8002442:	f000 fd6d 	bl	8002f20 <Filter_Mod_Source_Control>
            }

        	return error_check;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	e015      	b.n	8002476 <Filter_Command_Handler+0x10e>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 800244a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002480 <Filter_Command_Handler+0x118>
 800244e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002480 <Filter_Command_Handler+0x118>
 8002452:	2204      	movs	r2, #4
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	2002      	movs	r0, #2
 8002458:	f000 ff6c 	bl	8003334 <Command_Error_Check>
 800245c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <Filter_Command_Handler+0x108>
            	Filter_Value_Query(data);
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f000 f83d 	bl	80024e4 <Filter_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 800246a:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <Filter_Command_Handler+0x120>)
 800246c:	2201      	movs	r2, #1
 800246e:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	e000      	b.n	8002476 <Filter_Command_Handler+0x10e>
        default:
            // do nothing on invalid command

        	return error_check;
 8002474:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	00000000 	.word	0x00000000
 8002484:	20000344 	.word	0x20000344
 8002488:	20000370 	.word	0x20000370

0800248c <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d014      	beq.n	80024c4 <Filter_Mod_Source_Decode+0x38>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b03      	cmp	r3, #3
 800249e:	dc18      	bgt.n	80024d2 <Filter_Mod_Source_Decode+0x46>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d003      	beq.n	80024ae <Filter_Mod_Source_Decode+0x22>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d004      	beq.n	80024b6 <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80024ac:	e011      	b.n	80024d2 <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <Filter_Mod_Source_Decode+0x54>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	761a      	strb	r2, [r3, #24]
            break;
 80024b4:	e00e      	b.n	80024d4 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <Filter_Mod_Source_Decode+0x54>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 1;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <Filter_Mod_Source_Decode+0x54>)
 80024be:	2201      	movs	r2, #1
 80024c0:	765a      	strb	r2, [r3, #25]
            break;
 80024c2:	e007      	b.n	80024d4 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <Filter_Mod_Source_Decode+0x54>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	761a      	strb	r2, [r3, #24]
        	SynthParameters.vcf_cv_sel = 0;
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <Filter_Mod_Source_Decode+0x54>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	765a      	strb	r2, [r3, #25]
            break;
 80024d0:	e000      	b.n	80024d4 <Filter_Mod_Source_Decode+0x48>
            break;
 80024d2:	bf00      	nop
    }

	return;
 80024d4:	bf00      	nop
}
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000344 	.word	0x20000344

080024e4 <Filter_Value_Query>:

void Filter_Value_Query(int data){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'F', data , 0};
 80024ec:	2346      	movs	r3, #70	@ 0x46
 80024ee:	733b      	strb	r3, [r7, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	737b      	strb	r3, [r7, #13]
 80024f6:	2300      	movs	r3, #0
 80024f8:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3b31      	subs	r3, #49	@ 0x31
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d81a      	bhi.n	8002538 <Filter_Value_Query+0x54>
 8002502:	a201      	add	r2, pc, #4	@ (adr r2, 8002508 <Filter_Value_Query+0x24>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	08002519 	.word	0x08002519
 800250c:	08002521 	.word	0x08002521
 8002510:	08002529 	.word	0x08002529
 8002514:	08002531 	.word	0x08002531
        case '1': // filter cutoff
        	return_data[2] = SynthParameters.vcf_cutoff;
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <Filter_Value_Query+0x84>)
 800251a:	7edb      	ldrb	r3, [r3, #27]
 800251c:	73bb      	strb	r3, [r7, #14]
            break;
 800251e:	e00c      	b.n	800253a <Filter_Value_Query+0x56>
        case '2': // filter resonance intensity
        	return_data[2] = SynthParameters.vcf_resonance;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <Filter_Value_Query+0x84>)
 8002522:	7f1b      	ldrb	r3, [r3, #28]
 8002524:	73bb      	strb	r3, [r7, #14]
            break;
 8002526:	e008      	b.n	800253a <Filter_Value_Query+0x56>
        case '3': // filter modulation intensity
        	return_data[2] = SynthParameters.vcf_cv_intensity;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <Filter_Value_Query+0x84>)
 800252a:	7e9b      	ldrb	r3, [r3, #26]
 800252c:	73bb      	strb	r3, [r7, #14]
            break;
 800252e:	e004      	b.n	800253a <Filter_Value_Query+0x56>
        case '4': // filter modulation control
        	return_data[2] = SynthParameters.vcf_mod_source;
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <Filter_Value_Query+0x84>)
 8002532:	789b      	ldrb	r3, [r3, #2]
 8002534:	73bb      	strb	r3, [r7, #14]
            break;
 8002536:	e000      	b.n	800253a <Filter_Value_Query+0x56>
        default:  // do nothing on invalid command

            break;
 8002538:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	2103      	movs	r1, #3
 8002540:	4618      	mov	r0, r3
 8002542:	f00d f85f 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <Filter_Value_Query+0x88>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <Filter_Value_Query+0x7c>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 800254e:	f107 010c 	add.w	r1, r7, #12
 8002552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002556:	2203      	movs	r2, #3
 8002558:	4805      	ldr	r0, [pc, #20]	@ (8002570 <Filter_Value_Query+0x8c>)
 800255a:	f007 fb97 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 800255e:	bf00      	nop
 8002560:	bf00      	nop
}
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000344 	.word	0x20000344
 800256c:	20000370 	.word	0x20000370
 8002570:	2000044c 	.word	0x2000044c

08002574 <Mixer_Command_Handler>:

// ===========================================================================================================
// M - mixer function

int Mixer_Command_Handler(int address, int data){
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3b31      	subs	r3, #49	@ 0x31
 8002586:	2b03      	cmp	r3, #3
 8002588:	d85c      	bhi.n	8002644 <Mixer_Command_Handler+0xd0>
 800258a:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <Mixer_Command_Handler+0x1c>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025cb 	.word	0x080025cb
 8002598:	080025f5 	.word	0x080025f5
 800259c:	0800261b 	.word	0x0800261b
        case '1': // DAC output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80025a0:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025a4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025a8:	22ff      	movs	r2, #255	@ 0xff
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 fec1 	bl	8003334 <Command_Error_Check>
 80025b2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <Mixer_Command_Handler+0x52>
                SynthParameters.dac_mixer_level = data;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <Mixer_Command_Handler+0xe0>)
 80025c0:	759a      	strb	r2, [r3, #22]
                Mixer_Digital_Pot_Control();
 80025c2:	f000 fc1f 	bl	8002e04 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	e03d      	b.n	8002646 <Mixer_Command_Handler+0xd2>
        case '2': // filter output level

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 80025ca:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025ce:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	2000      	movs	r0, #0
 80025d8:	f000 feac 	bl	8003334 <Command_Error_Check>
 80025dc:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <Mixer_Command_Handler+0x7c>
                SynthParameters.filter_out_level = data;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <Mixer_Command_Handler+0xe0>)
 80025ea:	75da      	strb	r2, [r3, #23]
                Mixer_Digital_Pot_Control();
 80025ec:	f000 fc0a 	bl	8002e04 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	e028      	b.n	8002646 <Mixer_Command_Handler+0xd2>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 80025f4:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025f8:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002650 <Mixer_Command_Handler+0xdc>
 80025fc:	2201      	movs	r2, #1
 80025fe:	6839      	ldr	r1, [r7, #0]
 8002600:	2000      	movs	r0, #0
 8002602:	f000 fe97 	bl	8003334 <Command_Error_Check>
 8002606:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <Mixer_Command_Handler+0xa2>
            	sys.velocity_enable = data;
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <Mixer_Command_Handler+0xe4>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
            }

        	return error_check;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	e015      	b.n	8002646 <Mixer_Command_Handler+0xd2>
        case '4': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 3, 0, 0);
 800261a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002650 <Mixer_Command_Handler+0xdc>
 800261e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002650 <Mixer_Command_Handler+0xdc>
 8002622:	2203      	movs	r2, #3
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	2002      	movs	r0, #2
 8002628:	f000 fe84 	bl	8003334 <Command_Error_Check>
 800262c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <Mixer_Command_Handler+0xcc>
            	Mixer_Value_Query(data);
 8002634:	6838      	ldr	r0, [r7, #0]
 8002636:	f000 f811 	bl	800265c <Mixer_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <Mixer_Command_Handler+0xe4>)
 800263c:	2201      	movs	r2, #1
 800263e:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	e000      	b.n	8002646 <Mixer_Command_Handler+0xd2>
        default:
            // do nothing on invalid command

        	return error_check;
 8002644:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	00000000 	.word	0x00000000
 8002654:	20000344 	.word	0x20000344
 8002658:	20000370 	.word	0x20000370

0800265c <Mixer_Value_Query>:

void Mixer_Value_Query(int data){
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'M', data , 0};
 8002664:	234d      	movs	r3, #77	@ 0x4d
 8002666:	733b      	strb	r3, [r7, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	737b      	strb	r3, [r7, #13]
 800266e:	2300      	movs	r3, #0
 8002670:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b33      	cmp	r3, #51	@ 0x33
 8002676:	d011      	beq.n	800269c <Mixer_Value_Query+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b33      	cmp	r3, #51	@ 0x33
 800267c:	dc14      	bgt.n	80026a8 <Mixer_Value_Query+0x4c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b31      	cmp	r3, #49	@ 0x31
 8002682:	d003      	beq.n	800268c <Mixer_Value_Query+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b32      	cmp	r3, #50	@ 0x32
 8002688:	d004      	beq.n	8002694 <Mixer_Value_Query+0x38>
        case '3': // enable/disable MIDI velocity
        	return_data[2] = sys.velocity_enable;
            break;
        default:  // do nothing on invalid command

            break;
 800268a:	e00d      	b.n	80026a8 <Mixer_Value_Query+0x4c>
        	return_data[2] = SynthParameters.dac_mixer_level;
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <Mixer_Value_Query+0x7c>)
 800268e:	7d9b      	ldrb	r3, [r3, #22]
 8002690:	73bb      	strb	r3, [r7, #14]
            break;
 8002692:	e00a      	b.n	80026aa <Mixer_Value_Query+0x4e>
        	return_data[2] = SynthParameters.filter_out_level;
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <Mixer_Value_Query+0x7c>)
 8002696:	7ddb      	ldrb	r3, [r3, #23]
 8002698:	73bb      	strb	r3, [r7, #14]
            break;
 800269a:	e006      	b.n	80026aa <Mixer_Value_Query+0x4e>
        	return_data[2] = sys.velocity_enable;
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <Mixer_Value_Query+0x80>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	73bb      	strb	r3, [r7, #14]
            break;
 80026a6:	e000      	b.n	80026aa <Mixer_Value_Query+0x4e>
            break;
 80026a8:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	2103      	movs	r1, #3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f00c ffa7 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <Mixer_Value_Query+0x80>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <Mixer_Value_Query+0x74>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 80026be:	f107 010c 	add.w	r1, r7, #12
 80026c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026c6:	2203      	movs	r2, #3
 80026c8:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <Mixer_Value_Query+0x84>)
 80026ca:	f007 fadf 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
}
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000344 	.word	0x20000344
 80026dc:	20000370 	.word	0x20000370
 80026e0:	2000044c 	.word	0x2000044c

080026e4 <LFO_Command_Handler>:

// ===========================================================================================================
// O - LFO functions

int LFO_Command_Handler(int address, int data){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b33      	cmp	r3, #51	@ 0x33
 80026f6:	d038      	beq.n	800276a <LFO_Command_Handler+0x86>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b33      	cmp	r3, #51	@ 0x33
 80026fc:	dc4a      	bgt.n	8002794 <LFO_Command_Handler+0xb0>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b31      	cmp	r3, #49	@ 0x31
 8002702:	d003      	beq.n	800270c <LFO_Command_Handler+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b32      	cmp	r3, #50	@ 0x32
 8002708:	d015      	beq.n	8002736 <LFO_Command_Handler+0x52>
 800270a:	e043      	b.n	8002794 <LFO_Command_Handler+0xb0>
        case '1': // LFO frequency/rate

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 800270c:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80027a0 <LFO_Command_Handler+0xbc>
 8002710:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80027a0 <LFO_Command_Handler+0xbc>
 8002714:	22ff      	movs	r2, #255	@ 0xff
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	2000      	movs	r0, #0
 800271a:	f000 fe0b 	bl	8003334 <Command_Error_Check>
 800271e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <LFO_Command_Handler+0x4e>
                SynthParameters.lfo_frequency = data;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <LFO_Command_Handler+0xc0>)
 800272c:	77da      	strb	r2, [r3, #31]
                LFO_Digital_Pot_Control();
 800272e:	f000 fc73 	bl	8003018 <LFO_Digital_Pot_Control>
            }

        	return error_check;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	e02f      	b.n	8002796 <LFO_Command_Handler+0xb2>
        case '2': // LFO output waveform

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8002736:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80027a0 <LFO_Command_Handler+0xbc>
 800273a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80027a0 <LFO_Command_Handler+0xbc>
 800273e:	2203      	movs	r2, #3
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	2001      	movs	r0, #1
 8002744:	f000 fdf6 	bl	8003334 <Command_Error_Check>
 8002748:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <LFO_Command_Handler+0x82>
                SynthParameters.lfo_waveform = data;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <LFO_Command_Handler+0xc0>)
 8002756:	71da      	strb	r2, [r3, #7]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <LFO_Command_Handler+0xc0>)
 800275a:	79db      	ldrb	r3, [r3, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f825 	bl	80027ac <LFO_Waveform_Decode>
                LFO_Output_Control();
 8002762:	f000 fc29 	bl	8002fb8 <LFO_Output_Control>
            }

        	return error_check;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e015      	b.n	8002796 <LFO_Command_Handler+0xb2>
        case '3': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 2, 0, 0);
 800276a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80027a0 <LFO_Command_Handler+0xbc>
 800276e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80027a0 <LFO_Command_Handler+0xbc>
 8002772:	2202      	movs	r2, #2
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	2002      	movs	r0, #2
 8002778:	f000 fddc 	bl	8003334 <Command_Error_Check>
 800277c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <LFO_Command_Handler+0xac>
            	LFO_Value_Query(data);
 8002784:	6838      	ldr	r0, [r7, #0]
 8002786:	f000 f83d 	bl	8002804 <LFO_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <LFO_Command_Handler+0xc4>)
 800278c:	2201      	movs	r2, #1
 800278e:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	e000      	b.n	8002796 <LFO_Command_Handler+0xb2>
        default:
            // do nothing on invalid command

        	return error_check;
 8002794:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	00000000 	.word	0x00000000
 80027a4:	20000344 	.word	0x20000344
 80027a8:	20000370 	.word	0x20000370

080027ac <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

    switch(data) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d014      	beq.n	80027e4 <LFO_Waveform_Decode+0x38>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	dc18      	bgt.n	80027f2 <LFO_Waveform_Decode+0x46>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d003      	beq.n	80027ce <LFO_Waveform_Decode+0x22>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d004      	beq.n	80027d6 <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80027cc:	e011      	b.n	80027f2 <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <LFO_Waveform_Decode+0x54>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	775a      	strb	r2, [r3, #29]
            break;
 80027d4:	e00e      	b.n	80027f4 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <LFO_Waveform_Decode+0x54>)
 80027d8:	2201      	movs	r2, #1
 80027da:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 1;
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <LFO_Waveform_Decode+0x54>)
 80027de:	2201      	movs	r2, #1
 80027e0:	779a      	strb	r2, [r3, #30]
            break;
 80027e2:	e007      	b.n	80027f4 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <LFO_Waveform_Decode+0x54>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	775a      	strb	r2, [r3, #29]
        	SynthParameters.lfo_output_waveform = 0;
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <LFO_Waveform_Decode+0x54>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	779a      	strb	r2, [r3, #30]
            break;
 80027f0:	e000      	b.n	80027f4 <LFO_Waveform_Decode+0x48>
            break;
 80027f2:	bf00      	nop
    }

	return;
 80027f4:	bf00      	nop
}
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20000344 	.word	0x20000344

08002804 <LFO_Value_Query>:

void LFO_Value_Query(int data){
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'O', data , 0};
 800280c:	234f      	movs	r3, #79	@ 0x4f
 800280e:	733b      	strb	r3, [r7, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	737b      	strb	r3, [r7, #13]
 8002816:	2300      	movs	r3, #0
 8002818:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b31      	cmp	r3, #49	@ 0x31
 800281e:	d003      	beq.n	8002828 <LFO_Value_Query+0x24>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b32      	cmp	r3, #50	@ 0x32
 8002824:	d004      	beq.n	8002830 <LFO_Value_Query+0x2c>
        case '2': // LFO output waveform
        	return_data[2] = SynthParameters.lfo_waveform;
            break;
        default:  // do nothing on invalid command

            break;
 8002826:	e007      	b.n	8002838 <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_frequency;
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <LFO_Value_Query+0x64>)
 800282a:	7fdb      	ldrb	r3, [r3, #31]
 800282c:	73bb      	strb	r3, [r7, #14]
            break;
 800282e:	e003      	b.n	8002838 <LFO_Value_Query+0x34>
        	return_data[2] = SynthParameters.lfo_waveform;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <LFO_Value_Query+0x64>)
 8002832:	79db      	ldrb	r3, [r3, #7]
 8002834:	73bb      	strb	r3, [r7, #14]
            break;
 8002836:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	2103      	movs	r1, #3
 800283e:	4618      	mov	r0, r3
 8002840:	f00c fee0 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <LFO_Value_Query+0x68>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d108      	bne.n	800285e <LFO_Value_Query+0x5a>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 800284c:	f107 010c 	add.w	r1, r7, #12
 8002850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002854:	2203      	movs	r2, #3
 8002856:	4806      	ldr	r0, [pc, #24]	@ (8002870 <LFO_Value_Query+0x6c>)
 8002858:	f007 fa18 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 800285c:	bf00      	nop
 800285e:	bf00      	nop
}
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000344 	.word	0x20000344
 800286c:	20000370 	.word	0x20000370
 8002870:	2000044c 	.word	0x2000044c

08002874 <Preset_Command_Handler>:

// ===========================================================================================================
// P - preset function

int Preset_Command_Handler(int address, int data){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b33      	cmp	r3, #51	@ 0x33
 8002886:	d027      	beq.n	80028d8 <Preset_Command_Handler+0x64>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b33      	cmp	r3, #51	@ 0x33
 800288c:	dc33      	bgt.n	80028f6 <Preset_Command_Handler+0x82>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b31      	cmp	r3, #49	@ 0x31
 8002892:	d003      	beq.n	800289c <Preset_Command_Handler+0x28>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b32      	cmp	r3, #50	@ 0x32
 8002898:	d00f      	beq.n	80028ba <Preset_Command_Handler+0x46>
 800289a:	e02c      	b.n	80028f6 <Preset_Command_Handler+0x82>
        case '1': // preset save function

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 800289c:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028a0:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028a4:	2204      	movs	r2, #4
 80028a6:	6839      	ldr	r1, [r7, #0]
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 fd43 	bl	8003334 <Command_Error_Check>
 80028ae:	60f8      	str	r0, [r7, #12]

        	Preset_Write(data);
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f000 ffef 	bl	8003894 <Preset_Write>

        	return error_check;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	e01e      	b.n	80028f8 <Preset_Command_Handler+0x84>
        case '2': // preset load function

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 80028ba:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028be:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028c2:	2204      	movs	r2, #4
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 fd34 	bl	8003334 <Command_Error_Check>
 80028cc:	60f8      	str	r0, [r7, #12]

        	Preset_Read(data);
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f001 f856 	bl	8003980 <Preset_Read>

        	return error_check;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	e00f      	b.n	80028f8 <Preset_Command_Handler+0x84>
        case '3': // initialize preset slot

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 4, 0, 0);
 80028d8:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028dc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002900 <Preset_Command_Handler+0x8c>
 80028e0:	2204      	movs	r2, #4
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 fd25 	bl	8003334 <Command_Error_Check>
 80028ea:	60f8      	str	r0, [r7, #12]

        	Preset_Init(data);
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f000 ff75 	bl	80037dc <Preset_Init>

        	return error_check;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	e000      	b.n	80028f8 <Preset_Command_Handler+0x84>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return error_check;
 80028f6:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00000000 	.word	0x00000000

08002904 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <MX_SPI3_Init+0x74>)
 800290a:	4a1c      	ldr	r2, [pc, #112]	@ (800297c <MX_SPI3_Init+0x78>)
 800290c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002914:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <MX_SPI3_Init+0x74>)
 800291e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002922:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <MX_SPI3_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002936:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002938:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <MX_SPI3_Init+0x74>)
 800293a:	2228      	movs	r2, #40	@ 0x28
 800293c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <MX_SPI3_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002952:	2207      	movs	r2, #7
 8002954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <MX_SPI3_Init+0x74>)
 800295e:	2208      	movs	r2, #8
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_SPI3_Init+0x74>)
 8002964:	f006 f9d0 	bl	8008d08 <HAL_SPI_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800296e:	f7fe fd3c 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200002e0 	.word	0x200002e0
 800297c:	40003c00 	.word	0x40003c00

08002980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a17      	ldr	r2, [pc, #92]	@ (80029fc <HAL_SPI_MspInit+0x7c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d128      	bne.n	80029f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029a2:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	4a16      	ldr	r2, [pc, #88]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	4a10      	ldr	r2, [pc, #64]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_SPI_MspInit+0x80>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80029d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029e4:	2306      	movs	r3, #6
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4805      	ldr	r0, [pc, #20]	@ (8002a04 <HAL_SPI_MspInit+0x84>)
 80029f0:	f001 fd7a 	bl	80044e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	@ 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40003c00 	.word	0x40003c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	48000800 	.word	0x48000800

08002a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	4a0e      	ldr	r2, [pc, #56]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_MspInit+0x44>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002a3e:	f004 fcd7 	bl	80073f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <NMI_Handler+0x4>

08002a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <HardFault_Handler+0x4>

08002a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a64:	bf00      	nop
 8002a66:	e7fd      	b.n	8002a64 <MemManage_Handler+0x4>

08002a68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <BusFault_Handler+0x4>

08002a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <UsageFault_Handler+0x4>

08002a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa6:	f001 f955 	bl	8003d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8002ab6:	f001 fc05 	bl	80042c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000280 	.word	0x20000280

08002ac4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <USB_LP_IRQHandler+0x10>)
 8002aca:	f002 ffdb 	bl	8005a84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200019b8 	.word	0x200019b8

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f007 f9af 	bl	8009e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000044c 	.word	0x2000044c

08002aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002af0:	4802      	ldr	r0, [pc, #8]	@ (8002afc <TIM6_DAC_IRQHandler+0x10>)
 8002af2:	f006 fd86 	bl	8009602 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000400 	.word	0x20000400

08002b00 <Digital_Pot_Wiper_Set>:

extern System sys;

Synth SynthParameters;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <Digital_Pot_Wiper_Set+0x1c>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e001      	b.n	8002b20 <Digital_Pot_Wiper_Set+0x20>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d854      	bhi.n	8002bd2 <Digital_Pot_Wiper_Set+0xd2>
 8002b28:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <Digital_Pot_Wiper_Set+0x30>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b73 	.word	0x08002b73
 8002b3c:	08002b7d 	.word	0x08002b7d
 8002b40:	08002b89 	.word	0x08002b89
 8002b44:	08002b93 	.word	0x08002b93
 8002b48:	08002b9d 	.word	0x08002b9d
 8002b4c:	08002ba7 	.word	0x08002ba7
 8002b50:	08002bb3 	.word	0x08002bb3
 8002b54:	08002bbf 	.word	0x08002bbf
 8002b58:	08002bc9 	.word	0x08002bc9
        case 0:
            CSn_PORT = CS0_PORT;
 8002b5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002b60:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 8002b62:	2320      	movs	r3, #32
 8002b64:	827b      	strh	r3, [r7, #18]
            break;
 8002b66:	e035      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 8002b68:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <Digital_Pot_Wiper_Set+0x104>)
 8002b6a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	827b      	strh	r3, [r7, #18]
            break;
 8002b70:	e030      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 8002b72:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <Digital_Pot_Wiper_Set+0x108>)
 8002b74:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 8002b76:	2304      	movs	r3, #4
 8002b78:	827b      	strh	r3, [r7, #18]
            break;
 8002b7a:	e02b      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <Digital_Pot_Wiper_Set+0x104>)
 8002b7e:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 8002b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b84:	827b      	strh	r3, [r7, #18]
            break;
 8002b86:	e025      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <Digital_Pot_Wiper_Set+0x104>)
 8002b8a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 8002b8c:	2340      	movs	r3, #64	@ 0x40
 8002b8e:	827b      	strh	r3, [r7, #18]
            break;
 8002b90:	e020      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <Digital_Pot_Wiper_Set+0x10c>)
 8002b94:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 8002b96:	2320      	movs	r3, #32
 8002b98:	827b      	strh	r3, [r7, #18]
            break;
 8002b9a:	e01b      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <Digital_Pot_Wiper_Set+0x104>)
 8002b9e:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	827b      	strh	r3, [r7, #18]
            break;
 8002ba4:	e016      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <Digital_Pot_Wiper_Set+0x10c>)
 8002ba8:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 8002baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bae:	827b      	strh	r3, [r7, #18]
            break;
 8002bb0:	e010      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 8002bb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002bb6:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	827b      	strh	r3, [r7, #18]
            break;
 8002bbc:	e00a      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <Digital_Pot_Wiper_Set+0x10c>)
 8002bc0:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	827b      	strh	r3, [r7, #18]
            break;
 8002bc6:	e005      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <Digital_Pot_Wiper_Set+0x104>)
 8002bca:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	827b      	strh	r3, [r7, #18]
            break;
 8002bd0:	e000      	b.n	8002bd4 <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 8002bd2:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8002bd4:	8a7b      	ldrh	r3, [r7, #18]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f001 fe06 	bl	80047ec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8002be0:	f107 0110 	add.w	r1, r7, #16
 8002be4:	230a      	movs	r3, #10
 8002be6:	2201      	movs	r2, #1
 8002be8:	4809      	ldr	r0, [pc, #36]	@ (8002c10 <Digital_Pot_Wiper_Set+0x110>)
 8002bea:	f006 f938 	bl	8008e5e <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6978      	ldr	r0, [r7, #20]
 8002bf6:	f001 fdf9 	bl	80047ec <HAL_GPIO_WritePin>

	return;
 8002bfa:	bf00      	nop
}
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	48000400 	.word	0x48000400
 8002c08:	48000c00 	.word	0x48000c00
 8002c0c:	48000800 	.word	0x48000800
 8002c10:	200002e0 	.word	0x200002e0

08002c14 <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	4820      	ldr	r0, [pc, #128]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c1e:	f001 fde5 	bl	80047ec <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 8002c22:	2201      	movs	r2, #1
 8002c24:	2120      	movs	r1, #32
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2a:	f001 fddf 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2102      	movs	r1, #2
 8002c32:	481b      	ldr	r0, [pc, #108]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c34:	f001 fdda 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	4819      	ldr	r0, [pc, #100]	@ (8002ca4 <Synth_Reset_Initialize+0x90>)
 8002c3e:	f001 fdd5 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 8002c42:	2201      	movs	r2, #1
 8002c44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c48:	4815      	ldr	r0, [pc, #84]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c4a:	f001 fdcf 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2140      	movs	r1, #64	@ 0x40
 8002c52:	4813      	ldr	r0, [pc, #76]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c54:	f001 fdca 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	4812      	ldr	r0, [pc, #72]	@ (8002ca8 <Synth_Reset_Initialize+0x94>)
 8002c5e:	f001 fdc5 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	480e      	ldr	r0, [pc, #56]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c68:	f001 fdc0 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c72:	480d      	ldr	r0, [pc, #52]	@ (8002ca8 <Synth_Reset_Initialize+0x94>)
 8002c74:	f001 fdba 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	2180      	movs	r1, #128	@ 0x80
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c80:	f001 fdb4 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 8002c84:	2201      	movs	r2, #1
 8002c86:	2110      	movs	r1, #16
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <Synth_Reset_Initialize+0x94>)
 8002c8a:	f001 fdaf 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	2101      	movs	r1, #1
 8002c92:	4803      	ldr	r0, [pc, #12]	@ (8002ca0 <Synth_Reset_Initialize+0x8c>)
 8002c94:	f001 fdaa 	bl	80047ec <HAL_GPIO_WritePin>

	Synth_Initialize_Preset();
 8002c98:	f000 f808 	bl	8002cac <Synth_Initialize_Preset>

	return;
 8002c9c:	bf00      	nop
}
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48000800 	.word	0x48000800

08002cac <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source      = VCA_MOD_SOURCE_DEFAULT;
 8002cb0:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
	SynthParameters.vca_bypass          = VCA_BYPASS_DEFAULT;
 8002cb6:	4b52      	ldr	r3, [pc, #328]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	705a      	strb	r2, [r3, #1]
	SynthParameters.vcf_mod_source      = VCF_MOD_SOURCE_DEFAULT;
 8002cbc:	4b50      	ldr	r3, [pc, #320]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	709a      	strb	r2, [r3, #2]
	SynthParameters.fm1_enable          = FM1_ENABLE_DEFAULT;
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	70da      	strb	r2, [r3, #3]
	SynthParameters.fm2_enable          = FM2_ENABLE_DEFAULT;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	711a      	strb	r2, [r3, #4]
	SynthParameters.env_invert_mode     = ENV_INVERT_MODE_DEFAULT;
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	715a      	strb	r2, [r3, #5]
	SynthParameters.env_loop_mode       = ENV_LOOP_MODE_DEFAULT;
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	719a      	strb	r2, [r3, #6]
	SynthParameters.lfo_waveform        = LFO_WAVEFORM_DEFAULT;
 8002cda:	4b49      	ldr	r3, [pc, #292]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	71da      	strb	r2, [r3, #7]

	// waveform synthesis settings
	SynthParameters.oscillator1         = OSCILLATOR1_DEFAULT;
 8002ce0:	4b47      	ldr	r3, [pc, #284]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	721a      	strb	r2, [r3, #8]
	SynthParameters.oscillator2         = OSCILLATOR2_DEFAULT;
 8002ce6:	4b46      	ldr	r3, [pc, #280]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002ce8:	2204      	movs	r2, #4
 8002cea:	725a      	strb	r2, [r3, #9]
	SynthParameters.note_offset1        = NOTE_OFFSET1_DEFAULT;
 8002cec:	4b44      	ldr	r3, [pc, #272]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	729a      	strb	r2, [r3, #10]
	SynthParameters.note_offset2        = NOTE_OFFSET2_DEFAULT;
 8002cf2:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cf4:	220c      	movs	r2, #12
 8002cf6:	72da      	strb	r2, [r3, #11]
	SynthParameters.detune_osc1         = DETUNE_OSC1_DEFAULT;
 8002cf8:	4b41      	ldr	r3, [pc, #260]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002cfa:	2264      	movs	r2, #100	@ 0x64
 8002cfc:	731a      	strb	r2, [r3, #12]
	SynthParameters.detune_osc2         = DETUNE_OSC2_DEFAULT;
 8002cfe:	4b40      	ldr	r3, [pc, #256]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d00:	2264      	movs	r2, #100	@ 0x64
 8002d02:	735a      	strb	r2, [r3, #13]
	SynthParameters.fm_intensity1       = FM_INTENSITY1_DEFAULT;
 8002d04:	4b3e      	ldr	r3, [pc, #248]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d06:	227f      	movs	r2, #127	@ 0x7f
 8002d08:	739a      	strb	r2, [r3, #14]
	SynthParameters.fm_intensity2       = FM_INTENSITY2_DEFAULT;
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d0c:	227f      	movs	r2, #127	@ 0x7f
 8002d0e:	73da      	strb	r2, [r3, #15]
	SynthParameters.fm_harmonic1        = FM_HARMONIC1_DEFAULT;
 8002d10:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d12:	227f      	movs	r2, #127	@ 0x7f
 8002d14:	741a      	strb	r2, [r3, #16]
	SynthParameters.fm_harmonic2        = FM_HARMONIC2_DEFAULT;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d18:	227f      	movs	r2, #127	@ 0x7f
 8002d1a:	745a      	strb	r2, [r3, #17]
	SynthParameters.duty_cycle1         = DUTY_CYCLE1_DEFAULT;
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d1e:	227f      	movs	r2, #127	@ 0x7f
 8002d20:	749a      	strb	r2, [r3, #18]
	SynthParameters.duty_cycle2         = DUTY_CYCLE2_DEFAULT;
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d24:	227f      	movs	r2, #127	@ 0x7f
 8002d26:	74da      	strb	r2, [r3, #19]
	SynthParameters.volume_osc1         = VOLUME_OSC1_DEFAULT;
 8002d28:	4b35      	ldr	r3, [pc, #212]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d2a:	2264      	movs	r2, #100	@ 0x64
 8002d2c:	751a      	strb	r2, [r3, #20]
	SynthParameters.volume_osc2         = VOLUME_OSC2_DEFAULT;
 8002d2e:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d30:	2264      	movs	r2, #100	@ 0x64
 8002d32:	755a      	strb	r2, [r3, #21]

	// mixer output level settings
	SynthParameters.dac_mixer_level     = DAC_MIXER_LEVEL_DEFAULT;
 8002d34:	4b32      	ldr	r3, [pc, #200]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d36:	227f      	movs	r2, #127	@ 0x7f
 8002d38:	759a      	strb	r2, [r3, #22]
	SynthParameters.filter_out_level    = FILTER_OUT_LEVEL_DEFAULT;
 8002d3a:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d3c:	227f      	movs	r2, #127	@ 0x7f
 8002d3e:	75da      	strb	r2, [r3, #23]

	// filter modulation source settings
	SynthParameters.vcf_cv_en           = VCF_CV_EN_DEFAULT;
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	761a      	strb	r2, [r3, #24]
	SynthParameters.vcf_cv_sel          = VCF_CV_SEL_DEFAULT;
 8002d46:	4b2e      	ldr	r3, [pc, #184]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	765a      	strb	r2, [r3, #25]

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity    = VCF_CV_INTENSITY_DEFAULT;
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d4e:	227f      	movs	r2, #127	@ 0x7f
 8002d50:	769a      	strb	r2, [r3, #26]
	SynthParameters.vcf_cutoff          = VCF_CUTOFF_DEFAULT;
 8002d52:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d54:	227f      	movs	r2, #127	@ 0x7f
 8002d56:	76da      	strb	r2, [r3, #27]
	SynthParameters.vcf_resonance       = VCF_RESONANCE_DEFAULT;
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d5a:	227f      	movs	r2, #127	@ 0x7f
 8002d5c:	771a      	strb	r2, [r3, #28]

	// LFO output settings
	SynthParameters.lfo_output_en       = LFO_OUTPUT_EN_DEFAULT;
 8002d5e:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	775a      	strb	r2, [r3, #29]
	SynthParameters.lfo_output_waveform = LFO_OUTPUT_WAVEFORM_DEFAULT;
 8002d64:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	779a      	strb	r2, [r3, #30]

	// LFO output frequency setting
	SynthParameters.lfo_frequency       = LFO_FREQUENCY_DEFAULT;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d6c:	227f      	movs	r2, #127	@ 0x7f
 8002d6e:	77da      	strb	r2, [r3, #31]

	// VCA modulation source settings
	SynthParameters.vca_cv_en           = VCA_CV_EN_DEFAULT;
 8002d70:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]
	SynthParameters.vca_cv_sel          = VCA_CV_SEL_DEFAULT;
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en       = VCA_OUTPUT_EN_DEFAULT;
 8002d80:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	SynthParameters.vca_output_sel      = VCA_OUTPUT_SEL_DEFAULT;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity    = VCA_CV_INTENSITY_DEFAULT;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d92:	227f      	movs	r2, #127	@ 0x7f
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	SynthParameters.vca_offset          = VCA_OFFSET_DEFAULT;
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002d9a:	227f      	movs	r2, #127	@ 0x7f
 8002d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	// envelope output settings
	SynthParameters.env_en              = ENV_EN_DEFAULT;
 8002da0:	4b17      	ldr	r3, [pc, #92]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	SynthParameters.env_loop            = ENV_LOOP_DEFAULT;
 8002da8:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	SynthParameters.env_invert          = ENV_INVERT_DEFAULT;
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	// envelope timing settings
	SynthParameters.env_attack_rate     = ENV_ATTACK_RATE_DEFAULT;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002dba:	227f      	movs	r2, #127	@ 0x7f
 8002dbc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	SynthParameters.env_release_rate    = ENV_RELEASE_RATE_DEFAULT;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002dc2:	227f      	movs	r2, #127	@ 0x7f
 8002dc4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	SynthParameters.env_decay_rate      = ENV_DECAY_RATE_DEFAULT;
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <Synth_Initialize_Preset+0x154>)
 8002dca:	227f      	movs	r2, #127	@ 0x7f
 8002dcc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b


	Mixer_Digital_Pot_Control();
 8002dd0:	f000 f818 	bl	8002e04 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8002dd4:	f000 f8a4 	bl	8002f20 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8002dd8:	f000 f8d2 	bl	8002f80 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8002ddc:	f000 f8ec 	bl	8002fb8 <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8002de0:	f000 f91a 	bl	8003018 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8002de4:	f000 f822 	bl	8002e2c <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8002de8:	f000 f852 	bl	8002e90 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8002dec:	f000 f882 	bl	8002ef4 <VCA_Digital_Pot_Control>

	Envelope_Mode_Control();
 8002df0:	f000 f920 	bl	8003034 <Envelope_Mode_Control>
	Envelope_Digital_Pot_Control();
 8002df4:	f000 f966 	bl	80030c4 <Envelope_Digital_Pot_Control>

	return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000344 	.word	0x20000344

08002e04 <Mixer_Digital_Pot_Control>:

void Mixer_Digital_Pot_Control(){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8002e08:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <Mixer_Digital_Pot_Control+0x24>)
 8002e0a:	7d9b      	ldrb	r3, [r3, #22]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff fe75 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <Mixer_Digital_Pot_Control+0x24>)
 8002e18:	7ddb      	ldrb	r3, [r3, #23]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f7ff fe6e 	bl	8002b00 <Digital_Pot_Wiper_Set>

    return;
 8002e24:	bf00      	nop
}
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000344 	.word	0x20000344

08002e2c <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, sys.gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <VCA_Mod_Source_Control+0x5c>)
 8002e32:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e36:	4619      	mov	r1, r3
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <VCA_Mod_Source_Control+0x60>)
 8002e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2207      	movs	r2, #7
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f000 feca 	bl	8003be4 <GPIO_State_Change>
 8002e50:	4603      	mov	r3, r0
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <VCA_Mod_Source_Control+0x5c>)
 8002e56:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select modulation source
    sys.gpio_reg = GPIO_State_Change(VCA_SEL_PORT, sys.gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <VCA_Mod_Source_Control+0x5c>)
 8002e5c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e60:	4619      	mov	r1, r3
 8002e62:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <VCA_Mod_Source_Control+0x60>)
 8002e64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	2001      	movs	r0, #1
 8002e76:	f000 feb5 	bl	8003be4 <GPIO_State_Change>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	4b02      	ldr	r3, [pc, #8]	@ (8002e88 <VCA_Mod_Source_Control+0x5c>)
 8002e80:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002e84:	bf00      	nop
}
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000370 	.word	0x20000370
 8002e8c:	20000344 	.word	0x20000344

08002e90 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, sys.gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <VCA_Bypass_Switch_Control+0x5c>)
 8002e96:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <VCA_Bypass_Switch_Control+0x60>)
 8002e9e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2206      	movs	r2, #6
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 fe98 	bl	8003be4 <GPIO_State_Change>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <VCA_Bypass_Switch_Control+0x5c>)
 8002eba:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // update output source selection; true = bypass VCA, false = output through VCA
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_PORT, sys.gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <VCA_Bypass_Switch_Control+0x5c>)
 8002ec0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <VCA_Bypass_Switch_Control+0x60>)
 8002ec8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f000 fe83 	bl	8003be4 <GPIO_State_Change>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	4b02      	ldr	r3, [pc, #8]	@ (8002eec <VCA_Bypass_Switch_Control+0x5c>)
 8002ee4:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002ee8:	bf00      	nop
}
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000370 	.word	0x20000370
 8002ef0:	20000344 	.word	0x20000344

08002ef4 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <VCA_Digital_Pot_Control+0x28>)
 8002efa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002efe:	2200      	movs	r2, #0
 8002f00:	4619      	mov	r1, r3
 8002f02:	2006      	movs	r0, #6
 8002f04:	f7ff fdfc 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8002f08:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <VCA_Digital_Pot_Control+0x28>)
 8002f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4619      	mov	r1, r3
 8002f12:	2007      	movs	r0, #7
 8002f14:	f7ff fdf4 	bl	8002b00 <Digital_Pot_Wiper_Set>

    return;
 8002f18:	bf00      	nop
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000344 	.word	0x20000344

08002f20 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, sys.gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8002f24:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <Filter_Mod_Source_Control+0x58>)
 8002f26:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <Filter_Mod_Source_Control+0x5c>)
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f000 fe51 	bl	8003be4 <GPIO_State_Change>
 8002f42:	4603      	mov	r3, r0
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <Filter_Mod_Source_Control+0x58>)
 8002f48:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select modulation source; true = LFO, false = envelope
    sys.gpio_reg = GPIO_State_Change(VCF_SEL_PORT, sys.gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <Filter_Mod_Source_Control+0x58>)
 8002f4e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002f52:	4619      	mov	r1, r3
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <Filter_Mod_Source_Control+0x5c>)
 8002f56:	7e5b      	ldrb	r3, [r3, #25]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2201      	movs	r2, #1
 8002f64:	2001      	movs	r0, #1
 8002f66:	f000 fe3d 	bl	8003be4 <GPIO_State_Change>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b02      	ldr	r3, [pc, #8]	@ (8002f78 <Filter_Mod_Source_Control+0x58>)
 8002f70:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 8002f74:	bf00      	nop
}
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000370 	.word	0x20000370
 8002f7c:	20000344 	.word	0x20000344

08002f80 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <Filter_Digital_Pot_Control+0x34>)
 8002f86:	7e9b      	ldrb	r3, [r3, #26]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2004      	movs	r0, #4
 8002f8e:	f7ff fdb7 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <Filter_Digital_Pot_Control+0x34>)
 8002f94:	7edb      	ldrb	r3, [r3, #27]
 8002f96:	2200      	movs	r2, #0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f7ff fdb0 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <Filter_Digital_Pot_Control+0x34>)
 8002fa2:	7f1b      	ldrb	r3, [r3, #28]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	2002      	movs	r0, #2
 8002faa:	f7ff fda9 	bl	8002b00 <Digital_Pot_Wiper_Set>

    return;
 8002fae:	bf00      	nop
}
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000344 	.word	0x20000344

08002fb8 <LFO_Output_Control>:

void LFO_Output_Control() {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(LFO_EN_PORT, sys.gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8002fbc:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <LFO_Output_Control+0x58>)
 8002fbe:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4b13      	ldr	r3, [pc, #76]	@ (8003014 <LFO_Output_Control+0x5c>)
 8002fc6:	7f5b      	ldrb	r3, [r3, #29]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2207      	movs	r2, #7
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f000 fe05 	bl	8003be4 <GPIO_State_Change>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <LFO_Output_Control+0x58>)
 8002fe0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select LFO output waveform; true = square wave, false = triangle wave
    sys.gpio_reg = GPIO_State_Change(LFO_SEL_PORT, sys.gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <LFO_Output_Control+0x58>)
 8002fe6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8002fea:	4619      	mov	r1, r3
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <LFO_Output_Control+0x5c>)
 8002fee:	7f9b      	ldrb	r3, [r3, #30]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2206      	movs	r2, #6
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 fdf1 	bl	8003be4 <GPIO_State_Change>
 8003002:	4603      	mov	r3, r0
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b02      	ldr	r3, [pc, #8]	@ (8003010 <LFO_Output_Control+0x58>)
 8003008:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 800300c:	bf00      	nop
}
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000370 	.word	0x20000370
 8003014:	20000344 	.word	0x20000344

08003018 <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 800301c:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <LFO_Digital_Pot_Control+0x18>)
 800301e:	7fdb      	ldrb	r3, [r3, #31]
 8003020:	2200      	movs	r2, #0
 8003022:	4619      	mov	r1, r3
 8003024:	2005      	movs	r0, #5
 8003026:	f7ff fd6b 	bl	8002b00 <Digital_Pot_Wiper_Set>

    return;
 800302a:	bf00      	nop
}
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000344 	.word	0x20000344

08003034 <Envelope_Mode_Control>:

void Envelope_Mode_Control() {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(ENV_EN_PORT, sys.gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <Envelope_Mode_Control+0x88>)
 800303a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800303e:	4619      	mov	r1, r3
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <Envelope_Mode_Control+0x8c>)
 8003042:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2205      	movs	r2, #5
 8003052:	2001      	movs	r0, #1
 8003054:	f000 fdc6 	bl	8003be4 <GPIO_State_Change>
 8003058:	4603      	mov	r3, r0
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <Envelope_Mode_Control+0x88>)
 800305e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    sys.gpio_reg = GPIO_State_Change(ENV_LP_PORT, sys.gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <Envelope_Mode_Control+0x88>)
 8003064:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003068:	4619      	mov	r1, r3
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <Envelope_Mode_Control+0x8c>)
 800306c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2204      	movs	r2, #4
 800307c:	2001      	movs	r0, #1
 800307e:	f000 fdb1 	bl	8003be4 <GPIO_State_Change>
 8003082:	4603      	mov	r3, r0
 8003084:	b29a      	uxth	r2, r3
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <Envelope_Mode_Control+0x88>)
 8003088:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    sys.gpio_reg = GPIO_State_Change(ENV_POL_PORT, sys.gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <Envelope_Mode_Control+0x88>)
 800308e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003092:	4619      	mov	r1, r3
 8003094:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <Envelope_Mode_Control+0x8c>)
 8003096:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2203      	movs	r2, #3
 80030a6:	2001      	movs	r0, #1
 80030a8:	f000 fd9c 	bl	8003be4 <GPIO_State_Change>
 80030ac:	4603      	mov	r3, r0
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	4b02      	ldr	r3, [pc, #8]	@ (80030bc <Envelope_Mode_Control+0x88>)
 80030b2:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    return;
 80030b6:	bf00      	nop
}
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000370 	.word	0x20000370
 80030c0:	20000344 	.word	0x20000344

080030c4 <Envelope_Digital_Pot_Control>:

void Envelope_Digital_Pot_Control(){
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <Envelope_Digital_Pot_Control+0x38>)
 80030ca:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030ce:	2200      	movs	r2, #0
 80030d0:	4619      	mov	r1, r3
 80030d2:	2008      	movs	r0, #8
 80030d4:	f7ff fd14 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <Envelope_Digital_Pot_Control+0x38>)
 80030da:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80030de:	2200      	movs	r2, #0
 80030e0:	4619      	mov	r1, r3
 80030e2:	2009      	movs	r0, #9
 80030e4:	f7ff fd0c 	bl	8002b00 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <Envelope_Digital_Pot_Control+0x38>)
 80030ea:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80030ee:	2200      	movs	r2, #0
 80030f0:	4619      	mov	r1, r3
 80030f2:	200a      	movs	r0, #10
 80030f4:	f7ff fd04 	bl	8002b00 <Digital_Pot_Wiper_Set>

    return;
 80030f8:	bf00      	nop
}
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000344 	.word	0x20000344

08003100 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 8003104:	4b37      	ldr	r3, [pc, #220]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 800310a:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 0;
 8003110:	4b34      	ldr	r3, [pc, #208]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 8003116:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003118:	2200      	movs	r2, #0
 800311a:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 800311c:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 8003122:	4b30      	ldr	r3, [pc, #192]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003124:	2200      	movs	r2, #0
 8003126:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 8003128:	4b2e      	ldr	r3, [pc, #184]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
	sys.write_protect = 0;
 800312e:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003130:	2200      	movs	r2, #0
 8003132:	61da      	str	r2, [r3, #28]
	sys.checksum = 0;
 8003134:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003136:	2200      	movs	r2, #0
 8003138:	621a      	str	r2, [r3, #32]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 800313a:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	sys.midi_buf[3] = 0;
 8003142:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	sys.temp_buf[3] = 0;
 800314a:	4b26      	ldr	r3, [pc, #152]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800314c:	2200      	movs	r2, #0
 800314e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
	sys.temp_buf_index = 0;
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003154:	2200      	movs	r2, #0
 8003156:	66da      	str	r2, [r3, #108]	@ 0x6c

	// communication status flags
	sys.usb_data_present = 0;
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800315a:	2200      	movs	r2, #0
 800315c:	671a      	str	r2, [r3, #112]	@ 0x70
	sys.midi_data_present = 0;
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003160:	2200      	movs	r2, #0
 8003162:	675a      	str	r2, [r3, #116]	@ 0x74

	// midi variables
	sys.note_status_bit = 0;
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003166:	2200      	movs	r2, #0
 8003168:	679a      	str	r2, [r3, #120]	@ 0x78
	sys.midi_note_input = 0;
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800316c:	2200      	movs	r2, #0
 800316e:	67da      	str	r2, [r3, #124]	@ 0x7c
	sys.midi_note_velocity = 0;
 8003170:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	sys.gate = 0;
 8003178:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	sys.velocity_enable = 0;
 8003180:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	sys.gpio_reg = 0;
 8003188:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <System_Reset_Initialize+0xe4>)
 800318a:	2200      	movs	r2, #0
 800318c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800319a:	f001 fb27 	bl	80047ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 800319e:	2201      	movs	r2, #1
 80031a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031a4:	4810      	ldr	r0, [pc, #64]	@ (80031e8 <System_Reset_Initialize+0xe8>)
 80031a6:	f001 fb21 	bl	80047ec <HAL_GPIO_WritePin>

	DAC_Register_Init();
 80031aa:	f000 fadf 	bl	800376c <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 80031ae:	213f      	movs	r1, #63	@ 0x3f
 80031b0:	2040      	movs	r0, #64	@ 0x40
 80031b2:	f000 fabd 	bl	8003730 <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 80031b6:	213f      	movs	r1, #63	@ 0x3f
 80031b8:	2044      	movs	r0, #68	@ 0x44
 80031ba:	f000 fab9 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 80031be:	213f      	movs	r1, #63	@ 0x3f
 80031c0:	2041      	movs	r0, #65	@ 0x41
 80031c2:	f000 fab5 	bl	8003730 <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 80031c6:	213f      	movs	r1, #63	@ 0x3f
 80031c8:	2045      	movs	r0, #69	@ 0x45
 80031ca:	f000 fab1 	bl	8003730 <DAC_Register_Write>

	GPIO_Register_Init();
 80031ce:	f000 fcf5 	bl	8003bbc <GPIO_Register_Init>

	Write_Protect_Control();
 80031d2:	f000 f80b 	bl	80031ec <Write_Protect_Control>
	MIDI_Port_Control();
 80031d6:	f000 f819 	bl	800320c <MIDI_Port_Control>
	Gate_Control();
 80031da:	f000 f841 	bl	8003260 <Gate_Control>

	return;
 80031de:	bf00      	nop
}
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000370 	.word	0x20000370
 80031e8:	48000400 	.word	0x48000400

080031ec <Write_Protect_Control>:

// ===========================================================================================================
// system functions

void Write_Protect_Control(){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0

	// enable or disable write protection for EEPROM (presets)
	HAL_GPIO_WritePin(WRITE_PROTECT_PORT, WRITE_PROTECT_PIN, sys.write_protect);
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <Write_Protect_Control+0x18>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	4803      	ldr	r0, [pc, #12]	@ (8003208 <Write_Protect_Control+0x1c>)
 80031fc:	f001 faf6 	bl	80047ec <HAL_GPIO_WritePin>

	return;
 8003200:	bf00      	nop
}
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000370 	.word	0x20000370
 8003208:	48000800 	.word	0x48000800

0800320c <MIDI_Port_Control>:

void MIDI_Port_Control(){
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0

	// enable or disable transmit through MIDI port
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_EN_PORT, sys.gpio_reg, MIDI_TX_EN_PIN, sys.midi_tx_en == 0);
 8003210:	4b12      	ldr	r3, [pc, #72]	@ (800325c <MIDI_Port_Control+0x50>)
 8003212:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8003216:	4619      	mov	r1, r3
 8003218:	4b10      	ldr	r3, [pc, #64]	@ (800325c <MIDI_Port_Control+0x50>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2200      	movs	r2, #0
 8003228:	2000      	movs	r0, #0
 800322a:	f000 fcdb 	bl	8003be4 <GPIO_State_Change>
 800322e:	4603      	mov	r3, r0
 8003230:	b29a      	uxth	r2, r3
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <MIDI_Port_Control+0x50>)
 8003234:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	// toggle polarity of MIDI UART output
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_POL_PORT, sys.gpio_reg, MIDI_TX_POL_PIN, sys.midi_tx_pol);
 8003238:	4b08      	ldr	r3, [pc, #32]	@ (800325c <MIDI_Port_Control+0x50>)
 800323a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800323e:	4619      	mov	r1, r3
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <MIDI_Port_Control+0x50>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	2000      	movs	r0, #0
 8003248:	f000 fccc 	bl	8003be4 <GPIO_State_Change>
 800324c:	4603      	mov	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	4b02      	ldr	r3, [pc, #8]	@ (800325c <MIDI_Port_Control+0x50>)
 8003252:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	return;
 8003256:	bf00      	nop
}
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000370 	.word	0x20000370

08003260 <Gate_Control>:

void Gate_Control(){
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0

	// gate control for envelope trigger and LED indicator
	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, sys.gate);
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <Gate_Control+0x28>)
 8003266:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800326a:	4619      	mov	r1, r3
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <Gate_Control+0x28>)
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003272:	2203      	movs	r2, #3
 8003274:	2000      	movs	r0, #0
 8003276:	f000 fcb5 	bl	8003be4 <GPIO_State_Change>
 800327a:	4603      	mov	r3, r0
 800327c:	b29a      	uxth	r2, r3
 800327e:	4b02      	ldr	r3, [pc, #8]	@ (8003288 <Gate_Control+0x28>)
 8003280:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

	return;
 8003284:	bf00      	nop
}
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000370 	.word	0x20000370

0800328c <Command_Response_Handler>:
	}

	return;
}

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	461a      	mov	r2, r3
 800329a:	4603      	mov	r3, r0
 800329c:	70fb      	strb	r3, [r7, #3]
 800329e:	460b      	mov	r3, r1
 80032a0:	70bb      	strb	r3, [r7, #2]
 80032a2:	4613      	mov	r3, r2
 80032a4:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 80032a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <Command_Response_Handler+0x98>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d033      	beq.n	8003316 <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d109      	bne.n	80032c8 <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 80032b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <Command_Response_Handler+0x9c>)
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	4611      	mov	r1, r2
 80032be:	8019      	strh	r1, [r3, #0]
 80032c0:	3302      	adds	r3, #2
 80032c2:	0c12      	lsrs	r2, r2, #16
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e013      	b.n	80032f0 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 80032c8:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <Command_Response_Handler+0x98>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 80032d4:	78bb      	ldrb	r3, [r7, #2]
 80032d6:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	73bb      	strb	r3, [r7, #14]
 80032dc:	e008      	b.n	80032f0 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 80032de:	4a13      	ldr	r2, [pc, #76]	@ (800332c <Command_Response_Handler+0xa0>)
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4611      	mov	r1, r2
 80032e8:	8019      	strh	r1, [r3, #0]
 80032ea:	3302      	adds	r3, #2
 80032ec:	0c12      	lsrs	r2, r2, #16
 80032ee:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2103      	movs	r1, #3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f00c f984 	bl	800f604 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <Command_Response_Handler+0x98>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10a      	bne.n	800331a <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8003304:	f107 010c 	add.w	r1, r7, #12
 8003308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800330c:	2203      	movs	r2, #3
 800330e:	4808      	ldr	r0, [pc, #32]	@ (8003330 <Command_Response_Handler+0xa4>)
 8003310:	f006 fcbc 	bl	8009c8c <HAL_UART_Transmit>
    }

	return;
 8003314:	e001      	b.n	800331a <Command_Response_Handler+0x8e>
        return;
 8003316:	bf00      	nop
 8003318:	e000      	b.n	800331c <Command_Response_Handler+0x90>
	return;
 800331a:	bf00      	nop
}
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000370 	.word	0x20000370
 8003328:	080108a4 	.word	0x080108a4
 800332c:	080108a8 	.word	0x080108a8
 8003330:	2000044c 	.word	0x2000044c

08003334 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6139      	str	r1, [r7, #16]
 800333e:	60fa      	str	r2, [r7, #12]
 8003340:	ed87 0a02 	vstr	s0, [r7, #8]
 8003344:	edc7 0a01 	vstr	s1, [r7, #4]
 8003348:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d83a      	bhi.n	80033c6 <Command_Error_Check+0x92>
 8003350:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <Command_Error_Check+0x24>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003369 	.word	0x08003369
 800335c:	08003379 	.word	0x08003379
 8003360:	0800338f 	.word	0x0800338f
 8003364:	080033a7 	.word	0x080033a7
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	bfcc      	ite	gt
 8003370:	2301      	movgt	r3, #1
 8003372:	2300      	movle	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e027      	b.n	80033c8 <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	dd03      	ble.n	8003386 <Command_Error_Check+0x52>
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	429a      	cmp	r2, r3
 8003384:	dd01      	ble.n	800338a <Command_Error_Check+0x56>
 8003386:	2301      	movs	r3, #1
 8003388:	e01e      	b.n	80033c8 <Command_Error_Check+0x94>
 800338a:	2300      	movs	r3, #0
 800338c:	e01c      	b.n	80033c8 <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b30      	cmp	r3, #48	@ 0x30
 8003392:	dd04      	ble.n	800339e <Command_Error_Check+0x6a>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3330      	adds	r3, #48	@ 0x30
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	429a      	cmp	r2, r3
 800339c:	dd01      	ble.n	80033a2 <Command_Error_Check+0x6e>
 800339e:	2301      	movs	r3, #1
 80033a0:	e012      	b.n	80033c8 <Command_Error_Check+0x94>
 80033a2:	2300      	movs	r3, #0
 80033a4:	e010      	b.n	80033c8 <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 80033a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80033aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e000      	b.n	80033c8 <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 80033c6:	2301      	movs	r3, #1
    }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d103      	bne.n	80033ea <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 80033e2:	4b07      	ldr	r3, [pc, #28]	@ (8003400 <Command_Blink_Status_LED+0x2c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	615a      	str	r2, [r3, #20]
 80033e8:	e002      	b.n	80033f0 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <Command_Blink_Status_LED+0x2c>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 80033f0:	4804      	ldr	r0, [pc, #16]	@ (8003404 <Command_Blink_Status_LED+0x30>)
 80033f2:	f006 f867 	bl	80094c4 <HAL_TIM_Base_Start_IT>

}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000370 	.word	0x20000370
 8003404:	20000400 	.word	0x20000400

08003408 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a20      	ldr	r2, [pc, #128]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d139      	bne.n	800348c <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 8003418:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d118      	bne.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b03      	cmp	r3, #3
 8003426:	dc0b      	bgt.n	8003440 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8003428:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800342c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003430:	f001 f9f4 	bl	800481c <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 8003434:	4b18      	ldr	r3, [pc, #96]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	4a17      	ldr	r2, [pc, #92]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800343c:	6193      	str	r3, [r2, #24]
 800343e:	e008      	b.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 8003440:	4814      	ldr	r0, [pc, #80]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003442:	f006 f8af 	bl	80095a4 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 8003446:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 8003452:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d118      	bne.n	800348c <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	dc0b      	bgt.n	800347a <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8003462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800346a:	f001 f9d7 	bl	800481c <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	3301      	adds	r3, #1
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003476:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 8003478:	e008      	b.n	800348c <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 800347a:	4806      	ldr	r0, [pc, #24]	@ (8003494 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800347c:	f006 f892 	bl	80095a4 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000400 	.word	0x20000400
 8003498:	20000370 	.word	0x20000370

0800349c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034a0:	4b06      	ldr	r3, [pc, #24]	@ (80034bc <SystemInit+0x20>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	4a05      	ldr	r2, [pc, #20]	@ (80034bc <SystemInit+0x20>)
 80034a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034d0:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034d2:	4a16      	ldr	r2, [pc, #88]	@ (800352c <MX_TIM6_Init+0x6c>)
 80034d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034d8:	f244 129f 	movw	r2, #16799	@ 0x419f
 80034dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034e6:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80034ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <MX_TIM6_Init+0x68>)
 80034f4:	f005 ff8e 	bl	8009414 <HAL_TIM_Base_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80034fe:	f7fd ff74 	bl	80013ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4806      	ldr	r0, [pc, #24]	@ (8003528 <MX_TIM6_Init+0x68>)
 8003510:	f006 fa98 	bl	8009a44 <HAL_TIMEx_MasterConfigSynchronization>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800351a:	f7fd ff66 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000400 	.word	0x20000400
 800352c:	40001000 	.word	0x40001000

08003530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <HAL_TIM_Base_MspInit+0x44>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	4a0c      	ldr	r2, [pc, #48]	@ (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003548:	f043 0310 	orr.w	r3, r3, #16
 800354c:	6593      	str	r3, [r2, #88]	@ 0x58
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2036      	movs	r0, #54	@ 0x36
 8003560:	f000 fd13 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003564:	2036      	movs	r0, #54	@ 0x36
 8003566:	f000 fd2a 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40001000 	.word	0x40001000
 8003578:	40021000 	.word	0x40021000

0800357c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 8003582:	4a25      	ldr	r2, [pc, #148]	@ (8003618 <MX_USART2_UART_Init+0x9c>)
 8003584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003586:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 8003588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800358c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003594:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800359a:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 800359c:	2200      	movs	r2, #0
 800359e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035a2:	220c      	movs	r2, #12
 80035a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035c0:	2208      	movs	r2, #8
 80035c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035cc:	4811      	ldr	r0, [pc, #68]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035ce:	f006 fb0d 	bl	8009bec <HAL_UART_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80035d8:	f7fd ff07 	bl	80013ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035dc:	2100      	movs	r1, #0
 80035de:	480d      	ldr	r0, [pc, #52]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035e0:	f008 fb83 	bl	800bcea <HAL_UARTEx_SetTxFifoThreshold>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80035ea:	f7fd fefe 	bl	80013ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035ee:	2100      	movs	r1, #0
 80035f0:	4808      	ldr	r0, [pc, #32]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 80035f2:	f008 fbb8 	bl	800bd66 <HAL_UARTEx_SetRxFifoThreshold>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80035fc:	f7fd fef5 	bl	80013ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003600:	4804      	ldr	r0, [pc, #16]	@ (8003614 <MX_USART2_UART_Init+0x98>)
 8003602:	f008 fb39 	bl	800bc78 <HAL_UARTEx_DisableFifoMode>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800360c:	f7fd feed 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000044c 	.word	0x2000044c
 8003618:	40004400 	.word	0x40004400

0800361c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b09e      	sub	sp, #120	@ 0x78
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2250      	movs	r2, #80	@ 0x50
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f00c fc73 	bl	800ff28 <memset>
  if(uartHandle->Instance==USART2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <HAL_UART_MspInit+0xb4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d13d      	bne.n	80036c8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800364c:	2302      	movs	r3, #2
 800364e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fc07 	bl	8007e6c <HAL_RCCEx_PeriphCLKConfig>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003664:	f7fd fec1 	bl	80013ea <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003668:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	4a19      	ldr	r2, [pc, #100]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	6593      	str	r3, [r2, #88]	@ 0x58
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <HAL_UART_MspInit+0xb8>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003698:	2318      	movs	r3, #24
 800369a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036a8:	2307      	movs	r3, #7
 80036aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80036b0:	4619      	mov	r1, r3
 80036b2:	4809      	ldr	r0, [pc, #36]	@ (80036d8 <HAL_UART_MspInit+0xbc>)
 80036b4:	f000 ff18 	bl	80044e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2026      	movs	r0, #38	@ 0x26
 80036be:	f000 fc64 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036c2:	2026      	movs	r0, #38	@ 0x26
 80036c4:	f000 fc7b 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036c8:	bf00      	nop
 80036ca:	3778      	adds	r7, #120	@ 0x78
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40021000 	.word	0x40021000
 80036d8:	48000400 	.word	0x48000400

080036dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036dc:	480d      	ldr	r0, [pc, #52]	@ (8003714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036e0:	f7ff fedc 	bl	800349c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e4:	480c      	ldr	r0, [pc, #48]	@ (8003718 <LoopForever+0x6>)
  ldr r1, =_edata
 80036e6:	490d      	ldr	r1, [pc, #52]	@ (800371c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003720 <LoopForever+0xe>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036ec:	e002      	b.n	80036f4 <LoopCopyDataInit>

080036ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f2:	3304      	adds	r3, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f8:	d3f9      	bcc.n	80036ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003728 <LoopForever+0x16>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003700:	e001      	b.n	8003706 <LoopFillZerobss>

08003702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003704:	3204      	adds	r2, #4

08003706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003708:	d3fb      	bcc.n	8003702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370a:	f00c fc1b 	bl	800ff44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800370e:	f7fd fdcd 	bl	80012ac <main>

08003712 <LoopForever>:

LoopForever:
    b LoopForever
 8003712:	e7fe      	b.n	8003712 <LoopForever>
  ldr   r0, =_estack
 8003714:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800371c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003720:	08011194 	.word	0x08011194
  ldr r2, =_sbss
 8003724:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003728:	20001fec 	.word	0x20001fec

0800372c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800372c:	e7fe      	b.n	800372c <ADC1_2_IRQHandler>
	...

08003730 <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af04      	add	r7, sp, #16
 8003736:	4603      	mov	r3, r0
 8003738:	460a      	mov	r2, r1
 800373a:	71fb      	strb	r3, [r7, #7]
 800373c:	4613      	mov	r3, r2
 800373e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003740:	79bb      	ldrb	r3, [r7, #6]
 8003742:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	b29a      	uxth	r2, r3
 8003748:	230a      	movs	r3, #10
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	2301      	movs	r3, #1
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2301      	movs	r3, #1
 8003758:	218e      	movs	r1, #142	@ 0x8e
 800375a:	4803      	ldr	r0, [pc, #12]	@ (8003768 <DAC_Register_Write+0x38>)
 800375c:	f001 f914 	bl	8004988 <HAL_I2C_Mem_Write>

	return;
 8003760:	bf00      	nop
}
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200001f0 	.word	0x200001f0

0800376c <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	2055      	movs	r0, #85	@ 0x55
 8003774:	f7ff ffdc 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8003778:	2127      	movs	r1, #39	@ 0x27
 800377a:	2040      	movs	r0, #64	@ 0x40
 800377c:	f7ff ffd8 	bl	8003730 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8003780:	2127      	movs	r1, #39	@ 0x27
 8003782:	2041      	movs	r0, #65	@ 0x41
 8003784:	f7ff ffd4 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8003788:	2127      	movs	r1, #39	@ 0x27
 800378a:	2044      	movs	r0, #68	@ 0x44
 800378c:	f7ff ffd0 	bl	8003730 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 8003790:	2127      	movs	r1, #39	@ 0x27
 8003792:	2045      	movs	r0, #69	@ 0x45
 8003794:	f7ff ffcc 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8003798:	2100      	movs	r1, #0
 800379a:	2046      	movs	r0, #70	@ 0x46
 800379c:	f7ff ffc8 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 80037a0:	21e0      	movs	r1, #224	@ 0xe0
 80037a2:	2049      	movs	r0, #73	@ 0x49
 80037a4:	f7ff ffc4 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 80037a8:	2101      	movs	r1, #1
 80037aa:	2056      	movs	r0, #86	@ 0x56
 80037ac:	f7ff ffc0 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 80037b0:	2103      	movs	r1, #3
 80037b2:	204b      	movs	r0, #75	@ 0x4b
 80037b4:	f7ff ffbc 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 80037b8:	2111      	movs	r1, #17
 80037ba:	2058      	movs	r0, #88	@ 0x58
 80037bc:	f7ff ffb8 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 80037c0:	21ec      	movs	r1, #236	@ 0xec
 80037c2:	2049      	movs	r0, #73	@ 0x49
 80037c4:	f7ff ffb4 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 80037c8:	2101      	movs	r1, #1
 80037ca:	204a      	movs	r0, #74	@ 0x4a
 80037cc:	f7ff ffb0 	bl	8003730 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 80037d0:	2130      	movs	r1, #48	@ 0x30
 80037d2:	2059      	movs	r0, #89	@ 0x59
 80037d4:	f7ff ffac 	bl	8003730 <DAC_Register_Write>

	return;
 80037d8:	bf00      	nop
}
 80037da:	bd80      	pop	{r7, pc}

080037dc <Preset_Init>:
#include "system.h"
#include "synth.h"



int Preset_Init(int preset_slot){
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b092      	sub	sp, #72	@ 0x48
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

	int error_check = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t page_buf[8];

	// default parameter array
	uint8_t init_preset[48] = {
 80037e8:	4b28      	ldr	r3, [pc, #160]	@ (800388c <Preset_Init+0xb0>)
 80037ea:	f107 0408 	add.w	r4, r7, #8
 80037ee:	461d      	mov	r5, r3
 80037f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    MIDI_TX_POL_DEFAULT,
	    MIDI_TX_EN_DEFAULT,
		0
	};

    sys.checksum = XOR_Checksum(init_preset, 47);
 8003800:	f107 0308 	add.w	r3, r7, #8
 8003804:	212f      	movs	r1, #47	@ 0x2f
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f92c 	bl	8003a64 <XOR_Checksum>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	4b1f      	ldr	r3, [pc, #124]	@ (8003890 <Preset_Init+0xb4>)
 8003812:	621a      	str	r2, [r3, #32]
    init_preset[47] = sys.checksum;
 8003814:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <Preset_Init+0xb4>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for(int page = 0; page < 6; page++){
 800381e:	2300      	movs	r3, #0
 8003820:	643b      	str	r3, [r7, #64]	@ 0x40
 8003822:	e020      	b.n	8003866 <Preset_Init+0x8a>

		memcpy(page_buf, &init_preset[8 * page], 8); // copy one page of data from buffer
 8003824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	f107 0208 	add.w	r2, r7, #8
 800382c:	441a      	add	r2, r3
 800382e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003832:	6810      	ldr	r0, [r2, #0]
 8003834:	6851      	ldr	r1, [r2, #4]
 8003836:	c303      	stmia	r3!, {r0, r1}
		error_check = EEPROM_Write_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf);
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003846:	4413      	add	r3, r2
 8003848:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f94a 	bl	8003ae8 <EEPROM_Write_Page>
 8003854:	6478      	str	r0, [r7, #68]	@ 0x44

		if(error_check != 0){
 8003856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <Preset_Init+0x84>
			return 1;
 800385c:	2301      	movs	r3, #1
 800385e:	e010      	b.n	8003882 <Preset_Init+0xa6>
	for(int page = 0; page < 6; page++){
 8003860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003862:	3301      	adds	r3, #1
 8003864:	643b      	str	r3, [r7, #64]	@ 0x40
 8003866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003868:	2b05      	cmp	r3, #5
 800386a:	dddb      	ble.n	8003824 <Preset_Init+0x48>
		}

	}

	// read checksum for EEPROM slot used and verify output
	if(sys.checksum == Readback_Checksum(preset_slot)){
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <Preset_Init+0xb4>)
 800386e:	6a1c      	ldr	r4, [r3, #32]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f917 	bl	8003aa4 <Readback_Checksum>
 8003876:	4603      	mov	r3, r0
 8003878:	429c      	cmp	r4, r3
 800387a:	d101      	bne.n	8003880 <Preset_Init+0xa4>
		error_check = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
	}

    return error_check;
 8003880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003882:	4618      	mov	r0, r3
 8003884:	3748      	adds	r7, #72	@ 0x48
 8003886:	46bd      	mov	sp, r7
 8003888:	bdb0      	pop	{r4, r5, r7, pc}
 800388a:	bf00      	nop
 800388c:	080108ac 	.word	0x080108ac
 8003890:	20000370 	.word	0x20000370

08003894 <Preset_Write>:

int Preset_Write(int preset_slot){
 8003894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003896:	b093      	sub	sp, #76	@ 0x4c
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

	int error_check = 1;
 800389c:	2301      	movs	r3, #1
 800389e:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t page_buf[8];
	uint8_t preset_buf[48];

	// copy synth parameters into buffer
    memcpy(preset_buf, &SynthParameters, sizeof(Synth));
 80038a0:	4b35      	ldr	r3, [pc, #212]	@ (8003978 <Preset_Write+0xe4>)
 80038a2:	461c      	mov	r4, r3
 80038a4:	f107 0608 	add.w	r6, r7, #8
 80038a8:	f104 0c20 	add.w	ip, r4, #32
 80038ac:	4635      	mov	r5, r6
 80038ae:	4623      	mov	r3, r4
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ba:	3410      	adds	r4, #16
 80038bc:	3610      	adds	r6, #16
 80038be:	4564      	cmp	r4, ip
 80038c0:	d1f4      	bne.n	80038ac <Preset_Write+0x18>
 80038c2:	4633      	mov	r3, r6
 80038c4:	4622      	mov	r2, r4
 80038c6:	6810      	ldr	r0, [r2, #0]
 80038c8:	6851      	ldr	r1, [r2, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	c307      	stmia	r3!, {r0, r1, r2}

    // copy remaining system settings
    preset_buf[44] = sys.serial_cmd_echo;
 80038ce:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <Preset_Write+0xe8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    preset_buf[45] = sys.midi_tx_pol;
 80038d8:	4b28      	ldr	r3, [pc, #160]	@ (800397c <Preset_Write+0xe8>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    preset_buf[46] = sys.midi_tx_en;
 80038e2:	4b26      	ldr	r3, [pc, #152]	@ (800397c <Preset_Write+0xe8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    sys.checksum = XOR_Checksum(preset_buf, 47);
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	212f      	movs	r1, #47	@ 0x2f
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f8b6 	bl	8003a64 <XOR_Checksum>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <Preset_Write+0xe8>)
 80038fe:	621a      	str	r2, [r3, #32]
    preset_buf[47] = sys.checksum;
 8003900:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <Preset_Write+0xe8>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	for(int page = 0; page < 6; page++){
 800390a:	2300      	movs	r3, #0
 800390c:	643b      	str	r3, [r7, #64]	@ 0x40
 800390e:	e020      	b.n	8003952 <Preset_Write+0xbe>

		memcpy(page_buf, &preset_buf[8 * page], 8); // copy one page of data from buffer
 8003910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	f107 0208 	add.w	r2, r7, #8
 8003918:	441a      	add	r2, r3
 800391a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800391e:	6810      	ldr	r0, [r2, #0]
 8003920:	6851      	ldr	r1, [r2, #4]
 8003922:	c303      	stmia	r3!, {r0, r1}
		error_check = EEPROM_Write_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003932:	4413      	add	r3, r2
 8003934:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f8d4 	bl	8003ae8 <EEPROM_Write_Page>
 8003940:	6478      	str	r0, [r7, #68]	@ 0x44

		if(error_check != 0){
 8003942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <Preset_Write+0xb8>
			return 1;
 8003948:	2301      	movs	r3, #1
 800394a:	e010      	b.n	800396e <Preset_Write+0xda>
	for(int page = 0; page < 6; page++){
 800394c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394e:	3301      	adds	r3, #1
 8003950:	643b      	str	r3, [r7, #64]	@ 0x40
 8003952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003954:	2b05      	cmp	r3, #5
 8003956:	dddb      	ble.n	8003910 <Preset_Write+0x7c>
		}

	}

	// read checksum for EEPROM slot used and verify output
	if(sys.checksum == Readback_Checksum(preset_slot)){
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <Preset_Write+0xe8>)
 800395a:	6a1c      	ldr	r4, [r3, #32]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f8a1 	bl	8003aa4 <Readback_Checksum>
 8003962:	4603      	mov	r3, r0
 8003964:	429c      	cmp	r4, r3
 8003966:	d101      	bne.n	800396c <Preset_Write+0xd8>
		error_check = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	647b      	str	r3, [r7, #68]	@ 0x44
	}

    return error_check;
 800396c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800396e:	4618      	mov	r0, r3
 8003970:	374c      	adds	r7, #76	@ 0x4c
 8003972:	46bd      	mov	sp, r7
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003976:	bf00      	nop
 8003978:	20000344 	.word	0x20000344
 800397c:	20000370 	.word	0x20000370

08003980 <Preset_Read>:

int Preset_Read(int preset_slot) {
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b093      	sub	sp, #76	@ 0x4c
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
    uint8_t page_buf[8];
    uint8_t preset_buf[48];
    uint8_t read_checksum;

    // read all pages back into the buffer
    for (int page = 0; page < 6; page++) {
 8003988:	2300      	movs	r3, #0
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44
 800398c:	e020      	b.n	80039d0 <Preset_Read+0x50>

        if (EEPROM_Read_Page(PAGE_OFFSET + (preset_slot * 6) + page, page_buf) != 0) {
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399c:	4413      	add	r3, r2
 800399e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8c7 	bl	8003b38 <EEPROM_Read_Page>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <Preset_Read+0x34>
            return 1; // error during EEPROM read
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04e      	b.n	8003a52 <Preset_Read+0xd2>
        }

        memcpy(&preset_buf[8 * page], page_buf, 8); // copy page data into buffer
 80039b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	f107 0208 	add.w	r2, r7, #8
 80039bc:	4413      	add	r3, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039c4:	cb03      	ldmia	r3!, {r0, r1}
 80039c6:	6010      	str	r0, [r2, #0]
 80039c8:	6051      	str	r1, [r2, #4]
    for (int page = 0; page < 6; page++) {
 80039ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039cc:	3301      	adds	r3, #1
 80039ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	dddb      	ble.n	800398e <Preset_Read+0xe>
    }

    // validate the checksum
    read_checksum = preset_buf[47];
 80039d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80039da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (read_checksum != XOR_Checksum(preset_buf, 48)) {
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	2130      	movs	r1, #48	@ 0x30
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f83d 	bl	8003a64 <XOR_Checksum>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d001      	beq.n	80039fa <Preset_Read+0x7a>
        return 1; // checksum mismatch
 80039f6:	2301      	movs	r3, #1
 80039f8:	e02b      	b.n	8003a52 <Preset_Read+0xd2>
    }

    // copy buffer data into synth parameters and system structures
    memcpy(&SynthParameters, preset_buf, sizeof(Synth));
 80039fa:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <Preset_Read+0xdc>)
 80039fc:	f107 0408 	add.w	r4, r7, #8
 8003a00:	469c      	mov	ip, r3
 8003a02:	f104 0e20 	add.w	lr, r4, #32
 8003a06:	4665      	mov	r5, ip
 8003a08:	4626      	mov	r6, r4
 8003a0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a0c:	6028      	str	r0, [r5, #0]
 8003a0e:	6069      	str	r1, [r5, #4]
 8003a10:	60aa      	str	r2, [r5, #8]
 8003a12:	60eb      	str	r3, [r5, #12]
 8003a14:	3410      	adds	r4, #16
 8003a16:	f10c 0c10 	add.w	ip, ip, #16
 8003a1a:	4574      	cmp	r4, lr
 8003a1c:	d1f3      	bne.n	8003a06 <Preset_Read+0x86>
 8003a1e:	4665      	mov	r5, ip
 8003a20:	4623      	mov	r3, r4
 8003a22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003a24:	6028      	str	r0, [r5, #0]
 8003a26:	6069      	str	r1, [r5, #4]
 8003a28:	60aa      	str	r2, [r5, #8]
    sys.serial_cmd_echo = preset_buf[44];
 8003a2a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <Preset_Read+0xe0>)
 8003a32:	601a      	str	r2, [r3, #0]
    sys.midi_tx_pol = preset_buf[45];
 8003a34:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <Preset_Read+0xe0>)
 8003a3c:	605a      	str	r2, [r3, #4]
    sys.midi_tx_en = preset_buf[46];
 8003a3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <Preset_Read+0xe0>)
 8003a46:	609a      	str	r2, [r3, #8]
    sys.checksum = read_checksum;
 8003a48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a4c:	4a04      	ldr	r2, [pc, #16]	@ (8003a60 <Preset_Read+0xe0>)
 8003a4e:	6213      	str	r3, [r2, #32]

    return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	374c      	adds	r7, #76	@ 0x4c
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000344 	.word	0x20000344
 8003a60:	20000370 	.word	0x20000370

08003a64 <XOR_Checksum>:


uint8_t XOR_Checksum(uint8_t *data, int length) {
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]

    uint8_t checksum = 0x00;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]

    for (int i = 0; i < length; i++) {
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	e009      	b.n	8003a8c <XOR_Checksum+0x28>
        checksum ^= data[i]; // XOR each byte
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	4053      	eors	r3, r2
 8003a84:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < length; i++) {
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	dbf1      	blt.n	8003a78 <XOR_Checksum+0x14>
    }

    return checksum;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <Readback_Checksum>:

uint8_t Readback_Checksum(int preset_slot){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af04      	add	r7, sp, #16
 8003aaa:	6078      	str	r0, [r7, #4]

	uint8_t i2c_buf[1];
	uint8_t checksum_address = (0x3F + (0x30 * preset_slot));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	333f      	adds	r3, #63	@ 0x3f
 8003abc:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, checksum_address, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	9302      	str	r3, [sp, #8]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	21a0      	movs	r1, #160	@ 0xa0
 8003ad4:	4803      	ldr	r0, [pc, #12]	@ (8003ae4 <Readback_Checksum+0x40>)
 8003ad6:	f001 f86b 	bl	8004bb0 <HAL_I2C_Mem_Read>

    return i2c_buf[0];
 8003ada:	7b3b      	ldrb	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200001f0 	.word	0x200001f0

08003ae8 <EEPROM_Write_Page>:

int EEPROM_Write_Page(int page_number, uint8_t *data){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af04      	add	r7, sp, #16
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]

	// calculate page start address
    uint8_t start_address = page_number * PAGE_SIZE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	73fb      	strb	r3, [r7, #15]

    // write page data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, start_address, I2C_MEMADD_SIZE_8BIT, data, PAGE_SIZE, 10);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	230a      	movs	r3, #10
 8003b00:	9302      	str	r3, [sp, #8]
 8003b02:	2308      	movs	r3, #8
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	21a0      	movs	r1, #160	@ 0xa0
 8003b0e:	4809      	ldr	r0, [pc, #36]	@ (8003b34 <EEPROM_Write_Page+0x4c>)
 8003b10:	f000 ff3a 	bl	8004988 <HAL_I2C_Mem_Write>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73bb      	strb	r3, [r7, #14]

    // wait for EEPROM write cycle to complete (typically 5ms)
    HAL_Delay(5);
 8003b18:	2005      	movs	r0, #5
 8003b1a:	f000 f939 	bl	8003d90 <HAL_Delay>

    return (result == HAL_OK) ? 0 : 1;
 8003b1e:	7bbb      	ldrb	r3, [r7, #14]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200001f0 	.word	0x200001f0

08003b38 <EEPROM_Read_Page>:

int EEPROM_Read_Page(int page_number, uint8_t *data){
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af04      	add	r7, sp, #16
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]

    // calculate page start address
    uint8_t start_address = page_number * PAGE_SIZE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	73fb      	strb	r3, [r7, #15]

    // read page data
    HAL_StatusTypeDef result = HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, start_address, I2C_MEMADD_SIZE_8BIT, data, PAGE_SIZE, 10);
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	230a      	movs	r3, #10
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2308      	movs	r3, #8
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	21a0      	movs	r1, #160	@ 0xa0
 8003b5e:	4807      	ldr	r0, [pc, #28]	@ (8003b7c <EEPROM_Read_Page+0x44>)
 8003b60:	f001 f826 	bl	8004bb0 <HAL_I2C_Mem_Read>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73bb      	strb	r3, [r7, #14]

    return (result == HAL_OK) ? 0 : 1;
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200001f0 	.word	0x200001f0

08003b80 <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af04      	add	r7, sp, #16
 8003b86:	4603      	mov	r3, r0
 8003b88:	460a      	mov	r2, r1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003b90:	79bb      	ldrb	r3, [r7, #6]
 8003b92:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	230a      	movs	r3, #10
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	21ee      	movs	r1, #238	@ 0xee
 8003baa:	4803      	ldr	r0, [pc, #12]	@ (8003bb8 <GPIO_Register_Write+0x38>)
 8003bac:	f000 feec 	bl	8004988 <HAL_I2C_Mem_Write>

	return;
 8003bb0:	bf00      	nop
}
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200001f0 	.word	0x200001f0

08003bbc <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2006      	movs	r0, #6
 8003bc4:	f7ff ffdc 	bl	8003b80 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2007      	movs	r0, #7
 8003bcc:	f7ff ffd8 	bl	8003b80 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f7ff ffd4 	bl	8003b80 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2003      	movs	r0, #3
 8003bdc:	f7ff ffd0 	bl	8003b80 <GPIO_Register_Write>

	return;
 8003be0:	bf00      	nop
}
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b07      	cmp	r3, #7
 8003bfc:	dd02      	ble.n	8003c04 <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 8003bfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c02:	e051      	b.n	8003ca8 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d121      	bne.n	8003c4e <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 8003c0a:	7a7b      	ldrb	r3, [r7, #9]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 8003c10:	2201      	movs	r2, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	817b      	strh	r3, [r7, #10]
 8003c24:	e00b      	b.n	8003c3e <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 8003c26:	2201      	movs	r2, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	b21b      	sxth	r3, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	b21a      	sxth	r2, r3
 8003c34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 8003c3e:	897b      	ldrh	r3, [r7, #10]
 8003c40:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 8003c42:	7dbb      	ldrb	r3, [r7, #22]
 8003c44:	4619      	mov	r1, r3
 8003c46:	2002      	movs	r0, #2
 8003c48:	f7ff ff9a 	bl	8003b80 <GPIO_Register_Write>
 8003c4c:	e02b      	b.n	8003ca6 <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d125      	bne.n	8003ca0 <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 8003c54:	7a7b      	ldrb	r3, [r7, #9]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2201      	movs	r2, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	817b      	strh	r3, [r7, #10]
 8003c70:	e00c      	b.n	8003c8c <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3308      	adds	r3, #8
 8003c76:	2201      	movs	r2, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	b21a      	sxth	r2, r3
 8003c82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c86:	4013      	ands	r3, r2
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	4619      	mov	r1, r3
 8003c98:	2003      	movs	r0, #3
 8003c9a:	f7ff ff71 	bl	8003b80 <GPIO_Register_Write>
 8003c9e:	e002      	b.n	8003ca6 <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 8003ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ca4:	e000      	b.n	8003ca8 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 8003ca6:	897b      	ldrh	r3, [r7, #10]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f000 f95a 	bl	8003f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cc0:	200f      	movs	r0, #15
 8003cc2:	f000 f80d 	bl	8003ce0 <HAL_InitTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	e001      	b.n	8003cd6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cd2:	f7fe fe99 	bl	8002a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cd6:	79fb      	ldrb	r3, [r7, #7]

}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003cec:	4b16      	ldr	r3, [pc, #88]	@ (8003d48 <HAL_InitTick+0x68>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d022      	beq.n	8003d3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003cf4:	4b15      	ldr	r3, [pc, #84]	@ (8003d4c <HAL_InitTick+0x6c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_InitTick+0x68>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f966 	bl	8003fda <HAL_SYSTICK_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d809      	bhi.n	8003d2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	f000 f932 	bl	8003f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <HAL_InitTick+0x70>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e007      	b.n	8003d3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
 8003d32:	e004      	b.n	8003d3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e001      	b.n	8003d3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	20000004 	.word	0x20000004

08003d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_IncTick+0x1c>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_IncTick+0x20>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	4a03      	ldr	r2, [pc, #12]	@ (8003d70 <HAL_IncTick+0x1c>)
 8003d64:	6013      	str	r3, [r2, #0]
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	200004e0 	.word	0x200004e0
 8003d74:	20000008 	.word	0x20000008

08003d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <HAL_GetTick+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200004e0 	.word	0x200004e0

08003d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d98:	f7ff ffee 	bl	8003d78 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d004      	beq.n	8003db4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003daa:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_Delay+0x40>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003db4:	bf00      	nop
 8003db6:	f7ff ffdf 	bl	8003d78 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d8f7      	bhi.n	8003db6 <HAL_Delay+0x26>
  {
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000008 	.word	0x20000008

08003dd4 <__NVIC_SetPriorityGrouping>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e06:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	60d3      	str	r3, [r2, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_GetPriorityGrouping>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4907      	ldr	r1, [pc, #28]	@ (8003e70 <__NVIC_EnableIRQ+0x38>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	@ (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	@ (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_EncodePriority>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f1c3 0307 	rsb	r3, r3, #7
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf28      	it	cs
 8003ee6:	2304      	movcs	r3, #4
 8003ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d902      	bls.n	8003ef8 <NVIC_EncodePriority+0x30>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3b03      	subs	r3, #3
 8003ef6:	e000      	b.n	8003efa <NVIC_EncodePriority+0x32>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	4313      	orrs	r3, r2
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	@ 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f40:	d301      	bcc.n	8003f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00f      	b.n	8003f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f46:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <SysTick_Config+0x40>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f4e:	210f      	movs	r1, #15
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	f7ff ff8e 	bl	8003e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <SysTick_Config+0x40>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <SysTick_Config+0x40>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000e010 	.word	0xe000e010

08003f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff29 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f98:	f7ff ff40 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff ff90 	bl	8003ec8 <NVIC_EncodePriority>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff5f 	bl	8003e74 <__NVIC_SetPriority>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff33 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffa4 	bl	8003f30 <SysTick_Config>
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e08d      	b.n	8004122 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_DMA_Init+0x138>)
 800400e:	429a      	cmp	r2, r3
 8004010:	d80f      	bhi.n	8004032 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <HAL_DMA_Init+0x13c>)
 800401a:	4413      	add	r3, r2
 800401c:	4a45      	ldr	r2, [pc, #276]	@ (8004134 <HAL_DMA_Init+0x140>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a42      	ldr	r2, [pc, #264]	@ (8004138 <HAL_DMA_Init+0x144>)
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004030:	e00e      	b.n	8004050 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b40      	ldr	r3, [pc, #256]	@ (800413c <HAL_DMA_Init+0x148>)
 800403a:	4413      	add	r3, r2
 800403c:	4a3d      	ldr	r2, [pc, #244]	@ (8004134 <HAL_DMA_Init+0x140>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a3c      	ldr	r2, [pc, #240]	@ (8004140 <HAL_DMA_Init+0x14c>)
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9be 	bl	8004424 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b0:	d102      	bne.n	80040b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_DMA_Init+0x104>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d80c      	bhi.n	80040f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9de 	bl	80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	e008      	b.n	800410a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40020407 	.word	0x40020407
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020000 	.word	0x40020000
 800413c:	bffdfbf8 	.word	0xbffdfbf8
 8004140:	40020400 	.word	0x40020400

08004144 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d005      	beq.n	8004168 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e037      	b.n	80041d8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 020e 	bic.w	r2, r2, #14
 8004176:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004182:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004186:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f202 	lsl.w	r2, r1, r2
 80041aa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041b4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041cc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041d6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d00d      	beq.n	800422a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e047      	b.n	80042ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 020e 	bic.w	r2, r2, #14
 8004238:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f003 021f 	and.w	r2, r3, #31
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004276:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004298:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
    }
  }
  return status;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2204      	movs	r2, #4
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d026      	beq.n	800433e <HAL_DMA_IRQHandler+0x7a>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d021      	beq.n	800433e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	2104      	movs	r1, #4
 8004326:	fa01 f202 	lsl.w	r2, r1, r2
 800432a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d071      	beq.n	8004418 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800433c:	e06c      	b.n	8004418 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2202      	movs	r2, #2
 8004348:	409a      	lsls	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d029      	beq.n	80043b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 020a 	bic.w	r2, r2, #10
 8004378:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f003 021f 	and.w	r2, r3, #31
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	2102      	movs	r1, #2
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d038      	beq.n	8004418 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043ae:	e033      	b.n	8004418 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2208      	movs	r2, #8
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02a      	beq.n	800441a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d025      	beq.n	800441a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 020e 	bic.w	r2, r2, #14
 80043dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e2:	f003 021f 	and.w	r2, r3, #31
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f202 	lsl.w	r2, r1, r2
 80043f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004418:	bf00      	nop
 800441a:	bf00      	nop
}
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b16      	ldr	r3, [pc, #88]	@ (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d802      	bhi.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e001      	b.n	8004442 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004440:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3b08      	subs	r3, #8
 800444e:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	461a      	mov	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a0b      	ldr	r2, [pc, #44]	@ (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800446e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40020407 	.word	0x40020407
 8004490:	40020800 	.word	0x40020800
 8004494:	40020820 	.word	0x40020820
 8004498:	cccccccd 	.word	0xcccccccd
 800449c:	40020880 	.word	0x40020880

080044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	1000823f 	.word	0x1000823f
 80044e4:	40020940 	.word	0x40020940

080044e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044f6:	e15a      	b.n	80047ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 814c 	beq.w	80047a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d005      	beq.n	8004528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004524:	2b02      	cmp	r3, #2
 8004526:	d130      	bne.n	800458a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455e:	2201      	movs	r2, #1
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0201 	and.w	r2, r3, #1
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d017      	beq.n	80045c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d123      	bne.n	800461a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	08da      	lsrs	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3208      	adds	r2, #8
 80045da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	220f      	movs	r2, #15
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	6939      	ldr	r1, [r7, #16]
 8004616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2203      	movs	r2, #3
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0203 	and.w	r2, r3, #3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a6 	beq.w	80047a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465c:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 800465e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004660:	4a5a      	ldr	r2, [pc, #360]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6613      	str	r3, [r2, #96]	@ 0x60
 8004668:	4b58      	ldr	r3, [pc, #352]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 800466a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004674:	4a56      	ldr	r2, [pc, #344]	@ (80047d0 <HAL_GPIO_Init+0x2e8>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3302      	adds	r3, #2
 800467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	220f      	movs	r2, #15
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800469e:	d01f      	beq.n	80046e0 <HAL_GPIO_Init+0x1f8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4c      	ldr	r2, [pc, #304]	@ (80047d4 <HAL_GPIO_Init+0x2ec>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d019      	beq.n	80046dc <HAL_GPIO_Init+0x1f4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4b      	ldr	r2, [pc, #300]	@ (80047d8 <HAL_GPIO_Init+0x2f0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_GPIO_Init+0x1f0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a4a      	ldr	r2, [pc, #296]	@ (80047dc <HAL_GPIO_Init+0x2f4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_Init+0x1ec>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a49      	ldr	r2, [pc, #292]	@ (80047e0 <HAL_GPIO_Init+0x2f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_Init+0x1e8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a48      	ldr	r2, [pc, #288]	@ (80047e4 <HAL_GPIO_Init+0x2fc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_Init+0x1e4>
 80046c8:	2305      	movs	r3, #5
 80046ca:	e00a      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046cc:	2306      	movs	r3, #6
 80046ce:	e008      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e006      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d4:	2303      	movs	r3, #3
 80046d6:	e004      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d8:	2302      	movs	r3, #2
 80046da:	e002      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046e0:	2300      	movs	r3, #0
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	f002 0203 	and.w	r2, r2, #3
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	4093      	lsls	r3, r2
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f2:	4937      	ldr	r1, [pc, #220]	@ (80047d0 <HAL_GPIO_Init+0x2e8>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	43db      	mvns	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800474e:	4a26      	ldr	r2, [pc, #152]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004754:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047a2:	4a11      	ldr	r2, [pc, #68]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3301      	adds	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f ae9d 	bne.w	80044f8 <HAL_GPIO_Init+0x10>
  }
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40010000 	.word	0x40010000
 80047d4:	48000400 	.word	0x48000400
 80047d8:	48000800 	.word	0x48000800
 80047dc:	48000c00 	.word	0x48000c00
 80047e0:	48001000 	.word	0x48001000
 80047e4:	48001400 	.word	0x48001400
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004808:	e002      	b.n	8004810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	041a      	lsls	r2, r3, #16
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43d9      	mvns	r1, r3
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	400b      	ands	r3, r1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e08d      	b.n	800497e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fbee 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	@ 0x24
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e006      	b.n	80048d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d108      	bne.n	80048f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	e007      	b.n	8004902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69d9      	ldr	r1, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	460b      	mov	r3, r1
 800499c:	813b      	strh	r3, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	f040 80f9 	bne.w	8004ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_I2C_Mem_Write+0x34>
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0ed      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0e6      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049de:	f7ff f9cb 	bl	8003d78 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fac3 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d1      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2221      	movs	r2, #33	@ 0x21
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	@ 0x40
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a28:	88f8      	ldrh	r0, [r7, #6]
 8004a2a:	893a      	ldrh	r2, [r7, #8]
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4603      	mov	r3, r0
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f9d3 	bl	8004de4 <I2C_RequestMemoryWrite>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a9      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2bff      	cmp	r3, #255	@ 0xff
 8004a58:	d90e      	bls.n	8004a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	@ 0xff
 8004a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fc47 	bl	8005304 <I2C_TransferConfig>
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	8979      	ldrh	r1, [r7, #10]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fc36 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fac6 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e07b      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d034      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	@ 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa3f 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04d      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2bff      	cmp	r3, #255	@ 0xff
 8004b10:	d90e      	bls.n	8004b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	@ 0xff
 8004b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	8979      	ldrh	r1, [r7, #10]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fbeb 	bl	8005304 <I2C_TransferConfig>
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fbda 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19e      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 faac 	bl	80050bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01a      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_I2C_Mem_Write+0x224>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	f040 80fd 	bne.w	8004dd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x34>
 8004bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0f1      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Mem_Read+0x4e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0ea      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c06:	f7ff f8b7 	bl	8003d78 <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2319      	movs	r3, #25
 8004c12:	2201      	movs	r2, #1
 8004c14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f9af 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d5      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2222      	movs	r2, #34	@ 0x22
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c50:	88f8      	ldrh	r0, [r7, #6]
 8004c52:	893a      	ldrh	r2, [r7, #8]
 8004c54:	8979      	ldrh	r1, [r7, #10]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f913 	bl	8004e8c <I2C_RequestMemoryRead>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0ad      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2bff      	cmp	r3, #255	@ 0xff
 8004c80:	d90e      	bls.n	8004ca0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	@ 0xff
 8004c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <HAL_I2C_Mem_Read+0x22c>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fb33 	bl	8005304 <I2C_TransferConfig>
 8004c9e:	e00f      	b.n	8004cc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <HAL_I2C_Mem_Read+0x22c>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fb22 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2104      	movs	r1, #4
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f956 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07c      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d034      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d130      	bne.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	2200      	movs	r2, #0
 8004d26:	2180      	movs	r1, #128	@ 0x80
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f927 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e04d      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2bff      	cmp	r3, #255	@ 0xff
 8004d40:	d90e      	bls.n	8004d60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	22ff      	movs	r2, #255	@ 0xff
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fad3 	bl	8005304 <I2C_TransferConfig>
 8004d5e:	e00f      	b.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	8979      	ldrh	r1, [r7, #10]
 8004d72:	2300      	movs	r3, #0
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fac2 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d19a      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f994 	bl	80050bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e01a      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2220      	movs	r2, #32
 8004da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_I2C_Mem_Read+0x230>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	80002400 	.word	0x80002400
 8004de0:	fe00e800 	.word	0xfe00e800

08004de4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	817b      	strh	r3, [r7, #10]
 8004df6:	460b      	mov	r3, r1
 8004df8:	813b      	strh	r3, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	8979      	ldrh	r1, [r7, #10]
 8004e04:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <I2C_RequestMemoryWrite+0xa4>)
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fa79 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f909 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02c      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e36:	e015      	b.n	8004e64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e38:	893b      	ldrh	r3, [r7, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8ef 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e012      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e5a:	893b      	ldrh	r3, [r7, #8]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	@ 0x80
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f884 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	80002000 	.word	0x80002000

08004e8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	8979      	ldrh	r1, [r7, #10]
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <I2C_RequestMemoryRead+0xa4>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa26 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f8b6 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e02c      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d105      	bne.n	8004ede <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004edc:	e015      	b.n	8004f0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f89c 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e012      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2140      	movs	r1, #64	@ 0x40
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f831 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	80002000 	.word	0x80002000

08004f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d103      	bne.n	8004f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d007      	beq.n	8004f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	619a      	str	r2, [r3, #24]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8c:	e03b      	b.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f8d6 	bl	8005144 <I2C_IsErrorOccurred>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e041      	b.n	8005026 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d02d      	beq.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fe fee5 	bl	8003d78 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d122      	bne.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d113      	bne.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e00f      	b.n	8005026 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d0b4      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800503a:	e033      	b.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f87f 	bl	8005144 <I2C_IsErrorOccurred>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e031      	b.n	80050b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d025      	beq.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fe fe8e 	bl	8003d78 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d013      	beq.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e007      	b.n	80050b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d1c4      	bne.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c8:	e02f      	b.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f838 	bl	8005144 <I2C_IsErrorOccurred>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e02d      	b.n	800513a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fe fe4b 	bl	8003d78 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11a      	bne.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d013      	beq.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e007      	b.n	800513a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b20      	cmp	r3, #32
 8005136:	d1c8      	bne.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d068      	beq.n	8005242 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005178:	e049      	b.n	800520e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d045      	beq.n	800520e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fe fdf9 	bl	8003d78 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_IsErrorOccurred+0x54>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d13a      	bne.n	800520e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ba:	d121      	bne.n	8005200 <I2C_IsErrorOccurred+0xbc>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051c2:	d01d      	beq.n	8005200 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d01a      	beq.n	8005200 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051da:	f7fe fdcd 	bl	8003d78 <HAL_GetTick>
 80051de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e0:	e00e      	b.n	8005200 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051e2:	f7fe fdc9 	bl	8003d78 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b19      	cmp	r3, #25
 80051ee:	d907      	bls.n	8005200 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f043 0320 	orr.w	r3, r3, #32
 80051f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051fe:	e006      	b.n	800520e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d1e9      	bne.n	80051e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b20      	cmp	r3, #32
 800521a:	d003      	beq.n	8005224 <I2C_IsErrorOccurred+0xe0>
 800521c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0aa      	beq.n	800517a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2220      	movs	r2, #32
 8005232:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f043 0308 	orr.w	r3, r3, #8
 800527c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80052b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01c      	beq.n	80052f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe3b 	bl	8004f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <I2C_IsErrorOccurred+0x1bc>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	@ 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	fe00e800 	.word	0xfe00e800

08005304 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	4613      	mov	r3, r2
 8005314:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800531c:	7a7b      	ldrb	r3, [r7, #9]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005324:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4313      	orrs	r3, r2
 800532e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005332:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	0d5b      	lsrs	r3, r3, #21
 800533e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005342:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <I2C_TransferConfig+0x60>)
 8005344:	430b      	orrs	r3, r1
 8005346:	43db      	mvns	r3, r3
 8005348:	ea02 0103 	and.w	r1, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	03ff63ff 	.word	0x03ff63ff

08005368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	d138      	bne.n	80053f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005388:	2302      	movs	r3, #2
 800538a:	e032      	b.n	80053f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	@ 0x24
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e000      	b.n	80053f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b20      	cmp	r3, #32
 8005412:	d139      	bne.n	8005488 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800541e:	2302      	movs	r3, #2
 8005420:	e033      	b.n	800548a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	@ 0x24
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005450:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0d0      	b.n	800564c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fb fe4c 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054da:	f023 030f 	bic.w	r3, r3, #15
 80054de:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2202      	movs	r2, #2
 80054e6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d061      	beq.n	80055b4 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80054f8:	2310      	movs	r3, #16
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e001      	b.n	8005502 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80054fe:	2320      	movs	r3, #32
 8005500:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b20      	cmp	r3, #32
 8005508:	d802      	bhi.n	8005510 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005510:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005514:	f002 fee6 	bl	80082e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005518:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005522:	d125      	bne.n	8005570 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	fbb2 f2f3 	udiv	r2, r2, r3
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	3305      	adds	r3, #5
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e01f      	b.n	800558e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	fbb2 f2f3 	udiv	r2, r2, r3
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	461a      	mov	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	3305      	adds	r3, #5
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e00e      	b.n	800558e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	fbb2 f2f3 	udiv	r2, r2, r3
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	461a      	mov	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	3305      	adds	r3, #5
 800558c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4a30      	ldr	r2, [pc, #192]	@ (8005654 <HAL_I2S_Init+0x1bc>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e003      	b.n	80055bc <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80055b4:	2302      	movs	r3, #2
 80055b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d902      	bls.n	80055c8 <HAL_I2S_Init+0x130>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2bff      	cmp	r3, #255	@ 0xff
 80055c6:	d907      	bls.n	80055d8 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	f043 0210 	orr.w	r2, r3, #16
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e039      	b.n	800564c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	ea42 0103 	orr.w	r1, r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80055f6:	f023 030f 	bic.w	r3, r3, #15
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6851      	ldr	r1, [r2, #4]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6892      	ldr	r2, [r2, #8]
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68d2      	ldr	r2, [r2, #12]
 8005608:	4311      	orrs	r1, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6992      	ldr	r2, [r2, #24]
 800560e:	430a      	orrs	r2, r1
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b30      	cmp	r3, #48	@ 0x30
 8005622:	d003      	beq.n	800562c <HAL_I2S_Init+0x194>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2bb0      	cmp	r3, #176	@ 0xb0
 800562a:	d107      	bne.n	800563c <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800563a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	cccccccd 	.word	0xcccccccd

08005658 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_I2S_Transmit+0x1c>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e0d8      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
 8005686:	e0d0      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_I2S_Transmit+0x40>
 8005694:	2302      	movs	r3, #2
 8005696:	e0c8      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d002      	beq.n	80056cc <HAL_I2S_Transmit+0x74>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d10a      	bne.n	80056e2 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	845a      	strh	r2, [r3, #34]	@ 0x22
 80056e0:	e005      	b.n	80056ee <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005704:	d007      	beq.n	8005716 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005714:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	2102      	movs	r1, #2
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f888 	bl	8005832 <I2S_WaitFlagStateUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d04e      	beq.n	80057c6 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	f043 0201 	orr.w	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e070      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	1c9a      	adds	r2, r3, #2
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	2102      	movs	r1, #2
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f85d 	bl	8005832 <I2S_WaitFlagStateUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00f      	beq.n	800579e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e045      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d10c      	bne.n	80057c6 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	f043 0204 	orr.w	r2, r3, #4
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1bb      	bne.n	8005748 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e4:	d118      	bne.n	8005818 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f820 	bl	8005832 <I2S_WaitFlagStateUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00f      	beq.n	8005818 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	f043 0201 	orr.w	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e008      	b.n	800582a <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005842:	f7fe fa99 	bl	8003d78 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005848:	e018      	b.n	800587c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d014      	beq.n	800587c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005852:	f7fe fa91 	bl	8003d78 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d902      	bls.n	8005868 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e00f      	b.n	800589c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	429a      	cmp	r2, r3
 8005898:	d1d7      	bne.n	800584a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0c0      	b.n	8005a38 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f009 ffe2 	bl	800f894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2203      	movs	r2, #3
 80058d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f006 fae6 	bl	800beae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e03e      	b.n	8005966 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	440b      	add	r3, r1
 80058f6:	3311      	adds	r3, #17
 80058f8:	2201      	movs	r2, #1
 80058fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	440b      	add	r3, r1
 800590a:	3310      	adds	r3, #16
 800590c:	7bfa      	ldrb	r2, [r7, #15]
 800590e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3313      	adds	r3, #19
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	3320      	adds	r3, #32
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005938:	7bfa      	ldrb	r2, [r7, #15]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	3324      	adds	r3, #36	@ 0x24
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	440b      	add	r3, r1
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	3301      	adds	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	429a      	cmp	r2, r3
 800596e:	d3bb      	bcc.n	80058e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e044      	b.n	8005a00 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	440b      	add	r3, r1
 8005984:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	440b      	add	r3, r1
 800599a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800599e:	7bfa      	ldrb	r2, [r7, #15]
 80059a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059a2:	7bfa      	ldrb	r2, [r7, #15]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	440b      	add	r3, r1
 80059b0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059b8:	7bfa      	ldrb	r2, [r7, #15]
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	440b      	add	r3, r1
 80059c6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	3301      	adds	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	791b      	ldrb	r3, [r3, #4]
 8005a04:	7bfa      	ldrb	r2, [r7, #15]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3b5      	bcc.n	8005976 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005a16:	f006 fa65 	bl	800bee4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7a9b      	ldrb	r3, [r3, #10]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fc0e 	bl	8007252 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_PCD_Start+0x16>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e012      	b.n	8005a7c <HAL_PCD_Start+0x3c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f006 fa0c 	bl	800be80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f007 ffe9 	bl	800da44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f007 ffee 	bl	800da72 <USB_ReadInterrupts>
 8005a96:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb06 	bl	80060b4 <PCD_EP_ISR_Handler>

    return;
 8005aa8:	e110      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f009 ff72 	bl	800f9b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8fc 	bl	8005cd2 <HAL_PCD_SetAddress>

    return;
 8005ada:	e0f7      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005af8:	b292      	uxth	r2, r2
 8005afa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005afe:	e0e5      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b22:	e0d3      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d034      	beq.n	8005b98 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0204 	bic.w	r2, r2, #4
 8005b40:	b292      	uxth	r2, r2
 8005b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0208 	bic.w	r2, r2, #8
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d107      	bne.n	8005b78 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b70:	2100      	movs	r1, #0
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f00a f912 	bl	800fd9c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f009 ff55 	bl	800fa28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b90:	b292      	uxth	r2, r2
 8005b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b96:	e099      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d027      	beq.n	8005bf2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0208 	orr.w	r2, r2, #8
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0204 	orr.w	r2, r2, #4
 8005be4:	b292      	uxth	r2, r2
 8005be6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f009 ff02 	bl	800f9f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005bf0:	e06c      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d040      	beq.n	8005c7e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d12b      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0204 	orr.w	r2, r2, #4
 8005c30:	b292      	uxth	r2, r2
 8005c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0208 	orr.w	r2, r2, #8
 8005c48:	b292      	uxth	r2, r2
 8005c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f00a f894 	bl	800fd9c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005c74:	e02a      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f009 febc 	bl	800f9f4 <HAL_PCD_SuspendCallback>
    return;
 8005c7c:	e026      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f009 fe7a 	bl	800f99a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ca6:	e011      	b.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00c      	beq.n	8005ccc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cc4:	b292      	uxth	r2, r2
 8005cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005cca:	bf00      	nop
  }
}
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_PCD_SetAddress+0x1a>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e012      	b.n	8005d12 <HAL_PCD_SetAddress+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	4611      	mov	r1, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f007 fe8a 	bl	800da1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	4608      	mov	r0, r1
 8005d24:	4611      	mov	r1, r2
 8005d26:	461a      	mov	r2, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	70fb      	strb	r3, [r7, #3]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	803b      	strh	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da0e      	bge.n	8005d5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	f003 0207 	and.w	r2, r3, #7
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	3310      	adds	r3, #16
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	705a      	strb	r2, [r3, #1]
 8005d5c:	e00e      	b.n	8005d7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 0207 	and.w	r2, r3, #7
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005d88:	883b      	ldrh	r3, [r7, #0]
 8005d8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	78ba      	ldrb	r2, [r7, #2]
 8005d96:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d98:	78bb      	ldrb	r3, [r7, #2]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d102      	bne.n	8005da4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_PCD_EP_Open+0x98>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e00e      	b.n	8005dd0 <HAL_PCD_EP_Open+0xb6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f006 f8ad 	bl	800bf20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005dce:	7afb      	ldrb	r3, [r7, #11]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da0e      	bge.n	8005e0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 0207 	and.w	r2, r3, #7
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	3310      	adds	r3, #16
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	705a      	strb	r2, [r3, #1]
 8005e08:	e00e      	b.n	8005e28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 0207 	and.w	r2, r3, #7
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_PCD_EP_Close+0x6a>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e00e      	b.n	8005e60 <HAL_PCD_EP_Close+0x88>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f006 fd4d 	bl	800c8f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	460b      	mov	r3, r1
 8005e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	f003 0207 	and.w	r2, r3, #7
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ea8:	7afb      	ldrb	r3, [r7, #11]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6979      	ldr	r1, [r7, #20]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f006 ff05 	bl	800ccca <USB_EPStartXfer>

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 0207 	and.w	r2, r3, #7
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005eec:	681b      	ldr	r3, [r3, #0]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	460b      	mov	r3, r1
 8005f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	f003 0207 	and.w	r2, r3, #7
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	3310      	adds	r3, #16
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2201      	movs	r2, #1
 8005f44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f006 feb6 	bl	800ccca <USB_EPStartXfer>

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	7912      	ldrb	r2, [r2, #4]
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03e      	b.n	8006004 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da0e      	bge.n	8005fac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	f003 0207 	and.w	r2, r3, #7
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	705a      	strb	r2, [r3, #1]
 8005faa:	e00c      	b.n	8005fc6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_PCD_EP_SetStall+0x7e>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e00e      	b.n	8006004 <HAL_PCD_EP_SetStall+0x9c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f007 fc17 	bl	800d828 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	7912      	ldrb	r2, [r2, #4]
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e040      	b.n	80060ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800602a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800602e:	2b00      	cmp	r3, #0
 8006030:	da0e      	bge.n	8006050 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	f003 0207 	and.w	r2, r3, #7
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3310      	adds	r3, #16
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	705a      	strb	r2, [r3, #1]
 800604e:	e00e      	b.n	800606e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 0207 	and.w	r2, r3, #7
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_PCD_EP_ClrStall+0x82>
 800608a:	2302      	movs	r3, #2
 800608c:	e00e      	b.n	80060ac <HAL_PCD_EP_ClrStall+0xa0>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	4618      	mov	r0, r3
 800609e:	f007 fc14 	bl	800d8ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b092      	sub	sp, #72	@ 0x48
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060bc:	e333      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80060c6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80060c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80060d4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 8108 	bne.w	80062ee <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80060de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d14c      	bne.n	8006182 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80060f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f8:	813b      	strh	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006108:	b29b      	uxth	r3, r3
 800610a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3310      	adds	r3, #16
 8006110:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	4413      	add	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	4413      	add	r3, r2
 800612c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006138:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800613a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	441a      	add	r2, r3
 8006144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006146:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f009 fc0b 	bl	800f966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7b1b      	ldrb	r3, [r3, #12]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 82e5 	beq.w	8006726 <PCD_EP_ISR_Handler+0x672>
 800615c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 82e0 	bne.w	8006726 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7b1b      	ldrb	r3, [r3, #12]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006170:	b2da      	uxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	731a      	strb	r2, [r3, #12]
 8006180:	e2d1      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006188:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006192:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d032      	beq.n	8006202 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80061ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80061d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f007 fc9d 	bl	800db16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061e8:	4013      	ands	r3, r2
 80061ea:	817b      	strh	r3, [r7, #10]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	897a      	ldrh	r2, [r7, #10]
 80061f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061f6:	b292      	uxth	r2, r2
 80061f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f009 fb86 	bl	800f90c <HAL_PCD_SetupStageCallback>
 8006200:	e291      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006202:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006206:	2b00      	cmp	r3, #0
 8006208:	f280 828d 	bge.w	8006726 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006218:	4013      	ands	r3, r2
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	89fa      	ldrh	r2, [r7, #14]
 8006222:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006226:	b292      	uxth	r2, r2
 8006228:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	4413      	add	r3, r2
 8006244:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800624e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006250:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d019      	beq.n	800628e <PCD_EP_ISR_Handler+0x1da>
 800625a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d015      	beq.n	800628e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006268:	6959      	ldr	r1, [r3, #20]
 800626a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800626e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006270:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006272:	b29b      	uxth	r3, r3
 8006274:	f007 fc4f 	bl	800db16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	441a      	add	r2, r3
 8006282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006284:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f009 fb51 	bl	800f930 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006296:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 8242 	bne.w	8006726 <PCD_EP_ISR_Handler+0x672>
 80062a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062a4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80062a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062ac:	f000 823b 	beq.w	8006726 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	81bb      	strh	r3, [r7, #12]
 80062c2:	89bb      	ldrh	r3, [r7, #12]
 80062c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062c8:	81bb      	strh	r3, [r7, #12]
 80062ca:	89bb      	ldrh	r3, [r7, #12]
 80062cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062d0:	81bb      	strh	r3, [r7, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	89bb      	ldrh	r3, [r7, #12]
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]
 80062ec:	e21b      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006300:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006304:	2b00      	cmp	r3, #0
 8006306:	f280 80f1 	bge.w	80064ec <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29a      	uxth	r2, r3
 800631c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006320:	4013      	ands	r3, r2
 8006322:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006334:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006338:	b292      	uxth	r2, r2
 800633a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800633c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006354:	7b1b      	ldrb	r3, [r3, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d123      	bne.n	80063a2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6812      	ldr	r2, [r2, #0]
 8006372:	4413      	add	r3, r2
 8006374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8006382:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 808b 	beq.w	80064a2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006392:	6959      	ldr	r1, [r3, #20]
 8006394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006396:	88da      	ldrh	r2, [r3, #6]
 8006398:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800639c:	f007 fbbb 	bl	800db16 <USB_ReadPMA>
 80063a0:	e07f      	b.n	80064a2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80063a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a4:	78db      	ldrb	r3, [r3, #3]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d109      	bne.n	80063be <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80063aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063ac:	461a      	mov	r2, r3
 80063ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9c6 	bl	8006742 <HAL_PCD_EP_DB_Receive>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80063bc:	e071      	b.n	80064a2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d022      	beq.n	800645e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4413      	add	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6812      	ldr	r2, [r2, #0]
 8006430:	4413      	add	r3, r2
 8006432:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800643c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006440:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006444:	2b00      	cmp	r3, #0
 8006446:	d02c      	beq.n	80064a2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644e:	6959      	ldr	r1, [r3, #20]
 8006450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006452:	891a      	ldrh	r2, [r3, #8]
 8006454:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006458:	f007 fb5d 	bl	800db16 <USB_ReadPMA>
 800645c:	e021      	b.n	80064a2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4413      	add	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	4413      	add	r3, r2
 8006478:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006482:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8006486:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006494:	6959      	ldr	r1, [r3, #20]
 8006496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006498:	895a      	ldrh	r2, [r3, #10]
 800649a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800649e:	f007 fb3a 	bl	800db16 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80064a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064aa:	441a      	add	r2, r3
 80064ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80064b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80064b8:	441a      	add	r2, r3
 80064ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80064be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <PCD_EP_ISR_Handler+0x41e>
 80064c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80064ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d206      	bcs.n	80064e0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80064d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f009 fa29 	bl	800f930 <HAL_PCD_DataOutStageCallback>
 80064de:	e005      	b.n	80064ec <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e6:	4618      	mov	r0, r3
 80064e8:	f006 fbef 	bl	800ccca <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80064ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8117 	beq.w	8006726 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80064f8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29b      	uxth	r3, r3
 8006542:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 80a1 	bne.w	8006690 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800654e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006556:	7b1b      	ldrb	r3, [r3, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8092 	beq.w	8006682 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800655e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d046      	beq.n	80065f6 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d126      	bne.n	80065be <PCD_EP_ISR_Handler+0x50a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	00da      	lsls	r2, r3, #3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e061      	b.n	8006682 <PCD_EP_ISR_Handler+0x5ce>
 80065be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d15d      	bne.n	8006682 <PCD_EP_ISR_Handler+0x5ce>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	00da      	lsls	r2, r3, #3
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2200      	movs	r2, #0
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e045      	b.n	8006682 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d126      	bne.n	8006652 <PCD_EP_ISR_Handler+0x59e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	4413      	add	r3, r2
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
 800661c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	00da      	lsls	r2, r3, #3
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	4413      	add	r3, r2
 8006626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006636:	b29a      	uxth	r2, r3
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e017      	b.n	8006682 <PCD_EP_ISR_Handler+0x5ce>
 8006652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d113      	bne.n	8006682 <PCD_EP_ISR_Handler+0x5ce>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	4413      	add	r3, r2
 800666a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	00da      	lsls	r2, r3, #3
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	4413      	add	r3, r2
 8006676:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2200      	movs	r2, #0
 8006680:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f009 f96c 	bl	800f966 <HAL_PCD_DataInStageCallback>
 800668e:	e04a      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006690:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d13f      	bne.n	800671a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	4413      	add	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066be:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80066c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d906      	bls.n	80066d8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80066ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d4:	619a      	str	r2, [r3, #24]
 80066d6:	e002      	b.n	80066de <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80066d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066da:	2200      	movs	r2, #0
 80066dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80066de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f009 f93a 	bl	800f966 <HAL_PCD_DataInStageCallback>
 80066f2:	e018      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80066f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80066fa:	441a      	add	r2, r3
 80066fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006706:	441a      	add	r2, r3
 8006708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800670a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006712:	4618      	mov	r0, r3
 8006714:	f006 fad9 	bl	800ccca <USB_EPStartXfer>
 8006718:	e005      	b.n	8006726 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800671a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800671c:	461a      	mov	r2, r3
 800671e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f917 	bl	8006954 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800672e:	b29b      	uxth	r3, r3
 8006730:	b21b      	sxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	f6ff acc3 	blt.w	80060be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3748      	adds	r7, #72	@ 0x48
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b088      	sub	sp, #32
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d07c      	beq.n	8006854 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	4413      	add	r3, r2
 8006774:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	699a      	ldr	r2, [r3, #24]
 8006784:	8b7b      	ldrh	r3, [r7, #26]
 8006786:	429a      	cmp	r2, r3
 8006788:	d306      	bcc.n	8006798 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	8b7b      	ldrh	r3, [r7, #26]
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	619a      	str	r2, [r3, #24]
 8006796:	e002      	b.n	800679e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d123      	bne.n	80067ee <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c0:	833b      	strh	r3, [r7, #24]
 80067c2:	8b3b      	ldrh	r3, [r7, #24]
 80067c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067c8:	833b      	strh	r3, [r7, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	8b3b      	ldrh	r3, [r7, #24]
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01f      	beq.n	8006838 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	82fb      	strh	r3, [r7, #22]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	8afb      	ldrh	r3, [r7, #22]
 8006824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800682c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006830:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006834:	b29b      	uxth	r3, r3
 8006836:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006838:	8b7b      	ldrh	r3, [r7, #26]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 8085 	beq.w	800694a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6959      	ldr	r1, [r3, #20]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	891a      	ldrh	r2, [r3, #8]
 800684c:	8b7b      	ldrh	r3, [r7, #26]
 800684e:	f007 f962 	bl	800db16 <USB_ReadPMA>
 8006852:	e07a      	b.n	800694a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685c:	b29b      	uxth	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	4413      	add	r3, r2
 800686e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006878:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	8b7b      	ldrh	r3, [r7, #26]
 8006880:	429a      	cmp	r2, r3
 8006882:	d306      	bcc.n	8006892 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	8b7b      	ldrh	r3, [r7, #26]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	619a      	str	r2, [r3, #24]
 8006890:	e002      	b.n	8006898 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d123      	bne.n	80068e8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	83fb      	strh	r3, [r7, #30]
 80068bc:	8bfb      	ldrh	r3, [r7, #30]
 80068be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068c2:	83fb      	strh	r3, [r7, #30]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	8bfb      	ldrh	r3, [r7, #30]
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11f      	bne.n	8006932 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	83bb      	strh	r3, [r7, #28]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	8bbb      	ldrh	r3, [r7, #28]
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800692a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006932:	8b7b      	ldrh	r3, [r7, #26]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6959      	ldr	r1, [r3, #20]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	895a      	ldrh	r2, [r3, #10]
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	f007 f8e6 	bl	800db16 <USB_ReadPMA>
    }
  }

  return count;
 800694a:	8b7b      	ldrh	r3, [r7, #26]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b0a6      	sub	sp, #152	@ 0x98
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81f7 	beq.w	8006d5c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4413      	add	r3, r2
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	4413      	add	r3, r2
 8006988:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006992:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800699e:	429a      	cmp	r2, r3
 80069a0:	d907      	bls.n	80069b2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	619a      	str	r2, [r3, #24]
 80069b0:	e002      	b.n	80069b8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2200      	movs	r2, #0
 80069b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 80e1 	bne.w	8006b84 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d126      	bne.n	8006a18 <HAL_PCD_EP_DB_Transmit+0xc4>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	4413      	add	r3, r2
 80069e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	00da      	lsls	r2, r3, #3
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	4413      	add	r3, r2
 80069ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e01a      	b.n	8006a4e <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d116      	bne.n	8006a4e <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a34:	4413      	add	r3, r2
 8006a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	00da      	lsls	r2, r3, #3
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	4413      	add	r3, r2
 8006a42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d126      	bne.n	8006aaa <HAL_PCD_EP_DB_Transmit+0x156>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	4413      	add	r3, r2
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e017      	b.n	8006ada <HAL_PCD_EP_DB_Transmit+0x186>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d113      	bne.n	8006ada <HAL_PCD_EP_DB_Transmit+0x186>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	4413      	add	r3, r2
 8006ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	00da      	lsls	r2, r3, #3
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d123      	bne.n	8006b2a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afc:	837b      	strh	r3, [r7, #26]
 8006afe:	8b7b      	ldrh	r3, [r7, #26]
 8006b00:	f083 0320 	eor.w	r3, r3, #32
 8006b04:	837b      	strh	r3, [r7, #26]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8b7b      	ldrh	r3, [r7, #26]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f008 ff18 	bl	800f966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01f      	beq.n	8006b80 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5a:	833b      	strh	r3, [r7, #24]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	441a      	add	r2, r3
 8006b6a:	8b3b      	ldrh	r3, [r7, #24]
 8006b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e31f      	b.n	80071c4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d021      	beq.n	8006bd2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	441a      	add	r2, r3
 8006bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 82ca 	bne.w	8007172 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006be6:	441a      	add	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bf4:	441a      	add	r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d309      	bcc.n	8006c1a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	621a      	str	r2, [r3, #32]
 8006c18:	e015      	b.n	8006c46 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d107      	bne.n	8006c32 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8006c22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c26:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c30:	e009      	b.n	8006c46 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d15f      	bne.n	8006d0e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c62:	4413      	add	r3, r2
 8006c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	00da      	lsls	r2, r3, #3
 8006c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	e051      	b.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ca4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ca6:	d816      	bhi.n	8006cd6 <HAL_PCD_EP_DB_Transmit+0x382>
 8006ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_PCD_EP_DB_Transmit+0x36a>
 8006cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cba:	3301      	adds	r3, #1
 8006cbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	e037      	b.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <HAL_PCD_EP_DB_Transmit+0x398>
 8006ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	029b      	lsls	r3, r3, #10
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e01b      	b.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d117      	bne.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d2a:	4413      	add	r3, r2
 8006d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	00da      	lsls	r2, r3, #3
 8006d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d36:	4413      	add	r3, r2
 8006d38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6959      	ldr	r1, [r3, #20]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	891a      	ldrh	r2, [r3, #8]
 8006d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f006 fe9c 	bl	800da92 <USB_WritePMA>
 8006d5a:	e20a      	b.n	8007172 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d80:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d307      	bcc.n	8006da0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d98:	1ad2      	subs	r2, r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	619a      	str	r2, [r3, #24]
 8006d9e:	e002      	b.n	8006da6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 80f6 	bne.w	8006f9c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d126      	bne.n	8006e06 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dcc:	4413      	add	r3, r2
 8006dce:	677b      	str	r3, [r7, #116]	@ 0x74
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	00da      	lsls	r2, r3, #3
 8006dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dde:	673b      	str	r3, [r7, #112]	@ 0x70
 8006de0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e01a      	b.n	8006e3c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d116      	bne.n	8006e3c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e22:	4413      	add	r3, r2
 8006e24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	00da      	lsls	r2, r3, #3
 8006e2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e2e:	4413      	add	r3, r2
 8006e30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e38:	2200      	movs	r2, #0
 8006e3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d12f      	bne.n	8006eac <HAL_PCD_EP_DB_Transmit+0x558>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e64:	4413      	add	r3, r2
 8006e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e74:	4413      	add	r3, r2
 8006e76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e01c      	b.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d118      	bne.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x592>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00da      	lsls	r2, r3, #3
 8006ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	78db      	ldrb	r3, [r3, #3]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d127      	bne.n	8006f3e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006f0c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006f10:	f083 0320 	eor.w	r3, r3, #32
 8006f14:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f008 fd0e 	bl	800f966 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d121      	bne.n	8006f98 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e113      	b.n	80071c4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d121      	bne.n	8006fea <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	f040 80be 	bne.w	8007172 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	695a      	ldr	r2, [r3, #20]
 8006ffa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ffe:	441a      	add	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800700c:	441a      	add	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	d309      	bcc.n	8007032 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	621a      	str	r2, [r3, #32]
 8007030:	e015      	b.n	800705e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800703a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800703e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007048:	e009      	b.n	800705e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d15f      	bne.n	800712c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007080:	4413      	add	r3, r2
 8007082:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	00da      	lsls	r2, r3, #3
 800708a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800708c:	4413      	add	r3, r2
 800708e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007092:	667b      	str	r3, [r7, #100]	@ 0x64
 8007094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800709e:	b29a      	uxth	r2, r3
 80070a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070a2:	801a      	strh	r2, [r3, #0]
 80070a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10a      	bne.n	80070c0 <HAL_PCD_EP_DB_Transmit+0x76c>
 80070aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e04e      	b.n	800715e <HAL_PCD_EP_DB_Transmit+0x80a>
 80070c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80070c4:	d816      	bhi.n	80070f4 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80070c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80070cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_PCD_EP_DB_Transmit+0x788>
 80070d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070d8:	3301      	adds	r3, #1
 80070da:	663b      	str	r3, [r7, #96]	@ 0x60
 80070dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	e034      	b.n	800715e <HAL_PCD_EP_DB_Transmit+0x80a>
 80070f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007106:	3b01      	subs	r3, #1
 8007108:	663b      	str	r3, [r7, #96]	@ 0x60
 800710a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29a      	uxth	r2, r3
 8007110:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	4313      	orrs	r3, r2
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e018      	b.n	800715e <HAL_PCD_EP_DB_Transmit+0x80a>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d114      	bne.n	800715e <HAL_PCD_EP_DB_Transmit+0x80a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007142:	4413      	add	r3, r2
 8007144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	00da      	lsls	r2, r3, #3
 800714c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800714e:	4413      	add	r3, r2
 8007150:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007154:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007158:	b29a      	uxth	r2, r3
 800715a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6959      	ldr	r1, [r3, #20]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	895a      	ldrh	r2, [r3, #10]
 800716a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800716c:	b29b      	uxth	r3, r3
 800716e:	f006 fc90 	bl	800da92 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718c:	82fb      	strh	r3, [r7, #22]
 800718e:	8afb      	ldrh	r3, [r7, #22]
 8007190:	f083 0310 	eor.w	r3, r3, #16
 8007194:	82fb      	strh	r3, [r7, #22]
 8007196:	8afb      	ldrh	r3, [r7, #22]
 8007198:	f083 0320 	eor.w	r3, r3, #32
 800719c:	82fb      	strh	r3, [r7, #22]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	8afb      	ldrh	r3, [r7, #22]
 80071ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071be:	b29b      	uxth	r3, r3
 80071c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3798      	adds	r7, #152	@ 0x98
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	817b      	strh	r3, [r7, #10]
 80071da:	4613      	mov	r3, r2
 80071dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80071de:	897b      	ldrh	r3, [r7, #10]
 80071e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	f003 0207 	and.w	r2, r3, #7
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	3310      	adds	r3, #16
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e009      	b.n	8007216 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007202:	897a      	ldrh	r2, [r7, #10]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007216:	893b      	ldrh	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d107      	bne.n	800722c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2200      	movs	r2, #0
 8007220:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	b29a      	uxth	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	80da      	strh	r2, [r3, #6]
 800722a:	e00b      	b.n	8007244 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2201      	movs	r2, #1
 8007230:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	b29a      	uxth	r2, r3
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	b29a      	uxth	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007276:	b29b      	uxth	r3, r3
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800728a:	b29b      	uxth	r3, r3
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d141      	bne.n	800733a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072b6:	4b4b      	ldr	r3, [pc, #300]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c2:	d131      	bne.n	8007328 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072c4:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ca:	4a46      	ldr	r2, [pc, #280]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072d4:	4b43      	ldr	r3, [pc, #268]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072dc:	4a41      	ldr	r2, [pc, #260]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072e4:	4b40      	ldr	r3, [pc, #256]	@ (80073e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2232      	movs	r2, #50	@ 0x32
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	0c9b      	lsrs	r3, r3, #18
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072fa:	e002      	b.n	8007302 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007302:	4b38      	ldr	r3, [pc, #224]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800730e:	d102      	bne.n	8007316 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f2      	bne.n	80072fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007316:	4b33      	ldr	r3, [pc, #204]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d158      	bne.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e057      	b.n	80073d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007328:	4b2e      	ldr	r3, [pc, #184]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800732a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800732e:	4a2d      	ldr	r2, [pc, #180]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007338:	e04d      	b.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007340:	d141      	bne.n	80073c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007342:	4b28      	ldr	r3, [pc, #160]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800734e:	d131      	bne.n	80073b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007350:	4b24      	ldr	r3, [pc, #144]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007356:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007360:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007368:	4a1e      	ldr	r2, [pc, #120]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800736a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800736e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007370:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2232      	movs	r2, #50	@ 0x32
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	4a1c      	ldr	r2, [pc, #112]	@ (80073ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0c9b      	lsrs	r3, r3, #18
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007386:	e002      	b.n	800738e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b01      	subs	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800738e:	4b15      	ldr	r3, [pc, #84]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739a:	d102      	bne.n	80073a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f2      	bne.n	8007388 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073a2:	4b10      	ldr	r3, [pc, #64]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073ae:	d112      	bne.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e011      	b.n	80073d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073b4:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ba:	4a0a      	ldr	r2, [pc, #40]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80073c4:	e007      	b.n	80073d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80073c6:	4b07      	ldr	r3, [pc, #28]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80073ce:	4a05      	ldr	r2, [pc, #20]	@ (80073e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80073d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40007000 	.word	0x40007000
 80073e8:	20000000 	.word	0x20000000
 80073ec:	431bde83 	.word	0x431bde83

080073f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	4a04      	ldr	r2, [pc, #16]	@ (800740c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80073fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073fe:	6093      	str	r3, [r2, #8]
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40007000 	.word	0x40007000

08007410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e2fe      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d075      	beq.n	800751a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800742e:	4b97      	ldr	r3, [pc, #604]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 030c 	and.w	r3, r3, #12
 8007436:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007438:	4b94      	ldr	r3, [pc, #592]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d102      	bne.n	800744e <HAL_RCC_OscConfig+0x3e>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2b03      	cmp	r3, #3
 800744c:	d002      	beq.n	8007454 <HAL_RCC_OscConfig+0x44>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b08      	cmp	r3, #8
 8007452:	d10b      	bne.n	800746c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	4b8d      	ldr	r3, [pc, #564]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d05b      	beq.n	8007518 <HAL_RCC_OscConfig+0x108>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d157      	bne.n	8007518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e2d9      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007474:	d106      	bne.n	8007484 <HAL_RCC_OscConfig+0x74>
 8007476:	4b85      	ldr	r3, [pc, #532]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a84      	ldr	r2, [pc, #528]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800747c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e01d      	b.n	80074c0 <HAL_RCC_OscConfig+0xb0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800748c:	d10c      	bne.n	80074a8 <HAL_RCC_OscConfig+0x98>
 800748e:	4b7f      	ldr	r3, [pc, #508]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a7e      	ldr	r2, [pc, #504]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	4b7c      	ldr	r3, [pc, #496]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a7b      	ldr	r2, [pc, #492]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e00b      	b.n	80074c0 <HAL_RCC_OscConfig+0xb0>
 80074a8:	4b78      	ldr	r3, [pc, #480]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a77      	ldr	r2, [pc, #476]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4b75      	ldr	r3, [pc, #468]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a74      	ldr	r2, [pc, #464]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d013      	beq.n	80074f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fc fc56 	bl	8003d78 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fc fc52 	bl	8003d78 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b64      	cmp	r3, #100	@ 0x64
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e29e      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074e2:	4b6a      	ldr	r3, [pc, #424]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0xc0>
 80074ee:	e014      	b.n	800751a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fc fc42 	bl	8003d78 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f8:	f7fc fc3e 	bl	8003d78 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	@ 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e28a      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800750a:	4b60      	ldr	r3, [pc, #384]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f0      	bne.n	80074f8 <HAL_RCC_OscConfig+0xe8>
 8007516:	e000      	b.n	800751a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d075      	beq.n	8007612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007526:	4b59      	ldr	r3, [pc, #356]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 030c 	and.w	r3, r3, #12
 800752e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007530:	4b56      	ldr	r3, [pc, #344]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b0c      	cmp	r3, #12
 800753e:	d102      	bne.n	8007546 <HAL_RCC_OscConfig+0x136>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d002      	beq.n	800754c <HAL_RCC_OscConfig+0x13c>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b04      	cmp	r3, #4
 800754a:	d11f      	bne.n	800758c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800754c:	4b4f      	ldr	r3, [pc, #316]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_RCC_OscConfig+0x154>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e25d      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007564:	4b49      	ldr	r3, [pc, #292]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	061b      	lsls	r3, r3, #24
 8007572:	4946      	ldr	r1, [pc, #280]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007578:	4b45      	ldr	r3, [pc, #276]	@ (8007690 <HAL_RCC_OscConfig+0x280>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f7fc fbaf 	bl	8003ce0 <HAL_InitTick>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d043      	beq.n	8007610 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e249      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d023      	beq.n	80075dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007594:	4b3d      	ldr	r3, [pc, #244]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3c      	ldr	r2, [pc, #240]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800759a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fc fbea 	bl	8003d78 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a8:	f7fc fbe6 	bl	8003d78 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e232      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ba:	4b34      	ldr	r3, [pc, #208]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f0      	beq.n	80075a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c6:	4b31      	ldr	r3, [pc, #196]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	492d      	ldr	r1, [pc, #180]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	604b      	str	r3, [r1, #4]
 80075da:	e01a      	b.n	8007612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075dc:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2a      	ldr	r2, [pc, #168]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 80075e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e8:	f7fc fbc6 	bl	8003d78 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f0:	f7fc fbc2 	bl	8003d78 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e20e      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007602:	4b22      	ldr	r3, [pc, #136]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x1e0>
 800760e:	e000      	b.n	8007612 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d041      	beq.n	80076a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01c      	beq.n	8007660 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007626:	4b19      	ldr	r3, [pc, #100]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800762c:	4a17      	ldr	r2, [pc, #92]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007636:	f7fc fb9f 	bl	8003d78 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800763e:	f7fc fb9b 	bl	8003d78 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e1e7      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0ef      	beq.n	800763e <HAL_RCC_OscConfig+0x22e>
 800765e:	e020      	b.n	80076a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007660:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007666:	4a09      	ldr	r2, [pc, #36]	@ (800768c <HAL_RCC_OscConfig+0x27c>)
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007670:	f7fc fb82 	bl	8003d78 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007676:	e00d      	b.n	8007694 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007678:	f7fc fb7e 	bl	8003d78 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d906      	bls.n	8007694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e1ca      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
 800768a:	bf00      	nop
 800768c:	40021000 	.word	0x40021000
 8007690:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007694:	4b8c      	ldr	r3, [pc, #560]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1ea      	bne.n	8007678 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 80a6 	beq.w	80077fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076b0:	2300      	movs	r3, #0
 80076b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076b4:	4b84      	ldr	r3, [pc, #528]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_RCC_OscConfig+0x2b4>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e000      	b.n	80076c6 <HAL_RCC_OscConfig+0x2b6>
 80076c4:	2300      	movs	r3, #0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ca:	4b7f      	ldr	r3, [pc, #508]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	4a7e      	ldr	r2, [pc, #504]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80076d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80076d6:	4b7c      	ldr	r3, [pc, #496]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80076e2:	2301      	movs	r3, #1
 80076e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076e6:	4b79      	ldr	r3, [pc, #484]	@ (80078cc <HAL_RCC_OscConfig+0x4bc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d118      	bne.n	8007724 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076f2:	4b76      	ldr	r3, [pc, #472]	@ (80078cc <HAL_RCC_OscConfig+0x4bc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a75      	ldr	r2, [pc, #468]	@ (80078cc <HAL_RCC_OscConfig+0x4bc>)
 80076f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076fe:	f7fc fb3b 	bl	8003d78 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007706:	f7fc fb37 	bl	8003d78 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e183      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007718:	4b6c      	ldr	r3, [pc, #432]	@ (80078cc <HAL_RCC_OscConfig+0x4bc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f0      	beq.n	8007706 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d108      	bne.n	800773e <HAL_RCC_OscConfig+0x32e>
 800772c:	4b66      	ldr	r3, [pc, #408]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007732:	4a65      	ldr	r2, [pc, #404]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800773c:	e024      	b.n	8007788 <HAL_RCC_OscConfig+0x378>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b05      	cmp	r3, #5
 8007744:	d110      	bne.n	8007768 <HAL_RCC_OscConfig+0x358>
 8007746:	4b60      	ldr	r3, [pc, #384]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774c:	4a5e      	ldr	r2, [pc, #376]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800774e:	f043 0304 	orr.w	r3, r3, #4
 8007752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007756:	4b5c      	ldr	r3, [pc, #368]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775c:	4a5a      	ldr	r2, [pc, #360]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007766:	e00f      	b.n	8007788 <HAL_RCC_OscConfig+0x378>
 8007768:	4b57      	ldr	r3, [pc, #348]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776e:	4a56      	ldr	r2, [pc, #344]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007778:	4b53      	ldr	r3, [pc, #332]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	4a52      	ldr	r2, [pc, #328]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007780:	f023 0304 	bic.w	r3, r3, #4
 8007784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007790:	f7fc faf2 	bl	8003d78 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007796:	e00a      	b.n	80077ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007798:	f7fc faee 	bl	8003d78 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e138      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ae:	4b46      	ldr	r3, [pc, #280]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0ed      	beq.n	8007798 <HAL_RCC_OscConfig+0x388>
 80077bc:	e015      	b.n	80077ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fc fadb 	bl	8003d78 <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c6:	f7fc fad7 	bl	8003d78 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e121      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077dc:	4b3a      	ldr	r3, [pc, #232]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ed      	bne.n	80077c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077ea:	7ffb      	ldrb	r3, [r7, #31]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d105      	bne.n	80077fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f0:	4b35      	ldr	r3, [pc, #212]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80077f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f4:	4a34      	ldr	r2, [pc, #208]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d03c      	beq.n	8007882 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01c      	beq.n	800784a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007810:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007812:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007816:	4a2c      	ldr	r2, [pc, #176]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007820:	f7fc faaa 	bl	8003d78 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007828:	f7fc faa6 	bl	8003d78 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e0f2      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800783a:	4b23      	ldr	r3, [pc, #140]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800783c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0ef      	beq.n	8007828 <HAL_RCC_OscConfig+0x418>
 8007848:	e01b      	b.n	8007882 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800784a:	4b1f      	ldr	r3, [pc, #124]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800784c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007850:	4a1d      	ldr	r2, [pc, #116]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fc fa8d 	bl	8003d78 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007862:	f7fc fa89 	bl	8003d78 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e0d5      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007874:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 8007876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1ef      	bne.n	8007862 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80c9 	beq.w	8007a1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800788c:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b0c      	cmp	r3, #12
 8007896:	f000 8083 	beq.w	80079a0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d15e      	bne.n	8007960 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a2:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a08      	ldr	r2, [pc, #32]	@ (80078c8 <HAL_RCC_OscConfig+0x4b8>)
 80078a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fc fa63 	bl	8003d78 <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078b4:	e00c      	b.n	80078d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b6:	f7fc fa5f 	bl	8003d78 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d905      	bls.n	80078d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0ab      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
 80078c8:	40021000 	.word	0x40021000
 80078cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078d0:	4b55      	ldr	r3, [pc, #340]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ec      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078dc:	4b52      	ldr	r3, [pc, #328]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	4b52      	ldr	r3, [pc, #328]	@ (8007a2c <HAL_RCC_OscConfig+0x61c>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6a11      	ldr	r1, [r2, #32]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078ec:	3a01      	subs	r2, #1
 80078ee:	0112      	lsls	r2, r2, #4
 80078f0:	4311      	orrs	r1, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80078f6:	0212      	lsls	r2, r2, #8
 80078f8:	4311      	orrs	r1, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80078fe:	0852      	lsrs	r2, r2, #1
 8007900:	3a01      	subs	r2, #1
 8007902:	0552      	lsls	r2, r2, #21
 8007904:	4311      	orrs	r1, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800790a:	0852      	lsrs	r2, r2, #1
 800790c:	3a01      	subs	r2, #1
 800790e:	0652      	lsls	r2, r2, #25
 8007910:	4311      	orrs	r1, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007916:	06d2      	lsls	r2, r2, #27
 8007918:	430a      	orrs	r2, r1
 800791a:	4943      	ldr	r1, [pc, #268]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 800791c:	4313      	orrs	r3, r2
 800791e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007920:	4b41      	ldr	r3, [pc, #260]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a40      	ldr	r2, [pc, #256]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800792a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800792c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4a3d      	ldr	r2, [pc, #244]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007936:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fc fa1e 	bl	8003d78 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007940:	f7fc fa1a 	bl	8003d78 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e066      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007952:	4b35      	ldr	r3, [pc, #212]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f0      	beq.n	8007940 <HAL_RCC_OscConfig+0x530>
 800795e:	e05e      	b.n	8007a1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007960:	4b31      	ldr	r3, [pc, #196]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a30      	ldr	r2, [pc, #192]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800796a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796c:	f7fc fa04 	bl	8003d78 <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007974:	f7fc fa00 	bl	8003d78 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e04c      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007986:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f0      	bne.n	8007974 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007992:	4b25      	ldr	r3, [pc, #148]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	4924      	ldr	r1, [pc, #144]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 8007998:	4b25      	ldr	r3, [pc, #148]	@ (8007a30 <HAL_RCC_OscConfig+0x620>)
 800799a:	4013      	ands	r3, r2
 800799c:	60cb      	str	r3, [r1, #12]
 800799e:	e03e      	b.n	8007a1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e039      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80079ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007a28 <HAL_RCC_OscConfig+0x618>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f003 0203 	and.w	r2, r3, #3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d12c      	bne.n	8007a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	3b01      	subs	r3, #1
 80079cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d123      	bne.n	8007a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079de:	429a      	cmp	r2, r3
 80079e0:	d11b      	bne.n	8007a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d113      	bne.n	8007a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	3b01      	subs	r3, #1
 8007a00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d109      	bne.n	8007a1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	3b01      	subs	r3, #1
 8007a14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d001      	beq.n	8007a1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	019f800c 	.word	0x019f800c
 8007a30:	feeefffc 	.word	0xfeeefffc

08007a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e11e      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b91      	ldr	r3, [pc, #580]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d910      	bls.n	8007a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f023 020f 	bic.w	r2, r3, #15
 8007a62:	498c      	ldr	r1, [pc, #560]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e106      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d073      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d129      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a90:	4b81      	ldr	r3, [pc, #516]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0f4      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007aa0:	f000 f99e 	bl	8007de0 <RCC_GetSysClockFreqFromPLLSource>
 8007aa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4a7c      	ldr	r2, [pc, #496]	@ (8007c9c <HAL_RCC_ClockConfig+0x268>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d93f      	bls.n	8007b2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007aae:	4b7a      	ldr	r3, [pc, #488]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d033      	beq.n	8007b2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d12f      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ace:	4b72      	ldr	r3, [pc, #456]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ad6:	4a70      	ldr	r2, [pc, #448]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007adc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ade:	2380      	movs	r3, #128	@ 0x80
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e024      	b.n	8007b2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d107      	bne.n	8007afc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aec:	4b6a      	ldr	r3, [pc, #424]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0c6      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007afc:	4b66      	ldr	r3, [pc, #408]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0be      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b0c:	f000 f8ce 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4a61      	ldr	r2, [pc, #388]	@ (8007c9c <HAL_RCC_ClockConfig+0x268>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d909      	bls.n	8007b2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b22:	4a5d      	ldr	r2, [pc, #372]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007b2a:	2380      	movs	r3, #128	@ 0x80
 8007b2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 0203 	bic.w	r2, r3, #3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	4957      	ldr	r1, [pc, #348]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b40:	f7fc f91a 	bl	8003d78 <HAL_GetTick>
 8007b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b46:	e00a      	b.n	8007b5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b48:	f7fc f916 	bl	8003d78 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e095      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 020c 	and.w	r2, r3, #12
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d1eb      	bne.n	8007b48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d023      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b88:	4b43      	ldr	r3, [pc, #268]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4a42      	ldr	r2, [pc, #264]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007b8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d007      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb0:	4b39      	ldr	r3, [pc, #228]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	4936      	ldr	r1, [pc, #216]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	608b      	str	r3, [r1, #8]
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b80      	cmp	r3, #128	@ 0x80
 8007bc8:	d105      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	4a32      	ldr	r2, [pc, #200]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007bd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d21d      	bcs.n	8007c20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f023 020f 	bic.w	r2, r3, #15
 8007bec:	4929      	ldr	r1, [pc, #164]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007bf4:	f7fc f8c0 	bl	8003d78 <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfa:	e00a      	b.n	8007c12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bfc:	f7fc f8bc 	bl	8003d78 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d901      	bls.n	8007c12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e03b      	b.n	8007c8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c12:	4b20      	ldr	r3, [pc, #128]	@ (8007c94 <HAL_RCC_ClockConfig+0x260>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d1ed      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4917      	ldr	r1, [pc, #92]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c4a:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	490f      	ldr	r1, [pc, #60]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c5e:	f000 f825 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b0c      	ldr	r3, [pc, #48]	@ (8007c98 <HAL_RCC_ClockConfig+0x264>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	490c      	ldr	r1, [pc, #48]	@ (8007ca0 <HAL_RCC_ClockConfig+0x26c>)
 8007c70:	5ccb      	ldrb	r3, [r1, r3]
 8007c72:	f003 031f 	and.w	r3, r3, #31
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007ca4 <HAL_RCC_ClockConfig+0x270>)
 8007c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <HAL_RCC_ClockConfig+0x274>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fc f82c 	bl	8003ce0 <HAL_InitTick>
 8007c88:	4603      	mov	r3, r0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40022000 	.word	0x40022000
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	04c4b400 	.word	0x04c4b400
 8007ca0:	08010920 	.word	0x08010920
 8007ca4:	20000000 	.word	0x20000000
 8007ca8:	20000004 	.word	0x20000004

08007cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 030c 	and.w	r3, r3, #12
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d102      	bne.n	8007cc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e047      	b.n	8007d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007cc4:	4b27      	ldr	r3, [pc, #156]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 030c 	and.w	r3, r3, #12
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cd0:	4b26      	ldr	r3, [pc, #152]	@ (8007d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	e03e      	b.n	8007d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007cd6:	4b23      	ldr	r3, [pc, #140]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	2b0c      	cmp	r3, #12
 8007ce0:	d136      	bne.n	8007d50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ce2:	4b20      	ldr	r3, [pc, #128]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cec:	4b1d      	ldr	r3, [pc, #116]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	091b      	lsrs	r3, r3, #4
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d10c      	bne.n	8007d1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d00:	4a1a      	ldr	r2, [pc, #104]	@ (8007d6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	4a16      	ldr	r2, [pc, #88]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d0a:	68d2      	ldr	r2, [r2, #12]
 8007d0c:	0a12      	lsrs	r2, r2, #8
 8007d0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	617b      	str	r3, [r7, #20]
      break;
 8007d18:	e00c      	b.n	8007d34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d1a:	4a13      	ldr	r2, [pc, #76]	@ (8007d68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	4a10      	ldr	r2, [pc, #64]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d24:	68d2      	ldr	r2, [r2, #12]
 8007d26:	0a12      	lsrs	r2, r2, #8
 8007d28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]
      break;
 8007d32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	0e5b      	lsrs	r3, r3, #25
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	3301      	adds	r3, #1
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	e001      	b.n	8007d54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007d54:	693b      	ldr	r3, [r7, #16]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40021000 	.word	0x40021000
 8007d68:	00f42400 	.word	0x00f42400
 8007d6c:	016e3600 	.word	0x016e3600

08007d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d74:	4b03      	ldr	r3, [pc, #12]	@ (8007d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d76:	681b      	ldr	r3, [r3, #0]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20000000 	.word	0x20000000

08007d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d8c:	f7ff fff0 	bl	8007d70 <HAL_RCC_GetHCLKFreq>
 8007d90:	4602      	mov	r2, r0
 8007d92:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	4904      	ldr	r1, [pc, #16]	@ (8007db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d9e:	5ccb      	ldrb	r3, [r1, r3]
 8007da0:	f003 031f 	and.w	r3, r3, #31
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40021000 	.word	0x40021000
 8007db0:	08010930 	.word	0x08010930

08007db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007db8:	f7ff ffda 	bl	8007d70 <HAL_RCC_GetHCLKFreq>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	0adb      	lsrs	r3, r3, #11
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4904      	ldr	r1, [pc, #16]	@ (8007ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dca:	5ccb      	ldrb	r3, [r1, r3]
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	08010930 	.word	0x08010930

08007de0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007de6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007df0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d10c      	bne.n	8007e1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e04:	4a17      	ldr	r2, [pc, #92]	@ (8007e64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0c:	4a14      	ldr	r2, [pc, #80]	@ (8007e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e0e:	68d2      	ldr	r2, [r2, #12]
 8007e10:	0a12      	lsrs	r2, r2, #8
 8007e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
 8007e1a:	617b      	str	r3, [r7, #20]
    break;
 8007e1c:	e00c      	b.n	8007e38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e1e:	4a12      	ldr	r2, [pc, #72]	@ (8007e68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e26:	4a0e      	ldr	r2, [pc, #56]	@ (8007e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e28:	68d2      	ldr	r2, [r2, #12]
 8007e2a:	0a12      	lsrs	r2, r2, #8
 8007e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e30:	fb02 f303 	mul.w	r3, r2, r3
 8007e34:	617b      	str	r3, [r7, #20]
    break;
 8007e36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e38:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	0e5b      	lsrs	r3, r3, #25
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	3301      	adds	r3, #1
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e52:	687b      	ldr	r3, [r7, #4]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40021000 	.word	0x40021000
 8007e64:	016e3600 	.word	0x016e3600
 8007e68:	00f42400 	.word	0x00f42400

08007e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e74:	2300      	movs	r3, #0
 8007e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e78:	2300      	movs	r3, #0
 8007e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8098 	beq.w	8007fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e8e:	4b43      	ldr	r3, [pc, #268]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10d      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e9a:	4b40      	ldr	r3, [pc, #256]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eae:	60bb      	str	r3, [r7, #8]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a39      	ldr	r2, [pc, #228]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ec2:	f7fb ff59 	bl	8003d78 <HAL_GetTick>
 8007ec6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec8:	e009      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eca:	f7fb ff55 	bl	8003d78 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d902      	bls.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	74fb      	strb	r3, [r7, #19]
        break;
 8007edc:	e005      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ede:	4b30      	ldr	r3, [pc, #192]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0ef      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007eea:	7cfb      	ldrb	r3, [r7, #19]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d159      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007efa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d01e      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d019      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f0c:	4b23      	ldr	r3, [pc, #140]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f18:	4b20      	ldr	r3, [pc, #128]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f28:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f38:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d016      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4a:	f7fb ff15 	bl	8003d78 <HAL_GetTick>
 8007f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f50:	e00b      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f52:	f7fb ff11 	bl	8003d78 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d902      	bls.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	74fb      	strb	r3, [r7, #19]
            break;
 8007f68:	e006      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0ec      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007f78:	7cfb      	ldrb	r3, [r7, #19]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f7e:	4b07      	ldr	r3, [pc, #28]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f8c:	4903      	ldr	r1, [pc, #12]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007f94:	e008      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f96:	7cfb      	ldrb	r3, [r7, #19]
 8007f98:	74bb      	strb	r3, [r7, #18]
 8007f9a:	e005      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fa8:	7c7b      	ldrb	r3, [r7, #17]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d105      	bne.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fae:	4ba7      	ldr	r3, [pc, #668]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb2:	4aa6      	ldr	r2, [pc, #664]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fb8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fc6:	4ba1      	ldr	r3, [pc, #644]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fcc:	f023 0203 	bic.w	r2, r3, #3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	499d      	ldr	r1, [pc, #628]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007fe8:	4b98      	ldr	r3, [pc, #608]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fee:	f023 020c 	bic.w	r2, r3, #12
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	4995      	ldr	r1, [pc, #596]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800800a:	4b90      	ldr	r3, [pc, #576]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008010:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	498c      	ldr	r1, [pc, #560]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800802c:	4b87      	ldr	r3, [pc, #540]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008032:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	4984      	ldr	r1, [pc, #528]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800803c:	4313      	orrs	r3, r2
 800803e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800804e:	4b7f      	ldr	r3, [pc, #508]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	497b      	ldr	r1, [pc, #492]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0320 	and.w	r3, r3, #32
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008070:	4b76      	ldr	r3, [pc, #472]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008076:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	4973      	ldr	r1, [pc, #460]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008080:	4313      	orrs	r3, r2
 8008082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008092:	4b6e      	ldr	r3, [pc, #440]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008098:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	496a      	ldr	r1, [pc, #424]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080b4:	4b65      	ldr	r3, [pc, #404]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	4962      	ldr	r1, [pc, #392]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080d6:	4b5d      	ldr	r3, [pc, #372]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	4959      	ldr	r1, [pc, #356]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080f8:	4b54      	ldr	r3, [pc, #336]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080fe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	4951      	ldr	r1, [pc, #324]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008108:	4313      	orrs	r3, r2
 800810a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008116:	2b00      	cmp	r3, #0
 8008118:	d015      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800811a:	4b4c      	ldr	r3, [pc, #304]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008120:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	4948      	ldr	r1, [pc, #288]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008138:	d105      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800813a:	4b44      	ldr	r3, [pc, #272]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	4a43      	ldr	r2, [pc, #268]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008144:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800814e:	2b00      	cmp	r3, #0
 8008150:	d015      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008152:	4b3e      	ldr	r3, [pc, #248]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008158:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008160:	493a      	ldr	r1, [pc, #232]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008170:	d105      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008172:	4b36      	ldr	r3, [pc, #216]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	4a35      	ldr	r2, [pc, #212]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800817c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800818a:	4b30      	ldr	r3, [pc, #192]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008190:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008198:	492c      	ldr	r1, [pc, #176]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081a8:	d105      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081aa:	4b28      	ldr	r3, [pc, #160]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	4a27      	ldr	r2, [pc, #156]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081b4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d015      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081c2:	4b22      	ldr	r3, [pc, #136]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d0:	491e      	ldr	r1, [pc, #120]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e0:	d105      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081e2:	4b1a      	ldr	r3, [pc, #104]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	4a19      	ldr	r2, [pc, #100]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ec:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081fa:	4b14      	ldr	r3, [pc, #80]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008200:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008208:	4910      	ldr	r1, [pc, #64]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800820a:	4313      	orrs	r3, r2
 800820c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008218:	d105      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800821a:	4b0c      	ldr	r3, [pc, #48]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	4a0b      	ldr	r2, [pc, #44]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008220:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008224:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d018      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008232:	4b06      	ldr	r3, [pc, #24]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008238:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	4902      	ldr	r1, [pc, #8]	@ (800824c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008242:	4313      	orrs	r3, r2
 8008244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	e001      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800824c:	40021000 	.word	0x40021000
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008256:	d105      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008258:	4b21      	ldr	r3, [pc, #132]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	4a20      	ldr	r2, [pc, #128]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800825e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008262:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d015      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008270:	4b1b      	ldr	r3, [pc, #108]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008276:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827e:	4918      	ldr	r1, [pc, #96]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800828e:	d105      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008290:	4b13      	ldr	r3, [pc, #76]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	4a12      	ldr	r2, [pc, #72]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800829a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d015      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082a8:	4b0d      	ldr	r3, [pc, #52]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80082aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b6:	490a      	ldr	r1, [pc, #40]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082c6:	d105      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082c8:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4a04      	ldr	r2, [pc, #16]	@ (80082e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80082ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80082d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40021000 	.word	0x40021000

080082e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80082f6:	d136      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80082f8:	4bb3      	ldr	r3, [pc, #716]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008302:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008304:	4bb0      	ldr	r3, [pc, #704]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b02      	cmp	r3, #2
 8008310:	d108      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008318:	d104      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800831a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	f000 bce6 	b.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008324:	4ba8      	ldr	r3, [pc, #672]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	d108      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008338:	d104      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800833a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	f000 bcd6 	b.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008344:	4ba0      	ldr	r3, [pc, #640]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800834c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008350:	f040 84ce 	bne.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800835a:	f040 84c9 	bne.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 800835e:	4b9b      	ldr	r3, [pc, #620]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	f000 bcc5 	b.w	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8008366:	4b98      	ldr	r3, [pc, #608]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d10c      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008372:	4b95      	ldr	r3, [pc, #596]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800837e:	d102      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8008380:	4b93      	ldr	r3, [pc, #588]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e017      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	e014      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800838c:	4b8e      	ldr	r3, [pc, #568]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	2b03      	cmp	r3, #3
 8008396:	d10c      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008398:	4b8b      	ldr	r3, [pc, #556]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a4:	d102      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 80083a6:	4b8b      	ldr	r3, [pc, #556]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e004      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e001      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80083b6:	4b84      	ldr	r3, [pc, #528]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	091b      	lsrs	r3, r3, #4
 80083bc:	f003 030f 	and.w	r3, r3, #15
 80083c0:	3301      	adds	r3, #1
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c8:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083d0:	f000 843c 	beq.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083da:	f200 8464 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e4:	f000 83f7 	beq.w	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ee:	f200 845a 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083f8:	f000 83b0 	beq.w	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008402:	f200 8450 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800840c:	f000 8378 	beq.w	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008416:	f200 8446 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008420:	f000 8335 	beq.w	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800842a:	f200 843c 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008434:	f000 82f6 	beq.w	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843e:	f200 8432 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008448:	f000 82a8 	beq.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008452:	f200 8428 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845c:	f000 825a 	beq.w	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008466:	f200 841e 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008470:	f000 8214 	beq.w	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800847a:	f200 8414 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008484:	f000 81e0 	beq.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800848e:	f200 840a 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b80      	cmp	r3, #128	@ 0x80
 8008496:	f000 81b2 	beq.w	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b80      	cmp	r3, #128	@ 0x80
 800849e:	f200 8402 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d84b      	bhi.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 83fb 	beq.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	2b1f      	cmp	r3, #31
 80084b6:	f200 83f6 	bhi.w	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80084ba:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	0800854b 	.word	0x0800854b
 80084c4:	080085ad 	.word	0x080085ad
 80084c8:	08008ca7 	.word	0x08008ca7
 80084cc:	08008621 	.word	0x08008621
 80084d0:	08008ca7 	.word	0x08008ca7
 80084d4:	08008ca7 	.word	0x08008ca7
 80084d8:	08008ca7 	.word	0x08008ca7
 80084dc:	08008683 	.word	0x08008683
 80084e0:	08008ca7 	.word	0x08008ca7
 80084e4:	08008ca7 	.word	0x08008ca7
 80084e8:	08008ca7 	.word	0x08008ca7
 80084ec:	08008ca7 	.word	0x08008ca7
 80084f0:	08008ca7 	.word	0x08008ca7
 80084f4:	08008ca7 	.word	0x08008ca7
 80084f8:	08008ca7 	.word	0x08008ca7
 80084fc:	080086e5 	.word	0x080086e5
 8008500:	08008ca7 	.word	0x08008ca7
 8008504:	08008ca7 	.word	0x08008ca7
 8008508:	08008ca7 	.word	0x08008ca7
 800850c:	08008ca7 	.word	0x08008ca7
 8008510:	08008ca7 	.word	0x08008ca7
 8008514:	08008ca7 	.word	0x08008ca7
 8008518:	08008ca7 	.word	0x08008ca7
 800851c:	08008ca7 	.word	0x08008ca7
 8008520:	08008ca7 	.word	0x08008ca7
 8008524:	08008ca7 	.word	0x08008ca7
 8008528:	08008ca7 	.word	0x08008ca7
 800852c:	08008ca7 	.word	0x08008ca7
 8008530:	08008ca7 	.word	0x08008ca7
 8008534:	08008ca7 	.word	0x08008ca7
 8008538:	08008ca7 	.word	0x08008ca7
 800853c:	0800874d 	.word	0x0800874d
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	f000 8136 	beq.w	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 8008548:	e3ad      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800854a:	4b1f      	ldr	r3, [pc, #124]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d103      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 800855c:	f7ff fc2a 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 8008560:	61f8      	str	r0, [r7, #28]
      break;
 8008562:	e3a2      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d103      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 800856a:	f7ff fb9f 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800856e:	61f8      	str	r0, [r7, #28]
      break;
 8008570:	e39b      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8008572:	4b15      	ldr	r3, [pc, #84]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800857e:	d105      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d102      	bne.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8008588:	61fb      	str	r3, [r7, #28]
      break;
 800858a:	e38e      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800858c:	4b0e      	ldr	r3, [pc, #56]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800858e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b02      	cmp	r3, #2
 8008598:	f040 8387 	bne.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f040 8383 	bne.w	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 80085a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085a8:	61fb      	str	r3, [r7, #28]
      break;
 80085aa:	e37e      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80085be:	f7ff fbe3 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 80085c2:	61f8      	str	r0, [r7, #28]
      break;
 80085c4:	e373      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 80085c6:	bf00      	nop
 80085c8:	40021000 	.word	0x40021000
 80085cc:	000b71b0 	.word	0x000b71b0
 80085d0:	00f42400 	.word	0x00f42400
 80085d4:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d103      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 80085de:	f7ff fb65 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 80085e2:	61f8      	str	r0, [r7, #28]
      break;
 80085e4:	e363      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80085e6:	4ba3      	ldr	r3, [pc, #652]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f2:	d105      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d102      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 80085fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80085fc:	61fb      	str	r3, [r7, #28]
      break;
 80085fe:	e356      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008600:	4b9c      	ldr	r3, [pc, #624]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b02      	cmp	r3, #2
 800860c:	f040 834f 	bne.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2b0c      	cmp	r3, #12
 8008614:	f040 834b 	bne.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 8008618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800861c:	61fb      	str	r3, [r7, #28]
      break;
 800861e:	e346      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008620:	4b94      	ldr	r3, [pc, #592]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008626:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800862a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d103      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008632:	f7ff fba9 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 8008636:	61f8      	str	r0, [r7, #28]
      break;
 8008638:	e33b      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b10      	cmp	r3, #16
 800863e:	d103      	bne.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8008640:	f7ff fb34 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008644:	61f8      	str	r0, [r7, #28]
      break;
 8008646:	e334      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008648:	4b8a      	ldr	r3, [pc, #552]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008654:	d105      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	2b20      	cmp	r3, #32
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 800865c:	4b86      	ldr	r3, [pc, #536]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800865e:	61fb      	str	r3, [r7, #28]
      break;
 8008660:	e327      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008662:	4b84      	ldr	r3, [pc, #528]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b02      	cmp	r3, #2
 800866e:	f040 8320 	bne.w	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b30      	cmp	r3, #48	@ 0x30
 8008676:	f040 831c 	bne.w	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 800867a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800867e:	61fb      	str	r3, [r7, #28]
      break;
 8008680:	e317      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008682:	4b7c      	ldr	r3, [pc, #496]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008688:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800868c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008694:	f7ff fb78 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 8008698:	61f8      	str	r0, [r7, #28]
      break;
 800869a:	e30c      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b40      	cmp	r3, #64	@ 0x40
 80086a0:	d103      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 80086a2:	f7ff fb03 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 80086a6:	61f8      	str	r0, [r7, #28]
      break;
 80086a8:	e305      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80086aa:	4b72      	ldr	r3, [pc, #456]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b6:	d105      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b80      	cmp	r3, #128	@ 0x80
 80086bc:	d102      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 80086be:	4b6e      	ldr	r3, [pc, #440]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80086c0:	61fb      	str	r3, [r7, #28]
      break;
 80086c2:	e2f8      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80086c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	f040 82f1 	bne.w	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80086d8:	f040 82ed 	bne.w	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 80086dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086e0:	61fb      	str	r3, [r7, #28]
      break;
 80086e2:	e2e8      	b.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80086e4:	4b63      	ldr	r3, [pc, #396]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ee:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80086f6:	f7ff fb47 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 80086fa:	61f8      	str	r0, [r7, #28]
      break;
 80086fc:	e2dd      	b.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008704:	d103      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008706:	f7ff fad1 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800870a:	61f8      	str	r0, [r7, #28]
      break;
 800870c:	e2d5      	b.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800870e:	4b59      	ldr	r3, [pc, #356]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800871a:	d106      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008722:	d102      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8008724:	4b54      	ldr	r3, [pc, #336]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008726:	61fb      	str	r3, [r7, #28]
      break;
 8008728:	e2c7      	b.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800872a:	4b52      	ldr	r3, [pc, #328]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b02      	cmp	r3, #2
 8008736:	f040 82c0 	bne.w	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008740:	f040 82bb 	bne.w	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8008744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008748:	61fb      	str	r3, [r7, #28]
      break;
 800874a:	e2b6      	b.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800874c:	4b49      	ldr	r3, [pc, #292]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008752:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008756:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 800875e:	f7ff fb13 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 8008762:	61f8      	str	r0, [r7, #28]
      break;
 8008764:	e2ab      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876c:	d103      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 800876e:	f7ff fa9d 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008772:	61f8      	str	r0, [r7, #28]
      break;
 8008774:	e2a3      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008776:	4b3f      	ldr	r3, [pc, #252]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800877e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008782:	d106      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800878a:	d102      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 800878c:	4b3a      	ldr	r3, [pc, #232]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800878e:	61fb      	str	r3, [r7, #28]
      break;
 8008790:	e295      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008792:	4b38      	ldr	r3, [pc, #224]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b02      	cmp	r3, #2
 800879e:	f040 828e 	bne.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087a8:	f040 8289 	bne.w	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 80087ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087b0:	61fb      	str	r3, [r7, #28]
      break;
 80087b2:	e284      	b.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80087b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80087be:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d103      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 80087c6:	f7ff fadf 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 80087ca:	61f8      	str	r0, [r7, #28]
      break;
 80087cc:	e279      	b.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d4:	d103      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 80087d6:	f7ff fa69 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 80087da:	61f8      	str	r0, [r7, #28]
      break;
 80087dc:	e271      	b.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80087de:	4b25      	ldr	r3, [pc, #148]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ea:	f040 826a 	bne.w	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087f4:	f040 8265 	bne.w	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 80087f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80087fa:	61fb      	str	r3, [r7, #28]
      break;
 80087fc:	e261      	b.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80087fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008804:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008808:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008810:	f7ff faba 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 8008814:	61f8      	str	r0, [r7, #28]
      break;
 8008816:	e256      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800881e:	d103      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8008820:	f7ff fa44 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008824:	61f8      	str	r0, [r7, #28]
      break;
 8008826:	e24e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008828:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008834:	f040 8247 	bne.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800883e:	f040 8242 	bne.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8008842:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008844:	61fb      	str	r3, [r7, #28]
      break;
 8008846:	e23e      	b.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008848:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800884a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800884e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008852:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d103      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800885a:	f7ff fa95 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 800885e:	61f8      	str	r0, [r7, #28]
      break;
 8008860:	e233      	b.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008868:	d108      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 800886a:	f7ff fa1f 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800886e:	61f8      	str	r0, [r7, #28]
      break;
 8008870:	e22b      	b.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8008872:	bf00      	nop
 8008874:	40021000 	.word	0x40021000
 8008878:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800887c:	4b9b      	ldr	r3, [pc, #620]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008888:	f040 821f 	bne.w	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008892:	f040 821a 	bne.w	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8008896:	4b96      	ldr	r3, [pc, #600]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008898:	61fb      	str	r3, [r7, #28]
      break;
 800889a:	e216      	b.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800889c:	4b93      	ldr	r3, [pc, #588]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800889e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80088a6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 80088ae:	f7ff fa6b 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 80088b2:	61f8      	str	r0, [r7, #28]
      break;
 80088b4:	e20b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80088b6:	4b8d      	ldr	r3, [pc, #564]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80088b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d107      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ca:	d103      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 80088cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80088d0:	61fb      	str	r3, [r7, #28]
 80088d2:	e01e      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80088d4:	4b85      	ldr	r3, [pc, #532]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088e0:	d106      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088e8:	d102      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 80088ea:	4b81      	ldr	r3, [pc, #516]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	e010      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80088f0:	4b7e      	ldr	r3, [pc, #504]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80088f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	f040 81e7 	bne.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008906:	f040 81e2 	bne.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 800890a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800890e:	61fb      	str	r3, [r7, #28]
      break;
 8008910:	e1dd      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8008912:	e1dc      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008914:	4b75      	ldr	r3, [pc, #468]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800891e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008926:	f7ff f9c1 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800892a:	61f8      	str	r0, [r7, #28]
      break;
 800892c:	e1d1      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008934:	d11b      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008936:	4b6d      	ldr	r3, [pc, #436]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 81c7 	beq.w	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008944:	4b69      	ldr	r3, [pc, #420]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	0a1b      	lsrs	r3, r3, #8
 800894a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800894e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	fb03 f202 	mul.w	r2, r3, r2
 8008958:	4b64      	ldr	r3, [pc, #400]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	0d5b      	lsrs	r3, r3, #21
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	3301      	adds	r3, #1
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	fbb2 f3f3 	udiv	r3, r2, r3
 800896a:	61fb      	str	r3, [r7, #28]
      break;
 800896c:	e1b1      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008976:	4b5f      	ldr	r3, [pc, #380]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008978:	61fb      	str	r3, [r7, #28]
      break;
 800897a:	e1aa      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800897c:	4b5b      	ldr	r3, [pc, #364]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008988:	f040 81a3 	bne.w	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008992:	f040 819e 	bne.w	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8008996:	4b56      	ldr	r3, [pc, #344]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008998:	61fb      	str	r3, [r7, #28]
      break;
 800899a:	e19a      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800899c:	4b53      	ldr	r3, [pc, #332]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80089a6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 80089ae:	f7ff f97d 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 80089b2:	61f8      	str	r0, [r7, #28]
      break;
 80089b4:	e18f      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089bc:	d11b      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80089be:	4b4b      	ldr	r3, [pc, #300]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8185 	beq.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80089cc:	4b47      	ldr	r3, [pc, #284]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089d6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	fb03 f202 	mul.w	r2, r3, r2
 80089e0:	4b42      	ldr	r3, [pc, #264]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	0d5b      	lsrs	r3, r3, #21
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	3301      	adds	r3, #1
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	61fb      	str	r3, [r7, #28]
      break;
 80089f4:	e16f      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089fc:	d102      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 80089fe:	4b3d      	ldr	r3, [pc, #244]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8008a00:	61fb      	str	r3, [r7, #28]
      break;
 8008a02:	e168      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8008a04:	4b39      	ldr	r3, [pc, #228]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a10:	f040 8161 	bne.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008a1a:	f040 815c 	bne.w	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 8008a1e:	4b34      	ldr	r3, [pc, #208]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8008a20:	61fb      	str	r3, [r7, #28]
      break;
 8008a22:	e158      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008a24:	4b31      	ldr	r3, [pc, #196]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008a2e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a36:	d103      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7ff f9a6 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 8008a3c:	61f8      	str	r0, [r7, #28]
      break;
 8008a3e:	e14c      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8008a46:	4b2c      	ldr	r3, [pc, #176]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8008a48:	61fb      	str	r3, [r7, #28]
      break;
 8008a4a:	e146      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a52:	f040 8142 	bne.w	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8008a56:	4b25      	ldr	r3, [pc, #148]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 813b 	beq.w	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a64:	4b21      	ldr	r3, [pc, #132]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	fb03 f202 	mul.w	r2, r3, r2
 8008a78:	4b1c      	ldr	r3, [pc, #112]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	0d5b      	lsrs	r3, r3, #21
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	3301      	adds	r3, #1
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	61fb      	str	r3, [r7, #28]
      break;
 8008a8c:	e125      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008a8e:	4b17      	ldr	r3, [pc, #92]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a94:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008a98:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa0:	d114      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008aa2:	4b12      	ldr	r3, [pc, #72]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aac:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	fb03 f202 	mul.w	r2, r3, r2
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	0d5b      	lsrs	r3, r3, #21
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac8:	61fb      	str	r3, [r7, #28]
      break;
 8008aca:	e108      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8008acc:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	f040 8101 	bne.w	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f040 80fd 	bne.w	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 8008ae4:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008ae6:	61fb      	str	r3, [r7, #28]
      break;
 8008ae8:	e0f9      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000
 8008af0:	00f42400 	.word	0x00f42400
 8008af4:	00bb8000 	.word	0x00bb8000
 8008af8:	016e3600 	.word	0x016e3600
 8008afc:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008b00:	4b7e      	ldr	r3, [pc, #504]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b06:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008b0a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b12:	d114      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b14:	4b79      	ldr	r3, [pc, #484]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	0a1b      	lsrs	r3, r3, #8
 8008b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b1e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	fb03 f202 	mul.w	r2, r3, r2
 8008b28:	4b74      	ldr	r3, [pc, #464]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	0d5b      	lsrs	r3, r3, #21
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	3301      	adds	r3, #1
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3a:	61fb      	str	r3, [r7, #28]
      break;
 8008b3c:	e0d1      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8008b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	f040 80ca 	bne.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 80c6 	bne.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8008b56:	4b6a      	ldr	r3, [pc, #424]	@ (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8008b58:	61fb      	str	r3, [r7, #28]
      break;
 8008b5a:	e0c2      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8008b5c:	4b67      	ldr	r3, [pc, #412]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b66:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b6e:	d129      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008b70:	4b62      	ldr	r3, [pc, #392]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80b4 	beq.w	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b88:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	0edb      	lsrs	r3, r3, #27
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b9c:	4b57      	ldr	r3, [pc, #348]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008ba8:	2311      	movs	r3, #17
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e001      	b.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 8008bae:	2307      	movs	r3, #7
 8008bb0:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	fb03 f202 	mul.w	r2, r3, r2
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	61fb      	str	r3, [r7, #28]
      break;
 8008bc2:	e090      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bca:	f040 808c 	bne.w	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 8008bce:	f7ff f86d 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008bd2:	61f8      	str	r0, [r7, #28]
      break;
 8008bd4:	e087      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8008bd6:	4b49      	ldr	r3, [pc, #292]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bdc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008be0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be8:	d128      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008bea:	4b44      	ldr	r3, [pc, #272]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d079      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008bf6:	4b41      	ldr	r3, [pc, #260]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c00:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008c02:	4b3e      	ldr	r3, [pc, #248]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	0edb      	lsrs	r3, r3, #27
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008c14:	4b39      	ldr	r3, [pc, #228]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 8008c20:	2311      	movs	r3, #17
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e001      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 8008c26:	2307      	movs	r3, #7
 8008c28:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	fb03 f202 	mul.w	r2, r3, r2
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	61fb      	str	r3, [r7, #28]
      break;
 8008c3a:	e056      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c42:	d152      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 8008c44:	f7ff f832 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008c48:	61f8      	str	r0, [r7, #28]
      break;
 8008c4a:	e04e      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8008c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008c56:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c5e:	d114      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c60:	4b26      	ldr	r3, [pc, #152]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	fb03 f202 	mul.w	r2, r3, r2
 8008c74:	4b21      	ldr	r3, [pc, #132]	@ (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	0d5b      	lsrs	r3, r3, #21
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	3301      	adds	r3, #1
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	61fb      	str	r3, [r7, #28]
      break;
 8008c88:	e031      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c90:	d102      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8008c92:	4b1c      	ldr	r3, [pc, #112]	@ (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8008c94:	61fb      	str	r3, [r7, #28]
      break;
 8008c96:	e02a      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d127      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 8008c9e:	f7ff f805 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 8008ca2:	61f8      	str	r0, [r7, #28]
      break;
 8008ca4:	e023      	b.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e022      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008caa:	bf00      	nop
 8008cac:	e020      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cae:	bf00      	nop
 8008cb0:	e01e      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cb2:	bf00      	nop
 8008cb4:	e01c      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cb6:	bf00      	nop
 8008cb8:	e01a      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cba:	bf00      	nop
 8008cbc:	e018      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cbe:	bf00      	nop
 8008cc0:	e016      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e014      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e012      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e010      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e00e      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e00c      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cd6:	bf00      	nop
 8008cd8:	e00a      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cda:	bf00      	nop
 8008cdc:	e008      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e006      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ce2:	bf00      	nop
 8008ce4:	e004      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008ce6:	bf00      	nop
 8008ce8:	e002      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cea:	bf00      	nop
 8008cec:	e000      	b.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008cee:	bf00      	nop
    }
  }

  return(frequency);
 8008cf0:	69fb      	ldr	r3, [r7, #28]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3720      	adds	r7, #32
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	02dc6c00 	.word	0x02dc6c00
 8008d04:	00f42400 	.word	0x00f42400

08008d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e09d      	b.n	8008e56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d108      	bne.n	8008d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d2a:	d009      	beq.n	8008d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	61da      	str	r2, [r3, #28]
 8008d32:	e005      	b.n	8008d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7f9 fe10 	bl	8002980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d80:	d902      	bls.n	8008d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	e002      	b.n	8008d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008d96:	d007      	beq.n	8008da8 <HAL_SPI_Init+0xa0>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008da0:	d002      	beq.n	8008da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dea:	ea42 0103 	orr.w	r1, r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	f003 0204 	and.w	r2, r3, #4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0c:	f003 0310 	and.w	r3, r3, #16
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008e24:	ea42 0103 	orr.w	r1, r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b088      	sub	sp, #32
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	603b      	str	r3, [r7, #0]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e6e:	f7fa ff83 	bl	8003d78 <HAL_GetTick>
 8008e72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008e74:	88fb      	ldrh	r3, [r7, #6]
 8008e76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d001      	beq.n	8008e88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008e84:	2302      	movs	r3, #2
 8008e86:	e15c      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <HAL_SPI_Transmit+0x36>
 8008e8e:	88fb      	ldrh	r3, [r7, #6]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e154      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d101      	bne.n	8008ea6 <HAL_SPI_Transmit+0x48>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e14d      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ef8:	d10f      	bne.n	8008f1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f24:	2b40      	cmp	r3, #64	@ 0x40
 8008f26:	d007      	beq.n	8008f38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f40:	d952      	bls.n	8008fe8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <HAL_SPI_Transmit+0xf2>
 8008f4a:	8b7b      	ldrh	r3, [r7, #26]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d145      	bne.n	8008fdc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	881a      	ldrh	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f60:	1c9a      	adds	r2, r3, #2
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f74:	e032      	b.n	8008fdc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d112      	bne.n	8008faa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	881a      	ldrh	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f94:	1c9a      	adds	r2, r3, #2
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fa8:	e018      	b.n	8008fdc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008faa:	f7fa fee5 	bl	8003d78 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d803      	bhi.n	8008fc2 <HAL_SPI_Transmit+0x164>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d102      	bne.n	8008fc8 <HAL_SPI_Transmit+0x16a>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e0b2      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1c7      	bne.n	8008f76 <HAL_SPI_Transmit+0x118>
 8008fe6:	e083      	b.n	80090f0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <HAL_SPI_Transmit+0x198>
 8008ff0:	8b7b      	ldrh	r3, [r7, #26]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d177      	bne.n	80090e6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d912      	bls.n	8009026 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009010:	1c9a      	adds	r2, r3, #2
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b02      	subs	r3, #2
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009024:	e05f      	b.n	80090e6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	330c      	adds	r3, #12
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800904c:	e04b      	b.n	80090e6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b02      	cmp	r3, #2
 800905a:	d12b      	bne.n	80090b4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b01      	cmp	r3, #1
 8009064:	d912      	bls.n	800908c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	881a      	ldrh	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009076:	1c9a      	adds	r2, r3, #2
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b02      	subs	r3, #2
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800908a:	e02c      	b.n	80090e6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090b2:	e018      	b.n	80090e6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090b4:	f7fa fe60 	bl	8003d78 <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d803      	bhi.n	80090cc <HAL_SPI_Transmit+0x26e>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d102      	bne.n	80090d2 <HAL_SPI_Transmit+0x274>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e02d      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1ae      	bne.n	800904e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f947 	bl	8009388 <SPI_EndRxTxTransaction>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2220      	movs	r2, #32
 8009104:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10a      	bne.n	8009124 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8009140:	2300      	movs	r3, #0
  }
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800915c:	f7fa fe0c 	bl	8003d78 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4413      	add	r3, r2
 800916a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800916c:	f7fa fe04 	bl	8003d78 <HAL_GetTick>
 8009170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009172:	4b39      	ldr	r3, [pc, #228]	@ (8009258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	015b      	lsls	r3, r3, #5
 8009178:	0d1b      	lsrs	r3, r3, #20
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	fb02 f303 	mul.w	r3, r2, r3
 8009180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009182:	e054      	b.n	800922e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918a:	d050      	beq.n	800922e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800918c:	f7fa fdf4 	bl	8003d78 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	429a      	cmp	r2, r3
 800919a:	d902      	bls.n	80091a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d13d      	bne.n	800921e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ba:	d111      	bne.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c4:	d004      	beq.n	80091d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ce:	d107      	bne.n	80091e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091e8:	d10f      	bne.n	800920a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e017      	b.n	800924e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	3b01      	subs	r3, #1
 800922c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4013      	ands	r3, r2
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	bf0c      	ite	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	2300      	movne	r3, #0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	429a      	cmp	r2, r3
 800924a:	d19b      	bne.n	8009184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20000000 	.word	0x20000000

0800925c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	@ 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800926e:	f7fa fd83 	bl	8003d78 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	4413      	add	r3, r2
 800927c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800927e:	f7fa fd7b 	bl	8003d78 <HAL_GetTick>
 8009282:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800928c:	4b3d      	ldr	r3, [pc, #244]	@ (8009384 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	00da      	lsls	r2, r3, #3
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	0d1b      	lsrs	r3, r3, #20
 800929c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092a4:	e060      	b.n	8009368 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092ac:	d107      	bne.n	80092be <SPI_WaitFifoStateUntilTimeout+0x62>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d050      	beq.n	8009368 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092c6:	f7fa fd57 	bl	8003d78 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d902      	bls.n	80092dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d13d      	bne.n	8009358 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092f4:	d111      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092fe:	d004      	beq.n	800930a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009308:	d107      	bne.n	800931a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009318:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009322:	d10f      	bne.n	8009344 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009342:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e010      	b.n	800937a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	3b01      	subs	r3, #1
 8009366:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4013      	ands	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d196      	bne.n	80092a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3728      	adds	r7, #40	@ 0x28
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000000 	.word	0x20000000

08009388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af02      	add	r7, sp, #8
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2200      	movs	r2, #0
 800939c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff ff5b 	bl	800925c <SPI_WaitFifoStateUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d007      	beq.n	80093bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b0:	f043 0220 	orr.w	r2, r3, #32
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e027      	b.n	800940c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	2180      	movs	r1, #128	@ 0x80
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff fec0 	bl	800914c <SPI_WaitFlagStateUntilTimeout>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d6:	f043 0220 	orr.w	r2, r3, #32
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e014      	b.n	800940c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff ff34 	bl	800925c <SPI_WaitFifoStateUntilTimeout>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093fe:	f043 0220 	orr.w	r2, r3, #32
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e000      	b.n	800940c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e049      	b.n	80094ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d106      	bne.n	8009440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fa f878 	bl	8003530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f000 fa4c 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d001      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e04f      	b.n	800957c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a23      	ldr	r2, [pc, #140]	@ (8009588 <HAL_TIM_Base_Start_IT+0xc4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d01d      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009506:	d018      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1f      	ldr	r2, [pc, #124]	@ (800958c <HAL_TIM_Base_Start_IT+0xc8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d013      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1e      	ldr	r2, [pc, #120]	@ (8009590 <HAL_TIM_Base_Start_IT+0xcc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00e      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1c      	ldr	r2, [pc, #112]	@ (8009594 <HAL_TIM_Base_Start_IT+0xd0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1b      	ldr	r2, [pc, #108]	@ (8009598 <HAL_TIM_Base_Start_IT+0xd4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d004      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x76>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a19      	ldr	r2, [pc, #100]	@ (800959c <HAL_TIM_Base_Start_IT+0xd8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d115      	bne.n	8009566 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	4b17      	ldr	r3, [pc, #92]	@ (80095a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009542:	4013      	ands	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b06      	cmp	r3, #6
 800954a:	d015      	beq.n	8009578 <HAL_TIM_Base_Start_IT+0xb4>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009552:	d011      	beq.n	8009578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0201 	orr.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009564:	e008      	b.n	8009578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0201 	orr.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e000      	b.n	800957a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	40012c00 	.word	0x40012c00
 800958c:	40000400 	.word	0x40000400
 8009590:	40000800 	.word	0x40000800
 8009594:	40013400 	.word	0x40013400
 8009598:	40014000 	.word	0x40014000
 800959c:	40015000 	.word	0x40015000
 80095a0:	00010007 	.word	0x00010007

080095a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6a1a      	ldr	r2, [r3, #32]
 80095c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10f      	bne.n	80095ec <HAL_TIM_Base_Stop_IT+0x48>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6a1a      	ldr	r2, [r3, #32]
 80095d2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d107      	bne.n	80095ec <HAL_TIM_Base_Stop_IT+0x48>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0201 	bic.w	r2, r2, #1
 80095ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d020      	beq.n	8009666 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d01b      	beq.n	8009666 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f06f 0202 	mvn.w	r2, #2
 8009636:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f931 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 8009652:	e005      	b.n	8009660 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f923 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f934 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d020      	beq.n	80096b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f003 0304 	and.w	r3, r3, #4
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01b      	beq.n	80096b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f06f 0204 	mvn.w	r2, #4
 8009682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f90b 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 800969e:	e005      	b.n	80096ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8fd 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f90e 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d020      	beq.n	80096fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f003 0308 	and.w	r3, r3, #8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01b      	beq.n	80096fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f06f 0208 	mvn.w	r2, #8
 80096ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2204      	movs	r2, #4
 80096d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f003 0303 	and.w	r3, r3, #3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8e5 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 80096ea:	e005      	b.n	80096f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f8d7 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f8e8 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d020      	beq.n	800974a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f003 0310 	and.w	r3, r3, #16
 800970e:	2b00      	cmp	r3, #0
 8009710:	d01b      	beq.n	800974a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f06f 0210 	mvn.w	r2, #16
 800971a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2208      	movs	r2, #8
 8009720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8bf 	bl	80098b4 <HAL_TIM_IC_CaptureCallback>
 8009736:	e005      	b.n	8009744 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f8b1 	bl	80098a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f8c2 	bl	80098c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00c      	beq.n	800976e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f06f 0201 	mvn.w	r2, #1
 8009766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7f9 fe4d 	bl	8003408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00c      	beq.n	800979c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009788:	2b00      	cmp	r3, #0
 800978a:	d007      	beq.n	800979c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9ec 	bl	8009b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00c      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9e4 	bl	8009b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d007      	beq.n	80097e4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80097dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f87c 	bl	80098dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00c      	beq.n	8009808 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0220 	mvn.w	r2, #32
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f9ac 	bl	8009b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00c      	beq.n	800982c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d007      	beq.n	800982c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9b8 	bl	8009b9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00c      	beq.n	8009850 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f9b0 	bl	8009bb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00c      	beq.n	8009874 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800986c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9a8 	bl	8009bc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00c      	beq.n	8009898 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f9a0 	bl	8009bd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a48      	ldr	r2, [pc, #288]	@ (8009a24 <TIM_Base_SetConfig+0x134>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d013      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990e:	d00f      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a45      	ldr	r2, [pc, #276]	@ (8009a28 <TIM_Base_SetConfig+0x138>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a44      	ldr	r2, [pc, #272]	@ (8009a2c <TIM_Base_SetConfig+0x13c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a43      	ldr	r2, [pc, #268]	@ (8009a30 <TIM_Base_SetConfig+0x140>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a42      	ldr	r2, [pc, #264]	@ (8009a34 <TIM_Base_SetConfig+0x144>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d108      	bne.n	8009942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a37      	ldr	r2, [pc, #220]	@ (8009a24 <TIM_Base_SetConfig+0x134>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d01f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009950:	d01b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a34      	ldr	r2, [pc, #208]	@ (8009a28 <TIM_Base_SetConfig+0x138>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d017      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a33      	ldr	r2, [pc, #204]	@ (8009a2c <TIM_Base_SetConfig+0x13c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d013      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a32      	ldr	r2, [pc, #200]	@ (8009a30 <TIM_Base_SetConfig+0x140>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a32      	ldr	r2, [pc, #200]	@ (8009a38 <TIM_Base_SetConfig+0x148>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a31      	ldr	r2, [pc, #196]	@ (8009a3c <TIM_Base_SetConfig+0x14c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d007      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a30      	ldr	r2, [pc, #192]	@ (8009a40 <TIM_Base_SetConfig+0x150>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2b      	ldr	r2, [pc, #172]	@ (8009a34 <TIM_Base_SetConfig+0x144>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d108      	bne.n	800999c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a18      	ldr	r2, [pc, #96]	@ (8009a24 <TIM_Base_SetConfig+0x134>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d013      	beq.n	80099f0 <TIM_Base_SetConfig+0x100>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a19      	ldr	r2, [pc, #100]	@ (8009a30 <TIM_Base_SetConfig+0x140>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00f      	beq.n	80099f0 <TIM_Base_SetConfig+0x100>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a19      	ldr	r2, [pc, #100]	@ (8009a38 <TIM_Base_SetConfig+0x148>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00b      	beq.n	80099f0 <TIM_Base_SetConfig+0x100>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a18      	ldr	r2, [pc, #96]	@ (8009a3c <TIM_Base_SetConfig+0x14c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <TIM_Base_SetConfig+0x100>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a17      	ldr	r2, [pc, #92]	@ (8009a40 <TIM_Base_SetConfig+0x150>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_Base_SetConfig+0x100>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a12      	ldr	r2, [pc, #72]	@ (8009a34 <TIM_Base_SetConfig+0x144>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d103      	bne.n	80099f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d105      	bne.n	8009a16 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f023 0201 	bic.w	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	611a      	str	r2, [r3, #16]
  }
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40012c00 	.word	0x40012c00
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40013400 	.word	0x40013400
 8009a34:	40015000 	.word	0x40015000
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800

08009a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e06f      	b.n	8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a31      	ldr	r2, [pc, #196]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d009      	beq.n	8009a9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a30      	ldr	r2, [pc, #192]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d004      	beq.n	8009a9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a2e      	ldr	r2, [pc, #184]	@ (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d108      	bne.n	8009aac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009aa0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a1e      	ldr	r2, [pc, #120]	@ (8009b48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d01d      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009adc:	d018      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d013      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1a      	ldr	r2, [pc, #104]	@ (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00e      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d009      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a16      	ldr	r2, [pc, #88]	@ (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d004      	beq.n	8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a11      	ldr	r2, [pc, #68]	@ (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d10c      	bne.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40013400 	.word	0x40013400
 8009b50:	40015000 	.word	0x40015000
 8009b54:	40000400 	.word	0x40000400
 8009b58:	40000800 	.word	0x40000800
 8009b5c:	40014000 	.word	0x40014000

08009b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e042      	b.n	8009c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7f9 fd03 	bl	800361c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	@ 0x24
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 ff60 	bl	800aafc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fc61 	bl	800a504 <UART_SetConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e01b      	b.n	8009c84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 ffdf 	bl	800ac40 <UART_CheckIdleState>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	@ 0x28
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d17b      	bne.n	8009d9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <HAL_UART_Transmit+0x26>
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e074      	b.n	8009da0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2221      	movs	r2, #33	@ 0x21
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cc6:	f7fa f857 	bl	8003d78 <HAL_GetTick>
 8009cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	88fa      	ldrh	r2, [r7, #6]
 8009cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce4:	d108      	bne.n	8009cf8 <HAL_UART_Transmit+0x6c>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	61bb      	str	r3, [r7, #24]
 8009cf6:	e003      	b.n	8009d00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009d00:	e030      	b.n	8009d64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2180      	movs	r1, #128	@ 0x80
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f001 f841 	bl	800ad94 <UART_WaitOnFlagUntilTimeout>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e03d      	b.n	8009da0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10b      	bne.n	8009d42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	3302      	adds	r3, #2
 8009d3e:	61bb      	str	r3, [r7, #24]
 8009d40:	e007      	b.n	8009d52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	781a      	ldrb	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1c8      	bne.n	8009d02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2200      	movs	r2, #0
 8009d78:	2140      	movs	r1, #64	@ 0x40
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f001 f80a 	bl	800ad94 <UART_WaitOnFlagUntilTimeout>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e006      	b.n	8009da0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e000      	b.n	8009da0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009d9e:	2302      	movs	r3, #2
  }
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3720      	adds	r7, #32
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	@ 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4613      	mov	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d137      	bne.n	8009e30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <HAL_UART_Receive_IT+0x24>
 8009dc6:	88fb      	ldrh	r3, [r7, #6]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e030      	b.n	8009e32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a18      	ldr	r2, [pc, #96]	@ (8009e3c <HAL_UART_Receive_IT+0x94>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d01f      	beq.n	8009e20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d018      	beq.n	8009e20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	623b      	str	r3, [r7, #32]
 8009e0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	69f9      	ldr	r1, [r7, #28]
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e6      	bne.n	8009dee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	461a      	mov	r2, r3
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f001 f822 	bl	800ae70 <UART_Start_Receive_IT>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	e000      	b.n	8009e32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e30:	2302      	movs	r3, #2
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3728      	adds	r7, #40	@ 0x28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	40008000 	.word	0x40008000

08009e40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b0ba      	sub	sp, #232	@ 0xe8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e6e:	4013      	ands	r3, r2
 8009e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d11b      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d015      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 8300 	beq.w	800a4aa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
      }
      return;
 8009eb2:	e2fa      	b.n	800a4aa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 8123 	beq.w	800a104 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ebe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ec2:	4b8d      	ldr	r3, [pc, #564]	@ (800a0f8 <HAL_UART_IRQHandler+0x2b8>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d106      	bne.n	8009ed8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ece:	4b8b      	ldr	r3, [pc, #556]	@ (800a0fc <HAL_UART_IRQHandler+0x2bc>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8116 	beq.w	800a104 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d011      	beq.n	8009f08 <HAL_UART_IRQHandler+0xc8>
 8009ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009efe:	f043 0201 	orr.w	r2, r3, #1
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d011      	beq.n	8009f38 <HAL_UART_IRQHandler+0xf8>
 8009f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2202      	movs	r2, #2
 8009f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f2e:	f043 0204 	orr.w	r2, r3, #4
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d011      	beq.n	8009f68 <HAL_UART_IRQHandler+0x128>
 8009f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2204      	movs	r2, #4
 8009f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f5e:	f043 0202 	orr.w	r2, r3, #2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f6c:	f003 0308 	and.w	r3, r3, #8
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d017      	beq.n	8009fa4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f78:	f003 0320 	and.w	r3, r3, #32
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f84:	4b5c      	ldr	r3, [pc, #368]	@ (800a0f8 <HAL_UART_IRQHandler+0x2b8>)
 8009f86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00b      	beq.n	8009fa4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2208      	movs	r2, #8
 8009f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f9a:	f043 0208 	orr.w	r2, r3, #8
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d012      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x196>
 8009fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fcc:	f043 0220 	orr.w	r2, r3, #32
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 8266 	beq.w	800a4ae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d013      	beq.n	800a016 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d007      	beq.n	800a016 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02a:	2b40      	cmp	r3, #64	@ 0x40
 800a02c:	d005      	beq.n	800a03a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a036:	2b00      	cmp	r3, #0
 800a038:	d054      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f001 f83a 	bl	800b0b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a04a:	2b40      	cmp	r3, #64	@ 0x40
 800a04c:	d146      	bne.n	800a0dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a07a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a07e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1d9      	bne.n	800a04e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d017      	beq.n	800a0d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0aa:	4a15      	ldr	r2, [pc, #84]	@ (800a100 <HAL_UART_IRQHandler+0x2c0>)
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fa f89e 	bl	80041f6 <HAL_DMA_Abort_IT>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d019      	beq.n	800a0f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d2:	e00f      	b.n	800a0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9ff 	bl	800a4d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0da:	e00b      	b.n	800a0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f9fb 	bl	800a4d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e2:	e007      	b.n	800a0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f9f7 	bl	800a4d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0f2:	e1dc      	b.n	800a4ae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f4:	bf00      	nop
    return;
 800a0f6:	e1da      	b.n	800a4ae <HAL_UART_IRQHandler+0x66e>
 800a0f8:	10000001 	.word	0x10000001
 800a0fc:	04000120 	.word	0x04000120
 800a100:	0800b181 	.word	0x0800b181

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	f040 8170 	bne.w	800a3ee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a112:	f003 0310 	and.w	r3, r3, #16
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8169 	beq.w	800a3ee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 8162 	beq.w	800a3ee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2210      	movs	r2, #16
 800a130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a13c:	2b40      	cmp	r3, #64	@ 0x40
 800a13e:	f040 80d8 	bne.w	800a2f2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 80af 	beq.w	800a2b8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a164:	429a      	cmp	r2, r3
 800a166:	f080 80a7 	bcs.w	800a2b8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a170:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	f040 8087 	bne.w	800a296 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a19c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a1be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a1ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1da      	bne.n	800a188 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e1      	bne.n	800a1d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3308      	adds	r3, #8
 800a214:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a232:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a234:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a238:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e3      	bne.n	800a20e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25c:	e853 3f00 	ldrex	r3, [r3]
 800a260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a264:	f023 0310 	bic.w	r3, r3, #16
 800a268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a276:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a278:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a27c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e4      	bne.n	800a254 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a290:	4618      	mov	r0, r3
 800a292:	f7f9 ff57 	bl	8004144 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2202      	movs	r2, #2
 800a29a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f91b 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a2b6:	e0fc      	b.n	800a4b2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	f040 80f5 	bne.w	800a4b2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0320 	and.w	r3, r3, #32
 800a2d6:	2b20      	cmp	r3, #32
 800a2d8:	f040 80eb 	bne.w	800a4b2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f8fe 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
      return;
 800a2f0:	e0df      	b.n	800a4b2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80d1 	beq.w	800a4b6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 80cc 	beq.w	800a4b6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a340:	647b      	str	r3, [r7, #68]	@ 0x44
 800a342:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e4      	bne.n	800a31e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3308      	adds	r3, #8
 800a35a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	623b      	str	r3, [r7, #32]
   return(result);
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a36a:	f023 0301 	bic.w	r3, r3, #1
 800a36e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a37c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e1      	bne.n	800a354 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f023 0310 	bic.w	r3, r3, #16
 800a3b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ca:	69b9      	ldr	r1, [r7, #24]
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	e841 2300 	strex	r3, r2, [r1]
 800a3d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1e4      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2202      	movs	r2, #2
 800a3de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f880 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ec:	e063      	b.n	800a4b6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00e      	beq.n	800a418 <HAL_UART_IRQHandler+0x5d8>
 800a3fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a40e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fc13 	bl	800bc3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a416:	e051      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a41c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a420:	2b00      	cmp	r3, #0
 800a422:	d014      	beq.n	800a44e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d105      	bne.n	800a43c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d008      	beq.n	800a44e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a440:	2b00      	cmp	r3, #0
 800a442:	d03a      	beq.n	800a4ba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	4798      	blx	r3
    }
    return;
 800a44c:	e035      	b.n	800a4ba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d009      	beq.n	800a46e <HAL_UART_IRQHandler+0x62e>
 800a45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fe9c 	bl	800b1a4 <UART_EndTransmit_IT>
    return;
 800a46c:	e026      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <HAL_UART_IRQHandler+0x64e>
 800a47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a47e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 fbec 	bl	800bc64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a48c:	e016      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d010      	beq.n	800a4bc <HAL_UART_IRQHandler+0x67c>
 800a49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	da0c      	bge.n	800a4bc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fbd4 	bl	800bc50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4a8:	e008      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
      return;
 800a4aa:	bf00      	nop
 800a4ac:	e006      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
    return;
 800a4ae:	bf00      	nop
 800a4b0:	e004      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
      return;
 800a4b2:	bf00      	nop
 800a4b4:	e002      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
      return;
 800a4b6:	bf00      	nop
 800a4b8:	e000      	b.n	800a4bc <HAL_UART_IRQHandler+0x67c>
    return;
 800a4ba:	bf00      	nop
  }
}
 800a4bc:	37e8      	adds	r7, #232	@ 0xe8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop

0800a4c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a508:	b08c      	sub	sp, #48	@ 0x30
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	431a      	orrs	r2, r3
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	431a      	orrs	r2, r3
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	4313      	orrs	r3, r2
 800a52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	4baa      	ldr	r3, [pc, #680]	@ (800a7dc <UART_SetConfig+0x2d8>)
 800a534:	4013      	ands	r3, r2
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a9f      	ldr	r2, [pc, #636]	@ (800a7e0 <UART_SetConfig+0x2dc>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d004      	beq.n	800a570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a56c:	4313      	orrs	r3, r2
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a57a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	6812      	ldr	r2, [r2, #0]
 800a582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a584:	430b      	orrs	r3, r1
 800a586:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58e:	f023 010f 	bic.w	r1, r3, #15
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a90      	ldr	r2, [pc, #576]	@ (800a7e4 <UART_SetConfig+0x2e0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d125      	bne.n	800a5f4 <UART_SetConfig+0xf0>
 800a5a8:	4b8f      	ldr	r3, [pc, #572]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d81a      	bhi.n	800a5ec <UART_SetConfig+0xe8>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <UART_SetConfig+0xb8>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a5e5 	.word	0x0800a5e5
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5d2:	e116      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5da:	e112      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e2:	e10e      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ea:	e10a      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f2:	e106      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a7c      	ldr	r2, [pc, #496]	@ (800a7ec <UART_SetConfig+0x2e8>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d138      	bne.n	800a670 <UART_SetConfig+0x16c>
 800a5fe:	4b7a      	ldr	r3, [pc, #488]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a604:	f003 030c 	and.w	r3, r3, #12
 800a608:	2b0c      	cmp	r3, #12
 800a60a:	d82d      	bhi.n	800a668 <UART_SetConfig+0x164>
 800a60c:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <UART_SetConfig+0x110>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a649 	.word	0x0800a649
 800a618:	0800a669 	.word	0x0800a669
 800a61c:	0800a669 	.word	0x0800a669
 800a620:	0800a669 	.word	0x0800a669
 800a624:	0800a659 	.word	0x0800a659
 800a628:	0800a669 	.word	0x0800a669
 800a62c:	0800a669 	.word	0x0800a669
 800a630:	0800a669 	.word	0x0800a669
 800a634:	0800a651 	.word	0x0800a651
 800a638:	0800a669 	.word	0x0800a669
 800a63c:	0800a669 	.word	0x0800a669
 800a640:	0800a669 	.word	0x0800a669
 800a644:	0800a661 	.word	0x0800a661
 800a648:	2300      	movs	r3, #0
 800a64a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64e:	e0d8      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a650:	2302      	movs	r3, #2
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a656:	e0d4      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a658:	2304      	movs	r3, #4
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65e:	e0d0      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a660:	2308      	movs	r3, #8
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a666:	e0cc      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a668:	2310      	movs	r3, #16
 800a66a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66e:	e0c8      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a5e      	ldr	r2, [pc, #376]	@ (800a7f0 <UART_SetConfig+0x2ec>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d125      	bne.n	800a6c6 <UART_SetConfig+0x1c2>
 800a67a:	4b5b      	ldr	r3, [pc, #364]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a680:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a684:	2b30      	cmp	r3, #48	@ 0x30
 800a686:	d016      	beq.n	800a6b6 <UART_SetConfig+0x1b2>
 800a688:	2b30      	cmp	r3, #48	@ 0x30
 800a68a:	d818      	bhi.n	800a6be <UART_SetConfig+0x1ba>
 800a68c:	2b20      	cmp	r3, #32
 800a68e:	d00a      	beq.n	800a6a6 <UART_SetConfig+0x1a2>
 800a690:	2b20      	cmp	r3, #32
 800a692:	d814      	bhi.n	800a6be <UART_SetConfig+0x1ba>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <UART_SetConfig+0x19a>
 800a698:	2b10      	cmp	r3, #16
 800a69a:	d008      	beq.n	800a6ae <UART_SetConfig+0x1aa>
 800a69c:	e00f      	b.n	800a6be <UART_SetConfig+0x1ba>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a4:	e0ad      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ac:	e0a9      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6ae:	2304      	movs	r3, #4
 800a6b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b4:	e0a5      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6bc:	e0a1      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6be:	2310      	movs	r3, #16
 800a6c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c4:	e09d      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a4a      	ldr	r2, [pc, #296]	@ (800a7f4 <UART_SetConfig+0x2f0>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d125      	bne.n	800a71c <UART_SetConfig+0x218>
 800a6d0:	4b45      	ldr	r3, [pc, #276]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a6da:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6dc:	d016      	beq.n	800a70c <UART_SetConfig+0x208>
 800a6de:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6e0:	d818      	bhi.n	800a714 <UART_SetConfig+0x210>
 800a6e2:	2b80      	cmp	r3, #128	@ 0x80
 800a6e4:	d00a      	beq.n	800a6fc <UART_SetConfig+0x1f8>
 800a6e6:	2b80      	cmp	r3, #128	@ 0x80
 800a6e8:	d814      	bhi.n	800a714 <UART_SetConfig+0x210>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <UART_SetConfig+0x1f0>
 800a6ee:	2b40      	cmp	r3, #64	@ 0x40
 800a6f0:	d008      	beq.n	800a704 <UART_SetConfig+0x200>
 800a6f2:	e00f      	b.n	800a714 <UART_SetConfig+0x210>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6fa:	e082      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a702:	e07e      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a704:	2304      	movs	r3, #4
 800a706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a70a:	e07a      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a70c:	2308      	movs	r3, #8
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a712:	e076      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a714:	2310      	movs	r3, #16
 800a716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a71a:	e072      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a35      	ldr	r2, [pc, #212]	@ (800a7f8 <UART_SetConfig+0x2f4>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d12a      	bne.n	800a77c <UART_SetConfig+0x278>
 800a726:	4b30      	ldr	r3, [pc, #192]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a72c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a734:	d01a      	beq.n	800a76c <UART_SetConfig+0x268>
 800a736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a73a:	d81b      	bhi.n	800a774 <UART_SetConfig+0x270>
 800a73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a740:	d00c      	beq.n	800a75c <UART_SetConfig+0x258>
 800a742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a746:	d815      	bhi.n	800a774 <UART_SetConfig+0x270>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <UART_SetConfig+0x250>
 800a74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a750:	d008      	beq.n	800a764 <UART_SetConfig+0x260>
 800a752:	e00f      	b.n	800a774 <UART_SetConfig+0x270>
 800a754:	2300      	movs	r3, #0
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e052      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a75c:	2302      	movs	r3, #2
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e04e      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	e04a      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a772:	e046      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a77a:	e042      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a17      	ldr	r2, [pc, #92]	@ (800a7e0 <UART_SetConfig+0x2dc>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d13a      	bne.n	800a7fc <UART_SetConfig+0x2f8>
 800a786:	4b18      	ldr	r3, [pc, #96]	@ (800a7e8 <UART_SetConfig+0x2e4>)
 800a788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a78c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a794:	d01a      	beq.n	800a7cc <UART_SetConfig+0x2c8>
 800a796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a79a:	d81b      	bhi.n	800a7d4 <UART_SetConfig+0x2d0>
 800a79c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7a0:	d00c      	beq.n	800a7bc <UART_SetConfig+0x2b8>
 800a7a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7a6:	d815      	bhi.n	800a7d4 <UART_SetConfig+0x2d0>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <UART_SetConfig+0x2b0>
 800a7ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7b0:	d008      	beq.n	800a7c4 <UART_SetConfig+0x2c0>
 800a7b2:	e00f      	b.n	800a7d4 <UART_SetConfig+0x2d0>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ba:	e022      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7c2:	e01e      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ca:	e01a      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d2:	e016      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7da:	e012      	b.n	800a802 <UART_SetConfig+0x2fe>
 800a7dc:	cfff69f3 	.word	0xcfff69f3
 800a7e0:	40008000 	.word	0x40008000
 800a7e4:	40013800 	.word	0x40013800
 800a7e8:	40021000 	.word	0x40021000
 800a7ec:	40004400 	.word	0x40004400
 800a7f0:	40004800 	.word	0x40004800
 800a7f4:	40004c00 	.word	0x40004c00
 800a7f8:	40005000 	.word	0x40005000
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4aae      	ldr	r2, [pc, #696]	@ (800aac0 <UART_SetConfig+0x5bc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	f040 8097 	bne.w	800a93c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a80e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a812:	2b08      	cmp	r3, #8
 800a814:	d823      	bhi.n	800a85e <UART_SetConfig+0x35a>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <UART_SetConfig+0x318>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a841 	.word	0x0800a841
 800a820:	0800a85f 	.word	0x0800a85f
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a85f 	.word	0x0800a85f
 800a82c:	0800a84f 	.word	0x0800a84f
 800a830:	0800a85f 	.word	0x0800a85f
 800a834:	0800a85f 	.word	0x0800a85f
 800a838:	0800a85f 	.word	0x0800a85f
 800a83c:	0800a857 	.word	0x0800a857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a840:	f7fd faa2 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 800a844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a846:	e010      	b.n	800a86a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a848:	4b9e      	ldr	r3, [pc, #632]	@ (800aac4 <UART_SetConfig+0x5c0>)
 800a84a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a84c:	e00d      	b.n	800a86a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a84e:	f7fd fa2d 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800a852:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a854:	e009      	b.n	800a86a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a85a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a85c:	e005      	b.n	800a86a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a85e:	2300      	movs	r3, #0
 800a860:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 8130 	beq.w	800aad2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a876:	4a94      	ldr	r2, [pc, #592]	@ (800aac8 <UART_SetConfig+0x5c4>)
 800a878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a87c:	461a      	mov	r2, r3
 800a87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a880:	fbb3 f3f2 	udiv	r3, r3, r2
 800a884:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	4413      	add	r3, r2
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d305      	bcc.n	800a8a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d903      	bls.n	800a8aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8a8:	e113      	b.n	800aad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	60bb      	str	r3, [r7, #8]
 800a8b0:	60fa      	str	r2, [r7, #12]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	4a84      	ldr	r2, [pc, #528]	@ (800aac8 <UART_SetConfig+0x5c4>)
 800a8b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	2200      	movs	r2, #0
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8cc:	f7f6 f8ea 	bl	8000aa4 <__aeabi_uldivmod>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	020b      	lsls	r3, r1, #8
 800a8e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8e6:	0202      	lsls	r2, r0, #8
 800a8e8:	6979      	ldr	r1, [r7, #20]
 800a8ea:	6849      	ldr	r1, [r1, #4]
 800a8ec:	0849      	lsrs	r1, r1, #1
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	eb12 0804 	adds.w	r8, r2, r4
 800a8f8:	eb43 0905 	adc.w	r9, r3, r5
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	469a      	mov	sl, r3
 800a904:	4693      	mov	fp, r2
 800a906:	4652      	mov	r2, sl
 800a908:	465b      	mov	r3, fp
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f6 f8c9 	bl	8000aa4 <__aeabi_uldivmod>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4613      	mov	r3, r2
 800a918:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a920:	d308      	bcc.n	800a934 <UART_SetConfig+0x430>
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a928:	d204      	bcs.n	800a934 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6a3a      	ldr	r2, [r7, #32]
 800a930:	60da      	str	r2, [r3, #12]
 800a932:	e0ce      	b.n	800aad2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a93a:	e0ca      	b.n	800aad2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a944:	d166      	bne.n	800aa14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d827      	bhi.n	800a99e <UART_SetConfig+0x49a>
 800a94e:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <UART_SetConfig+0x450>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a979 	.word	0x0800a979
 800a958:	0800a981 	.word	0x0800a981
 800a95c:	0800a989 	.word	0x0800a989
 800a960:	0800a99f 	.word	0x0800a99f
 800a964:	0800a98f 	.word	0x0800a98f
 800a968:	0800a99f 	.word	0x0800a99f
 800a96c:	0800a99f 	.word	0x0800a99f
 800a970:	0800a99f 	.word	0x0800a99f
 800a974:	0800a997 	.word	0x0800a997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a978:	f7fd fa06 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 800a97c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a97e:	e014      	b.n	800a9aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a980:	f7fd fa18 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 800a984:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a986:	e010      	b.n	800a9aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a988:	4b4e      	ldr	r3, [pc, #312]	@ (800aac4 <UART_SetConfig+0x5c0>)
 800a98a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a98c:	e00d      	b.n	800a9aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a98e:	f7fd f98d 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800a992:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a994:	e009      	b.n	800a9aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a99c:	e005      	b.n	800a9aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8090 	beq.w	800aad2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b6:	4a44      	ldr	r2, [pc, #272]	@ (800aac8 <UART_SetConfig+0x5c4>)
 800a9b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9c4:	005a      	lsls	r2, r3, #1
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	441a      	add	r2, r3
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	2b0f      	cmp	r3, #15
 800a9dc:	d916      	bls.n	800aa0c <UART_SetConfig+0x508>
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9e4:	d212      	bcs.n	800aa0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f023 030f 	bic.w	r3, r3, #15
 800a9ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	8bfb      	ldrh	r3, [r7, #30]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	8bfa      	ldrh	r2, [r7, #30]
 800aa08:	60da      	str	r2, [r3, #12]
 800aa0a:	e062      	b.n	800aad2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa12:	e05e      	b.n	800aad2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d828      	bhi.n	800aa6e <UART_SetConfig+0x56a>
 800aa1c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa24 <UART_SetConfig+0x520>)
 800aa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa22:	bf00      	nop
 800aa24:	0800aa49 	.word	0x0800aa49
 800aa28:	0800aa51 	.word	0x0800aa51
 800aa2c:	0800aa59 	.word	0x0800aa59
 800aa30:	0800aa6f 	.word	0x0800aa6f
 800aa34:	0800aa5f 	.word	0x0800aa5f
 800aa38:	0800aa6f 	.word	0x0800aa6f
 800aa3c:	0800aa6f 	.word	0x0800aa6f
 800aa40:	0800aa6f 	.word	0x0800aa6f
 800aa44:	0800aa67 	.word	0x0800aa67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa48:	f7fd f99e 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 800aa4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa4e:	e014      	b.n	800aa7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa50:	f7fd f9b0 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 800aa54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa56:	e010      	b.n	800aa7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa58:	4b1a      	ldr	r3, [pc, #104]	@ (800aac4 <UART_SetConfig+0x5c0>)
 800aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa5c:	e00d      	b.n	800aa7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa5e:	f7fd f925 	bl	8007cac <HAL_RCC_GetSysClockFreq>
 800aa62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa64:	e009      	b.n	800aa7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa6c:	e005      	b.n	800aa7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa78:	bf00      	nop
    }

    if (pclk != 0U)
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d028      	beq.n	800aad2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	4a10      	ldr	r2, [pc, #64]	@ (800aac8 <UART_SetConfig+0x5c4>)
 800aa86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	085b      	lsrs	r3, r3, #1
 800aa98:	441a      	add	r2, r3
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d910      	bls.n	800aacc <UART_SetConfig+0x5c8>
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab0:	d20c      	bcs.n	800aacc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60da      	str	r2, [r3, #12]
 800aabc:	e009      	b.n	800aad2 <UART_SetConfig+0x5ce>
 800aabe:	bf00      	nop
 800aac0:	40008000 	.word	0x40008000
 800aac4:	00f42400 	.word	0x00f42400
 800aac8:	08010938 	.word	0x08010938
      }
      else
      {
        ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2201      	movs	r2, #1
 800aade:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2200      	movs	r2, #0
 800aae6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	2200      	movs	r2, #0
 800aaec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aaee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3730      	adds	r7, #48	@ 0x30
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aafc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	430a      	orrs	r2, r1
 800ab24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab90:	f003 0310 	and.w	r3, r3, #16
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00a      	beq.n	800abae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01a      	beq.n	800ac12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abfa:	d10a      	bne.n	800ac12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	605a      	str	r2, [r3, #4]
  }
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b098      	sub	sp, #96	@ 0x60
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac50:	f7f9 f892 	bl	8003d78 <HAL_GetTick>
 800ac54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d12f      	bne.n	800acc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f88e 	bl	800ad94 <UART_WaitOnFlagUntilTimeout>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d022      	beq.n	800acc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac92:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aca4:	e841 2300 	strex	r3, r2, [r1]
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e6      	bne.n	800ac7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2220      	movs	r2, #32
 800acb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e063      	b.n	800ad8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d149      	bne.n	800ad66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acda:	2200      	movs	r2, #0
 800acdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f857 	bl	800ad94 <UART_WaitOnFlagUntilTimeout>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d03c      	beq.n	800ad66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	623b      	str	r3, [r7, #32]
   return(result);
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e6      	bne.n	800acec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3308      	adds	r3, #8
 800ad24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f023 0301 	bic.w	r3, r3, #1
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad3e:	61fa      	str	r2, [r7, #28]
 800ad40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	69b9      	ldr	r1, [r7, #24]
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e012      	b.n	800ad8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3758      	adds	r7, #88	@ 0x58
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	4613      	mov	r3, r2
 800ada2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ada4:	e04f      	b.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adac:	d04b      	beq.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adae:	f7f8 ffe3 	bl	8003d78 <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e04e      	b.n	800ae66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b00      	cmp	r3, #0
 800add4:	d037      	beq.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b80      	cmp	r3, #128	@ 0x80
 800adda:	d034      	beq.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b40      	cmp	r3, #64	@ 0x40
 800ade0:	d031      	beq.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69db      	ldr	r3, [r3, #28]
 800ade8:	f003 0308 	and.w	r3, r3, #8
 800adec:	2b08      	cmp	r3, #8
 800adee:	d110      	bne.n	800ae12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2208      	movs	r2, #8
 800adf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 f95b 	bl	800b0b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2208      	movs	r2, #8
 800ae02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e029      	b.n	800ae66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae20:	d111      	bne.n	800ae46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 f941 	bl	800b0b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2220      	movs	r2, #32
 800ae36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e00f      	b.n	800ae66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69da      	ldr	r2, [r3, #28]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4013      	ands	r3, r2
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	bf0c      	ite	eq
 800ae56:	2301      	moveq	r3, #1
 800ae58:	2300      	movne	r3, #0
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d0a0      	beq.n	800ada6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b0a3      	sub	sp, #140	@ 0x8c
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	88fa      	ldrh	r2, [r7, #6]
 800ae88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aea2:	d10e      	bne.n	800aec2 <UART_Start_Receive_IT+0x52>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d105      	bne.n	800aeb8 <UART_Start_Receive_IT+0x48>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aeb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aeb6:	e02d      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	22ff      	movs	r2, #255	@ 0xff
 800aebc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aec0:	e028      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10d      	bne.n	800aee6 <UART_Start_Receive_IT+0x76>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <UART_Start_Receive_IT+0x6c>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	22ff      	movs	r2, #255	@ 0xff
 800aed6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aeda:	e01b      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	227f      	movs	r2, #127	@ 0x7f
 800aee0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aee4:	e016      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeee:	d10d      	bne.n	800af0c <UART_Start_Receive_IT+0x9c>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d104      	bne.n	800af02 <UART_Start_Receive_IT+0x92>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	227f      	movs	r2, #127	@ 0x7f
 800aefc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af00:	e008      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	223f      	movs	r2, #63	@ 0x3f
 800af06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af0a:	e003      	b.n	800af14 <UART_Start_Receive_IT+0xa4>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2222      	movs	r2, #34	@ 0x22
 800af20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af2e:	e853 3f00 	ldrex	r3, [r3]
 800af32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800af34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800af48:	673a      	str	r2, [r7, #112]	@ 0x70
 800af4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800af56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e3      	bne.n	800af24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af64:	d14f      	bne.n	800b006 <UART_Start_Receive_IT+0x196>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af6c:	88fa      	ldrh	r2, [r7, #6]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d349      	bcc.n	800b006 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af7a:	d107      	bne.n	800af8c <UART_Start_Receive_IT+0x11c>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4a47      	ldr	r2, [pc, #284]	@ (800b0a4 <UART_Start_Receive_IT+0x234>)
 800af88:	675a      	str	r2, [r3, #116]	@ 0x74
 800af8a:	e002      	b.n	800af92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a46      	ldr	r2, [pc, #280]	@ (800b0a8 <UART_Start_Receive_IT+0x238>)
 800af90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d01a      	beq.n	800afd0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800afa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afbe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800afc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800afc4:	e841 2300 	strex	r3, r2, [r1]
 800afc8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800afca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d1e4      	bne.n	800af9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3308      	adds	r3, #8
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3308      	adds	r3, #8
 800afee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aff0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aff2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800affe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e5      	bne.n	800afd0 <UART_Start_Receive_IT+0x160>
 800b004:	e046      	b.n	800b094 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b00e:	d107      	bne.n	800b020 <UART_Start_Receive_IT+0x1b0>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d103      	bne.n	800b020 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	4a24      	ldr	r2, [pc, #144]	@ (800b0ac <UART_Start_Receive_IT+0x23c>)
 800b01c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b01e:	e002      	b.n	800b026 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4a23      	ldr	r2, [pc, #140]	@ (800b0b0 <UART_Start_Receive_IT+0x240>)
 800b024:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d019      	beq.n	800b062 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b036:	e853 3f00 	ldrex	r3, [r3]
 800b03a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b042:	677b      	str	r3, [r7, #116]	@ 0x74
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e6      	bne.n	800b02e <UART_Start_Receive_IT+0x1be>
 800b060:	e018      	b.n	800b094 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	e853 3f00 	ldrex	r3, [r3]
 800b06e:	613b      	str	r3, [r7, #16]
   return(result);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f043 0320 	orr.w	r3, r3, #32
 800b076:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b080:	623b      	str	r3, [r7, #32]
 800b082:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	69f9      	ldr	r1, [r7, #28]
 800b086:	6a3a      	ldr	r2, [r7, #32]
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e6      	bne.n	800b062 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	378c      	adds	r7, #140	@ 0x8c
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	0800b8d1 	.word	0x0800b8d1
 800b0a8:	0800b56d 	.word	0x0800b56d
 800b0ac:	0800b3b5 	.word	0x0800b3b5
 800b0b0:	0800b1fd 	.word	0x0800b1fd

0800b0b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b095      	sub	sp, #84	@ 0x54
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e6      	bne.n	800b0bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b104:	f023 0301 	bic.w	r3, r3, #1
 800b108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e3      	bne.n	800b0ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d118      	bne.n	800b160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	e853 3f00 	ldrex	r3, [r3]
 800b13a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f023 0310 	bic.w	r3, r3, #16
 800b142:	647b      	str	r3, [r7, #68]	@ 0x44
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b14c:	61bb      	str	r3, [r7, #24]
 800b14e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	6979      	ldr	r1, [r7, #20]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	e841 2300 	strex	r3, r2, [r1]
 800b158:	613b      	str	r3, [r7, #16]
   return(result);
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e6      	bne.n	800b12e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2220      	movs	r2, #32
 800b164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b174:	bf00      	nop
 800b176:	3754      	adds	r7, #84	@ 0x54
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f7ff f99e 	bl	800a4d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b19c:	bf00      	nop
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c0:	61fb      	str	r3, [r7, #28]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	61bb      	str	r3, [r7, #24]
 800b1cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	6979      	ldr	r1, [r7, #20]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e6      	bne.n	800b1ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff f969 	bl	800a4c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f2:	bf00      	nop
 800b1f4:	3720      	adds	r7, #32
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b09c      	sub	sp, #112	@ 0x70
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b20a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b214:	2b22      	cmp	r3, #34	@ 0x22
 800b216:	f040 80be 	bne.w	800b396 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b220:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b228:	b2d9      	uxtb	r1, r3
 800b22a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b234:	400a      	ands	r2, r1
 800b236:	b2d2      	uxtb	r2, r2
 800b238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 80a1 	bne.w	800b3a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b282:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b284:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e6      	bne.n	800b264 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a8:	f023 0301 	bic.w	r3, r3, #1
 800b2ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b2b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e5      	bne.n	800b296 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a33      	ldr	r2, [pc, #204]	@ (800b3b0 <UART_RxISR_8BIT+0x1b4>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d01f      	beq.n	800b328 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d018      	beq.n	800b328 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	623b      	str	r3, [r7, #32]
   return(result);
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b30a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b314:	633b      	str	r3, [r7, #48]	@ 0x30
 800b316:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d12e      	bne.n	800b38e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	60fb      	str	r3, [r7, #12]
   return(result);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 0310 	bic.w	r3, r3, #16
 800b34a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b354:	61fb      	str	r3, [r7, #28]
 800b356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	69b9      	ldr	r1, [r7, #24]
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	617b      	str	r3, [r7, #20]
   return(result);
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e6      	bne.n	800b336 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b10      	cmp	r3, #16
 800b374:	d103      	bne.n	800b37e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2210      	movs	r2, #16
 800b37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff f8b0 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b38c:	e00b      	b.n	800b3a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7f6 f89c 	bl	80014cc <HAL_UART_RxCpltCallback>
}
 800b394:	e007      	b.n	800b3a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	699a      	ldr	r2, [r3, #24]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0208 	orr.w	r2, r2, #8
 800b3a4:	619a      	str	r2, [r3, #24]
}
 800b3a6:	bf00      	nop
 800b3a8:	3770      	adds	r7, #112	@ 0x70
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40008000 	.word	0x40008000

0800b3b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b09c      	sub	sp, #112	@ 0x70
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3cc:	2b22      	cmp	r3, #34	@ 0x22
 800b3ce:	f040 80be 	bne.w	800b54e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b3e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b3e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3f6:	1c9a      	adds	r2, r3, #2
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b402:	b29b      	uxth	r3, r3
 800b404:	3b01      	subs	r3, #1
 800b406:	b29a      	uxth	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b414:	b29b      	uxth	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	f040 80a1 	bne.w	800b55e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b42c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b430:	667b      	str	r3, [r7, #100]	@ 0x64
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b43a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b43c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e6      	bne.n	800b41c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3308      	adds	r3, #8
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	f023 0301 	bic.w	r3, r3, #1
 800b464:	663b      	str	r3, [r7, #96]	@ 0x60
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3308      	adds	r3, #8
 800b46c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b46e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e5      	bne.n	800b44e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a33      	ldr	r2, [pc, #204]	@ (800b568 <UART_RxISR_16BIT+0x1b4>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d01f      	beq.n	800b4e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d018      	beq.n	800b4e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b4c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4d4:	e841 2300 	strex	r3, r2, [r1]
 800b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e6      	bne.n	800b4ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d12e      	bne.n	800b546 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b50c:	61bb      	str	r3, [r7, #24]
 800b50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6979      	ldr	r1, [r7, #20]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	613b      	str	r3, [r7, #16]
   return(result);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f003 0310 	and.w	r3, r3, #16
 800b52a:	2b10      	cmp	r3, #16
 800b52c:	d103      	bne.n	800b536 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2210      	movs	r2, #16
 800b534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7fe ffd4 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b544:	e00b      	b.n	800b55e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7f5 ffc0 	bl	80014cc <HAL_UART_RxCpltCallback>
}
 800b54c:	e007      	b.n	800b55e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	699a      	ldr	r2, [r3, #24]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f042 0208 	orr.w	r2, r2, #8
 800b55c:	619a      	str	r2, [r3, #24]
}
 800b55e:	bf00      	nop
 800b560:	3770      	adds	r7, #112	@ 0x70
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	40008000 	.word	0x40008000

0800b56c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b0ac      	sub	sp, #176	@ 0xb0
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b57a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5a2:	2b22      	cmp	r3, #34	@ 0x22
 800b5a4:	f040 8183 	bne.w	800b8ae <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5b2:	e126      	b.n	800b802 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b5be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b5c2:	b2d9      	uxtb	r1, r3
 800b5c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5ce:	400a      	ands	r2, r1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5d8:	1c5a      	adds	r2, r3, #1
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	2b00      	cmp	r3, #0
 800b604:	d053      	beq.n	800b6ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d011      	beq.n	800b636 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2201      	movs	r2, #1
 800b624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b62c:	f043 0201 	orr.w	r2, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d011      	beq.n	800b666 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2202      	movs	r2, #2
 800b654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b65c:	f043 0204 	orr.w	r2, r3, #4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d011      	beq.n	800b696 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2204      	movs	r2, #4
 800b684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68c:	f043 0202 	orr.w	r2, r3, #2
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7fe ff19 	bl	800a4d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f040 80a3 	bne.w	800b802 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b6ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6e0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b6e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b6e6:	e841 2300 	strex	r3, r2, [r1]
 800b6ea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b6ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1e4      	bne.n	800b6bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b708:	f023 0301 	bic.w	r3, r3, #1
 800b70c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3308      	adds	r3, #8
 800b716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b71a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b71c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b720:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b722:	e841 2300 	strex	r3, r2, [r1]
 800b726:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1e1      	bne.n	800b6f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2220      	movs	r2, #32
 800b732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a60      	ldr	r2, [pc, #384]	@ (800b8c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d021      	beq.n	800b790 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01a      	beq.n	800b790 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b76a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b76e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b77c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b77e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b782:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b78a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e4      	bne.n	800b75a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b794:	2b01      	cmp	r3, #1
 800b796:	d130      	bne.n	800b7fa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	f023 0310 	bic.w	r3, r3, #16
 800b7b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e4      	bne.n	800b79e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	f003 0310 	and.w	r3, r3, #16
 800b7de:	2b10      	cmp	r3, #16
 800b7e0:	d103      	bne.n	800b7ea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7fe fe7a 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b7f8:	e00e      	b.n	800b818 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f5 fe66 	bl	80014cc <HAL_UART_RxCpltCallback>
        break;
 800b800:	e00a      	b.n	800b818 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b802:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b80a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b80e:	f003 0320 	and.w	r3, r3, #32
 800b812:	2b00      	cmp	r3, #0
 800b814:	f47f aece 	bne.w	800b5b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b81e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b822:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b826:	2b00      	cmp	r3, #0
 800b828:	d049      	beq.n	800b8be <UART_RxISR_8BIT_FIFOEN+0x352>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b830:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b834:	429a      	cmp	r2, r3
 800b836:	d242      	bcs.n	800b8be <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3308      	adds	r3, #8
 800b83e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	e853 3f00 	ldrex	r3, [r3]
 800b846:	61fb      	str	r3, [r7, #28]
   return(result);
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b84e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b85c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b85e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e3      	bne.n	800b838 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a16      	ldr	r2, [pc, #88]	@ (800b8cc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b874:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	e853 3f00 	ldrex	r3, [r3]
 800b882:	60bb      	str	r3, [r7, #8]
   return(result);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f043 0320 	orr.w	r3, r3, #32
 800b88a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b898:	61bb      	str	r3, [r7, #24]
 800b89a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89c:	6979      	ldr	r1, [r7, #20]
 800b89e:	69ba      	ldr	r2, [r7, #24]
 800b8a0:	e841 2300 	strex	r3, r2, [r1]
 800b8a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1e4      	bne.n	800b876 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8ac:	e007      	b.n	800b8be <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	699a      	ldr	r2, [r3, #24]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f042 0208 	orr.w	r2, r2, #8
 800b8bc:	619a      	str	r2, [r3, #24]
}
 800b8be:	bf00      	nop
 800b8c0:	37b0      	adds	r7, #176	@ 0xb0
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40008000 	.word	0x40008000
 800b8cc:	0800b1fd 	.word	0x0800b1fd

0800b8d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b0ae      	sub	sp, #184	@ 0xb8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b906:	2b22      	cmp	r3, #34	@ 0x22
 800b908:	f040 8187 	bne.w	800bc1a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b912:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b916:	e12a      	b.n	800bb6e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b92a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b92e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b932:	4013      	ands	r3, r2
 800b934:	b29a      	uxth	r2, r3
 800b936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b93a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b940:	1c9a      	adds	r2, r3, #2
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d053      	beq.n	800ba16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b96e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	d011      	beq.n	800b99e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b97a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00b      	beq.n	800b99e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2201      	movs	r2, #1
 800b98c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b994:	f043 0201 	orr.w	r2, r3, #1
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b99e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d011      	beq.n	800b9ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b9aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00b      	beq.n	800b9ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c4:	f043 0204 	orr.w	r2, r3, #4
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d011      	beq.n	800b9fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b9da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00b      	beq.n	800b9fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f4:	f043 0202 	orr.w	r2, r3, #2
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7fe fd65 	bl	800a4d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f040 80a5 	bne.w	800bb6e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	461a      	mov	r2, r3
 800ba42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ba4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ba58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e2      	bne.n	800ba24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ba6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3308      	adds	r3, #8
 800ba82:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ba86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ba88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ba8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ba94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e1      	bne.n	800ba5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a60      	ldr	r2, [pc, #384]	@ (800bc34 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d021      	beq.n	800bafc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01a      	beq.n	800bafc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bace:	e853 3f00 	ldrex	r3, [r3]
 800bad2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800baea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800baee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800baf0:	e841 2300 	strex	r3, r2, [r1]
 800baf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800baf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e4      	bne.n	800bac6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d130      	bne.n	800bb66 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1a:	f023 0310 	bic.w	r3, r3, #16
 800bb1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb34:	e841 2300 	strex	r3, r2, [r1]
 800bb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e4      	bne.n	800bb0a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	f003 0310 	and.w	r3, r3, #16
 800bb4a:	2b10      	cmp	r3, #16
 800bb4c:	d103      	bne.n	800bb56 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2210      	movs	r2, #16
 800bb54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7fe fcc4 	bl	800a4ec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bb64:	e00e      	b.n	800bb84 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7f5 fcb0 	bl	80014cc <HAL_UART_RxCpltCallback>
        break;
 800bb6c:	e00a      	b.n	800bb84 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb6e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d006      	beq.n	800bb84 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800bb76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f47f aeca 	bne.w	800b918 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb8a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bb8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d049      	beq.n	800bc2a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb9c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d242      	bcs.n	800bc2a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	e853 3f00 	ldrex	r3, [r3]
 800bbb2:	623b      	str	r3, [r7, #32]
   return(result);
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bbc8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e3      	bne.n	800bba4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a16      	ldr	r2, [pc, #88]	@ (800bc38 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800bbe0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	e853 3f00 	ldrex	r3, [r3]
 800bbee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f043 0320 	orr.w	r3, r3, #32
 800bbf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	69b9      	ldr	r1, [r7, #24]
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	e841 2300 	strex	r3, r2, [r1]
 800bc10:	617b      	str	r3, [r7, #20]
   return(result);
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e4      	bne.n	800bbe2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc18:	e007      	b.n	800bc2a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f042 0208 	orr.w	r2, r2, #8
 800bc28:	619a      	str	r2, [r3, #24]
}
 800bc2a:	bf00      	nop
 800bc2c:	37b8      	adds	r7, #184	@ 0xb8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	40008000 	.word	0x40008000
 800bc38:	0800b3b5 	.word	0x0800b3b5

0800bc3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d101      	bne.n	800bc8e <HAL_UARTEx_DisableFifoMode+0x16>
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e027      	b.n	800bcde <HAL_UARTEx_DisableFifoMode+0x66>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2224      	movs	r2, #36	@ 0x24
 800bc9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f022 0201 	bic.w	r2, r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d101      	bne.n	800bd02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e02d      	b.n	800bd5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2224      	movs	r2, #36	@ 0x24
 800bd0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0201 	bic.w	r2, r2, #1
 800bd28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	430a      	orrs	r2, r1
 800bd3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f850 	bl	800bde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d101      	bne.n	800bd7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e02d      	b.n	800bdda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2224      	movs	r2, #36	@ 0x24
 800bd8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0201 	bic.w	r2, r2, #1
 800bda4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f812 	bl	800bde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d108      	bne.n	800be06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be04:	e031      	b.n	800be6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be06:	2308      	movs	r3, #8
 800be08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be0a:	2308      	movs	r3, #8
 800be0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	0e5b      	lsrs	r3, r3, #25
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0307 	and.w	r3, r3, #7
 800be1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	0f5b      	lsrs	r3, r3, #29
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f003 0307 	and.w	r3, r3, #7
 800be2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	7b3a      	ldrb	r2, [r7, #12]
 800be32:	4911      	ldr	r1, [pc, #68]	@ (800be78 <UARTEx_SetNbDataToProcess+0x94>)
 800be34:	5c8a      	ldrb	r2, [r1, r2]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be3a:	7b3a      	ldrb	r2, [r7, #12]
 800be3c:	490f      	ldr	r1, [pc, #60]	@ (800be7c <UARTEx_SetNbDataToProcess+0x98>)
 800be3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be40:	fb93 f3f2 	sdiv	r3, r3, r2
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	7b7a      	ldrb	r2, [r7, #13]
 800be50:	4909      	ldr	r1, [pc, #36]	@ (800be78 <UARTEx_SetNbDataToProcess+0x94>)
 800be52:	5c8a      	ldrb	r2, [r1, r2]
 800be54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be58:	7b7a      	ldrb	r2, [r7, #13]
 800be5a:	4908      	ldr	r1, [pc, #32]	@ (800be7c <UARTEx_SetNbDataToProcess+0x98>)
 800be5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be5e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be62:	b29a      	uxth	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	08010950 	.word	0x08010950
 800be7c:	08010958 	.word	0x08010958

0800be80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be90:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	b29a      	uxth	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800beae:	b480      	push	{r7}
 800beb0:	b085      	sub	sp, #20
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800beb6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800beba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	43db      	mvns	r3, r3
 800beca:	b29b      	uxth	r3, r3
 800becc:	4013      	ands	r3, r2
 800bece:	b29a      	uxth	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	1d3b      	adds	r3, r7, #4
 800beee:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b0a7      	sub	sp, #156	@ 0x9c
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bf42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf46:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	78db      	ldrb	r3, [r3, #3]
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d81f      	bhi.n	800bf92 <USB_ActivateEndpoint+0x72>
 800bf52:	a201      	add	r2, pc, #4	@ (adr r2, 800bf58 <USB_ActivateEndpoint+0x38>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf69 	.word	0x0800bf69
 800bf5c:	0800bf85 	.word	0x0800bf85
 800bf60:	0800bf9b 	.word	0x0800bf9b
 800bf64:	0800bf77 	.word	0x0800bf77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bf68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf74:	e012      	b.n	800bf9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bf76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf7a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bf7e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf82:	e00b      	b.n	800bf9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bf84:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf8c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf90:	e004      	b.n	800bf9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800bf98:	e000      	b.n	800bf9c <USB_ActivateEndpoint+0x7c>
      break;
 800bf9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	441a      	add	r2, r3
 800bfa6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bfaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	b21b      	sxth	r3, r3
 800bfce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfd6:	b21a      	sxth	r2, r3
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	b21b      	sxth	r3, r3
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	b21b      	sxth	r3, r3
 800bfe2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	441a      	add	r2, r3
 800bff0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c004:	b29b      	uxth	r3, r3
 800c006:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	7b1b      	ldrb	r3, [r3, #12]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f040 8180 	bne.w	800c312 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	785b      	ldrb	r3, [r3, #1]
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 8084 	beq.w	800c124 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61bb      	str	r3, [r7, #24]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c026:	b29b      	uxth	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	4413      	add	r3, r2
 800c02e:	61bb      	str	r3, [r7, #24]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	00da      	lsls	r2, r3, #3
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	4413      	add	r3, r2
 800c03a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c03e:	617b      	str	r3, [r7, #20]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	88db      	ldrh	r3, [r3, #6]
 800c044:	085b      	lsrs	r3, r3, #1
 800c046:	b29b      	uxth	r3, r3
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	881b      	ldrh	r3, [r3, #0]
 800c05c:	827b      	strh	r3, [r7, #18]
 800c05e:	8a7b      	ldrh	r3, [r7, #18]
 800c060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01b      	beq.n	800c0a0 <USB_ActivateEndpoint+0x180>
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29b      	uxth	r3, r3
 800c076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c07e:	823b      	strh	r3, [r7, #16]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	441a      	add	r2, r3
 800c08a:	8a3b      	ldrh	r3, [r7, #16]
 800c08c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c098:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	78db      	ldrb	r3, [r3, #3]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d020      	beq.n	800c0ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0be:	81bb      	strh	r3, [r7, #12]
 800c0c0:	89bb      	ldrh	r3, [r7, #12]
 800c0c2:	f083 0320 	eor.w	r3, r3, #32
 800c0c6:	81bb      	strh	r3, [r7, #12]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	441a      	add	r2, r3
 800c0d2:	89bb      	ldrh	r3, [r7, #12]
 800c0d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	8013      	strh	r3, [r2, #0]
 800c0e8:	e3f9      	b.n	800c8de <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c100:	81fb      	strh	r3, [r7, #14]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	441a      	add	r2, r3
 800c10c:	89fb      	ldrh	r3, [r7, #14]
 800c10e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11e:	b29b      	uxth	r3, r3
 800c120:	8013      	strh	r3, [r2, #0]
 800c122:	e3dc      	b.n	800c8de <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	633b      	str	r3, [r7, #48]	@ 0x30
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c12e:	b29b      	uxth	r3, r3
 800c130:	461a      	mov	r2, r3
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	4413      	add	r3, r2
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	00da      	lsls	r2, r3, #3
 800c13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c140:	4413      	add	r3, r2
 800c142:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	88db      	ldrh	r3, [r3, #6]
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	b29b      	uxth	r3, r3
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	b29a      	uxth	r2, r3
 800c154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c156:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c162:	b29b      	uxth	r3, r3
 800c164:	461a      	mov	r2, r3
 800c166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c168:	4413      	add	r3, r2
 800c16a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	00da      	lsls	r2, r3, #3
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	4413      	add	r3, r2
 800c176:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c17a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	b29b      	uxth	r3, r3
 800c182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c186:	b29a      	uxth	r2, r3
 800c188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18a:	801a      	strh	r2, [r3, #0]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <USB_ActivateEndpoint+0x28a>
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	801a      	strh	r2, [r3, #0]
 800c1a8:	e041      	b.n	800c22e <USB_ActivateEndpoint+0x30e>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1b0:	d81c      	bhi.n	800c1ec <USB_ActivateEndpoint+0x2cc>
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d004      	beq.n	800c1d2 <USB_ActivateEndpoint+0x2b2>
 800c1c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	029b      	lsls	r3, r3, #10
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	801a      	strh	r2, [r3, #0]
 800c1ea:	e020      	b.n	800c22e <USB_ActivateEndpoint+0x30e>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	095b      	lsrs	r3, r3, #5
 800c1f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f003 031f 	and.w	r3, r3, #31
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d104      	bne.n	800c20c <USB_ActivateEndpoint+0x2ec>
 800c202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c206:	3b01      	subs	r3, #1
 800c208:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	b29a      	uxth	r2, r3
 800c212:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c216:	b29b      	uxth	r3, r3
 800c218:	029b      	lsls	r3, r3, #10
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4313      	orrs	r3, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c228:	b29a      	uxth	r2, r3
 800c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c23c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c23e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d01b      	beq.n	800c27e <USB_ActivateEndpoint+0x35e>
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c25c:	843b      	strh	r3, [r7, #32]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	441a      	add	r2, r3
 800c268:	8c3b      	ldrh	r3, [r7, #32]
 800c26a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c26e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c272:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d124      	bne.n	800c2d0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c29c:	83bb      	strh	r3, [r7, #28]
 800c29e:	8bbb      	ldrh	r3, [r7, #28]
 800c2a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2a4:	83bb      	strh	r3, [r7, #28]
 800c2a6:	8bbb      	ldrh	r3, [r7, #28]
 800c2a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2ac:	83bb      	strh	r3, [r7, #28]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	441a      	add	r2, r3
 800c2b8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	8013      	strh	r3, [r2, #0]
 800c2ce:	e306      	b.n	800c8de <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2e6:	83fb      	strh	r3, [r7, #30]
 800c2e8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2ee:	83fb      	strh	r3, [r7, #30]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	441a      	add	r2, r3
 800c2fa:	8bfb      	ldrh	r3, [r7, #30]
 800c2fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	8013      	strh	r3, [r2, #0]
 800c310:	e2e5      	b.n	800c8de <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	78db      	ldrb	r3, [r3, #3]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d11e      	bne.n	800c358 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29b      	uxth	r3, r3
 800c328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c32c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c330:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	441a      	add	r2, r3
 800c33e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c34a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c352:	b29b      	uxth	r3, r3
 800c354:	8013      	strh	r3, [r2, #0]
 800c356:	e01d      	b.n	800c394 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	b29b      	uxth	r3, r3
 800c366:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c36a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c36e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	441a      	add	r2, r3
 800c37c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c38c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c390:	b29b      	uxth	r3, r3
 800c392:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c3a4:	4413      	add	r3, r2
 800c3a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	00da      	lsls	r2, r3, #3
 800c3ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	891b      	ldrh	r3, [r3, #8]
 800c3bc:	085b      	lsrs	r3, r3, #1
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3c6:	801a      	strh	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3d8:	4413      	add	r3, r2
 800c3da:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	00da      	lsls	r2, r3, #3
 800c3e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c3ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	895b      	ldrh	r3, [r3, #10]
 800c3f0:	085b      	lsrs	r3, r3, #1
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	2b00      	cmp	r3, #0
 800c402:	f040 81af 	bne.w	800c764 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c416:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c41a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d01d      	beq.n	800c45e <USB_ActivateEndpoint+0x53e>
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c438:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	441a      	add	r2, r3
 800c446:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c44a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c44e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c452:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c46e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	d01d      	beq.n	800c4b6 <USB_ActivateEndpoint+0x596>
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4413      	add	r3, r2
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29b      	uxth	r3, r3
 800c488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c48c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c490:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	441a      	add	r2, r3
 800c49e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c4a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d16b      	bne.n	800c596 <USB_ActivateEndpoint+0x676>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ce:	4413      	add	r3, r2
 800c4d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	00da      	lsls	r2, r3, #3
 800c4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4da:	4413      	add	r3, r2
 800c4dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4f0:	801a      	strh	r2, [r3, #0]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <USB_ActivateEndpoint+0x5f0>
 800c4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c508:	b29a      	uxth	r2, r3
 800c50a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c50c:	801a      	strh	r2, [r3, #0]
 800c50e:	e05d      	b.n	800c5cc <USB_ActivateEndpoint+0x6ac>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	2b3e      	cmp	r3, #62	@ 0x3e
 800c516:	d81c      	bhi.n	800c552 <USB_ActivateEndpoint+0x632>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	085b      	lsrs	r3, r3, #1
 800c51e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	f003 0301 	and.w	r3, r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d004      	beq.n	800c538 <USB_ActivateEndpoint+0x618>
 800c52e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c532:	3301      	adds	r3, #1
 800c534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c542:	b29b      	uxth	r3, r3
 800c544:	029b      	lsls	r3, r3, #10
 800c546:	b29b      	uxth	r3, r3
 800c548:	4313      	orrs	r3, r2
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c54e:	801a      	strh	r2, [r3, #0]
 800c550:	e03c      	b.n	800c5cc <USB_ActivateEndpoint+0x6ac>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	095b      	lsrs	r3, r3, #5
 800c558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	f003 031f 	and.w	r3, r3, #31
 800c564:	2b00      	cmp	r3, #0
 800c566:	d104      	bne.n	800c572 <USB_ActivateEndpoint+0x652>
 800c568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c56c:	3b01      	subs	r3, #1
 800c56e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	b29a      	uxth	r2, r3
 800c578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	029b      	lsls	r3, r3, #10
 800c580:	b29b      	uxth	r3, r3
 800c582:	4313      	orrs	r3, r2
 800c584:	b29b      	uxth	r3, r3
 800c586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c58a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c58e:	b29a      	uxth	r2, r3
 800c590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c592:	801a      	strh	r2, [r3, #0]
 800c594:	e01a      	b.n	800c5cc <USB_ActivateEndpoint+0x6ac>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d116      	bne.n	800c5cc <USB_ActivateEndpoint+0x6ac>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ae:	4413      	add	r3, r2
 800c5b0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	00da      	lsls	r2, r3, #3
 800c5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5ca:	801a      	strh	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	785b      	ldrb	r3, [r3, #1]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d16b      	bne.n	800c6b0 <USB_ActivateEndpoint+0x790>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e8:	4413      	add	r3, r2
 800c5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	00da      	lsls	r2, r3, #3
 800c5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29b      	uxth	r3, r3
 800c602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c606:	b29a      	uxth	r2, r3
 800c608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60a:	801a      	strh	r2, [r3, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10a      	bne.n	800c62a <USB_ActivateEndpoint+0x70a>
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c61e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c622:	b29a      	uxth	r2, r3
 800c624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c626:	801a      	strh	r2, [r3, #0]
 800c628:	e05b      	b.n	800c6e2 <USB_ActivateEndpoint+0x7c2>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c630:	d81c      	bhi.n	800c66c <USB_ActivateEndpoint+0x74c>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	085b      	lsrs	r3, r3, #1
 800c638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d004      	beq.n	800c652 <USB_ActivateEndpoint+0x732>
 800c648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c64c:	3301      	adds	r3, #1
 800c64e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29a      	uxth	r2, r3
 800c658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	029b      	lsls	r3, r3, #10
 800c660:	b29b      	uxth	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b29a      	uxth	r2, r3
 800c666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c668:	801a      	strh	r2, [r3, #0]
 800c66a:	e03a      	b.n	800c6e2 <USB_ActivateEndpoint+0x7c2>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	095b      	lsrs	r3, r3, #5
 800c672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 031f 	and.w	r3, r3, #31
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <USB_ActivateEndpoint+0x76c>
 800c682:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c686:	3b01      	subs	r3, #1
 800c688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	b29a      	uxth	r2, r3
 800c692:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c696:	b29b      	uxth	r3, r3
 800c698:	029b      	lsls	r3, r3, #10
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	4313      	orrs	r3, r2
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ac:	801a      	strh	r2, [r3, #0]
 800c6ae:	e018      	b.n	800c6e2 <USB_ActivateEndpoint+0x7c2>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	785b      	ldrb	r3, [r3, #1]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d114      	bne.n	800c6e2 <USB_ActivateEndpoint+0x7c2>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6c4:	4413      	add	r3, r2
 800c6c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	00da      	lsls	r2, r3, #3
 800c6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6e0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c6fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c700:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c702:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c704:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c708:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	441a      	add	r2, r3
 800c714:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c71e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	b29b      	uxth	r3, r3
 800c728:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c73c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c740:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	441a      	add	r2, r3
 800c74c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c74e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75e:	b29b      	uxth	r3, r3
 800c760:	8013      	strh	r3, [r2, #0]
 800c762:	e0bc      	b.n	800c8de <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c774:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d01d      	beq.n	800c7bc <USB_ActivateEndpoint+0x89c>
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c796:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	441a      	add	r2, r3
 800c7a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c7a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c7cc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d01d      	beq.n	800c814 <USB_ActivateEndpoint+0x8f4>
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4413      	add	r3, r2
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ee:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	441a      	add	r2, r3
 800c7fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c810:	b29b      	uxth	r3, r3
 800c812:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	78db      	ldrb	r3, [r3, #3]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d024      	beq.n	800c866 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c832:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c836:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c83a:	f083 0320 	eor.w	r3, r3, #32
 800c83e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	441a      	add	r2, r3
 800c84c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c850:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c854:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c85c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c860:	b29b      	uxth	r3, r3
 800c862:	8013      	strh	r3, [r2, #0]
 800c864:	e01d      	b.n	800c8a2 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	b29b      	uxth	r3, r3
 800c874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c87c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	441a      	add	r2, r3
 800c88a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c88e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c89a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8b8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	441a      	add	r2, r3
 800c8c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c8ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c8de:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	379c      	adds	r7, #156	@ 0x9c
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop

0800c8f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b08d      	sub	sp, #52	@ 0x34
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	7b1b      	ldrb	r3, [r3, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f040 808e 	bne.w	800ca20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d044      	beq.n	800c996 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	81bb      	strh	r3, [r7, #12]
 800c91a:	89bb      	ldrh	r3, [r7, #12]
 800c91c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01b      	beq.n	800c95c <USB_DeactivateEndpoint+0x6c>
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c93a:	817b      	strh	r3, [r7, #10]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	441a      	add	r2, r3
 800c946:	897b      	ldrh	r3, [r7, #10]
 800c948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c94c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c954:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c958:	b29b      	uxth	r3, r3
 800c95a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c96e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c972:	813b      	strh	r3, [r7, #8]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	441a      	add	r2, r3
 800c97e:	893b      	ldrh	r3, [r7, #8]
 800c980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c990:	b29b      	uxth	r3, r3
 800c992:	8013      	strh	r3, [r2, #0]
 800c994:	e192      	b.n	800ccbc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	827b      	strh	r3, [r7, #18]
 800c9a4:	8a7b      	ldrh	r3, [r7, #18]
 800c9a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d01b      	beq.n	800c9e6 <USB_DeactivateEndpoint+0xf6>
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c4:	823b      	strh	r3, [r7, #16]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	441a      	add	r2, r3
 800c9d0:	8a3b      	ldrh	r3, [r7, #16]
 800c9d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9fc:	81fb      	strh	r3, [r7, #14]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	441a      	add	r2, r3
 800ca08:	89fb      	ldrh	r3, [r7, #14]
 800ca0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	8013      	strh	r3, [r2, #0]
 800ca1e:	e14d      	b.n	800ccbc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 80a5 	bne.w	800cb74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	843b      	strh	r3, [r7, #32]
 800ca38:	8c3b      	ldrh	r3, [r7, #32]
 800ca3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d01b      	beq.n	800ca7a <USB_DeactivateEndpoint+0x18a>
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca58:	83fb      	strh	r3, [r7, #30]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	441a      	add	r2, r3
 800ca64:	8bfb      	ldrh	r3, [r7, #30]
 800ca66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	83bb      	strh	r3, [r7, #28]
 800ca88:	8bbb      	ldrh	r3, [r7, #28]
 800ca8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d01b      	beq.n	800caca <USB_DeactivateEndpoint+0x1da>
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa8:	837b      	strh	r3, [r7, #26]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	441a      	add	r2, r3
 800cab4:	8b7b      	ldrh	r3, [r7, #26]
 800cab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cabe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cac2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cadc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cae0:	833b      	strh	r3, [r7, #24]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	441a      	add	r2, r3
 800caec:	8b3b      	ldrh	r3, [r7, #24]
 800caee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cafa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb18:	82fb      	strh	r3, [r7, #22]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	441a      	add	r2, r3
 800cb24:	8afb      	ldrh	r3, [r7, #22]
 800cb26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb50:	82bb      	strh	r3, [r7, #20]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	441a      	add	r2, r3
 800cb5c:	8abb      	ldrh	r3, [r7, #20]
 800cb5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	8013      	strh	r3, [r2, #0]
 800cb72:	e0a3      	b.n	800ccbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cb82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01b      	beq.n	800cbc4 <USB_DeactivateEndpoint+0x2d4>
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cba2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	441a      	add	r2, r3
 800cbae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cbb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cbd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d01b      	beq.n	800cc14 <USB_DeactivateEndpoint+0x324>
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	441a      	add	r2, r3
 800cbfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	441a      	add	r2, r3
 800cc36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cc38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	441a      	add	r2, r3
 800cc6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	881b      	ldrh	r3, [r3, #0]
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	441a      	add	r2, r3
 800cca6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3734      	adds	r7, #52	@ 0x34
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b0ac      	sub	sp, #176	@ 0xb0
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	785b      	ldrb	r3, [r3, #1]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	f040 84ca 	bne.w	800d672 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	699a      	ldr	r2, [r3, #24]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d904      	bls.n	800ccf4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccf2:	e003      	b.n	800ccfc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	7b1b      	ldrb	r3, [r3, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d122      	bne.n	800cd4a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	6959      	ldr	r1, [r3, #20]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	88da      	ldrh	r2, [r3, #6]
 800cd0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 febd 	bl	800da92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	613b      	str	r3, [r7, #16]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	461a      	mov	r2, r3
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	4413      	add	r3, r2
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	00da      	lsls	r2, r3, #3
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	4413      	add	r3, r2
 800cd36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	801a      	strh	r2, [r3, #0]
 800cd46:	f000 bc6f 	b.w	800d628 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	78db      	ldrb	r3, [r3, #3]
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	f040 831e 	bne.w	800d390 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	6a1a      	ldr	r2, [r3, #32]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	f240 82cf 	bls.w	800d300 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	881b      	ldrh	r3, [r3, #0]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd78:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	441a      	add	r2, r3
 800cd86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cd8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd92:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cd96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	6a1a      	ldr	r2, [r3, #32]
 800cda2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cda6:	1ad2      	subs	r2, r2, r3
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f000 814f 	beq.w	800d062 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	785b      	ldrb	r3, [r3, #1]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d16b      	bne.n	800cea8 <USB_EPStartXfer+0x1de>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	461a      	mov	r2, r3
 800cdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde0:	4413      	add	r3, r2
 800cde2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	00da      	lsls	r2, r3, #3
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	4413      	add	r3, r2
 800cdee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cdf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	801a      	strh	r2, [r3, #0]
 800ce04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10a      	bne.n	800ce22 <USB_EPStartXfer+0x158>
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	801a      	strh	r2, [r3, #0]
 800ce20:	e05b      	b.n	800ceda <USB_EPStartXfer+0x210>
 800ce22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce26:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce28:	d81c      	bhi.n	800ce64 <USB_EPStartXfer+0x19a>
 800ce2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce2e:	085b      	lsrs	r3, r3, #1
 800ce30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d004      	beq.n	800ce4a <USB_EPStartXfer+0x180>
 800ce40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce44:	3301      	adds	r3, #1
 800ce46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	029b      	lsls	r3, r3, #10
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	801a      	strh	r2, [r3, #0]
 800ce62:	e03a      	b.n	800ceda <USB_EPStartXfer+0x210>
 800ce64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce68:	095b      	lsrs	r3, r3, #5
 800ce6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce72:	f003 031f 	and.w	r3, r3, #31
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d104      	bne.n	800ce84 <USB_EPStartXfer+0x1ba>
 800ce7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	881b      	ldrh	r3, [r3, #0]
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	029b      	lsls	r3, r3, #10
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4313      	orrs	r3, r2
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea4:	801a      	strh	r2, [r3, #0]
 800cea6:	e018      	b.n	800ceda <USB_EPStartXfer+0x210>
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	785b      	ldrb	r3, [r3, #1]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d114      	bne.n	800ceda <USB_EPStartXfer+0x210>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	461a      	mov	r2, r3
 800ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebc:	4413      	add	r3, r2
 800cebe:	633b      	str	r3, [r7, #48]	@ 0x30
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	00da      	lsls	r2, r3, #3
 800cec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec8:	4413      	add	r3, r2
 800ceca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ced0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	895b      	ldrh	r3, [r3, #10]
 800cede:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	6959      	ldr	r1, [r3, #20]
 800cee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fdce 	bl	800da92 <USB_WritePMA>
            ep->xfer_buff += len;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	695a      	ldr	r2, [r3, #20]
 800cefa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cefe:	441a      	add	r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	6a1a      	ldr	r2, [r3, #32]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d907      	bls.n	800cf20 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	6a1a      	ldr	r2, [r3, #32]
 800cf14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf18:	1ad2      	subs	r2, r2, r3
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	621a      	str	r2, [r3, #32]
 800cf1e:	e006      	b.n	800cf2e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	6a1b      	ldr	r3, [r3, #32]
 800cf24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	785b      	ldrb	r3, [r3, #1]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d16b      	bne.n	800d00e <USB_EPStartXfer+0x344>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	461a      	mov	r2, r3
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	4413      	add	r3, r2
 800cf48:	61bb      	str	r3, [r7, #24]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	00da      	lsls	r2, r3, #3
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	4413      	add	r3, r2
 800cf54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	801a      	strh	r2, [r3, #0]
 800cf6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10a      	bne.n	800cf88 <USB_EPStartXfer+0x2be>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	801a      	strh	r2, [r3, #0]
 800cf86:	e05d      	b.n	800d044 <USB_EPStartXfer+0x37a>
 800cf88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf8e:	d81c      	bhi.n	800cfca <USB_EPStartXfer+0x300>
 800cf90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d004      	beq.n	800cfb0 <USB_EPStartXfer+0x2e6>
 800cfa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfaa:	3301      	adds	r3, #1
 800cfac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	029b      	lsls	r3, r3, #10
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	801a      	strh	r2, [r3, #0]
 800cfc8:	e03c      	b.n	800d044 <USB_EPStartXfer+0x37a>
 800cfca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfce:	095b      	lsrs	r3, r3, #5
 800cfd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d104      	bne.n	800cfea <USB_EPStartXfer+0x320>
 800cfe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	029b      	lsls	r3, r3, #10
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d006:	b29a      	uxth	r2, r3
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	801a      	strh	r2, [r3, #0]
 800d00c:	e01a      	b.n	800d044 <USB_EPStartXfer+0x37a>
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	785b      	ldrb	r3, [r3, #1]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d116      	bne.n	800d044 <USB_EPStartXfer+0x37a>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	623b      	str	r3, [r7, #32]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d020:	b29b      	uxth	r3, r3
 800d022:	461a      	mov	r2, r3
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	4413      	add	r3, r2
 800d028:	623b      	str	r3, [r7, #32]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	00da      	lsls	r2, r3, #3
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	4413      	add	r3, r2
 800d034:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d03e:	b29a      	uxth	r2, r3
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	891b      	ldrh	r3, [r3, #8]
 800d048:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	6959      	ldr	r1, [r3, #20]
 800d050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d054:	b29b      	uxth	r3, r3
 800d056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fd19 	bl	800da92 <USB_WritePMA>
 800d060:	e2e2      	b.n	800d628 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d16b      	bne.n	800d142 <USB_EPStartXfer+0x478>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d074:	b29b      	uxth	r3, r3
 800d076:	461a      	mov	r2, r3
 800d078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d07a:	4413      	add	r3, r2
 800d07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	00da      	lsls	r2, r3, #3
 800d084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d086:	4413      	add	r3, r2
 800d088:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d08c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d08e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	b29b      	uxth	r3, r3
 800d094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d098:	b29a      	uxth	r2, r3
 800d09a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d09c:	801a      	strh	r2, [r3, #0]
 800d09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10a      	bne.n	800d0bc <USB_EPStartXfer+0x3f2>
 800d0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0b8:	801a      	strh	r2, [r3, #0]
 800d0ba:	e05d      	b.n	800d178 <USB_EPStartXfer+0x4ae>
 800d0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0c2:	d81c      	bhi.n	800d0fe <USB_EPStartXfer+0x434>
 800d0c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c8:	085b      	lsrs	r3, r3, #1
 800d0ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d004      	beq.n	800d0e4 <USB_EPStartXfer+0x41a>
 800d0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0de:	3301      	adds	r3, #1
 800d0e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0e6:	881b      	ldrh	r3, [r3, #0]
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	029b      	lsls	r3, r3, #10
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0fa:	801a      	strh	r2, [r3, #0]
 800d0fc:	e03c      	b.n	800d178 <USB_EPStartXfer+0x4ae>
 800d0fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d102:	095b      	lsrs	r3, r3, #5
 800d104:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d10c:	f003 031f 	and.w	r3, r3, #31
 800d110:	2b00      	cmp	r3, #0
 800d112:	d104      	bne.n	800d11e <USB_EPStartXfer+0x454>
 800d114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d118:	3b01      	subs	r3, #1
 800d11a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d11e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	b29a      	uxth	r2, r3
 800d124:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d128:	b29b      	uxth	r3, r3
 800d12a:	029b      	lsls	r3, r3, #10
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	b29b      	uxth	r3, r3
 800d132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d13e:	801a      	strh	r2, [r3, #0]
 800d140:	e01a      	b.n	800d178 <USB_EPStartXfer+0x4ae>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	785b      	ldrb	r3, [r3, #1]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d116      	bne.n	800d178 <USB_EPStartXfer+0x4ae>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d154:	b29b      	uxth	r3, r3
 800d156:	461a      	mov	r2, r3
 800d158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15a:	4413      	add	r3, r2
 800d15c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	00da      	lsls	r2, r3, #3
 800d164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d166:	4413      	add	r3, r2
 800d168:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d16e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d172:	b29a      	uxth	r2, r3
 800d174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d176:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	891b      	ldrh	r3, [r3, #8]
 800d17c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	6959      	ldr	r1, [r3, #20]
 800d184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fc7f 	bl	800da92 <USB_WritePMA>
            ep->xfer_buff += len;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	695a      	ldr	r2, [r3, #20]
 800d198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d19c:	441a      	add	r2, r3
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	6a1a      	ldr	r2, [r3, #32]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d907      	bls.n	800d1be <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	6a1a      	ldr	r2, [r3, #32]
 800d1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1b6:	1ad2      	subs	r2, r2, r3
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	621a      	str	r2, [r3, #32]
 800d1bc:	e006      	b.n	800d1cc <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d16b      	bne.n	800d2b0 <USB_EPStartXfer+0x5e6>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e8:	4413      	add	r3, r2
 800d1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	00da      	lsls	r2, r3, #3
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	b29b      	uxth	r3, r3
 800d202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d206:	b29a      	uxth	r2, r3
 800d208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20a:	801a      	strh	r2, [r3, #0]
 800d20c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <USB_EPStartXfer+0x560>
 800d214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d21e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d222:	b29a      	uxth	r2, r3
 800d224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d226:	801a      	strh	r2, [r3, #0]
 800d228:	e05b      	b.n	800d2e2 <USB_EPStartXfer+0x618>
 800d22a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d22e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d230:	d81c      	bhi.n	800d26c <USB_EPStartXfer+0x5a2>
 800d232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d236:	085b      	lsrs	r3, r3, #1
 800d238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d004      	beq.n	800d252 <USB_EPStartXfer+0x588>
 800d248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d24c:	3301      	adds	r3, #1
 800d24e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	b29a      	uxth	r2, r3
 800d258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	029b      	lsls	r3, r3, #10
 800d260:	b29b      	uxth	r3, r3
 800d262:	4313      	orrs	r3, r2
 800d264:	b29a      	uxth	r2, r3
 800d266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d268:	801a      	strh	r2, [r3, #0]
 800d26a:	e03a      	b.n	800d2e2 <USB_EPStartXfer+0x618>
 800d26c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d270:	095b      	lsrs	r3, r3, #5
 800d272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d27a:	f003 031f 	and.w	r3, r3, #31
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d104      	bne.n	800d28c <USB_EPStartXfer+0x5c2>
 800d282:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d286:	3b01      	subs	r3, #1
 800d288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	b29a      	uxth	r2, r3
 800d292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d296:	b29b      	uxth	r3, r3
 800d298:	029b      	lsls	r3, r3, #10
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	4313      	orrs	r3, r2
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ac:	801a      	strh	r2, [r3, #0]
 800d2ae:	e018      	b.n	800d2e2 <USB_EPStartXfer+0x618>
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	785b      	ldrb	r3, [r3, #1]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d114      	bne.n	800d2e2 <USB_EPStartXfer+0x618>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2c4:	4413      	add	r3, r2
 800d2c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	00da      	lsls	r2, r3, #3
 800d2ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	895b      	ldrh	r3, [r3, #10]
 800d2e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	6959      	ldr	r1, [r3, #20]
 800d2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 fbca 	bl	800da92 <USB_WritePMA>
 800d2fe:	e193      	b.n	800d628 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	881b      	ldrh	r3, [r3, #0]
 800d314:	b29b      	uxth	r3, r3
 800d316:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d31e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	441a      	add	r2, r3
 800d32c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d33c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d340:	b29b      	uxth	r3, r3
 800d342:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d34e:	b29b      	uxth	r3, r3
 800d350:	461a      	mov	r2, r3
 800d352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d354:	4413      	add	r3, r2
 800d356:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	00da      	lsls	r2, r3, #3
 800d35e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d360:	4413      	add	r3, r2
 800d362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d366:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d370:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	891b      	ldrh	r3, [r3, #8]
 800d376:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	6959      	ldr	r1, [r3, #20]
 800d37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d382:	b29b      	uxth	r3, r3
 800d384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fb82 	bl	800da92 <USB_WritePMA>
 800d38e:	e14b      	b.n	800d628 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	6a1a      	ldr	r2, [r3, #32]
 800d394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d398:	1ad2      	subs	r2, r2, r3
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 809a 	beq.w	800d4ea <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	785b      	ldrb	r3, [r3, #1]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d16b      	bne.n	800d49a <USB_EPStartXfer+0x7d0>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3d2:	4413      	add	r3, r2
 800d3d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	00da      	lsls	r2, r3, #3
 800d3dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3de:	4413      	add	r3, r2
 800d3e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3e8:	881b      	ldrh	r3, [r3, #0]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3f4:	801a      	strh	r2, [r3, #0]
 800d3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <USB_EPStartXfer+0x74a>
 800d3fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	b29b      	uxth	r3, r3
 800d404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d410:	801a      	strh	r2, [r3, #0]
 800d412:	e05b      	b.n	800d4cc <USB_EPStartXfer+0x802>
 800d414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d418:	2b3e      	cmp	r3, #62	@ 0x3e
 800d41a:	d81c      	bhi.n	800d456 <USB_EPStartXfer+0x78c>
 800d41c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d420:	085b      	lsrs	r3, r3, #1
 800d422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <USB_EPStartXfer+0x772>
 800d432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d436:	3301      	adds	r3, #1
 800d438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d43c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	b29a      	uxth	r2, r3
 800d442:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d446:	b29b      	uxth	r3, r3
 800d448:	029b      	lsls	r3, r3, #10
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4313      	orrs	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d452:	801a      	strh	r2, [r3, #0]
 800d454:	e03a      	b.n	800d4cc <USB_EPStartXfer+0x802>
 800d456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d45a:	095b      	lsrs	r3, r3, #5
 800d45c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d464:	f003 031f 	and.w	r3, r3, #31
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <USB_EPStartXfer+0x7ac>
 800d46c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d470:	3b01      	subs	r3, #1
 800d472:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d480:	b29b      	uxth	r3, r3
 800d482:	029b      	lsls	r3, r3, #10
 800d484:	b29b      	uxth	r3, r3
 800d486:	4313      	orrs	r3, r2
 800d488:	b29b      	uxth	r3, r3
 800d48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d492:	b29a      	uxth	r2, r3
 800d494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d496:	801a      	strh	r2, [r3, #0]
 800d498:	e018      	b.n	800d4cc <USB_EPStartXfer+0x802>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d114      	bne.n	800d4cc <USB_EPStartXfer+0x802>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ae:	4413      	add	r3, r2
 800d4b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	00da      	lsls	r2, r3, #3
 800d4b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	895b      	ldrh	r3, [r3, #10]
 800d4d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	6959      	ldr	r1, [r3, #20]
 800d4d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fad5 	bl	800da92 <USB_WritePMA>
 800d4e8:	e09e      	b.n	800d628 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	785b      	ldrb	r3, [r3, #1]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d16b      	bne.n	800d5ca <USB_EPStartXfer+0x900>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	461a      	mov	r2, r3
 800d500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d502:	4413      	add	r3, r2
 800d504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	00da      	lsls	r2, r3, #3
 800d50c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d50e:	4413      	add	r3, r2
 800d510:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d514:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d520:	b29a      	uxth	r2, r3
 800d522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d524:	801a      	strh	r2, [r3, #0]
 800d526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10a      	bne.n	800d544 <USB_EPStartXfer+0x87a>
 800d52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	b29b      	uxth	r3, r3
 800d534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d540:	801a      	strh	r2, [r3, #0]
 800d542:	e063      	b.n	800d60c <USB_EPStartXfer+0x942>
 800d544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d548:	2b3e      	cmp	r3, #62	@ 0x3e
 800d54a:	d81c      	bhi.n	800d586 <USB_EPStartXfer+0x8bc>
 800d54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d550:	085b      	lsrs	r3, r3, #1
 800d552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <USB_EPStartXfer+0x8a2>
 800d562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d566:	3301      	adds	r3, #1
 800d568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d56c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d56e:	881b      	ldrh	r3, [r3, #0]
 800d570:	b29a      	uxth	r2, r3
 800d572:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d576:	b29b      	uxth	r3, r3
 800d578:	029b      	lsls	r3, r3, #10
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	4313      	orrs	r3, r2
 800d57e:	b29a      	uxth	r2, r3
 800d580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d582:	801a      	strh	r2, [r3, #0]
 800d584:	e042      	b.n	800d60c <USB_EPStartXfer+0x942>
 800d586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d58a:	095b      	lsrs	r3, r3, #5
 800d58c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d594:	f003 031f 	and.w	r3, r3, #31
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <USB_EPStartXfer+0x8dc>
 800d59c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d5a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	029b      	lsls	r3, r3, #10
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5c6:	801a      	strh	r2, [r3, #0]
 800d5c8:	e020      	b.n	800d60c <USB_EPStartXfer+0x942>
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d11c      	bne.n	800d60c <USB_EPStartXfer+0x942>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	00da      	lsls	r2, r3, #3
 800d5f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d604:	b29a      	uxth	r2, r3
 800d606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d60a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	891b      	ldrh	r3, [r3, #8]
 800d610:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	6959      	ldr	r1, [r3, #20]
 800d618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fa35 	bl	800da92 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	b29b      	uxth	r3, r3
 800d636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d63a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d63e:	817b      	strh	r3, [r7, #10]
 800d640:	897b      	ldrh	r3, [r7, #10]
 800d642:	f083 0310 	eor.w	r3, r3, #16
 800d646:	817b      	strh	r3, [r7, #10]
 800d648:	897b      	ldrh	r3, [r7, #10]
 800d64a:	f083 0320 	eor.w	r3, r3, #32
 800d64e:	817b      	strh	r3, [r7, #10]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	441a      	add	r2, r3
 800d65a:	897b      	ldrh	r3, [r7, #10]
 800d65c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	8013      	strh	r3, [r2, #0]
 800d670:	e0d5      	b.n	800d81e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	7b1b      	ldrb	r3, [r3, #12]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d156      	bne.n	800d728 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d122      	bne.n	800d6c8 <USB_EPStartXfer+0x9fe>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	78db      	ldrb	r3, [r3, #3]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d11e      	bne.n	800d6c8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	4413      	add	r3, r2
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	b29b      	uxth	r3, r3
 800d698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d69c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6a0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	441a      	add	r2, r3
 800d6ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d6b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d6be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	8013      	strh	r3, [r2, #0]
 800d6c6:	e01d      	b.n	800d704 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d6da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6de:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	441a      	add	r2, r3
 800d6ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d6f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d700:	b29b      	uxth	r3, r3
 800d702:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	699a      	ldr	r2, [r3, #24]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d907      	bls.n	800d720 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	699a      	ldr	r2, [r3, #24]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	1ad2      	subs	r2, r2, r3
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	619a      	str	r2, [r3, #24]
 800d71e:	e054      	b.n	800d7ca <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	2200      	movs	r2, #0
 800d724:	619a      	str	r2, [r3, #24]
 800d726:	e050      	b.n	800d7ca <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	78db      	ldrb	r3, [r3, #3]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d142      	bne.n	800d7b6 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	69db      	ldr	r3, [r3, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d048      	beq.n	800d7ca <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d748:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d74c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d750:	2b00      	cmp	r3, #0
 800d752:	d005      	beq.n	800d760 <USB_EPStartXfer+0xa96>
 800d754:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d760:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d12e      	bne.n	800d7ca <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d76c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d774:	2b00      	cmp	r3, #0
 800d776:	d128      	bne.n	800d7ca <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	b29b      	uxth	r3, r3
 800d786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d78a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d78e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	441a      	add	r2, r3
 800d79c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d7a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	8013      	strh	r3, [r2, #0]
 800d7b4:	e009      	b.n	800d7ca <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	78db      	ldrb	r3, [r3, #3]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d103      	bne.n	800d7c6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	619a      	str	r2, [r3, #24]
 800d7c4:	e001      	b.n	800d7ca <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e02a      	b.n	800d820 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d7dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d7ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	441a      	add	r2, r3
 800d806:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d80a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d80e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	37b0      	adds	r7, #176	@ 0xb0
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d020      	beq.n	800d87c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4413      	add	r3, r2
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	b29b      	uxth	r3, r3
 800d848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d84c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d850:	81bb      	strh	r3, [r7, #12]
 800d852:	89bb      	ldrh	r3, [r7, #12]
 800d854:	f083 0310 	eor.w	r3, r3, #16
 800d858:	81bb      	strh	r3, [r7, #12]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	441a      	add	r2, r3
 800d864:	89bb      	ldrh	r3, [r7, #12]
 800d866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d86a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d86e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d876:	b29b      	uxth	r3, r3
 800d878:	8013      	strh	r3, [r2, #0]
 800d87a:	e01f      	b.n	800d8bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d88e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d892:	81fb      	strh	r3, [r7, #14]
 800d894:	89fb      	ldrh	r3, [r7, #14]
 800d896:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d89a:	81fb      	strh	r3, [r7, #14]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	441a      	add	r2, r3
 800d8a6:	89fb      	ldrh	r3, [r7, #14]
 800d8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3714      	adds	r7, #20
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b087      	sub	sp, #28
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	785b      	ldrb	r3, [r3, #1]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d04c      	beq.n	800d976 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	823b      	strh	r3, [r7, #16]
 800d8ea:	8a3b      	ldrh	r3, [r7, #16]
 800d8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01b      	beq.n	800d92c <USB_EPClearStall+0x62>
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4413      	add	r3, r2
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	b29b      	uxth	r3, r3
 800d902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d90a:	81fb      	strh	r3, [r7, #14]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	441a      	add	r2, r3
 800d916:	89fb      	ldrh	r3, [r7, #14]
 800d918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d91c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d924:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d928:	b29b      	uxth	r3, r3
 800d92a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	78db      	ldrb	r3, [r3, #3]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d06c      	beq.n	800da0e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	b29b      	uxth	r3, r3
 800d942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d94a:	81bb      	strh	r3, [r7, #12]
 800d94c:	89bb      	ldrh	r3, [r7, #12]
 800d94e:	f083 0320 	eor.w	r3, r3, #32
 800d952:	81bb      	strh	r3, [r7, #12]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	441a      	add	r2, r3
 800d95e:	89bb      	ldrh	r3, [r7, #12]
 800d960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d970:	b29b      	uxth	r3, r3
 800d972:	8013      	strh	r3, [r2, #0]
 800d974:	e04b      	b.n	800da0e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	881b      	ldrh	r3, [r3, #0]
 800d982:	82fb      	strh	r3, [r7, #22]
 800d984:	8afb      	ldrh	r3, [r7, #22]
 800d986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d01b      	beq.n	800d9c6 <USB_EPClearStall+0xfc>
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9a4:	82bb      	strh	r3, [r7, #20]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	441a      	add	r2, r3
 800d9b0:	8abb      	ldrh	r3, [r7, #20]
 800d9b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9dc:	827b      	strh	r3, [r7, #18]
 800d9de:	8a7b      	ldrh	r3, [r7, #18]
 800d9e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d9e4:	827b      	strh	r3, [r7, #18]
 800d9e6:	8a7b      	ldrh	r3, [r7, #18]
 800d9e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d9ec:	827b      	strh	r3, [r7, #18]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	441a      	add	r2, r3
 800d9f8:	8a7b      	ldrh	r3, [r7, #18]
 800d9fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	371c      	adds	r7, #28
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d103      	bne.n	800da36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2280      	movs	r2, #128	@ 0x80
 800da32:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800da52:	b29b      	uxth	r3, r3
 800da54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800da72:	b480      	push	{r7}
 800da74:	b085      	sub	sp, #20
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800da80:	b29b      	uxth	r3, r3
 800da82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800da84:	68fb      	ldr	r3, [r7, #12]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800da92:	b480      	push	{r7}
 800da94:	b08b      	sub	sp, #44	@ 0x2c
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	4611      	mov	r1, r2
 800da9e:	461a      	mov	r2, r3
 800daa0:	460b      	mov	r3, r1
 800daa2:	80fb      	strh	r3, [r7, #6]
 800daa4:	4613      	mov	r3, r2
 800daa6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800daa8:	88bb      	ldrh	r3, [r7, #4]
 800daaa:	3301      	adds	r3, #1
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dab8:	88fa      	ldrh	r2, [r7, #6]
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	4413      	add	r3, r2
 800dabe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dac2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dac8:	e01b      	b.n	800db02 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	3301      	adds	r3, #1
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	b21a      	sxth	r2, r3
 800dada:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dade:	4313      	orrs	r3, r2
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	8a7a      	ldrh	r2, [r7, #18]
 800dae8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	3302      	adds	r3, #2
 800daee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	3301      	adds	r3, #1
 800daf4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	3301      	adds	r3, #1
 800dafa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafe:	3b01      	subs	r3, #1
 800db00:	627b      	str	r3, [r7, #36]	@ 0x24
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1e0      	bne.n	800daca <USB_WritePMA+0x38>
  }
}
 800db08:	bf00      	nop
 800db0a:	bf00      	nop
 800db0c:	372c      	adds	r7, #44	@ 0x2c
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800db16:	b480      	push	{r7}
 800db18:	b08b      	sub	sp, #44	@ 0x2c
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	60f8      	str	r0, [r7, #12]
 800db1e:	60b9      	str	r1, [r7, #8]
 800db20:	4611      	mov	r1, r2
 800db22:	461a      	mov	r2, r3
 800db24:	460b      	mov	r3, r1
 800db26:	80fb      	strh	r3, [r7, #6]
 800db28:	4613      	mov	r3, r2
 800db2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800db2c:	88bb      	ldrh	r3, [r7, #4]
 800db2e:	085b      	lsrs	r3, r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800db3c:	88fa      	ldrh	r2, [r7, #6]
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	4413      	add	r3, r2
 800db42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db46:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800db4c:	e018      	b.n	800db80 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	3302      	adds	r3, #2
 800db5a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	3301      	adds	r3, #1
 800db68:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	0a1b      	lsrs	r3, r3, #8
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	3301      	adds	r3, #1
 800db78:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800db7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db7c:	3b01      	subs	r3, #1
 800db7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1e3      	bne.n	800db4e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800db86:	88bb      	ldrh	r3, [r7, #4]
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	b29b      	uxth	r3, r3
 800db98:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	701a      	strb	r2, [r3, #0]
  }
}
 800dba2:	bf00      	nop
 800dba4:	372c      	adds	r7, #44	@ 0x2c
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dbba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dbbe:	f002 f923 	bl	800fe08 <USBD_static_malloc>
 800dbc2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d105      	bne.n	800dbd6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e066      	b.n	800dca4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	7c1b      	ldrb	r3, [r3, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d119      	bne.n	800dc1a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dbe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbea:	2202      	movs	r2, #2
 800dbec:	2181      	movs	r1, #129	@ 0x81
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f001 ffb1 	bl	800fb56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dbfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dbfe:	2202      	movs	r2, #2
 800dc00:	2101      	movs	r1, #1
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f001 ffa7 	bl	800fb56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2210      	movs	r2, #16
 800dc14:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800dc18:	e016      	b.n	800dc48 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc1a:	2340      	movs	r3, #64	@ 0x40
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	2181      	movs	r1, #129	@ 0x81
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 ff98 	bl	800fb56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dc2c:	2340      	movs	r3, #64	@ 0x40
 800dc2e:	2202      	movs	r2, #2
 800dc30:	2101      	movs	r1, #1
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f001 ff8f 	bl	800fb56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2210      	movs	r2, #16
 800dc44:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dc48:	2308      	movs	r3, #8
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	2182      	movs	r1, #130	@ 0x82
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f001 ff81 	bl	800fb56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	7c1b      	ldrb	r3, [r3, #16]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc88:	2101      	movs	r1, #1
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f002 f852 	bl	800fd34 <USBD_LL_PrepareReceive>
 800dc90:	e007      	b.n	800dca2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc98:	2340      	movs	r3, #64	@ 0x40
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f002 f849 	bl	800fd34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dcb8:	2181      	movs	r1, #129	@ 0x81
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f001 ff71 	bl	800fba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 ff6a 	bl	800fba2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dcd6:	2182      	movs	r1, #130	@ 0x82
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f001 ff62 	bl	800fba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00e      	beq.n	800dd16 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f002 f88b 	bl	800fe24 <USBD_static_free>
    pdev->pClassData = NULL;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dd36:	2300      	movs	r3, #0
 800dd38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e0af      	b.n	800dea8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d03f      	beq.n	800ddd4 <USBD_CDC_Setup+0xb4>
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	f040 809f 	bne.w	800de98 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	88db      	ldrh	r3, [r3, #6]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d02e      	beq.n	800ddc0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da16      	bge.n	800dd9a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800dd78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	88d2      	ldrh	r2, [r2, #6]
 800dd7e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	88db      	ldrh	r3, [r3, #6]
 800dd84:	2b07      	cmp	r3, #7
 800dd86:	bf28      	it	cs
 800dd88:	2307      	movcs	r3, #7
 800dd8a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	89fa      	ldrh	r2, [r7, #14]
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f001 facd 	bl	800f332 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800dd98:	e085      	b.n	800dea6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	785a      	ldrb	r2, [r3, #1]
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	88db      	ldrh	r3, [r3, #6]
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ddb0:	6939      	ldr	r1, [r7, #16]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	88db      	ldrh	r3, [r3, #6]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f001 fae6 	bl	800f38a <USBD_CtlPrepareRx>
      break;
 800ddbe:	e072      	b.n	800dea6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	7850      	ldrb	r0, [r2, #1]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	6839      	ldr	r1, [r7, #0]
 800ddd0:	4798      	blx	r3
      break;
 800ddd2:	e068      	b.n	800dea6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	785b      	ldrb	r3, [r3, #1]
 800ddd8:	2b0b      	cmp	r3, #11
 800ddda:	d852      	bhi.n	800de82 <USBD_CDC_Setup+0x162>
 800dddc:	a201      	add	r2, pc, #4	@ (adr r2, 800dde4 <USBD_CDC_Setup+0xc4>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800de15 	.word	0x0800de15
 800dde8:	0800de91 	.word	0x0800de91
 800ddec:	0800de83 	.word	0x0800de83
 800ddf0:	0800de83 	.word	0x0800de83
 800ddf4:	0800de83 	.word	0x0800de83
 800ddf8:	0800de83 	.word	0x0800de83
 800ddfc:	0800de83 	.word	0x0800de83
 800de00:	0800de83 	.word	0x0800de83
 800de04:	0800de83 	.word	0x0800de83
 800de08:	0800de83 	.word	0x0800de83
 800de0c:	0800de3f 	.word	0x0800de3f
 800de10:	0800de69 	.word	0x0800de69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d107      	bne.n	800de30 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800de20:	f107 030a 	add.w	r3, r7, #10
 800de24:	2202      	movs	r2, #2
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 fa82 	bl	800f332 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de2e:	e032      	b.n	800de96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f001 fa0c 	bl	800f250 <USBD_CtlError>
            ret = USBD_FAIL;
 800de38:	2303      	movs	r3, #3
 800de3a:	75fb      	strb	r3, [r7, #23]
          break;
 800de3c:	e02b      	b.n	800de96 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b03      	cmp	r3, #3
 800de48:	d107      	bne.n	800de5a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800de4a:	f107 030d 	add.w	r3, r7, #13
 800de4e:	2201      	movs	r2, #1
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f001 fa6d 	bl	800f332 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de58:	e01d      	b.n	800de96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800de5a:	6839      	ldr	r1, [r7, #0]
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f001 f9f7 	bl	800f250 <USBD_CtlError>
            ret = USBD_FAIL;
 800de62:	2303      	movs	r3, #3
 800de64:	75fb      	strb	r3, [r7, #23]
          break;
 800de66:	e016      	b.n	800de96 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b03      	cmp	r3, #3
 800de72:	d00f      	beq.n	800de94 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 f9ea 	bl	800f250 <USBD_CtlError>
            ret = USBD_FAIL;
 800de7c:	2303      	movs	r3, #3
 800de7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800de80:	e008      	b.n	800de94 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f001 f9e3 	bl	800f250 <USBD_CtlError>
          ret = USBD_FAIL;
 800de8a:	2303      	movs	r3, #3
 800de8c:	75fb      	strb	r3, [r7, #23]
          break;
 800de8e:	e002      	b.n	800de96 <USBD_CDC_Setup+0x176>
          break;
 800de90:	bf00      	nop
 800de92:	e008      	b.n	800dea6 <USBD_CDC_Setup+0x186>
          break;
 800de94:	bf00      	nop
      }
      break;
 800de96:	e006      	b.n	800dea6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f001 f9d8 	bl	800f250 <USBD_CtlError>
      ret = USBD_FAIL;
 800dea0:	2303      	movs	r3, #3
 800dea2:	75fb      	strb	r3, [r7, #23]
      break;
 800dea4:	bf00      	nop
  }

  return (uint8_t)ret;
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	460b      	mov	r3, r1
 800deba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800dec2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dece:	2303      	movs	r3, #3
 800ded0:	e04f      	b.n	800df72 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ded8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800deda:	78fa      	ldrb	r2, [r7, #3]
 800dedc:	6879      	ldr	r1, [r7, #4]
 800dede:	4613      	mov	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	440b      	add	r3, r1
 800dee8:	3318      	adds	r3, #24
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d029      	beq.n	800df44 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800def0:	78fa      	ldrb	r2, [r7, #3]
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	440b      	add	r3, r1
 800defe:	3318      	adds	r3, #24
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	78f9      	ldrb	r1, [r7, #3]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	460b      	mov	r3, r1
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	440b      	add	r3, r1
 800df0c:	00db      	lsls	r3, r3, #3
 800df0e:	4403      	add	r3, r0
 800df10:	3320      	adds	r3, #32
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	fbb2 f1f3 	udiv	r1, r2, r3
 800df18:	fb01 f303 	mul.w	r3, r1, r3
 800df1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d110      	bne.n	800df44 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800df22:	78fa      	ldrb	r2, [r7, #3]
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	440b      	add	r3, r1
 800df30:	3318      	adds	r3, #24
 800df32:	2200      	movs	r2, #0
 800df34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800df36:	78f9      	ldrb	r1, [r7, #3]
 800df38:	2300      	movs	r3, #0
 800df3a:	2200      	movs	r2, #0
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f001 fed8 	bl	800fcf2 <USBD_LL_Transmit>
 800df42:	e015      	b.n	800df70 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00b      	beq.n	800df70 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800df6c:	78fa      	ldrb	r2, [r7, #3]
 800df6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	460b      	mov	r3, r1
 800df84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800df98:	2303      	movs	r3, #3
 800df9a:	e015      	b.n	800dfc8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800df9c:	78fb      	ldrb	r3, [r7, #3]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f001 fee8 	bl	800fd76 <USBD_LL_GetRxDataSize>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dfde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	e01a      	b.n	800e020 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d014      	beq.n	800e01e <USBD_CDC_EP0_RxReady+0x4e>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dffa:	2bff      	cmp	r3, #255	@ 0xff
 800dffc:	d00f      	beq.n	800e01e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e00c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e014:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	22ff      	movs	r2, #255	@ 0xff
 800e01a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2243      	movs	r2, #67	@ 0x43
 800e034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e036:	4b03      	ldr	r3, [pc, #12]	@ (800e044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e038:	4618      	mov	r0, r3
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20000094 	.word	0x20000094

0800e048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2243      	movs	r2, #67	@ 0x43
 800e054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e056:	4b03      	ldr	r3, [pc, #12]	@ (800e064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e058:	4618      	mov	r0, r3
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	20000050 	.word	0x20000050

0800e068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2243      	movs	r2, #67	@ 0x43
 800e074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e076:	4b03      	ldr	r3, [pc, #12]	@ (800e084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr
 800e084:	200000d8 	.word	0x200000d8

0800e088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	220a      	movs	r2, #10
 800e094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e096:	4b03      	ldr	r3, [pc, #12]	@ (800e0a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	2000000c 	.word	0x2000000c

0800e0a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	e004      	b.n	800e0c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e0d2:	b480      	push	{r7}
 800e0d4:	b087      	sub	sp, #28
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	60b9      	str	r1, [r7, #8]
 800e0dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e0e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e008      	b.n	800e102 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e10e:	b480      	push	{r7}
 800e110:	b085      	sub	sp, #20
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e11e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e126:	2303      	movs	r3, #3
 800e128:	e004      	b.n	800e134 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e14e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e150:	2301      	movs	r3, #1
 800e152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d101      	bne.n	800e162 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e15e:	2303      	movs	r3, #3
 800e160:	e01a      	b.n	800e198 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d114      	bne.n	800e196 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2201      	movs	r2, #1
 800e170:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e18a:	2181      	movs	r1, #129	@ 0x81
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 fdb0 	bl	800fcf2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e196:	7bfb      	ldrb	r3, [r7, #15]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	e016      	b.n	800e1ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	7c1b      	ldrb	r3, [r3, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d109      	bne.n	800e1da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e1cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f001 fdae 	bl	800fd34 <USBD_LL_PrepareReceive>
 800e1d8:	e007      	b.n	800e1ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e1e0:	2340      	movs	r3, #64	@ 0x40
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f001 fda5 	bl	800fd34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b086      	sub	sp, #24
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e208:	2303      	movs	r3, #3
 800e20a:	e01f      	b.n	800e24c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2200      	movs	r2, #0
 800e210:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2200      	movs	r2, #0
 800e220:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d003      	beq.n	800e232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	79fa      	ldrb	r2, [r7, #7]
 800e23e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f001 fc0d 	bl	800fa60 <USBD_LL_Init>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e25e:	2300      	movs	r3, #0
 800e260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e268:	2303      	movs	r3, #3
 800e26a:	e016      	b.n	800e29a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e288:	f107 020e 	add.w	r2, r7, #14
 800e28c:	4610      	mov	r0, r2
 800e28e:	4798      	blx	r3
 800e290:	4602      	mov	r2, r0
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 fc38 	bl	800fb20 <USBD_LL_Start>
 800e2b0:	4603      	mov	r3, r0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d009      	beq.n	800e2fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	78fa      	ldrb	r2, [r7, #3]
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	4798      	blx	r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	460b      	mov	r3, r1
 800e312:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d007      	beq.n	800e32e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	78fa      	ldrb	r2, [r7, #3]
 800e328:	4611      	mov	r1, r2
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
  }

  return USBD_OK;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 ff46 	bl	800f1dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e35e:	461a      	mov	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e36c:	f003 031f 	and.w	r3, r3, #31
 800e370:	2b02      	cmp	r3, #2
 800e372:	d01a      	beq.n	800e3aa <USBD_LL_SetupStage+0x72>
 800e374:	2b02      	cmp	r3, #2
 800e376:	d822      	bhi.n	800e3be <USBD_LL_SetupStage+0x86>
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <USBD_LL_SetupStage+0x4a>
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d00a      	beq.n	800e396 <USBD_LL_SetupStage+0x5e>
 800e380:	e01d      	b.n	800e3be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f9ee 	bl	800e76c <USBD_StdDevReq>
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
      break;
 800e394:	e020      	b.n	800e3d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e39c:	4619      	mov	r1, r3
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fa52 	bl	800e848 <USBD_StdItfReq>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e3a8:	e016      	b.n	800e3d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fa91 	bl	800e8da <USBD_StdEPReq>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800e3bc:	e00c      	b.n	800e3d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e3c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f001 fc07 	bl	800fbe0 <USBD_LL_StallEP>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800e3d6:	bf00      	nop
  }

  return ret;
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b086      	sub	sp, #24
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e3f0:	7afb      	ldrb	r3, [r7, #11]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d138      	bne.n	800e468 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e3fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e404:	2b03      	cmp	r3, #3
 800e406:	d14a      	bne.n	800e49e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	689a      	ldr	r2, [r3, #8]
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	429a      	cmp	r2, r3
 800e412:	d913      	bls.n	800e43c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	1ad2      	subs	r2, r2, r3
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	68da      	ldr	r2, [r3, #12]
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	4293      	cmp	r3, r2
 800e42c:	bf28      	it	cs
 800e42e:	4613      	movcs	r3, r2
 800e430:	461a      	mov	r2, r3
 800e432:	6879      	ldr	r1, [r7, #4]
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f000 ffc5 	bl	800f3c4 <USBD_CtlContinueRx>
 800e43a:	e030      	b.n	800e49e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b03      	cmp	r3, #3
 800e446:	d10b      	bne.n	800e460 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d005      	beq.n	800e460 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f000 ffc0 	bl	800f3e6 <USBD_CtlSendStatus>
 800e466:	e01a      	b.n	800e49e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b03      	cmp	r3, #3
 800e472:	d114      	bne.n	800e49e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e47a:	699b      	ldr	r3, [r3, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00e      	beq.n	800e49e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e486:	699b      	ldr	r3, [r3, #24]
 800e488:	7afa      	ldrb	r2, [r7, #11]
 800e48a:	4611      	mov	r1, r2
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	4798      	blx	r3
 800e490:	4603      	mov	r3, r0
 800e492:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
 800e49c:	e000      	b.n	800e4a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3718      	adds	r7, #24
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e4b6:	7afb      	ldrb	r3, [r7, #11]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d16b      	bne.n	800e594 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3314      	adds	r3, #20
 800e4c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d156      	bne.n	800e57a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	689a      	ldr	r2, [r3, #8]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d914      	bls.n	800e502 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	689a      	ldr	r2, [r3, #8]
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	1ad2      	subs	r2, r2, r3
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 ff3a 	bl	800f368 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f001 fc1a 	bl	800fd34 <USBD_LL_PrepareReceive>
 800e500:	e03b      	b.n	800e57a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	68da      	ldr	r2, [r3, #12]
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d11c      	bne.n	800e548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e516:	429a      	cmp	r2, r3
 800e518:	d316      	bcc.n	800e548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e524:	429a      	cmp	r2, r3
 800e526:	d20f      	bcs.n	800e548 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e528:	2200      	movs	r2, #0
 800e52a:	2100      	movs	r1, #0
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 ff1b 	bl	800f368 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e53a:	2300      	movs	r3, #0
 800e53c:	2200      	movs	r2, #0
 800e53e:	2100      	movs	r1, #0
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f001 fbf7 	bl	800fd34 <USBD_LL_PrepareReceive>
 800e546:	e018      	b.n	800e57a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b03      	cmp	r3, #3
 800e552:	d10b      	bne.n	800e56c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e56c:	2180      	movs	r1, #128	@ 0x80
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f001 fb36 	bl	800fbe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f000 ff49 	bl	800f40c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e580:	2b01      	cmp	r3, #1
 800e582:	d122      	bne.n	800e5ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f7ff fe98 	bl	800e2ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e592:	e01a      	b.n	800e5ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d114      	bne.n	800e5ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00e      	beq.n	800e5ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5b2:	695b      	ldr	r3, [r3, #20]
 800e5b4:	7afa      	ldrb	r2, [r7, #11]
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	4798      	blx	r3
 800e5bc:	4603      	mov	r3, r0
 800e5be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e5c0:	7dfb      	ldrb	r3, [r7, #23]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e5c6:	7dfb      	ldrb	r3, [r7, #23]
 800e5c8:	e000      	b.n	800e5cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e5ca:	2300      	movs	r3, #0
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e600:	2b00      	cmp	r3, #0
 800e602:	d101      	bne.n	800e608 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e604:	2303      	movs	r3, #3
 800e606:	e02f      	b.n	800e668 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00f      	beq.n	800e632 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d009      	beq.n	800e632 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	6852      	ldr	r2, [r2, #4]
 800e62a:	b2d2      	uxtb	r2, r2
 800e62c:	4611      	mov	r1, r2
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e632:	2340      	movs	r3, #64	@ 0x40
 800e634:	2200      	movs	r2, #0
 800e636:	2100      	movs	r1, #0
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f001 fa8c 	bl	800fb56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2240      	movs	r2, #64	@ 0x40
 800e64a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e64e:	2340      	movs	r3, #64	@ 0x40
 800e650:	2200      	movs	r2, #0
 800e652:	2180      	movs	r1, #128	@ 0x80
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 fa7e 	bl	800fb56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2240      	movs	r2, #64	@ 0x40
 800e664:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	460b      	mov	r3, r1
 800e67a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	78fa      	ldrb	r2, [r7, #3]
 800e680:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2204      	movs	r2, #4
 800e6aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d106      	bne.n	800e6de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e6fe:	2303      	movs	r3, #3
 800e700:	e012      	b.n	800e728 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d10b      	bne.n	800e726 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d005      	beq.n	800e726 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e720:	69db      	ldr	r3, [r3, #28]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e730:	b480      	push	{r7}
 800e732:	b087      	sub	sp, #28
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	3301      	adds	r3, #1
 800e746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e74e:	8a3b      	ldrh	r3, [r7, #16]
 800e750:	021b      	lsls	r3, r3, #8
 800e752:	b21a      	sxth	r2, r3
 800e754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e758:	4313      	orrs	r3, r2
 800e75a:	b21b      	sxth	r3, r3
 800e75c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e75e:	89fb      	ldrh	r3, [r7, #14]
}
 800e760:	4618      	mov	r0, r3
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e776:	2300      	movs	r3, #0
 800e778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e782:	2b40      	cmp	r3, #64	@ 0x40
 800e784:	d005      	beq.n	800e792 <USBD_StdDevReq+0x26>
 800e786:	2b40      	cmp	r3, #64	@ 0x40
 800e788:	d853      	bhi.n	800e832 <USBD_StdDevReq+0xc6>
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <USBD_StdDevReq+0x3a>
 800e78e:	2b20      	cmp	r3, #32
 800e790:	d14f      	bne.n	800e832 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	4798      	blx	r3
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a4:	e04a      	b.n	800e83c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	785b      	ldrb	r3, [r3, #1]
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	d83b      	bhi.n	800e826 <USBD_StdDevReq+0xba>
 800e7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e7b4 <USBD_StdDevReq+0x48>)
 800e7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b4:	0800e809 	.word	0x0800e809
 800e7b8:	0800e81d 	.word	0x0800e81d
 800e7bc:	0800e827 	.word	0x0800e827
 800e7c0:	0800e813 	.word	0x0800e813
 800e7c4:	0800e827 	.word	0x0800e827
 800e7c8:	0800e7e7 	.word	0x0800e7e7
 800e7cc:	0800e7dd 	.word	0x0800e7dd
 800e7d0:	0800e827 	.word	0x0800e827
 800e7d4:	0800e7ff 	.word	0x0800e7ff
 800e7d8:	0800e7f1 	.word	0x0800e7f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e7dc:	6839      	ldr	r1, [r7, #0]
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 f9de 	bl	800eba0 <USBD_GetDescriptor>
          break;
 800e7e4:	e024      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fb6d 	bl	800eec8 <USBD_SetAddress>
          break;
 800e7ee:	e01f      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fbac 	bl	800ef50 <USBD_SetConfig>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73fb      	strb	r3, [r7, #15]
          break;
 800e7fc:	e018      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fc4b 	bl	800f09c <USBD_GetConfig>
          break;
 800e806:	e013      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fc7c 	bl	800f108 <USBD_GetStatus>
          break;
 800e810:	e00e      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fcab 	bl	800f170 <USBD_SetFeature>
          break;
 800e81a:	e009      	b.n	800e830 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fcba 	bl	800f198 <USBD_ClrFeature>
          break;
 800e824:	e004      	b.n	800e830 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fd11 	bl	800f250 <USBD_CtlError>
          break;
 800e82e:	bf00      	nop
      }
      break;
 800e830:	e004      	b.n	800e83c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 fd0b 	bl	800f250 <USBD_CtlError>
      break;
 800e83a:	bf00      	nop
  }

  return ret;
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop

0800e848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e85e:	2b40      	cmp	r3, #64	@ 0x40
 800e860:	d005      	beq.n	800e86e <USBD_StdItfReq+0x26>
 800e862:	2b40      	cmp	r3, #64	@ 0x40
 800e864:	d82f      	bhi.n	800e8c6 <USBD_StdItfReq+0x7e>
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <USBD_StdItfReq+0x26>
 800e86a:	2b20      	cmp	r3, #32
 800e86c:	d12b      	bne.n	800e8c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e874:	b2db      	uxtb	r3, r3
 800e876:	3b01      	subs	r3, #1
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d81d      	bhi.n	800e8b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	889b      	ldrh	r3, [r3, #4]
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b01      	cmp	r3, #1
 800e884:	d813      	bhi.n	800e8ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	6839      	ldr	r1, [r7, #0]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	4798      	blx	r3
 800e894:	4603      	mov	r3, r0
 800e896:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	88db      	ldrh	r3, [r3, #6]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d110      	bne.n	800e8c2 <USBD_StdItfReq+0x7a>
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10d      	bne.n	800e8c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fd9d 	bl	800f3e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e8ac:	e009      	b.n	800e8c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 fccd 	bl	800f250 <USBD_CtlError>
          break;
 800e8b6:	e004      	b.n	800e8c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 fcc8 	bl	800f250 <USBD_CtlError>
          break;
 800e8c0:	e000      	b.n	800e8c4 <USBD_StdItfReq+0x7c>
          break;
 800e8c2:	bf00      	nop
      }
      break;
 800e8c4:	e004      	b.n	800e8d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 fcc1 	bl	800f250 <USBD_CtlError>
      break;
 800e8ce:	bf00      	nop
  }

  return ret;
 800e8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	889b      	ldrh	r3, [r3, #4]
 800e8ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8f6:	2b40      	cmp	r3, #64	@ 0x40
 800e8f8:	d007      	beq.n	800e90a <USBD_StdEPReq+0x30>
 800e8fa:	2b40      	cmp	r3, #64	@ 0x40
 800e8fc:	f200 8145 	bhi.w	800eb8a <USBD_StdEPReq+0x2b0>
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00c      	beq.n	800e91e <USBD_StdEPReq+0x44>
 800e904:	2b20      	cmp	r3, #32
 800e906:	f040 8140 	bne.w	800eb8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	4798      	blx	r3
 800e918:	4603      	mov	r3, r0
 800e91a:	73fb      	strb	r3, [r7, #15]
      break;
 800e91c:	e13a      	b.n	800eb94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	785b      	ldrb	r3, [r3, #1]
 800e922:	2b03      	cmp	r3, #3
 800e924:	d007      	beq.n	800e936 <USBD_StdEPReq+0x5c>
 800e926:	2b03      	cmp	r3, #3
 800e928:	f300 8129 	bgt.w	800eb7e <USBD_StdEPReq+0x2a4>
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d07f      	beq.n	800ea30 <USBD_StdEPReq+0x156>
 800e930:	2b01      	cmp	r3, #1
 800e932:	d03c      	beq.n	800e9ae <USBD_StdEPReq+0xd4>
 800e934:	e123      	b.n	800eb7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b02      	cmp	r3, #2
 800e940:	d002      	beq.n	800e948 <USBD_StdEPReq+0x6e>
 800e942:	2b03      	cmp	r3, #3
 800e944:	d016      	beq.n	800e974 <USBD_StdEPReq+0x9a>
 800e946:	e02c      	b.n	800e9a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00d      	beq.n	800e96a <USBD_StdEPReq+0x90>
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b80      	cmp	r3, #128	@ 0x80
 800e952:	d00a      	beq.n	800e96a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e954:	7bbb      	ldrb	r3, [r7, #14]
 800e956:	4619      	mov	r1, r3
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f001 f941 	bl	800fbe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e95e:	2180      	movs	r1, #128	@ 0x80
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f001 f93d 	bl	800fbe0 <USBD_LL_StallEP>
 800e966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e968:	e020      	b.n	800e9ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e96a:	6839      	ldr	r1, [r7, #0]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fc6f 	bl	800f250 <USBD_CtlError>
              break;
 800e972:	e01b      	b.n	800e9ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	885b      	ldrh	r3, [r3, #2]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10e      	bne.n	800e99a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00b      	beq.n	800e99a <USBD_StdEPReq+0xc0>
 800e982:	7bbb      	ldrb	r3, [r7, #14]
 800e984:	2b80      	cmp	r3, #128	@ 0x80
 800e986:	d008      	beq.n	800e99a <USBD_StdEPReq+0xc0>
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	88db      	ldrh	r3, [r3, #6]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d104      	bne.n	800e99a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e990:	7bbb      	ldrb	r3, [r7, #14]
 800e992:	4619      	mov	r1, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 f923 	bl	800fbe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 fd23 	bl	800f3e6 <USBD_CtlSendStatus>

              break;
 800e9a0:	e004      	b.n	800e9ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 fc53 	bl	800f250 <USBD_CtlError>
              break;
 800e9aa:	bf00      	nop
          }
          break;
 800e9ac:	e0ec      	b.n	800eb88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d002      	beq.n	800e9c0 <USBD_StdEPReq+0xe6>
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	d016      	beq.n	800e9ec <USBD_StdEPReq+0x112>
 800e9be:	e030      	b.n	800ea22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9c0:	7bbb      	ldrb	r3, [r7, #14]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00d      	beq.n	800e9e2 <USBD_StdEPReq+0x108>
 800e9c6:	7bbb      	ldrb	r3, [r7, #14]
 800e9c8:	2b80      	cmp	r3, #128	@ 0x80
 800e9ca:	d00a      	beq.n	800e9e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f001 f905 	bl	800fbe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9d6:	2180      	movs	r1, #128	@ 0x80
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 f901 	bl	800fbe0 <USBD_LL_StallEP>
 800e9de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e9e0:	e025      	b.n	800ea2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e9e2:	6839      	ldr	r1, [r7, #0]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fc33 	bl	800f250 <USBD_CtlError>
              break;
 800e9ea:	e020      	b.n	800ea2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	885b      	ldrh	r3, [r3, #2]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d11b      	bne.n	800ea2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e9f4:	7bbb      	ldrb	r3, [r7, #14]
 800e9f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d004      	beq.n	800ea08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f001 f90b 	bl	800fc1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fcec 	bl	800f3e6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	6839      	ldr	r1, [r7, #0]
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	4798      	blx	r3
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ea20:	e004      	b.n	800ea2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fc13 	bl	800f250 <USBD_CtlError>
              break;
 800ea2a:	e000      	b.n	800ea2e <USBD_StdEPReq+0x154>
              break;
 800ea2c:	bf00      	nop
          }
          break;
 800ea2e:	e0ab      	b.n	800eb88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d002      	beq.n	800ea42 <USBD_StdEPReq+0x168>
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	d032      	beq.n	800eaa6 <USBD_StdEPReq+0x1cc>
 800ea40:	e097      	b.n	800eb72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d007      	beq.n	800ea58 <USBD_StdEPReq+0x17e>
 800ea48:	7bbb      	ldrb	r3, [r7, #14]
 800ea4a:	2b80      	cmp	r3, #128	@ 0x80
 800ea4c:	d004      	beq.n	800ea58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fbfd 	bl	800f250 <USBD_CtlError>
                break;
 800ea56:	e091      	b.n	800eb7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	da0b      	bge.n	800ea78 <USBD_StdEPReq+0x19e>
 800ea60:	7bbb      	ldrb	r3, [r7, #14]
 800ea62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea66:	4613      	mov	r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	3310      	adds	r3, #16
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	4413      	add	r3, r2
 800ea74:	3304      	adds	r3, #4
 800ea76:	e00b      	b.n	800ea90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ea78:	7bbb      	ldrb	r3, [r7, #14]
 800ea7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ea7e:	4613      	mov	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4413      	add	r3, r2
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	3304      	adds	r3, #4
 800ea90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	2200      	movs	r2, #0
 800ea96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fc47 	bl	800f332 <USBD_CtlSendData>
              break;
 800eaa4:	e06a      	b.n	800eb7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eaa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	da11      	bge.n	800ead2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eaae:	7bbb      	ldrb	r3, [r7, #14]
 800eab0:	f003 020f 	and.w	r2, r3, #15
 800eab4:	6879      	ldr	r1, [r7, #4]
 800eab6:	4613      	mov	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4413      	add	r3, r2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	440b      	add	r3, r1
 800eac0:	3324      	adds	r3, #36	@ 0x24
 800eac2:	881b      	ldrh	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d117      	bne.n	800eaf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eac8:	6839      	ldr	r1, [r7, #0]
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 fbc0 	bl	800f250 <USBD_CtlError>
                  break;
 800ead0:	e054      	b.n	800eb7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ead2:	7bbb      	ldrb	r3, [r7, #14]
 800ead4:	f003 020f 	and.w	r2, r3, #15
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	4613      	mov	r3, r2
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4413      	add	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	440b      	add	r3, r1
 800eae4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d104      	bne.n	800eaf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fbad 	bl	800f250 <USBD_CtlError>
                  break;
 800eaf6:	e041      	b.n	800eb7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eaf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	da0b      	bge.n	800eb18 <USBD_StdEPReq+0x23e>
 800eb00:	7bbb      	ldrb	r3, [r7, #14]
 800eb02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb06:	4613      	mov	r3, r2
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	3310      	adds	r3, #16
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	4413      	add	r3, r2
 800eb14:	3304      	adds	r3, #4
 800eb16:	e00b      	b.n	800eb30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb18:	7bbb      	ldrb	r3, [r7, #14]
 800eb1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb1e:	4613      	mov	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	4413      	add	r3, r2
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	3304      	adds	r3, #4
 800eb30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eb32:	7bbb      	ldrb	r3, [r7, #14]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <USBD_StdEPReq+0x264>
 800eb38:	7bbb      	ldrb	r3, [r7, #14]
 800eb3a:	2b80      	cmp	r3, #128	@ 0x80
 800eb3c:	d103      	bne.n	800eb46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	2200      	movs	r2, #0
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	e00e      	b.n	800eb64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 f886 	bl	800fc5c <USBD_LL_IsStallEP>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	e002      	b.n	800eb64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	2200      	movs	r2, #0
 800eb62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	2202      	movs	r2, #2
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 fbe1 	bl	800f332 <USBD_CtlSendData>
              break;
 800eb70:	e004      	b.n	800eb7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fb6b 	bl	800f250 <USBD_CtlError>
              break;
 800eb7a:	bf00      	nop
          }
          break;
 800eb7c:	e004      	b.n	800eb88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 fb65 	bl	800f250 <USBD_CtlError>
          break;
 800eb86:	bf00      	nop
      }
      break;
 800eb88:	e004      	b.n	800eb94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800eb8a:	6839      	ldr	r1, [r7, #0]
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fb5f 	bl	800f250 <USBD_CtlError>
      break;
 800eb92:	bf00      	nop
  }

  return ret;
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
	...

0800eba0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	0a1b      	lsrs	r3, r3, #8
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	2b0e      	cmp	r3, #14
 800ebc2:	f200 8152 	bhi.w	800ee6a <USBD_GetDescriptor+0x2ca>
 800ebc6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebcc <USBD_GetDescriptor+0x2c>)
 800ebc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebcc:	0800ec3d 	.word	0x0800ec3d
 800ebd0:	0800ec55 	.word	0x0800ec55
 800ebd4:	0800ec95 	.word	0x0800ec95
 800ebd8:	0800ee6b 	.word	0x0800ee6b
 800ebdc:	0800ee6b 	.word	0x0800ee6b
 800ebe0:	0800ee0b 	.word	0x0800ee0b
 800ebe4:	0800ee37 	.word	0x0800ee37
 800ebe8:	0800ee6b 	.word	0x0800ee6b
 800ebec:	0800ee6b 	.word	0x0800ee6b
 800ebf0:	0800ee6b 	.word	0x0800ee6b
 800ebf4:	0800ee6b 	.word	0x0800ee6b
 800ebf8:	0800ee6b 	.word	0x0800ee6b
 800ebfc:	0800ee6b 	.word	0x0800ee6b
 800ec00:	0800ee6b 	.word	0x0800ee6b
 800ec04:	0800ec09 	.word	0x0800ec09
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00b      	beq.n	800ec2c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	7c12      	ldrb	r2, [r2, #16]
 800ec20:	f107 0108 	add.w	r1, r7, #8
 800ec24:	4610      	mov	r0, r2
 800ec26:	4798      	blx	r3
 800ec28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec2a:	e126      	b.n	800ee7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fb0e 	bl	800f250 <USBD_CtlError>
        err++;
 800ec34:	7afb      	ldrb	r3, [r7, #11]
 800ec36:	3301      	adds	r3, #1
 800ec38:	72fb      	strb	r3, [r7, #11]
      break;
 800ec3a:	e11e      	b.n	800ee7a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	7c12      	ldrb	r2, [r2, #16]
 800ec48:	f107 0108 	add.w	r1, r7, #8
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	4798      	blx	r3
 800ec50:	60f8      	str	r0, [r7, #12]
      break;
 800ec52:	e112      	b.n	800ee7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7c1b      	ldrb	r3, [r3, #16]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10d      	bne.n	800ec78 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec64:	f107 0208 	add.w	r2, r7, #8
 800ec68:	4610      	mov	r0, r2
 800ec6a:	4798      	blx	r3
 800ec6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	3301      	adds	r3, #1
 800ec72:	2202      	movs	r2, #2
 800ec74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ec76:	e100      	b.n	800ee7a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec80:	f107 0208 	add.w	r2, r7, #8
 800ec84:	4610      	mov	r0, r2
 800ec86:	4798      	blx	r3
 800ec88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	2202      	movs	r2, #2
 800ec90:	701a      	strb	r2, [r3, #0]
      break;
 800ec92:	e0f2      	b.n	800ee7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	885b      	ldrh	r3, [r3, #2]
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b05      	cmp	r3, #5
 800ec9c:	f200 80ac 	bhi.w	800edf8 <USBD_GetDescriptor+0x258>
 800eca0:	a201      	add	r2, pc, #4	@ (adr r2, 800eca8 <USBD_GetDescriptor+0x108>)
 800eca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca6:	bf00      	nop
 800eca8:	0800ecc1 	.word	0x0800ecc1
 800ecac:	0800ecf5 	.word	0x0800ecf5
 800ecb0:	0800ed29 	.word	0x0800ed29
 800ecb4:	0800ed5d 	.word	0x0800ed5d
 800ecb8:	0800ed91 	.word	0x0800ed91
 800ecbc:	0800edc5 	.word	0x0800edc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00b      	beq.n	800ece4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	7c12      	ldrb	r2, [r2, #16]
 800ecd8:	f107 0108 	add.w	r1, r7, #8
 800ecdc:	4610      	mov	r0, r2
 800ecde:	4798      	blx	r3
 800ece0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ece2:	e091      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ece4:	6839      	ldr	r1, [r7, #0]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f000 fab2 	bl	800f250 <USBD_CtlError>
            err++;
 800ecec:	7afb      	ldrb	r3, [r7, #11]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	72fb      	strb	r3, [r7, #11]
          break;
 800ecf2:	e089      	b.n	800ee08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00b      	beq.n	800ed18 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	7c12      	ldrb	r2, [r2, #16]
 800ed0c:	f107 0108 	add.w	r1, r7, #8
 800ed10:	4610      	mov	r0, r2
 800ed12:	4798      	blx	r3
 800ed14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed16:	e077      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fa98 	bl	800f250 <USBD_CtlError>
            err++;
 800ed20:	7afb      	ldrb	r3, [r7, #11]
 800ed22:	3301      	adds	r3, #1
 800ed24:	72fb      	strb	r3, [r7, #11]
          break;
 800ed26:	e06f      	b.n	800ee08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00b      	beq.n	800ed4c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	7c12      	ldrb	r2, [r2, #16]
 800ed40:	f107 0108 	add.w	r1, r7, #8
 800ed44:	4610      	mov	r0, r2
 800ed46:	4798      	blx	r3
 800ed48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed4a:	e05d      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fa7e 	bl	800f250 <USBD_CtlError>
            err++;
 800ed54:	7afb      	ldrb	r3, [r7, #11]
 800ed56:	3301      	adds	r3, #1
 800ed58:	72fb      	strb	r3, [r7, #11]
          break;
 800ed5a:	e055      	b.n	800ee08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	7c12      	ldrb	r2, [r2, #16]
 800ed74:	f107 0108 	add.w	r1, r7, #8
 800ed78:	4610      	mov	r0, r2
 800ed7a:	4798      	blx	r3
 800ed7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ed7e:	e043      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 fa64 	bl	800f250 <USBD_CtlError>
            err++;
 800ed88:	7afb      	ldrb	r3, [r7, #11]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ed8e:	e03b      	b.n	800ee08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00b      	beq.n	800edb4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	7c12      	ldrb	r2, [r2, #16]
 800eda8:	f107 0108 	add.w	r1, r7, #8
 800edac:	4610      	mov	r0, r2
 800edae:	4798      	blx	r3
 800edb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edb2:	e029      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800edb4:	6839      	ldr	r1, [r7, #0]
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fa4a 	bl	800f250 <USBD_CtlError>
            err++;
 800edbc:	7afb      	ldrb	r3, [r7, #11]
 800edbe:	3301      	adds	r3, #1
 800edc0:	72fb      	strb	r3, [r7, #11]
          break;
 800edc2:	e021      	b.n	800ee08 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00b      	beq.n	800ede8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	7c12      	ldrb	r2, [r2, #16]
 800eddc:	f107 0108 	add.w	r1, r7, #8
 800ede0:	4610      	mov	r0, r2
 800ede2:	4798      	blx	r3
 800ede4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ede6:	e00f      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fa30 	bl	800f250 <USBD_CtlError>
            err++;
 800edf0:	7afb      	ldrb	r3, [r7, #11]
 800edf2:	3301      	adds	r3, #1
 800edf4:	72fb      	strb	r3, [r7, #11]
          break;
 800edf6:	e007      	b.n	800ee08 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800edf8:	6839      	ldr	r1, [r7, #0]
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 fa28 	bl	800f250 <USBD_CtlError>
          err++;
 800ee00:	7afb      	ldrb	r3, [r7, #11]
 800ee02:	3301      	adds	r3, #1
 800ee04:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ee06:	bf00      	nop
      }
      break;
 800ee08:	e037      	b.n	800ee7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7c1b      	ldrb	r3, [r3, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d109      	bne.n	800ee26 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee1a:	f107 0208 	add.w	r2, r7, #8
 800ee1e:	4610      	mov	r0, r2
 800ee20:	4798      	blx	r3
 800ee22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee24:	e029      	b.n	800ee7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 fa11 	bl	800f250 <USBD_CtlError>
        err++;
 800ee2e:	7afb      	ldrb	r3, [r7, #11]
 800ee30:	3301      	adds	r3, #1
 800ee32:	72fb      	strb	r3, [r7, #11]
      break;
 800ee34:	e021      	b.n	800ee7a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	7c1b      	ldrb	r3, [r3, #16]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10d      	bne.n	800ee5a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee46:	f107 0208 	add.w	r2, r7, #8
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	4798      	blx	r3
 800ee4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3301      	adds	r3, #1
 800ee54:	2207      	movs	r2, #7
 800ee56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ee58:	e00f      	b.n	800ee7a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 f9f7 	bl	800f250 <USBD_CtlError>
        err++;
 800ee62:	7afb      	ldrb	r3, [r7, #11]
 800ee64:	3301      	adds	r3, #1
 800ee66:	72fb      	strb	r3, [r7, #11]
      break;
 800ee68:	e007      	b.n	800ee7a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f9ef 	bl	800f250 <USBD_CtlError>
      err++;
 800ee72:	7afb      	ldrb	r3, [r7, #11]
 800ee74:	3301      	adds	r3, #1
 800ee76:	72fb      	strb	r3, [r7, #11]
      break;
 800ee78:	bf00      	nop
  }

  if (err != 0U)
 800ee7a:	7afb      	ldrb	r3, [r7, #11]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d11e      	bne.n	800eebe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	88db      	ldrh	r3, [r3, #6]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d016      	beq.n	800eeb6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ee88:	893b      	ldrh	r3, [r7, #8]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00e      	beq.n	800eeac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	88da      	ldrh	r2, [r3, #6]
 800ee92:	893b      	ldrh	r3, [r7, #8]
 800ee94:	4293      	cmp	r3, r2
 800ee96:	bf28      	it	cs
 800ee98:	4613      	movcs	r3, r2
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ee9e:	893b      	ldrh	r3, [r7, #8]
 800eea0:	461a      	mov	r2, r3
 800eea2:	68f9      	ldr	r1, [r7, #12]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fa44 	bl	800f332 <USBD_CtlSendData>
 800eeaa:	e009      	b.n	800eec0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 f9ce 	bl	800f250 <USBD_CtlError>
 800eeb4:	e004      	b.n	800eec0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fa95 	bl	800f3e6 <USBD_CtlSendStatus>
 800eebc:	e000      	b.n	800eec0 <USBD_GetDescriptor+0x320>
    return;
 800eebe:	bf00      	nop
  }
}
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop

0800eec8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	889b      	ldrh	r3, [r3, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d131      	bne.n	800ef3e <USBD_SetAddress+0x76>
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	88db      	ldrh	r3, [r3, #6]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d12d      	bne.n	800ef3e <USBD_SetAddress+0x76>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	885b      	ldrh	r3, [r3, #2]
 800eee6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eee8:	d829      	bhi.n	800ef3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	885b      	ldrh	r3, [r3, #2]
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eef4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b03      	cmp	r3, #3
 800ef00:	d104      	bne.n	800ef0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f9a3 	bl	800f250 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef0a:	e01d      	b.n	800ef48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	7bfa      	ldrb	r2, [r7, #15]
 800ef10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
 800ef16:	4619      	mov	r1, r3
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fecb 	bl	800fcb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fa61 	bl	800f3e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d004      	beq.n	800ef34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef32:	e009      	b.n	800ef48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef3c:	e004      	b.n	800ef48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f985 	bl	800f250 <USBD_CtlError>
  }
}
 800ef46:	bf00      	nop
 800ef48:	bf00      	nop
 800ef4a:	3710      	adds	r7, #16
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	885b      	ldrh	r3, [r3, #2]
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	4b4c      	ldr	r3, [pc, #304]	@ (800f098 <USBD_SetConfig+0x148>)
 800ef66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ef68:	4b4b      	ldr	r3, [pc, #300]	@ (800f098 <USBD_SetConfig+0x148>)
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d905      	bls.n	800ef7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 f96c 	bl	800f250 <USBD_CtlError>
    return USBD_FAIL;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	e088      	b.n	800f08e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d002      	beq.n	800ef8e <USBD_SetConfig+0x3e>
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d025      	beq.n	800efd8 <USBD_SetConfig+0x88>
 800ef8c:	e071      	b.n	800f072 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ef8e:	4b42      	ldr	r3, [pc, #264]	@ (800f098 <USBD_SetConfig+0x148>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01c      	beq.n	800efd0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ef96:	4b40      	ldr	r3, [pc, #256]	@ (800f098 <USBD_SetConfig+0x148>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800efa0:	4b3d      	ldr	r3, [pc, #244]	@ (800f098 <USBD_SetConfig+0x148>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	4619      	mov	r1, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff f992 	bl	800e2d0 <USBD_SetClassConfig>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d004      	beq.n	800efc0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f949 	bl	800f250 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800efbe:	e065      	b.n	800f08c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fa10 	bl	800f3e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2203      	movs	r2, #3
 800efca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800efce:	e05d      	b.n	800f08c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fa08 	bl	800f3e6 <USBD_CtlSendStatus>
      break;
 800efd6:	e059      	b.n	800f08c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800efd8:	4b2f      	ldr	r3, [pc, #188]	@ (800f098 <USBD_SetConfig+0x148>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d112      	bne.n	800f006 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2202      	movs	r2, #2
 800efe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800efe8:	4b2b      	ldr	r3, [pc, #172]	@ (800f098 <USBD_SetConfig+0x148>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	461a      	mov	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eff2:	4b29      	ldr	r3, [pc, #164]	@ (800f098 <USBD_SetConfig+0x148>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	4619      	mov	r1, r3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7ff f985 	bl	800e308 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f9f1 	bl	800f3e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f004:	e042      	b.n	800f08c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f006:	4b24      	ldr	r3, [pc, #144]	@ (800f098 <USBD_SetConfig+0x148>)
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d02a      	beq.n	800f06a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	4619      	mov	r1, r3
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff f973 	bl	800e308 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f022:	4b1d      	ldr	r3, [pc, #116]	@ (800f098 <USBD_SetConfig+0x148>)
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f02c:	4b1a      	ldr	r3, [pc, #104]	@ (800f098 <USBD_SetConfig+0x148>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	4619      	mov	r1, r3
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff f94c 	bl	800e2d0 <USBD_SetClassConfig>
 800f038:	4603      	mov	r3, r0
 800f03a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f03c:	7bfb      	ldrb	r3, [r7, #15]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00f      	beq.n	800f062 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f000 f903 	bl	800f250 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	4619      	mov	r1, r3
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff f958 	bl	800e308 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2202      	movs	r2, #2
 800f05c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f060:	e014      	b.n	800f08c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 f9bf 	bl	800f3e6 <USBD_CtlSendStatus>
      break;
 800f068:	e010      	b.n	800f08c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f9bb 	bl	800f3e6 <USBD_CtlSendStatus>
      break;
 800f070:	e00c      	b.n	800f08c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f8eb 	bl	800f250 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f07a:	4b07      	ldr	r3, [pc, #28]	@ (800f098 <USBD_SetConfig+0x148>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7ff f941 	bl	800e308 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f086:	2303      	movs	r3, #3
 800f088:	73fb      	strb	r3, [r7, #15]
      break;
 800f08a:	bf00      	nop
  }

  return ret;
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	200004e4 	.word	0x200004e4

0800f09c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d004      	beq.n	800f0b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f8cd 	bl	800f250 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f0b6:	e023      	b.n	800f100 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	dc02      	bgt.n	800f0ca <USBD_GetConfig+0x2e>
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	dc03      	bgt.n	800f0d0 <USBD_GetConfig+0x34>
 800f0c8:	e015      	b.n	800f0f6 <USBD_GetConfig+0x5a>
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d00b      	beq.n	800f0e6 <USBD_GetConfig+0x4a>
 800f0ce:	e012      	b.n	800f0f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	3308      	adds	r3, #8
 800f0da:	2201      	movs	r2, #1
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f927 	bl	800f332 <USBD_CtlSendData>
        break;
 800f0e4:	e00c      	b.n	800f100 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	3304      	adds	r3, #4
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f91f 	bl	800f332 <USBD_CtlSendData>
        break;
 800f0f4:	e004      	b.n	800f100 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 f8a9 	bl	800f250 <USBD_CtlError>
        break;
 800f0fe:	bf00      	nop
}
 800f100:	bf00      	nop
 800f102:	3708      	adds	r7, #8
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	3b01      	subs	r3, #1
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d81e      	bhi.n	800f15e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	88db      	ldrh	r3, [r3, #6]
 800f124:	2b02      	cmp	r3, #2
 800f126:	d004      	beq.n	800f132 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f890 	bl	800f250 <USBD_CtlError>
        break;
 800f130:	e01a      	b.n	800f168 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d005      	beq.n	800f14e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	f043 0202 	orr.w	r2, r3, #2
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	330c      	adds	r3, #12
 800f152:	2202      	movs	r2, #2
 800f154:	4619      	mov	r1, r3
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f8eb 	bl	800f332 <USBD_CtlSendData>
      break;
 800f15c:	e004      	b.n	800f168 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f875 	bl	800f250 <USBD_CtlError>
      break;
 800f166:	bf00      	nop
  }
}
 800f168:	bf00      	nop
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	885b      	ldrh	r3, [r3, #2]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d106      	bne.n	800f190 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f92b 	bl	800f3e6 <USBD_CtlSendStatus>
  }
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d80b      	bhi.n	800f1c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	885b      	ldrh	r3, [r3, #2]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d10c      	bne.n	800f1d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 f910 	bl	800f3e6 <USBD_CtlSendStatus>
      }
      break;
 800f1c6:	e004      	b.n	800f1d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f1c8:	6839      	ldr	r1, [r7, #0]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 f840 	bl	800f250 <USBD_CtlError>
      break;
 800f1d0:	e000      	b.n	800f1d4 <USBD_ClrFeature+0x3c>
      break;
 800f1d2:	bf00      	nop
  }
}
 800f1d4:	bf00      	nop
 800f1d6:	3708      	adds	r7, #8
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	781a      	ldrb	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	781a      	ldrb	r2, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	3301      	adds	r3, #1
 800f204:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7ff fa92 	bl	800e730 <SWAPBYTE>
 800f20c:	4603      	mov	r3, r0
 800f20e:	461a      	mov	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	3301      	adds	r3, #1
 800f218:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	3301      	adds	r3, #1
 800f21e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff fa85 	bl	800e730 <SWAPBYTE>
 800f226:	4603      	mov	r3, r0
 800f228:	461a      	mov	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	3301      	adds	r3, #1
 800f232:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3301      	adds	r3, #1
 800f238:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f7ff fa78 	bl	800e730 <SWAPBYTE>
 800f240:	4603      	mov	r3, r0
 800f242:	461a      	mov	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	80da      	strh	r2, [r3, #6]
}
 800f248:	bf00      	nop
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f25a:	2180      	movs	r1, #128	@ 0x80
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 fcbf 	bl	800fbe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f262:	2100      	movs	r1, #0
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fcbb 	bl	800fbe0 <USBD_LL_StallEP>
}
 800f26a:	bf00      	nop
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b086      	sub	sp, #24
 800f276:	af00      	add	r7, sp, #0
 800f278:	60f8      	str	r0, [r7, #12]
 800f27a:	60b9      	str	r1, [r7, #8]
 800f27c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f27e:	2300      	movs	r3, #0
 800f280:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d036      	beq.n	800f2f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f28c:	6938      	ldr	r0, [r7, #16]
 800f28e:	f000 f836 	bl	800f2fe <USBD_GetLen>
 800f292:	4603      	mov	r3, r0
 800f294:	3301      	adds	r3, #1
 800f296:	b29b      	uxth	r3, r3
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	7812      	ldrb	r2, [r2, #0]
 800f2aa:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	2203      	movs	r2, #3
 800f2ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f2c2:	e013      	b.n	800f2ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	7812      	ldrb	r2, [r2, #0]
 800f2ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	613b      	str	r3, [r7, #16]
    idx++;
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	701a      	strb	r2, [r3, #0]
    idx++;
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1e7      	bne.n	800f2c4 <USBD_GetString+0x52>
 800f2f4:	e000      	b.n	800f2f8 <USBD_GetString+0x86>
    return;
 800f2f6:	bf00      	nop
  }
}
 800f2f8:	3718      	adds	r7, #24
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f2fe:	b480      	push	{r7}
 800f300:	b085      	sub	sp, #20
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f306:	2300      	movs	r3, #0
 800f308:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f30e:	e005      	b.n	800f31c <USBD_GetLen+0x1e>
  {
    len++;
 800f310:	7bfb      	ldrb	r3, [r7, #15]
 800f312:	3301      	adds	r3, #1
 800f314:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	3301      	adds	r3, #1
 800f31a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1f5      	bne.n	800f310 <USBD_GetLen+0x12>
  }

  return len;
 800f324:	7bfb      	ldrb	r3, [r7, #15]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b084      	sub	sp, #16
 800f336:	af00      	add	r7, sp, #0
 800f338:	60f8      	str	r0, [r7, #12]
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2202      	movs	r2, #2
 800f342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	2100      	movs	r1, #0
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 fcca 	bl	800fcf2 <USBD_LL_Transmit>

  return USBD_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	68ba      	ldr	r2, [r7, #8]
 800f378:	2100      	movs	r1, #0
 800f37a:	68f8      	ldr	r0, [r7, #12]
 800f37c:	f000 fcb9 	bl	800fcf2 <USBD_LL_Transmit>

  return USBD_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b084      	sub	sp, #16
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2203      	movs	r2, #3
 800f39a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 fcbd 	bl	800fd34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	f000 fcac 	bl	800fd34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2204      	movs	r2, #4
 800f3f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fc78 	bl	800fcf2 <USBD_LL_Transmit>

  return USBD_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2205      	movs	r2, #5
 800f418:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f41c:	2300      	movs	r3, #0
 800f41e:	2200      	movs	r2, #0
 800f420:	2100      	movs	r1, #0
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fc86 	bl	800fd34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800f438:	2200      	movs	r2, #0
 800f43a:	2120      	movs	r1, #32
 800f43c:	4818      	ldr	r0, [pc, #96]	@ (800f4a0 <MX_USB_Device_Init+0x6c>)
 800f43e:	f7f5 f9d5 	bl	80047ec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800f442:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f446:	f7f4 fca3 	bl	8003d90 <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800f44a:	2201      	movs	r2, #1
 800f44c:	2120      	movs	r1, #32
 800f44e:	4814      	ldr	r0, [pc, #80]	@ (800f4a0 <MX_USB_Device_Init+0x6c>)
 800f450:	f7f5 f9cc 	bl	80047ec <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f454:	2200      	movs	r2, #0
 800f456:	4913      	ldr	r1, [pc, #76]	@ (800f4a4 <MX_USB_Device_Init+0x70>)
 800f458:	4813      	ldr	r0, [pc, #76]	@ (800f4a8 <MX_USB_Device_Init+0x74>)
 800f45a:	f7fe fecb 	bl	800e1f4 <USBD_Init>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800f464:	f7f1 ffc1 	bl	80013ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f468:	4910      	ldr	r1, [pc, #64]	@ (800f4ac <MX_USB_Device_Init+0x78>)
 800f46a:	480f      	ldr	r0, [pc, #60]	@ (800f4a8 <MX_USB_Device_Init+0x74>)
 800f46c:	f7fe fef2 	bl	800e254 <USBD_RegisterClass>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <MX_USB_Device_Init+0x46>
    Error_Handler();
 800f476:	f7f1 ffb8 	bl	80013ea <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f47a:	490d      	ldr	r1, [pc, #52]	@ (800f4b0 <MX_USB_Device_Init+0x7c>)
 800f47c:	480a      	ldr	r0, [pc, #40]	@ (800f4a8 <MX_USB_Device_Init+0x74>)
 800f47e:	f7fe fe13 	bl	800e0a8 <USBD_CDC_RegisterInterface>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <MX_USB_Device_Init+0x58>
    Error_Handler();
 800f488:	f7f1 ffaf 	bl	80013ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f48c:	4806      	ldr	r0, [pc, #24]	@ (800f4a8 <MX_USB_Device_Init+0x74>)
 800f48e:	f7fe ff08 	bl	800e2a2 <USBD_Start>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <MX_USB_Device_Init+0x68>
    Error_Handler();
 800f498:	f7f1 ffa7 	bl	80013ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f49c:	bf00      	nop
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	48000400 	.word	0x48000400
 800f4a4:	20000130 	.word	0x20000130
 800f4a8:	200004e8 	.word	0x200004e8
 800f4ac:	20000018 	.word	0x20000018
 800f4b0:	2000011c 	.word	0x2000011c

0800f4b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4905      	ldr	r1, [pc, #20]	@ (800f4d0 <CDC_Init_FS+0x1c>)
 800f4bc:	4805      	ldr	r0, [pc, #20]	@ (800f4d4 <CDC_Init_FS+0x20>)
 800f4be:	f7fe fe08 	bl	800e0d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4c2:	4905      	ldr	r1, [pc, #20]	@ (800f4d8 <CDC_Init_FS+0x24>)
 800f4c4:	4803      	ldr	r0, [pc, #12]	@ (800f4d4 <CDC_Init_FS+0x20>)
 800f4c6:	f7fe fe22 	bl	800e10e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20000fb8 	.word	0x20000fb8
 800f4d4:	200004e8 	.word	0x200004e8
 800f4d8:	200007b8 	.word	0x200007b8

0800f4dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f4e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	6039      	str	r1, [r7, #0]
 800f4f6:	71fb      	strb	r3, [r7, #7]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b23      	cmp	r3, #35	@ 0x23
 800f500:	d84a      	bhi.n	800f598 <CDC_Control_FS+0xac>
 800f502:	a201      	add	r2, pc, #4	@ (adr r2, 800f508 <CDC_Control_FS+0x1c>)
 800f504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f508:	0800f599 	.word	0x0800f599
 800f50c:	0800f599 	.word	0x0800f599
 800f510:	0800f599 	.word	0x0800f599
 800f514:	0800f599 	.word	0x0800f599
 800f518:	0800f599 	.word	0x0800f599
 800f51c:	0800f599 	.word	0x0800f599
 800f520:	0800f599 	.word	0x0800f599
 800f524:	0800f599 	.word	0x0800f599
 800f528:	0800f599 	.word	0x0800f599
 800f52c:	0800f599 	.word	0x0800f599
 800f530:	0800f599 	.word	0x0800f599
 800f534:	0800f599 	.word	0x0800f599
 800f538:	0800f599 	.word	0x0800f599
 800f53c:	0800f599 	.word	0x0800f599
 800f540:	0800f599 	.word	0x0800f599
 800f544:	0800f599 	.word	0x0800f599
 800f548:	0800f599 	.word	0x0800f599
 800f54c:	0800f599 	.word	0x0800f599
 800f550:	0800f599 	.word	0x0800f599
 800f554:	0800f599 	.word	0x0800f599
 800f558:	0800f599 	.word	0x0800f599
 800f55c:	0800f599 	.word	0x0800f599
 800f560:	0800f599 	.word	0x0800f599
 800f564:	0800f599 	.word	0x0800f599
 800f568:	0800f599 	.word	0x0800f599
 800f56c:	0800f599 	.word	0x0800f599
 800f570:	0800f599 	.word	0x0800f599
 800f574:	0800f599 	.word	0x0800f599
 800f578:	0800f599 	.word	0x0800f599
 800f57c:	0800f599 	.word	0x0800f599
 800f580:	0800f599 	.word	0x0800f599
 800f584:	0800f599 	.word	0x0800f599
 800f588:	0800f599 	.word	0x0800f599
 800f58c:	0800f599 	.word	0x0800f599
 800f590:	0800f599 	.word	0x0800f599
 800f594:	0800f599 	.word	0x0800f599
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f598:	bf00      	nop
  }

  return (USBD_OK);
 800f59a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5b2:	6879      	ldr	r1, [r7, #4]
 800f5b4:	4810      	ldr	r0, [pc, #64]	@ (800f5f8 <CDC_Receive_FS+0x50>)
 800f5b6:	f7fe fdaa 	bl	800e10e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f5ba:	480f      	ldr	r0, [pc, #60]	@ (800f5f8 <CDC_Receive_FS+0x50>)
 800f5bc:	f7fe fdf0 	bl	800e1a0 <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800f5c0:	4b0e      	ldr	r3, [pc, #56]	@ (800f5fc <CDC_Receive_FS+0x54>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	671a      	str	r2, [r3, #112]	@ 0x70

  uint8_t len = (uint8_t) *Len;
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800f5cc:	2240      	movs	r2, #64	@ 0x40
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	480b      	ldr	r0, [pc, #44]	@ (800f600 <CDC_Receive_FS+0x58>)
 800f5d2:	f000 fca9 	bl	800ff28 <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800f5d6:	7bfb      	ldrb	r3, [r7, #15]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	6879      	ldr	r1, [r7, #4]
 800f5dc:	4808      	ldr	r0, [pc, #32]	@ (800f600 <CDC_Receive_FS+0x58>)
 800f5de:	f000 fcd5 	bl	800ff8c <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800f5e2:	2240      	movs	r2, #64	@ 0x40
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fc9e 	bl	800ff28 <memset>

  return (USBD_OK);
 800f5ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	200004e8 	.word	0x200004e8
 800f5fc:	20000370 	.word	0x20000370
 800f600:	20000394 	.word	0x20000394

0800f604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	460b      	mov	r3, r1
 800f60e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f610:	2300      	movs	r3, #0
 800f612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f614:	4b0d      	ldr	r3, [pc, #52]	@ (800f64c <CDC_Transmit_FS+0x48>)
 800f616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f61a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f626:	2301      	movs	r3, #1
 800f628:	e00b      	b.n	800f642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f62a:	887b      	ldrh	r3, [r7, #2]
 800f62c:	461a      	mov	r2, r3
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	4806      	ldr	r0, [pc, #24]	@ (800f64c <CDC_Transmit_FS+0x48>)
 800f632:	f7fe fd4e 	bl	800e0d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f636:	4805      	ldr	r0, [pc, #20]	@ (800f64c <CDC_Transmit_FS+0x48>)
 800f638:	f7fe fd82 	bl	800e140 <USBD_CDC_TransmitPacket>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f640:	7bfb      	ldrb	r3, [r7, #15]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	200004e8 	.word	0x200004e8

0800f650 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f650:	b480      	push	{r7}
 800f652:	b087      	sub	sp, #28
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	4613      	mov	r3, r2
 800f65c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f666:	4618      	mov	r0, r3
 800f668:	371c      	adds	r7, #28
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	4603      	mov	r3, r0
 800f67c:	6039      	str	r1, [r7, #0]
 800f67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2212      	movs	r2, #18
 800f684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f686:	4b03      	ldr	r3, [pc, #12]	@ (800f694 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr
 800f694:	20000150 	.word	0x20000150

0800f698 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	6039      	str	r1, [r7, #0]
 800f6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2204      	movs	r2, #4
 800f6a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6aa:	4b03      	ldr	r3, [pc, #12]	@ (800f6b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	20000164 	.word	0x20000164

0800f6bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	6039      	str	r1, [r7, #0]
 800f6c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6c8:	79fb      	ldrb	r3, [r7, #7]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d105      	bne.n	800f6da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	4907      	ldr	r1, [pc, #28]	@ (800f6f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f6d2:	4808      	ldr	r0, [pc, #32]	@ (800f6f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f6d4:	f7ff fdcd 	bl	800f272 <USBD_GetString>
 800f6d8:	e004      	b.n	800f6e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	4904      	ldr	r1, [pc, #16]	@ (800f6f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f6de:	4805      	ldr	r0, [pc, #20]	@ (800f6f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f6e0:	f7ff fdc7 	bl	800f272 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	200017b8 	.word	0x200017b8
 800f6f4:	080108dc 	.word	0x080108dc

0800f6f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	4904      	ldr	r1, [pc, #16]	@ (800f718 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f708:	4804      	ldr	r0, [pc, #16]	@ (800f71c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f70a:	f7ff fdb2 	bl	800f272 <USBD_GetString>
  return USBD_StrDesc;
 800f70e:	4b02      	ldr	r3, [pc, #8]	@ (800f718 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	200017b8 	.word	0x200017b8
 800f71c:	080108f0 	.word	0x080108f0

0800f720 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	4603      	mov	r3, r0
 800f728:	6039      	str	r1, [r7, #0]
 800f72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	221a      	movs	r2, #26
 800f730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f732:	f000 f843 	bl	800f7bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f736:	4b02      	ldr	r3, [pc, #8]	@ (800f740 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20000168 	.word	0x20000168

0800f744 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d105      	bne.n	800f762 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	4907      	ldr	r1, [pc, #28]	@ (800f778 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f75a:	4808      	ldr	r0, [pc, #32]	@ (800f77c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f75c:	f7ff fd89 	bl	800f272 <USBD_GetString>
 800f760:	e004      	b.n	800f76c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f762:	683a      	ldr	r2, [r7, #0]
 800f764:	4904      	ldr	r1, [pc, #16]	@ (800f778 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f766:	4805      	ldr	r0, [pc, #20]	@ (800f77c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f768:	f7ff fd83 	bl	800f272 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f76c:	4b02      	ldr	r3, [pc, #8]	@ (800f778 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	200017b8 	.word	0x200017b8
 800f77c:	08010904 	.word	0x08010904

0800f780 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d105      	bne.n	800f79e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	4907      	ldr	r1, [pc, #28]	@ (800f7b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f796:	4808      	ldr	r0, [pc, #32]	@ (800f7b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f798:	f7ff fd6b 	bl	800f272 <USBD_GetString>
 800f79c:	e004      	b.n	800f7a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	4904      	ldr	r1, [pc, #16]	@ (800f7b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f7a2:	4805      	ldr	r0, [pc, #20]	@ (800f7b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f7a4:	f7ff fd65 	bl	800f272 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7a8:	4b02      	ldr	r3, [pc, #8]	@ (800f7b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	200017b8 	.word	0x200017b8
 800f7b8:	08010910 	.word	0x08010910

0800f7bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f7c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f800 <Get_SerialNum+0x44>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f804 <Get_SerialNum+0x48>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f808 <Get_SerialNum+0x4c>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4413      	add	r3, r2
 800f7da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d009      	beq.n	800f7f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7e2:	2208      	movs	r2, #8
 800f7e4:	4909      	ldr	r1, [pc, #36]	@ (800f80c <Get_SerialNum+0x50>)
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 f814 	bl	800f814 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7ec:	2204      	movs	r2, #4
 800f7ee:	4908      	ldr	r1, [pc, #32]	@ (800f810 <Get_SerialNum+0x54>)
 800f7f0:	68b8      	ldr	r0, [r7, #8]
 800f7f2:	f000 f80f 	bl	800f814 <IntToUnicode>
  }
}
 800f7f6:	bf00      	nop
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	1fff7590 	.word	0x1fff7590
 800f804:	1fff7594 	.word	0x1fff7594
 800f808:	1fff7598 	.word	0x1fff7598
 800f80c:	2000016a 	.word	0x2000016a
 800f810:	2000017a 	.word	0x2000017a

0800f814 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	4613      	mov	r3, r2
 800f820:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f826:	2300      	movs	r3, #0
 800f828:	75fb      	strb	r3, [r7, #23]
 800f82a:	e027      	b.n	800f87c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	0f1b      	lsrs	r3, r3, #28
 800f830:	2b09      	cmp	r3, #9
 800f832:	d80b      	bhi.n	800f84c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	0f1b      	lsrs	r3, r3, #28
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	7dfb      	ldrb	r3, [r7, #23]
 800f83c:	005b      	lsls	r3, r3, #1
 800f83e:	4619      	mov	r1, r3
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	440b      	add	r3, r1
 800f844:	3230      	adds	r2, #48	@ 0x30
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	e00a      	b.n	800f862 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	0f1b      	lsrs	r3, r3, #28
 800f850:	b2da      	uxtb	r2, r3
 800f852:	7dfb      	ldrb	r3, [r7, #23]
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	4619      	mov	r1, r3
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	440b      	add	r3, r1
 800f85c:	3237      	adds	r2, #55	@ 0x37
 800f85e:	b2d2      	uxtb	r2, r2
 800f860:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f868:	7dfb      	ldrb	r3, [r7, #23]
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	3301      	adds	r3, #1
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	4413      	add	r3, r2
 800f872:	2200      	movs	r2, #0
 800f874:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f876:	7dfb      	ldrb	r3, [r7, #23]
 800f878:	3301      	adds	r3, #1
 800f87a:	75fb      	strb	r3, [r7, #23]
 800f87c:	7dfa      	ldrb	r2, [r7, #23]
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	429a      	cmp	r2, r3
 800f882:	d3d3      	bcc.n	800f82c <IntToUnicode+0x18>
  }
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop
 800f888:	371c      	adds	r7, #28
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
	...

0800f894 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b098      	sub	sp, #96	@ 0x60
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f89c:	f107 0310 	add.w	r3, r7, #16
 800f8a0:	2250      	movs	r2, #80	@ 0x50
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 fb3f 	bl	800ff28 <memset>
  if(pcdHandle->Instance==USB)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4a15      	ldr	r2, [pc, #84]	@ (800f904 <HAL_PCD_MspInit+0x70>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d122      	bne.n	800f8fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f8b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f8b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f8be:	f107 0310 	add.w	r3, r7, #16
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7f8 fad2 	bl	8007e6c <HAL_RCCEx_PeriphCLKConfig>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f8ce:	f7f1 fd8c 	bl	80013ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f908 <HAL_PCD_MspInit+0x74>)
 800f8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f908 <HAL_PCD_MspInit+0x74>)
 800f8d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f8dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f8de:	4b0a      	ldr	r3, [pc, #40]	@ (800f908 <HAL_PCD_MspInit+0x74>)
 800f8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	2014      	movs	r0, #20
 800f8f0:	f7f4 fb4b 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f8f4:	2014      	movs	r0, #20
 800f8f6:	f7f4 fb62 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f8fa:	bf00      	nop
 800f8fc:	3760      	adds	r7, #96	@ 0x60
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	40005c00 	.word	0x40005c00
 800f908:	40021000 	.word	0x40021000

0800f90c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f920:	4619      	mov	r1, r3
 800f922:	4610      	mov	r0, r2
 800f924:	f7fe fd08 	bl	800e338 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f928:	bf00      	nop
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	460b      	mov	r3, r1
 800f93a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f942:	78fa      	ldrb	r2, [r7, #3]
 800f944:	6879      	ldr	r1, [r7, #4]
 800f946:	4613      	mov	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	4413      	add	r3, r2
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	440b      	add	r3, r1
 800f950:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	78fb      	ldrb	r3, [r7, #3]
 800f958:	4619      	mov	r1, r3
 800f95a:	f7fe fd42 	bl	800e3e2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f95e:	bf00      	nop
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	460b      	mov	r3, r1
 800f970:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f978:	78fa      	ldrb	r2, [r7, #3]
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	4613      	mov	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4413      	add	r3, r2
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	440b      	add	r3, r1
 800f986:	3324      	adds	r3, #36	@ 0x24
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	78fb      	ldrb	r3, [r7, #3]
 800f98c:	4619      	mov	r1, r3
 800f98e:	f7fe fd8b 	bl	800e4a8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f992:	bf00      	nop
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b082      	sub	sp, #8
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe fe9f 	bl	800e6ec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f9ae:	bf00      	nop
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f9be:	2301      	movs	r3, #1
 800f9c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	795b      	ldrb	r3, [r3, #5]
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d001      	beq.n	800f9ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f9ca:	f7f1 fd0e 	bl	80013ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9d4:	7bfa      	ldrb	r2, [r7, #15]
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe fe49 	bl	800e670 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fe fdf5 	bl	800e5d4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f9ea:	bf00      	nop
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe fe44 	bl	800e690 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7a5b      	ldrb	r3, [r3, #9]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa10:	4b04      	ldr	r3, [pc, #16]	@ (800fa24 <HAL_PCD_SuspendCallback+0x30>)
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	4a03      	ldr	r2, [pc, #12]	@ (800fa24 <HAL_PCD_SuspendCallback+0x30>)
 800fa16:	f043 0306 	orr.w	r3, r3, #6
 800fa1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fa1c:	bf00      	nop
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	e000ed00 	.word	0xe000ed00

0800fa28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	7a5b      	ldrb	r3, [r3, #9]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d007      	beq.n	800fa48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa38:	4b08      	ldr	r3, [pc, #32]	@ (800fa5c <HAL_PCD_ResumeCallback+0x34>)
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	4a07      	ldr	r2, [pc, #28]	@ (800fa5c <HAL_PCD_ResumeCallback+0x34>)
 800fa3e:	f023 0306 	bic.w	r3, r3, #6
 800fa42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fa44:	f000 f9f8 	bl	800fe38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fe fe34 	bl	800e6bc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	e000ed00 	.word	0xe000ed00

0800fa60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fa68:	4a2b      	ldr	r2, [pc, #172]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a29      	ldr	r2, [pc, #164]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa74:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fa78:	4b27      	ldr	r3, [pc, #156]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa7a:	4a28      	ldr	r2, [pc, #160]	@ (800fb1c <USBD_LL_Init+0xbc>)
 800fa7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fa7e:	4b26      	ldr	r3, [pc, #152]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa80:	2208      	movs	r2, #8
 800fa82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fa84:	4b24      	ldr	r3, [pc, #144]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa86:	2202      	movs	r2, #2
 800fa88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fa8a:	4b23      	ldr	r3, [pc, #140]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fa90:	4b21      	ldr	r3, [pc, #132]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa92:	2200      	movs	r2, #0
 800fa94:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fa96:	4b20      	ldr	r3, [pc, #128]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fa9c:	4b1e      	ldr	r3, [pc, #120]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800faa2:	4b1d      	ldr	r3, [pc, #116]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800faa8:	481b      	ldr	r0, [pc, #108]	@ (800fb18 <USBD_LL_Init+0xb8>)
 800faaa:	f7f5 fefb 	bl	80058a4 <HAL_PCD_Init>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fab4:	f7f1 fc99 	bl	80013ea <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fabe:	2318      	movs	r3, #24
 800fac0:	2200      	movs	r2, #0
 800fac2:	2100      	movs	r1, #0
 800fac4:	f7f7 fb82 	bl	80071cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800face:	2358      	movs	r3, #88	@ 0x58
 800fad0:	2200      	movs	r2, #0
 800fad2:	2180      	movs	r1, #128	@ 0x80
 800fad4:	f7f7 fb7a 	bl	80071cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fade:	23c0      	movs	r3, #192	@ 0xc0
 800fae0:	2200      	movs	r2, #0
 800fae2:	2181      	movs	r1, #129	@ 0x81
 800fae4:	f7f7 fb72 	bl	80071cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800faee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800faf2:	2200      	movs	r2, #0
 800faf4:	2101      	movs	r1, #1
 800faf6:	f7f7 fb69 	bl	80071cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb04:	2200      	movs	r2, #0
 800fb06:	2182      	movs	r1, #130	@ 0x82
 800fb08:	f7f7 fb60 	bl	80071cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	200019b8 	.word	0x200019b8
 800fb1c:	40005c00 	.word	0x40005c00

0800fb20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f5 ff82 	bl	8005a40 <HAL_PCD_Start>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb40:	7bfb      	ldrb	r3, [r7, #15]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 f97e 	bl	800fe44 <USBD_Get_USB_Status>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b084      	sub	sp, #16
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	4608      	mov	r0, r1
 800fb60:	4611      	mov	r1, r2
 800fb62:	461a      	mov	r2, r3
 800fb64:	4603      	mov	r3, r0
 800fb66:	70fb      	strb	r3, [r7, #3]
 800fb68:	460b      	mov	r3, r1
 800fb6a:	70bb      	strb	r3, [r7, #2]
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fb7e:	78bb      	ldrb	r3, [r7, #2]
 800fb80:	883a      	ldrh	r2, [r7, #0]
 800fb82:	78f9      	ldrb	r1, [r7, #3]
 800fb84:	f7f6 f8c9 	bl	8005d1a <HAL_PCD_EP_Open>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f000 f958 	bl	800fe44 <USBD_Get_USB_Status>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b084      	sub	sp, #16
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fbbc:	78fa      	ldrb	r2, [r7, #3]
 800fbbe:	4611      	mov	r1, r2
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f6 f909 	bl	8005dd8 <HAL_PCD_EP_Close>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f000 f939 	bl	800fe44 <USBD_Get_USB_Status>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	460b      	mov	r3, r1
 800fbea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fbfa:	78fa      	ldrb	r2, [r7, #3]
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f6 f9b2 	bl	8005f68 <HAL_PCD_EP_SetStall>
 800fc04:	4603      	mov	r3, r0
 800fc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 f91a 	bl	800fe44 <USBD_Get_USB_Status>
 800fc10:	4603      	mov	r3, r0
 800fc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b084      	sub	sp, #16
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
 800fc26:	460b      	mov	r3, r1
 800fc28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc38:	78fa      	ldrb	r2, [r7, #3]
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f6 f9e5 	bl	800600c <HAL_PCD_EP_ClrStall>
 800fc42:	4603      	mov	r3, r0
 800fc44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc46:	7bfb      	ldrb	r3, [r7, #15]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f000 f8fb 	bl	800fe44 <USBD_Get_USB_Status>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fc6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	da0b      	bge.n	800fc90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc78:	78fb      	ldrb	r3, [r7, #3]
 800fc7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc7e:	68f9      	ldr	r1, [r7, #12]
 800fc80:	4613      	mov	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4413      	add	r3, r2
 800fc86:	00db      	lsls	r3, r3, #3
 800fc88:	440b      	add	r3, r1
 800fc8a:	3312      	adds	r3, #18
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	e00b      	b.n	800fca8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fc90:	78fb      	ldrb	r3, [r7, #3]
 800fc92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc96:	68f9      	ldr	r1, [r7, #12]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4413      	add	r3, r2
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	440b      	add	r3, r1
 800fca2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800fca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fcce:	78fa      	ldrb	r2, [r7, #3]
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7f5 fffd 	bl	8005cd2 <HAL_PCD_SetAddress>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 f8b0 	bl	800fe44 <USBD_Get_USB_Status>
 800fce4:	4603      	mov	r3, r0
 800fce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b086      	sub	sp, #24
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	60f8      	str	r0, [r7, #12]
 800fcfa:	607a      	str	r2, [r7, #4]
 800fcfc:	603b      	str	r3, [r7, #0]
 800fcfe:	460b      	mov	r3, r1
 800fd00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd02:	2300      	movs	r3, #0
 800fd04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd06:	2300      	movs	r3, #0
 800fd08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd10:	7af9      	ldrb	r1, [r7, #11]
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	f7f6 f8f0 	bl	8005efa <HAL_PCD_EP_Transmit>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd1e:	7dfb      	ldrb	r3, [r7, #23]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f000 f88f 	bl	800fe44 <USBD_Get_USB_Status>
 800fd26:	4603      	mov	r3, r0
 800fd28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b086      	sub	sp, #24
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	603b      	str	r3, [r7, #0]
 800fd40:	460b      	mov	r3, r1
 800fd42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd52:	7af9      	ldrb	r1, [r7, #11]
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	f7f6 f886 	bl	8005e68 <HAL_PCD_EP_Receive>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd60:	7dfb      	ldrb	r3, [r7, #23]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 f86e 	bl	800fe44 <USBD_Get_USB_Status>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3718      	adds	r7, #24
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b082      	sub	sp, #8
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	460b      	mov	r3, r1
 800fd80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fd88:	78fa      	ldrb	r2, [r7, #3]
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7f6 f89c 	bl	8005eca <HAL_PCD_EP_GetRxCount>
 800fd92:	4603      	mov	r3, r0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	460b      	mov	r3, r1
 800fda6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fda8:	78fb      	ldrb	r3, [r7, #3]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <HAL_PCDEx_LPM_Callback+0x18>
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d013      	beq.n	800fdda <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800fdb2:	e023      	b.n	800fdfc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	7a5b      	ldrb	r3, [r3, #9]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d007      	beq.n	800fdcc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fdbc:	f000 f83c 	bl	800fe38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdc0:	4b10      	ldr	r3, [pc, #64]	@ (800fe04 <HAL_PCDEx_LPM_Callback+0x68>)
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	4a0f      	ldr	r2, [pc, #60]	@ (800fe04 <HAL_PCDEx_LPM_Callback+0x68>)
 800fdc6:	f023 0306 	bic.w	r3, r3, #6
 800fdca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fc72 	bl	800e6bc <USBD_LL_Resume>
    break;
 800fdd8:	e010      	b.n	800fdfc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fe fc55 	bl	800e690 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	7a5b      	ldrb	r3, [r3, #9]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdee:	4b05      	ldr	r3, [pc, #20]	@ (800fe04 <HAL_PCDEx_LPM_Callback+0x68>)
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	4a04      	ldr	r2, [pc, #16]	@ (800fe04 <HAL_PCDEx_LPM_Callback+0x68>)
 800fdf4:	f043 0306 	orr.w	r3, r3, #6
 800fdf8:	6113      	str	r3, [r2, #16]
    break;
 800fdfa:	bf00      	nop
}
 800fdfc:	bf00      	nop
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	e000ed00 	.word	0xe000ed00

0800fe08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe10:	4b03      	ldr	r3, [pc, #12]	@ (800fe20 <USBD_static_malloc+0x18>)
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	370c      	adds	r7, #12
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	20001c94 	.word	0x20001c94

0800fe24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]

}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fe3c:	f7f1 fa8a 	bl	8001354 <SystemClock_Config>
}
 800fe40:	bf00      	nop
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	2b03      	cmp	r3, #3
 800fe56:	d817      	bhi.n	800fe88 <USBD_Get_USB_Status+0x44>
 800fe58:	a201      	add	r2, pc, #4	@ (adr r2, 800fe60 <USBD_Get_USB_Status+0x1c>)
 800fe5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5e:	bf00      	nop
 800fe60:	0800fe71 	.word	0x0800fe71
 800fe64:	0800fe77 	.word	0x0800fe77
 800fe68:	0800fe7d 	.word	0x0800fe7d
 800fe6c:	0800fe83 	.word	0x0800fe83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	73fb      	strb	r3, [r7, #15]
    break;
 800fe74:	e00b      	b.n	800fe8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe76:	2303      	movs	r3, #3
 800fe78:	73fb      	strb	r3, [r7, #15]
    break;
 800fe7a:	e008      	b.n	800fe8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe80:	e005      	b.n	800fe8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe82:	2303      	movs	r3, #3
 800fe84:	73fb      	strb	r3, [r7, #15]
    break;
 800fe86:	e002      	b.n	800fe8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe8c:	bf00      	nop
  }
  return usb_status;
 800fe8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <arm_sin_f32>:
 800fe9c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800ff1c <arm_sin_f32+0x80>
 800fea0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fea4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800feb0:	d504      	bpl.n	800febc <arm_sin_f32+0x20>
 800feb2:	ee17 3a90 	vmov	r3, s15
 800feb6:	3b01      	subs	r3, #1
 800feb8:	ee07 3a90 	vmov	s15, r3
 800febc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fec0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800ff20 <arm_sin_f32+0x84>
 800fec4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fec8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fecc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800fed0:	ee17 3a90 	vmov	r3, s15
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800feda:	d21a      	bcs.n	800ff12 <arm_sin_f32+0x76>
 800fedc:	ee07 3a90 	vmov	s15, r3
 800fee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fee4:	1c59      	adds	r1, r3, #1
 800fee6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800feea:	4a0e      	ldr	r2, [pc, #56]	@ (800ff24 <arm_sin_f32+0x88>)
 800feec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fef0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fef4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fef8:	ed93 7a00 	vldr	s14, [r3]
 800fefc:	edd2 6a00 	vldr	s13, [r2]
 800ff00:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ff04:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ff08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ff10:	4770      	bx	lr
 800ff12:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ff16:	2101      	movs	r1, #1
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e7e6      	b.n	800feea <arm_sin_f32+0x4e>
 800ff1c:	3e22f983 	.word	0x3e22f983
 800ff20:	44000000 	.word	0x44000000
 800ff24:	08010960 	.word	0x08010960

0800ff28 <memset>:
 800ff28:	4402      	add	r2, r0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d100      	bne.n	800ff32 <memset+0xa>
 800ff30:	4770      	bx	lr
 800ff32:	f803 1b01 	strb.w	r1, [r3], #1
 800ff36:	e7f9      	b.n	800ff2c <memset+0x4>

0800ff38 <__errno>:
 800ff38:	4b01      	ldr	r3, [pc, #4]	@ (800ff40 <__errno+0x8>)
 800ff3a:	6818      	ldr	r0, [r3, #0]
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	20000184 	.word	0x20000184

0800ff44 <__libc_init_array>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	4d0d      	ldr	r5, [pc, #52]	@ (800ff7c <__libc_init_array+0x38>)
 800ff48:	4c0d      	ldr	r4, [pc, #52]	@ (800ff80 <__libc_init_array+0x3c>)
 800ff4a:	1b64      	subs	r4, r4, r5
 800ff4c:	10a4      	asrs	r4, r4, #2
 800ff4e:	2600      	movs	r6, #0
 800ff50:	42a6      	cmp	r6, r4
 800ff52:	d109      	bne.n	800ff68 <__libc_init_array+0x24>
 800ff54:	4d0b      	ldr	r5, [pc, #44]	@ (800ff84 <__libc_init_array+0x40>)
 800ff56:	4c0c      	ldr	r4, [pc, #48]	@ (800ff88 <__libc_init_array+0x44>)
 800ff58:	f000 fc92 	bl	8010880 <_init>
 800ff5c:	1b64      	subs	r4, r4, r5
 800ff5e:	10a4      	asrs	r4, r4, #2
 800ff60:	2600      	movs	r6, #0
 800ff62:	42a6      	cmp	r6, r4
 800ff64:	d105      	bne.n	800ff72 <__libc_init_array+0x2e>
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff6c:	4798      	blx	r3
 800ff6e:	3601      	adds	r6, #1
 800ff70:	e7ee      	b.n	800ff50 <__libc_init_array+0xc>
 800ff72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff76:	4798      	blx	r3
 800ff78:	3601      	adds	r6, #1
 800ff7a:	e7f2      	b.n	800ff62 <__libc_init_array+0x1e>
 800ff7c:	0801118c 	.word	0x0801118c
 800ff80:	0801118c 	.word	0x0801118c
 800ff84:	0801118c 	.word	0x0801118c
 800ff88:	08011190 	.word	0x08011190

0800ff8c <memcpy>:
 800ff8c:	440a      	add	r2, r1
 800ff8e:	4291      	cmp	r1, r2
 800ff90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff94:	d100      	bne.n	800ff98 <memcpy+0xc>
 800ff96:	4770      	bx	lr
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffa2:	4291      	cmp	r1, r2
 800ffa4:	d1f9      	bne.n	800ff9a <memcpy+0xe>
 800ffa6:	bd10      	pop	{r4, pc}

0800ffa8 <fmodf>:
 800ffa8:	b508      	push	{r3, lr}
 800ffaa:	ed2d 8b02 	vpush	{d8}
 800ffae:	eef0 8a40 	vmov.f32	s17, s0
 800ffb2:	eeb0 8a60 	vmov.f32	s16, s1
 800ffb6:	f000 f879 	bl	80100ac <__ieee754_fmodf>
 800ffba:	eef4 8a48 	vcmp.f32	s17, s16
 800ffbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc2:	d60c      	bvs.n	800ffde <fmodf+0x36>
 800ffc4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ffe4 <fmodf+0x3c>
 800ffc8:	eeb4 8a68 	vcmp.f32	s16, s17
 800ffcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd0:	d105      	bne.n	800ffde <fmodf+0x36>
 800ffd2:	f7ff ffb1 	bl	800ff38 <__errno>
 800ffd6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ffda:	2321      	movs	r3, #33	@ 0x21
 800ffdc:	6003      	str	r3, [r0, #0]
 800ffde:	ecbd 8b02 	vpop	{d8}
 800ffe2:	bd08      	pop	{r3, pc}
 800ffe4:	00000000 	.word	0x00000000

0800ffe8 <powf>:
 800ffe8:	b508      	push	{r3, lr}
 800ffea:	ed2d 8b04 	vpush	{d8-d9}
 800ffee:	eeb0 8a60 	vmov.f32	s16, s1
 800fff2:	eeb0 9a40 	vmov.f32	s18, s0
 800fff6:	f000 f8db 	bl	80101b0 <__ieee754_powf>
 800fffa:	eeb4 8a48 	vcmp.f32	s16, s16
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	eef0 8a40 	vmov.f32	s17, s0
 8010006:	d63e      	bvs.n	8010086 <powf+0x9e>
 8010008:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801000c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010010:	d112      	bne.n	8010038 <powf+0x50>
 8010012:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001a:	d039      	beq.n	8010090 <powf+0xa8>
 801001c:	eeb0 0a48 	vmov.f32	s0, s16
 8010020:	f000 f839 	bl	8010096 <finitef>
 8010024:	b378      	cbz	r0, 8010086 <powf+0x9e>
 8010026:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801002a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002e:	d52a      	bpl.n	8010086 <powf+0x9e>
 8010030:	f7ff ff82 	bl	800ff38 <__errno>
 8010034:	2322      	movs	r3, #34	@ 0x22
 8010036:	e014      	b.n	8010062 <powf+0x7a>
 8010038:	f000 f82d 	bl	8010096 <finitef>
 801003c:	b998      	cbnz	r0, 8010066 <powf+0x7e>
 801003e:	eeb0 0a49 	vmov.f32	s0, s18
 8010042:	f000 f828 	bl	8010096 <finitef>
 8010046:	b170      	cbz	r0, 8010066 <powf+0x7e>
 8010048:	eeb0 0a48 	vmov.f32	s0, s16
 801004c:	f000 f823 	bl	8010096 <finitef>
 8010050:	b148      	cbz	r0, 8010066 <powf+0x7e>
 8010052:	eef4 8a68 	vcmp.f32	s17, s17
 8010056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005a:	d7e9      	bvc.n	8010030 <powf+0x48>
 801005c:	f7ff ff6c 	bl	800ff38 <__errno>
 8010060:	2321      	movs	r3, #33	@ 0x21
 8010062:	6003      	str	r3, [r0, #0]
 8010064:	e00f      	b.n	8010086 <powf+0x9e>
 8010066:	eef5 8a40 	vcmp.f32	s17, #0.0
 801006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006e:	d10a      	bne.n	8010086 <powf+0x9e>
 8010070:	eeb0 0a49 	vmov.f32	s0, s18
 8010074:	f000 f80f 	bl	8010096 <finitef>
 8010078:	b128      	cbz	r0, 8010086 <powf+0x9e>
 801007a:	eeb0 0a48 	vmov.f32	s0, s16
 801007e:	f000 f80a 	bl	8010096 <finitef>
 8010082:	2800      	cmp	r0, #0
 8010084:	d1d4      	bne.n	8010030 <powf+0x48>
 8010086:	eeb0 0a68 	vmov.f32	s0, s17
 801008a:	ecbd 8b04 	vpop	{d8-d9}
 801008e:	bd08      	pop	{r3, pc}
 8010090:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010094:	e7f7      	b.n	8010086 <powf+0x9e>

08010096 <finitef>:
 8010096:	ee10 3a10 	vmov	r3, s0
 801009a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801009e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80100a2:	bfac      	ite	ge
 80100a4:	2000      	movge	r0, #0
 80100a6:	2001      	movlt	r0, #1
 80100a8:	4770      	bx	lr
	...

080100ac <__ieee754_fmodf>:
 80100ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ae:	ee10 5a90 	vmov	r5, s1
 80100b2:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 80100b6:	1e43      	subs	r3, r0, #1
 80100b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80100bc:	d206      	bcs.n	80100cc <__ieee754_fmodf+0x20>
 80100be:	ee10 3a10 	vmov	r3, s0
 80100c2:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80100c6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80100ca:	d304      	bcc.n	80100d6 <__ieee754_fmodf+0x2a>
 80100cc:	ee60 0a20 	vmul.f32	s1, s0, s1
 80100d0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80100d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d6:	4286      	cmp	r6, r0
 80100d8:	dbfc      	blt.n	80100d4 <__ieee754_fmodf+0x28>
 80100da:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 80100de:	d105      	bne.n	80100ec <__ieee754_fmodf+0x40>
 80100e0:	4b32      	ldr	r3, [pc, #200]	@ (80101ac <__ieee754_fmodf+0x100>)
 80100e2:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 80100e6:	ed93 0a00 	vldr	s0, [r3]
 80100ea:	e7f3      	b.n	80100d4 <__ieee754_fmodf+0x28>
 80100ec:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80100f0:	d140      	bne.n	8010174 <__ieee754_fmodf+0xc8>
 80100f2:	0232      	lsls	r2, r6, #8
 80100f4:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 80100f8:	2a00      	cmp	r2, #0
 80100fa:	dc38      	bgt.n	801016e <__ieee754_fmodf+0xc2>
 80100fc:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 8010100:	d13e      	bne.n	8010180 <__ieee754_fmodf+0xd4>
 8010102:	0207      	lsls	r7, r0, #8
 8010104:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8010108:	2f00      	cmp	r7, #0
 801010a:	da36      	bge.n	801017a <__ieee754_fmodf+0xce>
 801010c:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8010110:	bfb9      	ittee	lt
 8010112:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8010116:	1a5b      	sublt	r3, r3, r1
 8010118:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 801011c:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8010120:	bfb8      	it	lt
 8010122:	fa06 f303 	lsllt.w	r3, r6, r3
 8010126:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801012a:	bfb5      	itete	lt
 801012c:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 8010130:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8010134:	1aad      	sublt	r5, r5, r2
 8010136:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 801013a:	bfb8      	it	lt
 801013c:	40a8      	lsllt	r0, r5
 801013e:	1a89      	subs	r1, r1, r2
 8010140:	1a1d      	subs	r5, r3, r0
 8010142:	bb01      	cbnz	r1, 8010186 <__ieee754_fmodf+0xda>
 8010144:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 8010148:	bf38      	it	cc
 801014a:	462b      	movcc	r3, r5
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0c7      	beq.n	80100e0 <__ieee754_fmodf+0x34>
 8010150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010154:	db1f      	blt.n	8010196 <__ieee754_fmodf+0xea>
 8010156:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801015a:	db1f      	blt.n	801019c <__ieee754_fmodf+0xf0>
 801015c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010160:	327f      	adds	r2, #127	@ 0x7f
 8010162:	4323      	orrs	r3, r4
 8010164:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010168:	ee00 3a10 	vmov	s0, r3
 801016c:	e7b2      	b.n	80100d4 <__ieee754_fmodf+0x28>
 801016e:	3901      	subs	r1, #1
 8010170:	0052      	lsls	r2, r2, #1
 8010172:	e7c1      	b.n	80100f8 <__ieee754_fmodf+0x4c>
 8010174:	15f1      	asrs	r1, r6, #23
 8010176:	397f      	subs	r1, #127	@ 0x7f
 8010178:	e7c0      	b.n	80100fc <__ieee754_fmodf+0x50>
 801017a:	3a01      	subs	r2, #1
 801017c:	007f      	lsls	r7, r7, #1
 801017e:	e7c3      	b.n	8010108 <__ieee754_fmodf+0x5c>
 8010180:	15c2      	asrs	r2, r0, #23
 8010182:	3a7f      	subs	r2, #127	@ 0x7f
 8010184:	e7c2      	b.n	801010c <__ieee754_fmodf+0x60>
 8010186:	2d00      	cmp	r5, #0
 8010188:	da02      	bge.n	8010190 <__ieee754_fmodf+0xe4>
 801018a:	005b      	lsls	r3, r3, #1
 801018c:	3901      	subs	r1, #1
 801018e:	e7d7      	b.n	8010140 <__ieee754_fmodf+0x94>
 8010190:	d0a6      	beq.n	80100e0 <__ieee754_fmodf+0x34>
 8010192:	006b      	lsls	r3, r5, #1
 8010194:	e7fa      	b.n	801018c <__ieee754_fmodf+0xe0>
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	3a01      	subs	r2, #1
 801019a:	e7d9      	b.n	8010150 <__ieee754_fmodf+0xa4>
 801019c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80101a0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80101a4:	3282      	adds	r2, #130	@ 0x82
 80101a6:	4113      	asrs	r3, r2
 80101a8:	4323      	orrs	r3, r4
 80101aa:	e7dd      	b.n	8010168 <__ieee754_fmodf+0xbc>
 80101ac:	08011164 	.word	0x08011164

080101b0 <__ieee754_powf>:
 80101b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b4:	ee10 4a90 	vmov	r4, s1
 80101b8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80101bc:	ed2d 8b02 	vpush	{d8}
 80101c0:	ee10 6a10 	vmov	r6, s0
 80101c4:	eeb0 8a40 	vmov.f32	s16, s0
 80101c8:	eef0 8a60 	vmov.f32	s17, s1
 80101cc:	d10c      	bne.n	80101e8 <__ieee754_powf+0x38>
 80101ce:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80101d2:	0076      	lsls	r6, r6, #1
 80101d4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80101d8:	f240 829c 	bls.w	8010714 <__ieee754_powf+0x564>
 80101dc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80101e0:	ecbd 8b02 	vpop	{d8}
 80101e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80101ec:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80101f0:	d802      	bhi.n	80101f8 <__ieee754_powf+0x48>
 80101f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80101f6:	d908      	bls.n	801020a <__ieee754_powf+0x5a>
 80101f8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80101fc:	d1ee      	bne.n	80101dc <__ieee754_powf+0x2c>
 80101fe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010202:	0064      	lsls	r4, r4, #1
 8010204:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010208:	e7e6      	b.n	80101d8 <__ieee754_powf+0x28>
 801020a:	2e00      	cmp	r6, #0
 801020c:	da1e      	bge.n	801024c <__ieee754_powf+0x9c>
 801020e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010212:	d22b      	bcs.n	801026c <__ieee754_powf+0xbc>
 8010214:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010218:	d332      	bcc.n	8010280 <__ieee754_powf+0xd0>
 801021a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801021e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010222:	fa49 f503 	asr.w	r5, r9, r3
 8010226:	fa05 f303 	lsl.w	r3, r5, r3
 801022a:	454b      	cmp	r3, r9
 801022c:	d126      	bne.n	801027c <__ieee754_powf+0xcc>
 801022e:	f005 0501 	and.w	r5, r5, #1
 8010232:	f1c5 0502 	rsb	r5, r5, #2
 8010236:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801023a:	d122      	bne.n	8010282 <__ieee754_powf+0xd2>
 801023c:	2c00      	cmp	r4, #0
 801023e:	f280 826f 	bge.w	8010720 <__ieee754_powf+0x570>
 8010242:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010246:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801024a:	e7c9      	b.n	80101e0 <__ieee754_powf+0x30>
 801024c:	2500      	movs	r5, #0
 801024e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010252:	d1f0      	bne.n	8010236 <__ieee754_powf+0x86>
 8010254:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010258:	f000 825c 	beq.w	8010714 <__ieee754_powf+0x564>
 801025c:	d908      	bls.n	8010270 <__ieee754_powf+0xc0>
 801025e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80105c0 <__ieee754_powf+0x410>
 8010262:	2c00      	cmp	r4, #0
 8010264:	bfa8      	it	ge
 8010266:	eeb0 0a68 	vmovge.f32	s0, s17
 801026a:	e7b9      	b.n	80101e0 <__ieee754_powf+0x30>
 801026c:	2502      	movs	r5, #2
 801026e:	e7ee      	b.n	801024e <__ieee754_powf+0x9e>
 8010270:	2c00      	cmp	r4, #0
 8010272:	f280 8252 	bge.w	801071a <__ieee754_powf+0x56a>
 8010276:	eeb1 0a68 	vneg.f32	s0, s17
 801027a:	e7b1      	b.n	80101e0 <__ieee754_powf+0x30>
 801027c:	2500      	movs	r5, #0
 801027e:	e7da      	b.n	8010236 <__ieee754_powf+0x86>
 8010280:	2500      	movs	r5, #0
 8010282:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010286:	d102      	bne.n	801028e <__ieee754_powf+0xde>
 8010288:	ee28 0a08 	vmul.f32	s0, s16, s16
 801028c:	e7a8      	b.n	80101e0 <__ieee754_powf+0x30>
 801028e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010292:	d109      	bne.n	80102a8 <__ieee754_powf+0xf8>
 8010294:	2e00      	cmp	r6, #0
 8010296:	db07      	blt.n	80102a8 <__ieee754_powf+0xf8>
 8010298:	eeb0 0a48 	vmov.f32	s0, s16
 801029c:	ecbd 8b02 	vpop	{d8}
 80102a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102a4:	f000 bae8 	b.w	8010878 <__ieee754_sqrtf>
 80102a8:	eeb0 0a48 	vmov.f32	s0, s16
 80102ac:	f000 fa50 	bl	8010750 <fabsf>
 80102b0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80102b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80102b8:	4647      	mov	r7, r8
 80102ba:	d002      	beq.n	80102c2 <__ieee754_powf+0x112>
 80102bc:	f1b8 0f00 	cmp.w	r8, #0
 80102c0:	d117      	bne.n	80102f2 <__ieee754_powf+0x142>
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	bfbc      	itt	lt
 80102c6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80102ca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80102ce:	2e00      	cmp	r6, #0
 80102d0:	da86      	bge.n	80101e0 <__ieee754_powf+0x30>
 80102d2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80102d6:	ea58 0805 	orrs.w	r8, r8, r5
 80102da:	d104      	bne.n	80102e6 <__ieee754_powf+0x136>
 80102dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80102e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80102e4:	e77c      	b.n	80101e0 <__ieee754_powf+0x30>
 80102e6:	2d01      	cmp	r5, #1
 80102e8:	f47f af7a 	bne.w	80101e0 <__ieee754_powf+0x30>
 80102ec:	eeb1 0a40 	vneg.f32	s0, s0
 80102f0:	e776      	b.n	80101e0 <__ieee754_powf+0x30>
 80102f2:	0ff0      	lsrs	r0, r6, #31
 80102f4:	3801      	subs	r0, #1
 80102f6:	ea55 0300 	orrs.w	r3, r5, r0
 80102fa:	d104      	bne.n	8010306 <__ieee754_powf+0x156>
 80102fc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010300:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010304:	e76c      	b.n	80101e0 <__ieee754_powf+0x30>
 8010306:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801030a:	d973      	bls.n	80103f4 <__ieee754_powf+0x244>
 801030c:	4bad      	ldr	r3, [pc, #692]	@ (80105c4 <__ieee754_powf+0x414>)
 801030e:	4598      	cmp	r8, r3
 8010310:	d808      	bhi.n	8010324 <__ieee754_powf+0x174>
 8010312:	2c00      	cmp	r4, #0
 8010314:	da0b      	bge.n	801032e <__ieee754_powf+0x17e>
 8010316:	2000      	movs	r0, #0
 8010318:	ecbd 8b02 	vpop	{d8}
 801031c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010320:	f000 baa4 	b.w	801086c <__math_oflowf>
 8010324:	4ba8      	ldr	r3, [pc, #672]	@ (80105c8 <__ieee754_powf+0x418>)
 8010326:	4598      	cmp	r8, r3
 8010328:	d908      	bls.n	801033c <__ieee754_powf+0x18c>
 801032a:	2c00      	cmp	r4, #0
 801032c:	dcf3      	bgt.n	8010316 <__ieee754_powf+0x166>
 801032e:	2000      	movs	r0, #0
 8010330:	ecbd 8b02 	vpop	{d8}
 8010334:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010338:	f000 ba92 	b.w	8010860 <__math_uflowf>
 801033c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010340:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010344:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80105cc <__ieee754_powf+0x41c>
 8010348:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801034c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010350:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010354:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010358:	ee20 7a00 	vmul.f32	s14, s0, s0
 801035c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010360:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80105d0 <__ieee754_powf+0x420>
 8010364:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010368:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80105d4 <__ieee754_powf+0x424>
 801036c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010370:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80105d8 <__ieee754_powf+0x428>
 8010374:	eef0 6a67 	vmov.f32	s13, s15
 8010378:	eee0 6a07 	vfma.f32	s13, s0, s14
 801037c:	ee16 3a90 	vmov	r3, s13
 8010380:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010384:	f023 030f 	bic.w	r3, r3, #15
 8010388:	ee06 3a90 	vmov	s13, r3
 801038c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8010390:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010394:	3d01      	subs	r5, #1
 8010396:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801039a:	4305      	orrs	r5, r0
 801039c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103a0:	f024 040f 	bic.w	r4, r4, #15
 80103a4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80103a8:	bf18      	it	ne
 80103aa:	eeb0 8a47 	vmovne.f32	s16, s14
 80103ae:	ee07 4a10 	vmov	s14, r4
 80103b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80103b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80103ba:	ee07 3a90 	vmov	s15, r3
 80103be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80103c2:	ee07 4a10 	vmov	s14, r4
 80103c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80103ce:	ee17 1a10 	vmov	r1, s14
 80103d2:	2900      	cmp	r1, #0
 80103d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103d8:	f340 80dd 	ble.w	8010596 <__ieee754_powf+0x3e6>
 80103dc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80103e0:	f240 80ca 	bls.w	8010578 <__ieee754_powf+0x3c8>
 80103e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ec:	bf4c      	ite	mi
 80103ee:	2001      	movmi	r0, #1
 80103f0:	2000      	movpl	r0, #0
 80103f2:	e791      	b.n	8010318 <__ieee754_powf+0x168>
 80103f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80103f8:	bf01      	itttt	eq
 80103fa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80105dc <__ieee754_powf+0x42c>
 80103fe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010402:	f06f 0317 	mvneq.w	r3, #23
 8010406:	ee17 7a90 	vmoveq	r7, s15
 801040a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801040e:	bf18      	it	ne
 8010410:	2300      	movne	r3, #0
 8010412:	3a7f      	subs	r2, #127	@ 0x7f
 8010414:	441a      	add	r2, r3
 8010416:	4b72      	ldr	r3, [pc, #456]	@ (80105e0 <__ieee754_powf+0x430>)
 8010418:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801041c:	429f      	cmp	r7, r3
 801041e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010422:	dd06      	ble.n	8010432 <__ieee754_powf+0x282>
 8010424:	4b6f      	ldr	r3, [pc, #444]	@ (80105e4 <__ieee754_powf+0x434>)
 8010426:	429f      	cmp	r7, r3
 8010428:	f340 80a4 	ble.w	8010574 <__ieee754_powf+0x3c4>
 801042c:	3201      	adds	r2, #1
 801042e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010432:	2600      	movs	r6, #0
 8010434:	4b6c      	ldr	r3, [pc, #432]	@ (80105e8 <__ieee754_powf+0x438>)
 8010436:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801043a:	ee07 1a10 	vmov	s14, r1
 801043e:	edd3 5a00 	vldr	s11, [r3]
 8010442:	4b6a      	ldr	r3, [pc, #424]	@ (80105ec <__ieee754_powf+0x43c>)
 8010444:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801044c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010450:	1049      	asrs	r1, r1, #1
 8010452:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010456:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801045a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801045e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010462:	ee07 1a90 	vmov	s15, r1
 8010466:	ee26 5a24 	vmul.f32	s10, s12, s9
 801046a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801046e:	ee15 7a10 	vmov	r7, s10
 8010472:	401f      	ands	r7, r3
 8010474:	ee06 7a90 	vmov	s13, r7
 8010478:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801047c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010480:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010484:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010488:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80105f0 <__ieee754_powf+0x440>
 801048c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80105f4 <__ieee754_powf+0x444>
 8010490:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010494:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80105f8 <__ieee754_powf+0x448>
 8010498:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801049c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80105cc <__ieee754_powf+0x41c>
 80104a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80104a4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80105fc <__ieee754_powf+0x44c>
 80104a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80104ac:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010600 <__ieee754_powf+0x450>
 80104b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80104b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80104b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80104bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80104c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80104c4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80104c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80104cc:	eef0 5a67 	vmov.f32	s11, s15
 80104d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80104d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80104d8:	ee15 1a90 	vmov	r1, s11
 80104dc:	4019      	ands	r1, r3
 80104de:	ee05 1a90 	vmov	s11, r1
 80104e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80104e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80104ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80104f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80104f6:	eeb0 6a67 	vmov.f32	s12, s15
 80104fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80104fe:	ee16 1a10 	vmov	r1, s12
 8010502:	4019      	ands	r1, r3
 8010504:	ee06 1a10 	vmov	s12, r1
 8010508:	eeb0 7a46 	vmov.f32	s14, s12
 801050c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010510:	493c      	ldr	r1, [pc, #240]	@ (8010604 <__ieee754_powf+0x454>)
 8010512:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801051a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010608 <__ieee754_powf+0x458>
 801051e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801060c <__ieee754_powf+0x45c>
 8010522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010526:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010610 <__ieee754_powf+0x460>
 801052a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801052e:	ed91 7a00 	vldr	s14, [r1]
 8010532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010536:	ee07 2a10 	vmov	s14, r2
 801053a:	eef0 6a67 	vmov.f32	s13, s15
 801053e:	4a35      	ldr	r2, [pc, #212]	@ (8010614 <__ieee754_powf+0x464>)
 8010540:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010544:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010548:	ed92 5a00 	vldr	s10, [r2]
 801054c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010550:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010554:	ee76 6a87 	vadd.f32	s13, s13, s14
 8010558:	ee16 2a90 	vmov	r2, s13
 801055c:	4013      	ands	r3, r2
 801055e:	ee06 3a90 	vmov	s13, r3
 8010562:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010566:	ee37 7a45 	vsub.f32	s14, s14, s10
 801056a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801056e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010572:	e70f      	b.n	8010394 <__ieee754_powf+0x1e4>
 8010574:	2601      	movs	r6, #1
 8010576:	e75d      	b.n	8010434 <__ieee754_powf+0x284>
 8010578:	d152      	bne.n	8010620 <__ieee754_powf+0x470>
 801057a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010618 <__ieee754_powf+0x468>
 801057e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010582:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010586:	eef4 6ac7 	vcmpe.f32	s13, s14
 801058a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058e:	f73f af29 	bgt.w	80103e4 <__ieee754_powf+0x234>
 8010592:	2386      	movs	r3, #134	@ 0x86
 8010594:	e048      	b.n	8010628 <__ieee754_powf+0x478>
 8010596:	4a21      	ldr	r2, [pc, #132]	@ (801061c <__ieee754_powf+0x46c>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d907      	bls.n	80105ac <__ieee754_powf+0x3fc>
 801059c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80105a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a4:	bf4c      	ite	mi
 80105a6:	2001      	movmi	r0, #1
 80105a8:	2000      	movpl	r0, #0
 80105aa:	e6c1      	b.n	8010330 <__ieee754_powf+0x180>
 80105ac:	d138      	bne.n	8010620 <__ieee754_powf+0x470>
 80105ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105b2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	dbea      	blt.n	8010592 <__ieee754_powf+0x3e2>
 80105bc:	e7ee      	b.n	801059c <__ieee754_powf+0x3ec>
 80105be:	bf00      	nop
 80105c0:	00000000 	.word	0x00000000
 80105c4:	3f7ffff3 	.word	0x3f7ffff3
 80105c8:	3f800007 	.word	0x3f800007
 80105cc:	3eaaaaab 	.word	0x3eaaaaab
 80105d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80105d4:	36eca570 	.word	0x36eca570
 80105d8:	3fb8aa00 	.word	0x3fb8aa00
 80105dc:	4b800000 	.word	0x4b800000
 80105e0:	001cc471 	.word	0x001cc471
 80105e4:	005db3d6 	.word	0x005db3d6
 80105e8:	0801117c 	.word	0x0801117c
 80105ec:	fffff000 	.word	0xfffff000
 80105f0:	3e6c3255 	.word	0x3e6c3255
 80105f4:	3e53f142 	.word	0x3e53f142
 80105f8:	3e8ba305 	.word	0x3e8ba305
 80105fc:	3edb6db7 	.word	0x3edb6db7
 8010600:	3f19999a 	.word	0x3f19999a
 8010604:	0801116c 	.word	0x0801116c
 8010608:	3f76384f 	.word	0x3f76384f
 801060c:	3f763800 	.word	0x3f763800
 8010610:	369dc3a0 	.word	0x369dc3a0
 8010614:	08011174 	.word	0x08011174
 8010618:	3338aa3c 	.word	0x3338aa3c
 801061c:	43160000 	.word	0x43160000
 8010620:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010624:	d971      	bls.n	801070a <__ieee754_powf+0x55a>
 8010626:	15db      	asrs	r3, r3, #23
 8010628:	3b7e      	subs	r3, #126	@ 0x7e
 801062a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801062e:	4118      	asrs	r0, r3
 8010630:	4408      	add	r0, r1
 8010632:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010636:	4a3c      	ldr	r2, [pc, #240]	@ (8010728 <__ieee754_powf+0x578>)
 8010638:	3b7f      	subs	r3, #127	@ 0x7f
 801063a:	411a      	asrs	r2, r3
 801063c:	4002      	ands	r2, r0
 801063e:	ee07 2a10 	vmov	s14, r2
 8010642:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010646:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801064a:	f1c3 0317 	rsb	r3, r3, #23
 801064e:	4118      	asrs	r0, r3
 8010650:	2900      	cmp	r1, #0
 8010652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010656:	bfb8      	it	lt
 8010658:	4240      	neglt	r0, r0
 801065a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801065e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801072c <__ieee754_powf+0x57c>
 8010662:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8010730 <__ieee754_powf+0x580>
 8010666:	ee17 3a10 	vmov	r3, s14
 801066a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801066e:	f023 030f 	bic.w	r3, r3, #15
 8010672:	ee07 3a10 	vmov	s14, r3
 8010676:	ee77 7a67 	vsub.f32	s15, s14, s15
 801067a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801067e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010682:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8010734 <__ieee754_powf+0x584>
 8010686:	ee67 7a27 	vmul.f32	s15, s14, s15
 801068a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801068e:	eef0 6a67 	vmov.f32	s13, s15
 8010692:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010696:	eef0 5a66 	vmov.f32	s11, s13
 801069a:	eee7 5a46 	vfms.f32	s11, s14, s12
 801069e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80106a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80106a6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8010738 <__ieee754_powf+0x588>
 80106aa:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801073c <__ieee754_powf+0x58c>
 80106ae:	eea7 6a25 	vfma.f32	s12, s14, s11
 80106b2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8010740 <__ieee754_powf+0x590>
 80106b6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80106ba:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010744 <__ieee754_powf+0x594>
 80106be:	eea5 6a87 	vfma.f32	s12, s11, s14
 80106c2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8010748 <__ieee754_powf+0x598>
 80106c6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80106ca:	eeb0 6a66 	vmov.f32	s12, s13
 80106ce:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80106d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80106d6:	ee66 5a86 	vmul.f32	s11, s13, s12
 80106da:	ee36 6a47 	vsub.f32	s12, s12, s14
 80106de:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80106e2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80106e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106f2:	ee10 3a10 	vmov	r3, s0
 80106f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80106fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80106fe:	da06      	bge.n	801070e <__ieee754_powf+0x55e>
 8010700:	f000 f82e 	bl	8010760 <scalbnf>
 8010704:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010708:	e56a      	b.n	80101e0 <__ieee754_powf+0x30>
 801070a:	2000      	movs	r0, #0
 801070c:	e7a5      	b.n	801065a <__ieee754_powf+0x4aa>
 801070e:	ee00 3a10 	vmov	s0, r3
 8010712:	e7f7      	b.n	8010704 <__ieee754_powf+0x554>
 8010714:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010718:	e562      	b.n	80101e0 <__ieee754_powf+0x30>
 801071a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801074c <__ieee754_powf+0x59c>
 801071e:	e55f      	b.n	80101e0 <__ieee754_powf+0x30>
 8010720:	eeb0 0a48 	vmov.f32	s0, s16
 8010724:	e55c      	b.n	80101e0 <__ieee754_powf+0x30>
 8010726:	bf00      	nop
 8010728:	ff800000 	.word	0xff800000
 801072c:	3f317218 	.word	0x3f317218
 8010730:	3f317200 	.word	0x3f317200
 8010734:	35bfbe8c 	.word	0x35bfbe8c
 8010738:	b5ddea0e 	.word	0xb5ddea0e
 801073c:	3331bb4c 	.word	0x3331bb4c
 8010740:	388ab355 	.word	0x388ab355
 8010744:	bb360b61 	.word	0xbb360b61
 8010748:	3e2aaaab 	.word	0x3e2aaaab
 801074c:	00000000 	.word	0x00000000

08010750 <fabsf>:
 8010750:	ee10 3a10 	vmov	r3, s0
 8010754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010758:	ee00 3a10 	vmov	s0, r3
 801075c:	4770      	bx	lr
	...

08010760 <scalbnf>:
 8010760:	ee10 3a10 	vmov	r3, s0
 8010764:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010768:	d02b      	beq.n	80107c2 <scalbnf+0x62>
 801076a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801076e:	d302      	bcc.n	8010776 <scalbnf+0x16>
 8010770:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010774:	4770      	bx	lr
 8010776:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801077a:	d123      	bne.n	80107c4 <scalbnf+0x64>
 801077c:	4b24      	ldr	r3, [pc, #144]	@ (8010810 <scalbnf+0xb0>)
 801077e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010814 <scalbnf+0xb4>
 8010782:	4298      	cmp	r0, r3
 8010784:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010788:	db17      	blt.n	80107ba <scalbnf+0x5a>
 801078a:	ee10 3a10 	vmov	r3, s0
 801078e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010792:	3a19      	subs	r2, #25
 8010794:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010798:	4288      	cmp	r0, r1
 801079a:	dd15      	ble.n	80107c8 <scalbnf+0x68>
 801079c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010818 <scalbnf+0xb8>
 80107a0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801081c <scalbnf+0xbc>
 80107a4:	ee10 3a10 	vmov	r3, s0
 80107a8:	eeb0 7a67 	vmov.f32	s14, s15
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bfb8      	it	lt
 80107b0:	eef0 7a66 	vmovlt.f32	s15, s13
 80107b4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80107b8:	4770      	bx	lr
 80107ba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010820 <scalbnf+0xc0>
 80107be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80107c2:	4770      	bx	lr
 80107c4:	0dd2      	lsrs	r2, r2, #23
 80107c6:	e7e5      	b.n	8010794 <scalbnf+0x34>
 80107c8:	4410      	add	r0, r2
 80107ca:	28fe      	cmp	r0, #254	@ 0xfe
 80107cc:	dce6      	bgt.n	801079c <scalbnf+0x3c>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	dd06      	ble.n	80107e0 <scalbnf+0x80>
 80107d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80107d6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80107da:	ee00 3a10 	vmov	s0, r3
 80107de:	4770      	bx	lr
 80107e0:	f110 0f16 	cmn.w	r0, #22
 80107e4:	da09      	bge.n	80107fa <scalbnf+0x9a>
 80107e6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010820 <scalbnf+0xc0>
 80107ea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010824 <scalbnf+0xc4>
 80107ee:	ee10 3a10 	vmov	r3, s0
 80107f2:	eeb0 7a67 	vmov.f32	s14, s15
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	e7d9      	b.n	80107ae <scalbnf+0x4e>
 80107fa:	3019      	adds	r0, #25
 80107fc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010800:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010804:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010828 <scalbnf+0xc8>
 8010808:	ee07 3a90 	vmov	s15, r3
 801080c:	e7d7      	b.n	80107be <scalbnf+0x5e>
 801080e:	bf00      	nop
 8010810:	ffff3cb0 	.word	0xffff3cb0
 8010814:	4c000000 	.word	0x4c000000
 8010818:	7149f2ca 	.word	0x7149f2ca
 801081c:	f149f2ca 	.word	0xf149f2ca
 8010820:	0da24260 	.word	0x0da24260
 8010824:	8da24260 	.word	0x8da24260
 8010828:	33000000 	.word	0x33000000

0801082c <with_errnof>:
 801082c:	b510      	push	{r4, lr}
 801082e:	ed2d 8b02 	vpush	{d8}
 8010832:	eeb0 8a40 	vmov.f32	s16, s0
 8010836:	4604      	mov	r4, r0
 8010838:	f7ff fb7e 	bl	800ff38 <__errno>
 801083c:	eeb0 0a48 	vmov.f32	s0, s16
 8010840:	ecbd 8b02 	vpop	{d8}
 8010844:	6004      	str	r4, [r0, #0]
 8010846:	bd10      	pop	{r4, pc}

08010848 <xflowf>:
 8010848:	b130      	cbz	r0, 8010858 <xflowf+0x10>
 801084a:	eef1 7a40 	vneg.f32	s15, s0
 801084e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010852:	2022      	movs	r0, #34	@ 0x22
 8010854:	f7ff bfea 	b.w	801082c <with_errnof>
 8010858:	eef0 7a40 	vmov.f32	s15, s0
 801085c:	e7f7      	b.n	801084e <xflowf+0x6>
	...

08010860 <__math_uflowf>:
 8010860:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010868 <__math_uflowf+0x8>
 8010864:	f7ff bff0 	b.w	8010848 <xflowf>
 8010868:	10000000 	.word	0x10000000

0801086c <__math_oflowf>:
 801086c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010874 <__math_oflowf+0x8>
 8010870:	f7ff bfea 	b.w	8010848 <xflowf>
 8010874:	70000000 	.word	0x70000000

08010878 <__ieee754_sqrtf>:
 8010878:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801087c:	4770      	bx	lr
	...

08010880 <_init>:
 8010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010882:	bf00      	nop
 8010884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010886:	bc08      	pop	{r3}
 8010888:	469e      	mov	lr, r3
 801088a:	4770      	bx	lr

0801088c <_fini>:
 801088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088e:	bf00      	nop
 8010890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010892:	bc08      	pop	{r3}
 8010894:	469e      	mov	lr, r3
 8010896:	4770      	bx	lr
