
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d30c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800d4e4  0800d4e4  0000e4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d574  0800d574  0000f184  2**0
                  CONTENTS
  4 .ARM          00000008  0800d574  0800d574  0000e574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d57c  0800d57c  0000f184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d57c  0800d57c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d580  0800d580  0000e580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800d584  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  20000184  0800d708  0000f184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e74  0800d708  0000fe74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a19  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d6  00000000  00000000  00030bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001309  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e80  00000000  00000000  00038cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f3a  00000000  00000000  0005cb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca372  00000000  00000000  00081a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bde5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  0014be28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001522d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d4cc 	.word	0x0800d4cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800d4cc 	.word	0x0800d4cc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_DMA_Init+0x50>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <MX_DMA_Init+0x50>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_DMA_Init+0x50>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_DMA_Init+0x50>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <MX_DMA_Init+0x50>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_DMA_Init+0x50>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f001 fed5 	bl	80022f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f001 feec 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	@ 0x30
 8000560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b71      	ldr	r3, [pc, #452]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	4a70      	ldr	r2, [pc, #448]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057e:	4b6e      	ldr	r3, [pc, #440]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058a:	4b6b      	ldr	r3, [pc, #428]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4a6a      	ldr	r2, [pc, #424]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 8000590:	f043 0320 	orr.w	r3, r3, #32
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000596:	4b68      	ldr	r3, [pc, #416]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005a2:	4b65      	ldr	r3, [pc, #404]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a64      	ldr	r2, [pc, #400]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b62      	ldr	r3, [pc, #392]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a5e      	ldr	r2, [pc, #376]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b59      	ldr	r3, [pc, #356]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	4a58      	ldr	r2, [pc, #352]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005de:	4b56      	ldr	r3, [pc, #344]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a52      	ldr	r2, [pc, #328]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <MX_GPIO_Init+0x1dc>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000608:	484c      	ldr	r0, [pc, #304]	@ (800073c <MX_GPIO_Init+0x1e0>)
 800060a:	f002 faa3 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f002 fa9c 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 800061c:	2200      	movs	r2, #0
 800061e:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000622:	4847      	ldr	r0, [pc, #284]	@ (8000740 <MX_GPIO_Init+0x1e4>)
 8000624:	f002 fa96 	bl	8002b54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	4845      	ldr	r0, [pc, #276]	@ (8000744 <MX_GPIO_Init+0x1e8>)
 800062e:	f002 fa91 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000632:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	483c      	ldr	r0, [pc, #240]	@ (800073c <MX_GPIO_Init+0x1e0>)
 800064c:	f002 f900 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000650:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000654:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4835      	ldr	r0, [pc, #212]	@ (800073c <MX_GPIO_Init+0x1e0>)
 8000666:	f002 f8f3 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800066a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4832      	ldr	r0, [pc, #200]	@ (8000748 <MX_GPIO_Init+0x1ec>)
 8000680:	f002 f8e6 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000684:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000688:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f002 f8d8 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80006a0:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006bc:	f002 f8c8 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 80006c0:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 80006c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4819      	ldr	r0, [pc, #100]	@ (8000740 <MX_GPIO_Init+0x1e4>)
 80006da:	f002 f8b9 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 80006de:	f640 5304 	movw	r3, #3332	@ 0xd04
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	2303      	movs	r3, #3
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4813      	ldr	r0, [pc, #76]	@ (8000740 <MX_GPIO_Init+0x1e4>)
 80006f4:	f002 f8ac 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006f8:	2304      	movs	r3, #4
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	480d      	ldr	r0, [pc, #52]	@ (8000744 <MX_GPIO_Init+0x1e8>)
 8000710:	f002 f89e 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000714:	2320      	movs	r3, #32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800071c:	2302      	movs	r3, #2
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_GPIO_Init+0x1e4>)
 800072c:	f002 f890 	bl	8002850 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3730      	adds	r7, #48	@ 0x30
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800
 8000740:	48000400 	.word	0x48000400
 8000744:	48000c00 	.word	0x48000c00
 8000748:	48001800 	.word	0x48001800

0800074c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_I2C3_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <MX_I2C3_Init+0x7c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_I2C3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000764:	2201      	movs	r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_I2C3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	@ (80007c0 <MX_I2C3_Init+0x74>)
 8000788:	f002 fa16 	bl	8002bb8 <HAL_I2C_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000792:	f000 fa06 	bl	8000ba2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <MX_I2C3_Init+0x74>)
 800079a:	f002 fe2b 	bl	80033f4 <HAL_I2CEx_ConfigAnalogFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f9fd 	bl	8000ba2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_I2C3_Init+0x74>)
 80007ac:	f002 fe6d 	bl	800348a <HAL_I2CEx_ConfigDigitalFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 f9f4 	bl	8000ba2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001a0 	.word	0x200001a0
 80007c4:	40007800 	.word	0x40007800
 80007c8:	20b21e5a 	.word	0x20b21e5a

080007cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09e      	sub	sp, #120	@ 0x78
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2250      	movs	r2, #80	@ 0x50
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00c fe33 	bl	800d458 <memset>
  if(i2cHandle->Instance==I2C3)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000874 <HAL_I2C_MspInit+0xa8>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d137      	bne.n	800086c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4618      	mov	r0, r3
 800080c:	f005 fa4e 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000816:	f000 f9c4 	bl	8000ba2 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000836:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000844:	2308      	movs	r3, #8
 8000846:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	@ (800087c <HAL_I2C_MspInit+0xb0>)
 8000850:	f001 fffe 	bl	8002850 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 800085a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800085e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <HAL_I2C_MspInit+0xac>)
 8000862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000864:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3778      	adds	r7, #120	@ 0x78
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40007800 	.word	0x40007800
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800

08000880 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000884:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_I2S2_Init+0x48>)
 8000886:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <MX_I2S2_Init+0x4c>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2S2_Init+0x48>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_I2S2_Init+0x48>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_I2S2_Init+0x48>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_I2S2_Init+0x48>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_I2S2_Init+0x48>)
 80008a8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80008ac:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_I2S2_Init+0x48>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_I2S2_Init+0x48>)
 80008b6:	f002 fe35 	bl	8003524 <HAL_I2S_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 80008c0:	f000 f96f 	bl	8000ba2 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001f4 	.word	0x200001f4
 80008cc:	40003800 	.word	0x40003800

080008d0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09e      	sub	sp, #120	@ 0x78
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2250      	movs	r2, #80	@ 0x50
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00c fdb1 	bl	800d458 <memset>
  if(i2sHandle->Instance==SPI2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a43      	ldr	r2, [pc, #268]	@ (8000a08 <HAL_I2S_MspInit+0x138>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d17f      	bne.n	8000a00 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000904:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4618      	mov	r0, r3
 8000910:	f005 f9cc 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 800091a:	f000 f942 	bl	8000ba2 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a3a      	ldr	r2, [pc, #232]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a34      	ldr	r2, [pc, #208]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a2e      	ldr	r2, [pc, #184]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <HAL_I2S_MspInit+0x13c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000966:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000978:	2305      	movs	r3, #5
 800097a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000980:	4619      	mov	r1, r3
 8000982:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <HAL_I2S_MspInit+0x140>)
 8000984:	f001 ff64 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000988:	2340      	movs	r3, #64	@ 0x40
 800098a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000998:	2306      	movs	r3, #6
 800099a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a0:	4619      	mov	r1, r3
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <HAL_I2S_MspInit+0x144>)
 80009a4:	f001 ff54 	bl	8002850 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <HAL_I2S_MspInit+0x14c>)
 80009ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009b0:	220d      	movs	r2, #13
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009b6:	2210      	movs	r2, #16
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009d8:	2220      	movs	r2, #32
 80009da:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009de:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80009e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009e6:	f001 fcb9 	bl	800235c <HAL_DMA_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 80009f0:	f000 f8d7 	bl	8000ba2 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009fa:	4a07      	ldr	r2, [pc, #28]	@ (8000a18 <HAL_I2S_MspInit+0x148>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	3778      	adds	r7, #120	@ 0x78
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40003800 	.word	0x40003800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400
 8000a14:	48000800 	.word	0x48000800
 8000a18:	20000230 	.word	0x20000230
 8000a1c:	40020008 	.word	0x40020008

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f001 faf7 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f86f 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f7ff fd95 	bl	800055c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a32:	f7ff fd69 	bl	8000508 <MX_DMA_Init>
  MX_I2S2_Init();
 8000a36:	f7ff ff23 	bl	8000880 <MX_I2S2_Init>
  MX_I2C3_Init();
 8000a3a:	f7ff fe87 	bl	800074c <MX_I2C3_Init>
  MX_SPI3_Init();
 8000a3e:	f000 fd0b 	bl	8001458 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000a42:	f00b fffb 	bl	800ca3c <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 8000a46:	f001 f91f 	bl	8001c88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a50:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <main+0xd0>)
 8000a52:	f002 f87f 	bl	8002b54 <HAL_GPIO_WritePin>

  DAC_Register_Init();
 8000a56:	f001 fa0f 	bl	8001e78 <DAC_Register_Init>

  DAC_Register_Write(0x40, 0x3F);
 8000a5a:	213f      	movs	r1, #63	@ 0x3f
 8000a5c:	2040      	movs	r0, #64	@ 0x40
 8000a5e:	f001 f9ed 	bl	8001e3c <DAC_Register_Write>
  DAC_Register_Write(0x44, 0x3F);
 8000a62:	213f      	movs	r1, #63	@ 0x3f
 8000a64:	2044      	movs	r0, #68	@ 0x44
 8000a66:	f001 f9e9 	bl	8001e3c <DAC_Register_Write>

  DAC_Register_Write(0x41, 0x3F);
 8000a6a:	213f      	movs	r1, #63	@ 0x3f
 8000a6c:	2041      	movs	r0, #65	@ 0x41
 8000a6e:	f001 f9e5 	bl	8001e3c <DAC_Register_Write>
  DAC_Register_Write(0x45, 0x3F);
 8000a72:	213f      	movs	r1, #63	@ 0x3f
 8000a74:	2045      	movs	r0, #69	@ 0x45
 8000a76:	f001 f9e1 	bl	8001e3c <DAC_Register_Write>

  GPIO_Register_Init();
 8000a7a:	f001 fa53 	bl	8001f24 <GPIO_Register_Init>

  Synth_Reset_Initalize();
 8000a7e:	f000 fe69 	bl	8001754 <Synth_Reset_Initalize>

  //Synth_Initialize_Preset();

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET); // trigger gate
  //HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); // set gate low
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8c:	f002 f862 	bl	8002b54 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point

  HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f002 f85b 	bl	8002b54 <HAL_GPIO_WritePin>

  //CDC_Transmit_FS((uint8_t *) data, strlen (data));

  //HAL_UART_Receive(&huart2, temp_buf, 5);

  HAL_UART_Receive_IT(&huart2, temp_buf , 1); // set up interrupt for MIDI/serial input
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4914      	ldr	r1, [pc, #80]	@ (8000af4 <main+0xd4>)
 8000aa2:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <main+0xd8>)
 8000aa4:	f006 fcb4 	bl	8007410 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, midi_buf, 3);

  uint8_t data[] = "INIT-READY\n";
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <main+0xdc>)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 8000ab2:	1d39      	adds	r1, r7, #4
 8000ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab8:	220a      	movs	r2, #10
 8000aba:	480f      	ldr	r0, [pc, #60]	@ (8000af8 <main+0xd8>)
 8000abc:	f006 fc1a 	bl	80072f4 <HAL_UART_Transmit>
//		  memcpy (cmd_buf, midi_buf, indx);
//		  indx = 0;
//	  }


	  if((midi_data_present == 1)){
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <main+0xe0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <main+0xac>
		  MIDI_Decode_Handler();
 8000ac8:	f000 f872 	bl	8000bb0 <MIDI_Decode_Handler>
	  }

	  if((usb_data_present == 1)){
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <main+0xe4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d101      	bne.n	8000ad8 <main+0xb8>
		  Serial_Command_Handler();
 8000ad4:	f000 f908 	bl	8000ce8 <Serial_Command_Handler>
	  }

	  Gate_Control(note_status_bit == 1 ? 1 : 0);
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <main+0xe8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 ff36 	bl	8001958 <Gate_Control>
	  if((midi_data_present == 1)){
 8000aec:	e7e8      	b.n	8000ac0 <main+0xa0>
 8000aee:	bf00      	nop
 8000af0:	48000400 	.word	0x48000400
 8000af4:	200002d4 	.word	0x200002d4
 8000af8:	2000040c 	.word	0x2000040c
 8000afc:	0800d4e4 	.word	0x0800d4e4
 8000b00:	200002e0 	.word	0x200002e0
 8000b04:	200002dc 	.word	0x200002dc
 8000b08:	200002e4 	.word	0x200002e4

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	@ 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2238      	movs	r2, #56	@ 0x38
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00c fc9c 	bl	800d458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f004 fada 	bl	80050e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b34:	2321      	movs	r3, #33	@ 0x21
 8000b36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	2303      	movs	r3, #3
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000b4e:	231c      	movs	r3, #28
 8000b50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 fb74 	bl	8005250 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b6e:	f000 f818 	bl	8000ba2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fe72 	bl	8005874 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b96:	f000 f804 	bl	8000ba2 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3750      	adds	r7, #80	@ 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba6:	b672      	cpsid	i
}
 8000ba8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000baa:	bf00      	nop
 8000bac:	e7fd      	b.n	8000baa <Error_Handler+0x8>
	...

08000bb0 <MIDI_Decode_Handler>:
#include "string.h"

#include "midi.h"
#include "serial.h"

void MIDI_Decode_Handler(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

	//memcpy (midi_buf, rx_buf, temp_buf_index);

	int status_byte = midi_buf[0];
 8000bb6:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <MIDI_Decode_Handler+0x9c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]
	int data_byte1  = midi_buf[1];
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <MIDI_Decode_Handler+0x9c>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	60bb      	str	r3, [r7, #8]
	int data_byte2  = midi_buf[2];
 8000bc2:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <MIDI_Decode_Handler+0x9c>)
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bcc:	dc0a      	bgt.n	8000be4 <MIDI_Decode_Handler+0x34>

		Serial_Command_Handler();
 8000bce:	f000 f88b 	bl	8000ce8 <Serial_Command_Handler>

		temp_buf_index = 0;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MIDI_Decode_Handler+0xa0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	    memset (midi_buf, '\0', 3); // clear buffer of old data
 8000bd8:	2203      	movs	r2, #3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	481b      	ldr	r0, [pc, #108]	@ (8000c4c <MIDI_Decode_Handler+0x9c>)
 8000bde:	f00c fc3b 	bl	800d458 <memset>

	    return;
 8000be2:	e02f      	b.n	8000c44 <MIDI_Decode_Handler+0x94>
	}

	midi_data_present = 0; // reset interrupt flag
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MIDI_Decode_Handler+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bf0:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2b80      	cmp	r3, #128	@ 0x80
 8000bf6:	d109      	bne.n	8000c0c <MIDI_Decode_Handler+0x5c>
    	note_status_bit    =  0; // note off
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <MIDI_Decode_Handler+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
    	midi_note_input    = data_byte1;
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <MIDI_Decode_Handler+0xac>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	6013      	str	r3, [r2, #0]
    	midi_note_velocity = data_byte2;
 8000c04:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <MIDI_Decode_Handler+0xb0>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e012      	b.n	8000c32 <MIDI_Decode_Handler+0x82>
    }
    else if(status_byte == 0x90){
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b90      	cmp	r3, #144	@ 0x90
 8000c10:	d109      	bne.n	8000c26 <MIDI_Decode_Handler+0x76>
    	note_status_bit    =  1; // note on
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MIDI_Decode_Handler+0xa8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
    	midi_note_input    = data_byte1;
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <MIDI_Decode_Handler+0xac>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	6013      	str	r3, [r2, #0]
    	midi_note_velocity = data_byte2;
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <MIDI_Decode_Handler+0xb0>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e005      	b.n	8000c32 <MIDI_Decode_Handler+0x82>
    }
    else{
    	note_status_bit = -1; // invalid status command
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MIDI_Decode_Handler+0xa8>)
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	601a      	str	r2, [r3, #0]
    	Command_Error();
 8000c2e:	f000 fbba 	bl	80013a6 <Command_Error>
    }

	temp_buf_index = 0;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <MIDI_Decode_Handler+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
    memset (midi_buf, '\0', 3); // clear buffer of old data
 8000c38:	2203      	movs	r2, #3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <MIDI_Decode_Handler+0x9c>)
 8000c3e:	f00c fc0b 	bl	800d458 <memset>

    return;
 8000c42:	bf00      	nop
}
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200002d0 	.word	0x200002d0
 8000c50:	200002d8 	.word	0x200002d8
 8000c54:	200002e0 	.word	0x200002e0
 8000c58:	200002e4 	.word	0x200002e4
 8000c5c:	200002e8 	.word	0x200002e8
 8000c60:	200002ec 	.word	0x200002ec

08000c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

        midi_buf[temp_buf_index] = temp_buf[0]; // store the received byte into midi_buf
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x44>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <HAL_UART_RxCpltCallback+0x48>)
 8000c72:	7811      	ldrb	r1, [r2, #0]
 8000c74:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <HAL_UART_RxCpltCallback+0x4c>)
 8000c76:	54d1      	strb	r1, [r2, r3]

        // increment the buffer index
        if (++temp_buf_index >= 3)
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x44>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x44>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x44>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dd05      	ble.n	8000c96 <HAL_UART_RxCpltCallback+0x32>
        {
            temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <HAL_UART_RxCpltCallback+0x44>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
            midi_data_present = 1; // set flag to indicate a complete command has been entered
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_UART_RxCpltCallback+0x50>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, temp_buf, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4904      	ldr	r1, [pc, #16]	@ (8000cac <HAL_UART_RxCpltCallback+0x48>)
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c9c:	f006 fbb8 	bl	8007410 <HAL_UART_Receive_IT>

}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002d8 	.word	0x200002d8
 8000cac:	200002d4 	.word	0x200002d4
 8000cb0:	200002d0 	.word	0x200002d0
 8000cb4:	200002e0 	.word	0x200002e0
 8000cb8:	2000040c 	.word	0x2000040c

08000cbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
}
 8000cc4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <__NVIC_SystemReset+0x24>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cce:	4904      	ldr	r1, [pc, #16]	@ (8000ce0 <__NVIC_SystemReset+0x24>)
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_SystemReset+0x28>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd6:	f3bf 8f4f 	dsb	sy
}
 8000cda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <__NVIC_SystemReset+0x20>
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	05fa0004 	.word	0x05fa0004

08000ce8 <Serial_Command_Handler>:
#include "gpio.h"

#include "synth.h"
#include "serial.h"

void Serial_Command_Handler(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

    //usb_data_present = 0;
	int error_check = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

	int command_byte;
	int address_byte;
	int data_byte;

    if(usb_data_present == 1){
 8000cf2:	4b56      	ldr	r3, [pc, #344]	@ (8000e4c <Serial_Command_Handler+0x164>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <Serial_Command_Handler+0x2a>
        usb_data_present = 0;
 8000cfa:	4b54      	ldr	r3, [pc, #336]	@ (8000e4c <Serial_Command_Handler+0x164>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

        command_byte = usb_vcp_buffer[0];
 8000d00:	4b53      	ldr	r3, [pc, #332]	@ (8000e50 <Serial_Command_Handler+0x168>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
        address_byte = usb_vcp_buffer[1];
 8000d06:	4b52      	ldr	r3, [pc, #328]	@ (8000e50 <Serial_Command_Handler+0x168>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	60fb      	str	r3, [r7, #12]
        data_byte    = usb_vcp_buffer[2];
 8000d0c:	4b50      	ldr	r3, [pc, #320]	@ (8000e50 <Serial_Command_Handler+0x168>)
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	60bb      	str	r3, [r7, #8]

    }

    if(midi_data_present == 1){
 8000d12:	4b50      	ldr	r3, [pc, #320]	@ (8000e54 <Serial_Command_Handler+0x16c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d10b      	bne.n	8000d32 <Serial_Command_Handler+0x4a>
    	midi_data_present = 0;
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e54 <Serial_Command_Handler+0x16c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]

        command_byte = midi_buf[0];
 8000d20:	4b4d      	ldr	r3, [pc, #308]	@ (8000e58 <Serial_Command_Handler+0x170>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	613b      	str	r3, [r7, #16]
        address_byte = midi_buf[1];
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <Serial_Command_Handler+0x170>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	60fb      	str	r3, [r7, #12]
        data_byte    = midi_buf[2];
 8000d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e58 <Serial_Command_Handler+0x170>)
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3b41      	subs	r3, #65	@ 0x41
 8000d36:	2b19      	cmp	r3, #25
 8000d38:	d872      	bhi.n	8000e20 <Serial_Command_Handler+0x138>
 8000d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d40 <Serial_Command_Handler+0x58>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000da9 	.word	0x08000da9
 8000d44:	08000e21 	.word	0x08000e21
 8000d48:	08000e21 	.word	0x08000e21
 8000d4c:	08000e21 	.word	0x08000e21
 8000d50:	08000db5 	.word	0x08000db5
 8000d54:	08000dc1 	.word	0x08000dc1
 8000d58:	08000e21 	.word	0x08000e21
 8000d5c:	08000e21 	.word	0x08000e21
 8000d60:	08000dcd 	.word	0x08000dcd
 8000d64:	08000e21 	.word	0x08000e21
 8000d68:	08000e21 	.word	0x08000e21
 8000d6c:	08000e21 	.word	0x08000e21
 8000d70:	08000dd5 	.word	0x08000dd5
 8000d74:	08000e21 	.word	0x08000e21
 8000d78:	08000de1 	.word	0x08000de1
 8000d7c:	08000ded 	.word	0x08000ded
 8000d80:	08000e21 	.word	0x08000e21
 8000d84:	08000df9 	.word	0x08000df9
 8000d88:	08000e21 	.word	0x08000e21
 8000d8c:	08000e21 	.word	0x08000e21
 8000d90:	08000e21 	.word	0x08000e21
 8000d94:	08000e21 	.word	0x08000e21
 8000d98:	08000e21 	.word	0x08000e21
 8000d9c:	08000e27 	.word	0x08000e27
 8000da0:	08000e27 	.word	0x08000e27
 8000da4:	08000e27 	.word	0x08000e27
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f856 	bl	8000e5c <VCA_Command_Handler>
 8000db0:	6178      	str	r0, [r7, #20]

            break;
 8000db2:	e039      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f8e8 	bl	8000f8c <Envelope_Command_Handler>
 8000dbc:	6178      	str	r0, [r7, #20]

            break;
 8000dbe:	e033      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 f9a2 	bl	800110c <Filter_Command_Handler>
 8000dc8:	6178      	str	r0, [r7, #20]

            break;
 8000dca:	e02d      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8000dcc:	f000 fd12 	bl	80017f4 <Synth_Initialize_Preset>
 8000dd0:	6178      	str	r0, [r7, #20]

            break;
 8000dd2:	e029      	b.n	8000e28 <Serial_Command_Handler+0x140>
//        case 'L': // load preset command
//
//            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f000 fa22 	bl	8001220 <Mixer_Command_Handler>
 8000ddc:	6178      	str	r0, [r7, #20]

            break;
 8000dde:	e023      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f000 fa64 	bl	80012b0 <LFO_Command_Handler>
 8000de8:	6178      	str	r0, [r7, #20]

            break;
 8000dea:	e01d      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f000 fac2 	bl	8001378 <Preset_Command_Handler>
 8000df4:	6178      	str	r0, [r7, #20]

            break;
 8000df6:	e017      	b.n	8000e28 <Serial_Command_Handler+0x140>
        case 'R': // reset command

        	for(int i=0; i <4 ; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e00b      	b.n	8000e16 <Serial_Command_Handler+0x12e>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8000dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f001 febd 	bl	8002b84 <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8000e0a:	207d      	movs	r0, #125	@ 0x7d
 8000e0c:	f001 f974 	bl	80020f8 <HAL_Delay>
        	for(int i=0; i <4 ; i++){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3301      	adds	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	ddf0      	ble.n	8000dfe <Serial_Command_Handler+0x116>
        	}

			NVIC_SystemReset();
 8000e1c:	f7ff ff4e 	bl	8000cbc <__NVIC_SystemReset>
            break;
        default:
            // do nothing on invalid command

        	//Command_Error();
        	error_check = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]

            break;
 8000e24:	e000      	b.n	8000e28 <Serial_Command_Handler+0x140>
            break;
 8000e26:	bf00      	nop
    }

    error_check ? Command_Error() : Command_Success();
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <Serial_Command_Handler+0x14c>
 8000e2e:	f000 faba 	bl	80013a6 <Command_Error>
 8000e32:	e001      	b.n	8000e38 <Serial_Command_Handler+0x150>
 8000e34:	f000 fad0 	bl	80013d8 <Command_Success>

    memset (usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8000e38:	2240      	movs	r2, #64	@ 0x40
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <Serial_Command_Handler+0x168>)
 8000e3e:	f00c fb0b 	bl	800d458 <memset>

}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002dc 	.word	0x200002dc
 8000e50:	20000290 	.word	0x20000290
 8000e54:	200002e0 	.word	0x200002e0
 8000e58:	200002d0 	.word	0x200002d0

08000e5c <VCA_Command_Handler>:
//HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);

// ===========================================================================================================
// VCA functions

int VCA_Command_Handler(int address, int data){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3b31      	subs	r3, #49	@ 0x31
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d852      	bhi.n	8000f18 <VCA_Command_Handler+0xbc>
 8000e72:	a201      	add	r2, pc, #4	@ (adr r2, 8000e78 <VCA_Command_Handler+0x1c>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000e89 	.word	0x08000e89
 8000e7c:	08000ea9 	.word	0x08000ea9
 8000e80:	08000ec9 	.word	0x08000ec9
 8000e84:	08000ef1 	.word	0x08000ef1
        case '1': // VCA modulation offset

        	error_check = Command_Range_Check_Error(data, 255);
 8000e88:	21ff      	movs	r1, #255	@ 0xff
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f000 fabd 	bl	800140a <Command_Range_Check_Error>
 8000e90:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <VCA_Command_Handler+0x48>
                SynthParameters.vca_offset = data;
 8000e98:	4a22      	ldr	r2, [pc, #136]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                VCA_Digital_Pot_Control();
 8000ea0:	f000 fde0 	bl	8001a64 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	e038      	b.n	8000f1a <VCA_Command_Handler+0xbe>
        case '2': // VCA modulation intensity

        	error_check = Command_Range_Check_Error(data, 255);
 8000ea8:	21ff      	movs	r1, #255	@ 0xff
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f000 faad 	bl	800140a <Command_Range_Check_Error>
 8000eb0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <VCA_Command_Handler+0x68>
                SynthParameters.vca_cv_intensity = data;
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                VCA_Digital_Pot_Control();
 8000ec0:	f000 fdd0 	bl	8001a64 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	e028      	b.n	8000f1a <VCA_Command_Handler+0xbe>
        case '3': // VCA modulation control

        	error_check = Command_Option_Check_Error(data, 3);
 8000ec8:	2103      	movs	r1, #3
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	f000 faaf 	bl	800142e <Command_Option_Check_Error>
 8000ed0:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <VCA_Command_Handler+0x90>
                SynthParameters.vca_mod_source = data;
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	6013      	str	r3, [r2, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f820 	bl	8000f28 <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8000ee8:	f000 fd60 	bl	80019ac <VCA_Mod_Source_Control>
            }

        	return error_check;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	e014      	b.n	8000f1a <VCA_Command_Handler+0xbe>
        case '4': // VCA signal bypass control

        	error_check = Command_Range_Check_Error(data, 1);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f000 fa89 	bl	800140a <Command_Range_Check_Error>
 8000ef8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d109      	bne.n	8000f14 <VCA_Command_Handler+0xb8>
                SynthParameters.vca_bypass = data;
 8000f00:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	6053      	str	r3, [r2, #4]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <VCA_Command_Handler+0xc8>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f80c 	bl	8000f28 <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8000f10:	f000 fd7a 	bl	8001a08 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	e000      	b.n	8000f1a <VCA_Command_Handler+0xbe>
        default:
            // do nothing on invalid command

        	return 1;
 8000f18:	2301      	movs	r3, #1
    }

    return 1;
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000358 	.word	0x20000358

08000f28 <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

    switch(data) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d017      	beq.n	8000f66 <VCA_Mod_Source_Decode+0x3e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	dc1d      	bgt.n	8000f78 <VCA_Mod_Source_Decode+0x50>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d003      	beq.n	8000f4a <VCA_Mod_Source_Decode+0x22>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d005      	beq.n	8000f54 <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8000f48:	e016      	b.n	8000f78 <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <VCA_Mod_Source_Decode+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            break;
 8000f52:	e012      	b.n	8000f7a <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <VCA_Mod_Source_Decode+0x60>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 1;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <VCA_Mod_Source_Decode+0x60>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8000f64:	e009      	b.n	8000f7a <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <VCA_Mod_Source_Decode+0x60>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 0;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <VCA_Mod_Source_Decode+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8000f76:	e000      	b.n	8000f7a <VCA_Mod_Source_Decode+0x52>
            break;
 8000f78:	bf00      	nop
    }

	return;
 8000f7a:	bf00      	nop
}
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000358 	.word	0x20000358

08000f8c <Envelope_Command_Handler>:
}

// ===========================================================================================================
// envelope functions

int Envelope_Command_Handler(int address, int data){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3b31      	subs	r3, #49	@ 0x31
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d864      	bhi.n	800106c <Envelope_Command_Handler+0xe0>
 8000fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <Envelope_Command_Handler+0x1c>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08000fbd 	.word	0x08000fbd
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000ffd 	.word	0x08000ffd
 8000fb4:	0800101d 	.word	0x0800101d
 8000fb8:	08001045 	.word	0x08001045
        case '1': // envelope attack rate

        	error_check = Command_Range_Check_Error(data, 255);
 8000fbc:	21ff      	movs	r1, #255	@ 0xff
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f000 fa23 	bl	800140a <Command_Range_Check_Error>
 8000fc4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d105      	bne.n	8000fd8 <Envelope_Command_Handler+0x4c>
                SynthParameters.env_attack_rate = data;
 8000fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001078 <Envelope_Command_Handler+0xec>)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                Filter_Digital_Pot_Control();
 8000fd4:	f000 fd88 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	e048      	b.n	800106e <Envelope_Command_Handler+0xe2>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Range_Check_Error(data, 255);
 8000fdc:	21ff      	movs	r1, #255	@ 0xff
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f000 fa13 	bl	800140a <Command_Range_Check_Error>
 8000fe4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d105      	bne.n	8000ff8 <Envelope_Command_Handler+0x6c>
                SynthParameters.env_decay_rate = data;
 8000fec:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <Envelope_Command_Handler+0xec>)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
                Filter_Digital_Pot_Control();
 8000ff4:	f000 fd78 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	e038      	b.n	800106e <Envelope_Command_Handler+0xe2>
        case '3': // envelope release rate

        	error_check = Command_Range_Check_Error(data, 255);
 8000ffc:	21ff      	movs	r1, #255	@ 0xff
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f000 fa03 	bl	800140a <Command_Range_Check_Error>
 8001004:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d105      	bne.n	8001018 <Envelope_Command_Handler+0x8c>
                SynthParameters.env_release_rate = data;
 800100c:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <Envelope_Command_Handler+0xec>)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
                Filter_Digital_Pot_Control();
 8001014:	f000 fd68 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	e028      	b.n	800106e <Envelope_Command_Handler+0xe2>
        case '4': // envelope output polarity

        	error_check = Command_Range_Check_Error(data, 1);
 800101c:	2101      	movs	r1, #1
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f000 f9f3 	bl	800140a <Command_Range_Check_Error>
 8001024:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d109      	bne.n	8001040 <Envelope_Command_Handler+0xb4>
                SynthParameters.env_invert_mode = data;
 800102c:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <Envelope_Command_Handler+0xec>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6153      	str	r3, [r2, #20]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <Envelope_Command_Handler+0xec>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f820 	bl	800107c <Envelope_Output_Polarity_Decode>
                ENV_Mode_Control();
 800103c:	f000 fdaa 	bl	8001b94 <ENV_Mode_Control>
            }

        	return error_check;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	e014      	b.n	800106e <Envelope_Command_Handler+0xe2>
        case '5': // envelope loop mode control

        	error_check = Command_Range_Check_Error(data, 1);
 8001044:	2101      	movs	r1, #1
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f000 f9df 	bl	800140a <Command_Range_Check_Error>
 800104c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <Envelope_Command_Handler+0xdc>
                SynthParameters.env_loop_mode = data;
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <Envelope_Command_Handler+0xec>)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6193      	str	r3, [r2, #24]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <Envelope_Command_Handler+0xec>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f830 	bl	80010c4 <Envelope_Loop_Mode_Decode>
                ENV_Mode_Control();
 8001064:	f000 fd96 	bl	8001b94 <ENV_Mode_Control>
            }

        	return error_check;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	e000      	b.n	800106e <Envelope_Command_Handler+0xe2>
        default:
            // do nothing on invalid command

        	return 1;
 800106c:	2301      	movs	r3, #1
    }

    return 1;
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000358 	.word	0x20000358

0800107c <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <Envelope_Output_Polarity_Decode+0x44>)
 800108c:	2201      	movs	r2, #1
 800108e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 1;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <Envelope_Output_Polarity_Decode+0x44>)
 8001094:	2201      	movs	r2, #1
 8001096:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 800109a:	e00b      	b.n	80010b4 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d108      	bne.n	80010b4 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <Envelope_Output_Polarity_Decode+0x44>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 0;
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <Envelope_Output_Polarity_Decode+0x44>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	return;
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
}
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000358 	.word	0x20000358

080010c4 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d108      	bne.n	80010e4 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <Envelope_Loop_Mode_Decode+0x44>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 1;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <Envelope_Loop_Mode_Decode+0x44>)
 80010dc:	2201      	movs	r2, #1
 80010de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 80010e2:	e00b      	b.n	80010fc <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <Envelope_Loop_Mode_Decode+0x44>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 0;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <Envelope_Loop_Mode_Decode+0x44>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	return;
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
}
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20000358 	.word	0x20000358

0800110c <Filter_Command_Handler>:

// ===========================================================================================================
// filter functions

int Filter_Command_Handler(int address, int data){
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3b31      	subs	r3, #49	@ 0x31
 800111e:	2b03      	cmp	r3, #3
 8001120:	d84b      	bhi.n	80011ba <Filter_Command_Handler+0xae>
 8001122:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <Filter_Command_Handler+0x1c>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001139 	.word	0x08001139
 800112c:	08001157 	.word	0x08001157
 8001130:	08001175 	.word	0x08001175
 8001134:	08001193 	.word	0x08001193
        case '1': // filter cutoff

        	error_check = Command_Range_Check_Error(data, 255);
 8001138:	21ff      	movs	r1, #255	@ 0xff
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f000 f965 	bl	800140a <Command_Range_Check_Error>
 8001140:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d104      	bne.n	8001152 <Filter_Command_Handler+0x46>
                SynthParameters.vcf_cutoff = data;
 8001148:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <Filter_Command_Handler+0xb8>)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	66d3      	str	r3, [r2, #108]	@ 0x6c
                Filter_Digital_Pot_Control();
 800114e:	f000 fccb 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	e032      	b.n	80011bc <Filter_Command_Handler+0xb0>
        case '2': // filter resonance intensity

        	error_check = Command_Range_Check_Error(data, 255);
 8001156:	21ff      	movs	r1, #255	@ 0xff
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f000 f956 	bl	800140a <Command_Range_Check_Error>
 800115e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <Filter_Command_Handler+0x64>
                SynthParameters.vcf_resonance = data;
 8001166:	4a17      	ldr	r2, [pc, #92]	@ (80011c4 <Filter_Command_Handler+0xb8>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6713      	str	r3, [r2, #112]	@ 0x70
                Filter_Digital_Pot_Control();
 800116c:	f000 fcbc 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	e023      	b.n	80011bc <Filter_Command_Handler+0xb0>
        case '3': // filter modulation intensity

        	error_check = Command_Range_Check_Error(data, 255);
 8001174:	21ff      	movs	r1, #255	@ 0xff
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f000 f947 	bl	800140a <Command_Range_Check_Error>
 800117c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d104      	bne.n	800118e <Filter_Command_Handler+0x82>
                SynthParameters.vcf_cv_intensity = data;
 8001184:	4a0f      	ldr	r2, [pc, #60]	@ (80011c4 <Filter_Command_Handler+0xb8>)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	6693      	str	r3, [r2, #104]	@ 0x68
                Filter_Digital_Pot_Control();
 800118a:	f000 fcad 	bl	8001ae8 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	e014      	b.n	80011bc <Filter_Command_Handler+0xb0>
        case '4': // filter modulation control

        	error_check = Command_Option_Check_Error(data, 3);
 8001192:	2103      	movs	r1, #3
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f000 f94a 	bl	800142e <Command_Option_Check_Error>
 800119a:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_mod_source = data;
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <Filter_Command_Handler+0xb8>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6093      	str	r3, [r2, #8]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <Filter_Command_Handler+0xb8>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f80b 	bl	80011c8 <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 80011b2:	f000 fc6d 	bl	8001a90 <Filter_Mod_Source_Control>
            }

        	return error_check;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	e000      	b.n	80011bc <Filter_Command_Handler+0xb0>
        default:
            // do nothing on invalid command

        	return 1;
 80011ba:	2301      	movs	r3, #1
    }

    return 1;
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000358 	.word	0x20000358

080011c8 <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

    switch(data) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d014      	beq.n	8001200 <Filter_Mod_Source_Decode+0x38>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	dc18      	bgt.n	800120e <Filter_Mod_Source_Decode+0x46>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d003      	beq.n	80011ea <Filter_Mod_Source_Decode+0x22>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d004      	beq.n	80011f2 <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 80011e8:	e011      	b.n	800120e <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <Filter_Mod_Source_Decode+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	661a      	str	r2, [r3, #96]	@ 0x60
            break;
 80011f0:	e00e      	b.n	8001210 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <Filter_Mod_Source_Decode+0x54>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 1;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <Filter_Mod_Source_Decode+0x54>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 80011fe:	e007      	b.n	8001210 <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <Filter_Mod_Source_Decode+0x54>)
 8001202:	2201      	movs	r2, #1
 8001204:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 0;
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <Filter_Mod_Source_Decode+0x54>)
 8001208:	2200      	movs	r2, #0
 800120a:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 800120c:	e000      	b.n	8001210 <Filter_Mod_Source_Decode+0x48>
            break;
 800120e:	bf00      	nop
    }

	return;
 8001210:	bf00      	nop
}
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000358 	.word	0x20000358

08001220 <Mixer_Command_Handler>:

// ===========================================================================================================
// mixer function

int Mixer_Command_Handler(int address, int data){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b33      	cmp	r3, #51	@ 0x33
 8001232:	d027      	beq.n	8001284 <Mixer_Command_Handler+0x64>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b33      	cmp	r3, #51	@ 0x33
 8001238:	dc31      	bgt.n	800129e <Mixer_Command_Handler+0x7e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b31      	cmp	r3, #49	@ 0x31
 800123e:	d003      	beq.n	8001248 <Mixer_Command_Handler+0x28>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b32      	cmp	r3, #50	@ 0x32
 8001244:	d00f      	beq.n	8001266 <Mixer_Command_Handler+0x46>
 8001246:	e02a      	b.n	800129e <Mixer_Command_Handler+0x7e>
        case '1': // DAC output level

        	error_check = Command_Range_Check_Error(data, 255);
 8001248:	21ff      	movs	r1, #255	@ 0xff
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f000 f8dd 	bl	800140a <Command_Range_Check_Error>
 8001250:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <Mixer_Command_Handler+0x42>
                SynthParameters.dac_mixer_level = data;
 8001258:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <Mixer_Command_Handler+0x88>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
                Mixer_Digital_Pot_Control();
 800125e:	f000 fb91 	bl	8001984 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	e01c      	b.n	80012a0 <Mixer_Command_Handler+0x80>
        case '2': // filter output level

        	error_check = Command_Range_Check_Error(data, 255);
 8001266:	21ff      	movs	r1, #255	@ 0xff
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	f000 f8ce 	bl	800140a <Command_Range_Check_Error>
 800126e:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <Mixer_Command_Handler+0x60>
                SynthParameters.filter_out_level = data;
 8001276:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <Mixer_Command_Handler+0x88>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	65d3      	str	r3, [r2, #92]	@ 0x5c
                Mixer_Digital_Pot_Control();
 800127c:	f000 fb82 	bl	8001984 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	e00d      	b.n	80012a0 <Mixer_Command_Handler+0x80>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Range_Check_Error(data, 1);
 8001284:	2101      	movs	r1, #1
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f000 f8bf 	bl	800140a <Command_Range_Check_Error>
 800128c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <Mixer_Command_Handler+0x7a>
            	velocity_enable = data;
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <Mixer_Command_Handler+0x8c>)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	e000      	b.n	80012a0 <Mixer_Command_Handler+0x80>
        default:
            // do nothing on invalid command

        	return 1;
 800129e:	2301      	movs	r3, #1
    }

    return 1;
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000358 	.word	0x20000358
 80012ac:	200002f0 	.word	0x200002f0

080012b0 <LFO_Command_Handler>:

// ===========================================================================================================
// LFO functions

int LFO_Command_Handler(int address, int data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]

	int error_check = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b31      	cmp	r3, #49	@ 0x31
 80012c2:	d003      	beq.n	80012cc <LFO_Command_Handler+0x1c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b32      	cmp	r3, #50	@ 0x32
 80012c8:	d00f      	beq.n	80012ea <LFO_Command_Handler+0x3a>
 80012ca:	e022      	b.n	8001312 <LFO_Command_Handler+0x62>
        case '1': // LFO frequency/rate

        	error_check = Command_Range_Check_Error(data, 255);
 80012cc:	21ff      	movs	r1, #255	@ 0xff
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f000 f89b 	bl	800140a <Command_Range_Check_Error>
 80012d4:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d104      	bne.n	80012e6 <LFO_Command_Handler+0x36>
                SynthParameters.lfo_frequency = data;
 80012dc:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <LFO_Command_Handler+0x6c>)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	67d3      	str	r3, [r2, #124]	@ 0x7c
                LFO_Digital_Pot_Control();
 80012e2:	f000 fc49 	bl	8001b78 <LFO_Digital_Pot_Control>
            }

        	return error_check;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	e014      	b.n	8001314 <LFO_Command_Handler+0x64>
        case '2': // LFO output waveform

        	error_check = Command_Option_Check_Error(data, 3);
 80012ea:	2103      	movs	r1, #3
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f000 f89e 	bl	800142e <Command_Option_Check_Error>
 80012f2:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <LFO_Command_Handler+0x5e>
                SynthParameters.lfo_waveform = data;
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <LFO_Command_Handler+0x6c>)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	61d3      	str	r3, [r2, #28]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <LFO_Command_Handler+0x6c>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f80b 	bl	8001320 <LFO_Waveform_Decode>
                LFO_Output_Control();
 800130a:	f000 fc09 	bl	8001b20 <LFO_Output_Control>
            }

        	return error_check;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	e000      	b.n	8001314 <LFO_Command_Handler+0x64>
        default:
            // do nothing on invalid command

        	return 1;
 8001312:	2301      	movs	r3, #1
    }

    return 1;
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000358 	.word	0x20000358

08001320 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d014      	beq.n	8001358 <LFO_Waveform_Decode+0x38>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b03      	cmp	r3, #3
 8001332:	dc18      	bgt.n	8001366 <LFO_Waveform_Decode+0x46>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <LFO_Waveform_Decode+0x22>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d004      	beq.n	800134a <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8001340:	e011      	b.n	8001366 <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <LFO_Waveform_Decode+0x54>)
 8001344:	2200      	movs	r2, #0
 8001346:	675a      	str	r2, [r3, #116]	@ 0x74
            break;
 8001348:	e00e      	b.n	8001368 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <LFO_Waveform_Decode+0x54>)
 800134c:	2201      	movs	r2, #1
 800134e:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 1;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <LFO_Waveform_Decode+0x54>)
 8001352:	2201      	movs	r2, #1
 8001354:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 8001356:	e007      	b.n	8001368 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <LFO_Waveform_Decode+0x54>)
 800135a:	2201      	movs	r2, #1
 800135c:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 0;
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <LFO_Waveform_Decode+0x54>)
 8001360:	2200      	movs	r2, #0
 8001362:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 8001364:	e000      	b.n	8001368 <LFO_Waveform_Decode+0x48>
            break;
 8001366:	bf00      	nop
    }

	return;
 8001368:	bf00      	nop
}
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000358 	.word	0x20000358

08001378 <Preset_Command_Handler>:

// ===========================================================================================================
// preset function

int Preset_Command_Handler(int address, int data){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]

    switch(address) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b31      	cmp	r3, #49	@ 0x31
 8001386:	d003      	beq.n	8001390 <Preset_Command_Handler+0x18>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b32      	cmp	r3, #50	@ 0x32
 800138c:	d002      	beq.n	8001394 <Preset_Command_Handler+0x1c>
 800138e:	e003      	b.n	8001398 <Preset_Command_Handler+0x20>
        case '1': // preset save function

        	// preset save function

        	return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e004      	b.n	800139e <Preset_Command_Handler+0x26>
        case '2': // preset load function

        	// preset load function

        	return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e002      	b.n	800139e <Preset_Command_Handler+0x26>
        default:
            // do nothing on invalid command

        	Command_Error();
 8001398:	f000 f805 	bl	80013a6 <Command_Error>

        	return 1;
 800139c:	2301      	movs	r3, #1
    }

    return 1;
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <Command_Error>:
}

// ===========================================================================================================
// system functions

void Command_Error(){
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0

	for(int i=0; i <6 ; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	e00b      	b.n	80013ca <Command_Error+0x24>
		  HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80013b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f001 fbe3 	bl	8002b84 <HAL_GPIO_TogglePin>
		  HAL_Delay(125);
 80013be:	207d      	movs	r0, #125	@ 0x7d
 80013c0:	f000 fe9a 	bl	80020f8 <HAL_Delay>
	for(int i=0; i <6 ; i++){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	ddf0      	ble.n	80013b2 <Command_Error+0xc>
	}

	return;
 80013d0:	bf00      	nop
}
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Command_Success>:

void Command_Success(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

	for(int i=0; i <2 ; i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	e00b      	b.n	80013fc <Command_Success+0x24>
		  HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 80013e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f001 fbca 	bl	8002b84 <HAL_GPIO_TogglePin>
		  HAL_Delay(125);
 80013f0:	207d      	movs	r0, #125	@ 0x7d
 80013f2:	f000 fe81 	bl	80020f8 <HAL_Delay>
	for(int i=0; i <2 ; i++){
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3301      	adds	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	ddf0      	ble.n	80013e4 <Command_Success+0xc>
	}

	return;
 8001402:	bf00      	nop
}
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <Command_Range_Check_Error>:
		return variable;
	}

}

int Command_Range_Check_Error(int data, int max_value){
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range
	if(data <= max_value){
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	dc01      	bgt.n	8001420 <Command_Range_Check_Error+0x16>
		return 0; // value is valid, return success
 800141c:	2300      	movs	r3, #0
 800141e:	e000      	b.n	8001422 <Command_Range_Check_Error+0x18>
	}
	else{
		return 1; // value is invalid, return error
 8001420:	2301      	movs	r3, #1
	}

}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <Command_Option_Check_Error>:

int Command_Option_Check_Error(int data, int max_value) {
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range or is zero
    if (data <= 0 || data > max_value) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dd03      	ble.n	8001446 <Command_Option_Check_Error+0x18>
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	dd01      	ble.n	800144a <Command_Option_Check_Error+0x1c>
        return 1; // value is invalid, return error
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <Command_Option_Check_Error+0x1e>
    }
    return 0; // value is valid
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_SPI3_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <MX_SPI3_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_SPI3_Init+0x74>)
 8001464:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001468:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_SPI3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_SPI3_Init+0x74>)
 8001472:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001476:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_SPI3_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <MX_SPI3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_SPI3_Init+0x74>)
 8001486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_SPI3_Init+0x74>)
 800148e:	2228      	movs	r2, #40	@ 0x28
 8001490:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_SPI3_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_SPI3_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <MX_SPI3_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_SPI3_Init+0x74>)
 80014a6:	2207      	movs	r2, #7
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <MX_SPI3_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_SPI3_Init+0x74>)
 80014b2:	2208      	movs	r2, #8
 80014b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_SPI3_Init+0x74>)
 80014b8:	f005 fb46 	bl	8006b48 <HAL_SPI_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f7ff fb6e 	bl	8000ba2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002f4 	.word	0x200002f4
 80014d0:	40003c00 	.word	0x40003c00

080014d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001500:	6593      	str	r3, [r2, #88]	@ 0x58
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001526:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001538:	2306      	movs	r3, #6
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_SPI_MspInit+0x84>)
 8001544:	f001 f984 	bl	8002850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40003c00 	.word	0x40003c00
 8001554:	40021000 	.word	0x40021000
 8001558:	48000800 	.word	0x48000800

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_MspInit+0x44>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6613      	str	r3, [r2, #96]	@ 0x60
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_MspInit+0x44>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x44>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6593      	str	r3, [r2, #88]	@ 0x58
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x44>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001592:	f003 fe4d 	bl	8005230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 fd5f 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA1_Channel1_IRQHandler+0x10>)
 800160a:	f001 f80f 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000230 	.word	0x20000230

08001618 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <USB_LP_IRQHandler+0x10>)
 800161e:	f002 f951 	bl	80038c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20001978 	.word	0x20001978

0800162c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <USART2_IRQHandler+0x10>)
 8001632:	f005 ff39 	bl	80074a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000040c 	.word	0x2000040c

08001640 <Digital_Pot_Wiper_Set>:
//extern uint16_t gpio_reg;
Synth SynthParameters;// = {10, 3.14};

uint16_t gpio_reg = 0x0000;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
//		 //spi_buf[0] = (~wiper_code)-128;
//	}
//	else spi_buf[0] = wiper_code & 0x7F;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <Digital_Pot_Wiper_Set+0x1c>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e001      	b.n	8001660 <Digital_Pot_Wiper_Set+0x20>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b0a      	cmp	r3, #10
 8001666:	d854      	bhi.n	8001712 <Digital_Pot_Wiper_Set+0xd2>
 8001668:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <Digital_Pot_Wiper_Set+0x30>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	0800169d 	.word	0x0800169d
 8001674:	080016a9 	.word	0x080016a9
 8001678:	080016b3 	.word	0x080016b3
 800167c:	080016bd 	.word	0x080016bd
 8001680:	080016c9 	.word	0x080016c9
 8001684:	080016d3 	.word	0x080016d3
 8001688:	080016dd 	.word	0x080016dd
 800168c:	080016e7 	.word	0x080016e7
 8001690:	080016f3 	.word	0x080016f3
 8001694:	080016ff 	.word	0x080016ff
 8001698:	08001709 	.word	0x08001709
        case 0:
            CSn_PORT = CS0_PORT;
 800169c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016a0:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 80016a2:	2320      	movs	r3, #32
 80016a4:	827b      	strh	r3, [r7, #18]
            break;
 80016a6:	e035      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <Digital_Pot_Wiper_Set+0x104>)
 80016aa:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 80016ac:	2302      	movs	r3, #2
 80016ae:	827b      	strh	r3, [r7, #18]
            break;
 80016b0:	e030      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <Digital_Pot_Wiper_Set+0x108>)
 80016b4:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 80016b6:	2304      	movs	r3, #4
 80016b8:	827b      	strh	r3, [r7, #18]
            break;
 80016ba:	e02b      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <Digital_Pot_Wiper_Set+0x104>)
 80016be:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 80016c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c4:	827b      	strh	r3, [r7, #18]
            break;
 80016c6:	e025      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <Digital_Pot_Wiper_Set+0x104>)
 80016ca:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	827b      	strh	r3, [r7, #18]
            break;
 80016d0:	e020      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <Digital_Pot_Wiper_Set+0x10c>)
 80016d4:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 80016d6:	2320      	movs	r3, #32
 80016d8:	827b      	strh	r3, [r7, #18]
            break;
 80016da:	e01b      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <Digital_Pot_Wiper_Set+0x104>)
 80016de:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	827b      	strh	r3, [r7, #18]
            break;
 80016e4:	e016      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <Digital_Pot_Wiper_Set+0x10c>)
 80016e8:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 80016ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ee:	827b      	strh	r3, [r7, #18]
            break;
 80016f0:	e010      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 80016f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016f6:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	827b      	strh	r3, [r7, #18]
            break;
 80016fc:	e00a      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <Digital_Pot_Wiper_Set+0x10c>)
 8001700:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 8001702:	2310      	movs	r3, #16
 8001704:	827b      	strh	r3, [r7, #18]
            break;
 8001706:	e005      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <Digital_Pot_Wiper_Set+0x104>)
 800170a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 800170c:	2301      	movs	r3, #1
 800170e:	827b      	strh	r3, [r7, #18]
            break;
 8001710:	e000      	b.n	8001714 <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 8001712:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f001 fa1a 	bl	8002b54 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8001720:	f107 0110 	add.w	r1, r7, #16
 8001724:	230a      	movs	r3, #10
 8001726:	2201      	movs	r2, #1
 8001728:	4809      	ldr	r0, [pc, #36]	@ (8001750 <Digital_Pot_Wiper_Set+0x110>)
 800172a:	f005 fab8 	bl	8006c9e <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 800172e:	8a7b      	ldrh	r3, [r7, #18]
 8001730:	2201      	movs	r2, #1
 8001732:	4619      	mov	r1, r3
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f001 fa0d 	bl	8002b54 <HAL_GPIO_WritePin>

	return;
 800173a:	bf00      	nop
}
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	48000400 	.word	0x48000400
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48000800 	.word	0x48000800
 8001750:	200002f4 	.word	0x200002f4

08001754 <Synth_Reset_Initalize>:

void Synth_Reset_Initalize(){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8001758:	2201      	movs	r2, #1
 800175a:	2120      	movs	r1, #32
 800175c:	4822      	ldr	r0, [pc, #136]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 800175e:	f001 f9f9 	bl	8002b54 <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 8001762:	2201      	movs	r2, #1
 8001764:	2120      	movs	r1, #32
 8001766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176a:	f001 f9f3 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2102      	movs	r1, #2
 8001772:	481d      	ldr	r0, [pc, #116]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 8001774:	f001 f9ee 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2104      	movs	r1, #4
 800177c:	481b      	ldr	r0, [pc, #108]	@ (80017ec <Synth_Reset_Initalize+0x98>)
 800177e:	f001 f9e9 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001788:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 800178a:	f001 f9e3 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2140      	movs	r1, #64	@ 0x40
 8001792:	4815      	ldr	r0, [pc, #84]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 8001794:	f001 f9de 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2120      	movs	r1, #32
 800179c:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <Synth_Reset_Initalize+0x9c>)
 800179e:	f001 f9d9 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	4810      	ldr	r0, [pc, #64]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 80017a8:	f001 f9d4 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b2:	480f      	ldr	r0, [pc, #60]	@ (80017f0 <Synth_Reset_Initalize+0x9c>)
 80017b4:	f001 f9ce 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f001 f9c8 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <Synth_Reset_Initalize+0x9c>)
 80017ca:	f001 f9c3 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2101      	movs	r1, #1
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <Synth_Reset_Initalize+0x94>)
 80017d4:	f001 f9be 	bl	8002b54 <HAL_GPIO_WritePin>

	// set gate low
	Gate_Control(0);
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 f8bd 	bl	8001958 <Gate_Control>
//	HAL_GPIO_WritePin(VCA_BYP_SW_PORT,  VCA_BYP_SW_PIN,  SET);
//	HAL_GPIO_WritePin(VCA_BYP_PORT,     VCA_BYP_PIN,     SET);
//
//	gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, gpio_reg, VCA_BYP_SW_PIN, true);

	Synth_Initialize_Preset();
 80017de:	f000 f809 	bl	80017f4 <Synth_Initialize_Preset>

	return;
 80017e2:	bf00      	nop
}
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000c00 	.word	0x48000c00
 80017f0:	48000800 	.word	0x48000800

080017f4 <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source = 1;
 80017f8:	4b56      	ldr	r3, [pc, #344]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
	SynthParameters.vca_bypass = 1;
 80017fe:	4b55      	ldr	r3, [pc, #340]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001800:	2201      	movs	r2, #1
 8001802:	605a      	str	r2, [r3, #4]
	SynthParameters.vcf_mod_source = 1;
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001806:	2201      	movs	r2, #1
 8001808:	609a      	str	r2, [r3, #8]
	SynthParameters.fm1_enable = 0;
 800180a:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
	SynthParameters.fm2_enable = 0;
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
	SynthParameters.env_invert_mode = 0;
 8001816:	4b4f      	ldr	r3, [pc, #316]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
	SynthParameters.env_loop_mode = 0;
 800181c:	4b4d      	ldr	r3, [pc, #308]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
	SynthParameters.lfo_waveform = 1;
 8001822:	4b4c      	ldr	r3, [pc, #304]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001824:	2201      	movs	r2, #1
 8001826:	61da      	str	r2, [r3, #28]

	// waveform synthesis settings
	SynthParameters.oscillator1 = 4;
 8001828:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800182a:	2204      	movs	r2, #4
 800182c:	621a      	str	r2, [r3, #32]
	SynthParameters.oscillator2 = 4;
 800182e:	4b49      	ldr	r3, [pc, #292]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001830:	2204      	movs	r2, #4
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24
	SynthParameters.note_offset1 = 12;
 8001834:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001836:	220c      	movs	r2, #12
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
	SynthParameters.note_offset2 = 12;
 800183a:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800183c:	220c      	movs	r2, #12
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c
	SynthParameters.detune_osc1 = 100;
 8001840:	4b44      	ldr	r3, [pc, #272]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001842:	2264      	movs	r2, #100	@ 0x64
 8001844:	631a      	str	r2, [r3, #48]	@ 0x30
	SynthParameters.detune_osc2 = 100;
 8001846:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001848:	2264      	movs	r2, #100	@ 0x64
 800184a:	635a      	str	r2, [r3, #52]	@ 0x34
	SynthParameters.fm_intensity1 = 0.5;
 800184c:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800184e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38
	SynthParameters.fm_intensity2 = 0.5;
 8001854:	4b3f      	ldr	r3, [pc, #252]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001856:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800185a:	63da      	str	r2, [r3, #60]	@ 0x3c
	SynthParameters.fm_harmonic1 = 1.0;
 800185c:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800185e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
	SynthParameters.fm_harmonic2 = 1.0;
 8001864:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001866:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800186a:	645a      	str	r2, [r3, #68]	@ 0x44
	SynthParameters.duty_cycle1 = 0.5;
 800186c:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800186e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001872:	649a      	str	r2, [r3, #72]	@ 0x48
	SynthParameters.duty_cycle2 = 0.5;
 8001874:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001876:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800187a:	64da      	str	r2, [r3, #76]	@ 0x4c
	SynthParameters.volume_osc1 = 100;
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800187e:	2264      	movs	r2, #100	@ 0x64
 8001880:	651a      	str	r2, [r3, #80]	@ 0x50
	SynthParameters.volume_osc2 = 100;
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001884:	2264      	movs	r2, #100	@ 0x64
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54

	// mixer output level settings
	SynthParameters.dac_mixer_level = 127;
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800188a:	227f      	movs	r2, #127	@ 0x7f
 800188c:	659a      	str	r2, [r3, #88]	@ 0x58
	SynthParameters.filter_out_level = 127;
 800188e:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001890:	227f      	movs	r2, #127	@ 0x7f
 8001892:	65da      	str	r2, [r3, #92]	@ 0x5c

	// filter modulation source settings
	SynthParameters.vcf_cv_en = 0;
 8001894:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001896:	2200      	movs	r2, #0
 8001898:	661a      	str	r2, [r3, #96]	@ 0x60
	SynthParameters.vcf_cv_sel = 0;
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800189c:	2200      	movs	r2, #0
 800189e:	665a      	str	r2, [r3, #100]	@ 0x64

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity = 127;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018a2:	227f      	movs	r2, #127	@ 0x7f
 80018a4:	669a      	str	r2, [r3, #104]	@ 0x68
	SynthParameters.vcf_cutoff = 127;
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018a8:	227f      	movs	r2, #127	@ 0x7f
 80018aa:	66da      	str	r2, [r3, #108]	@ 0x6c
	SynthParameters.vcf_resonance = 127;
 80018ac:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018ae:	227f      	movs	r2, #127	@ 0x7f
 80018b0:	671a      	str	r2, [r3, #112]	@ 0x70

	// LFO output settings
	SynthParameters.lfo_output_en = 0;
 80018b2:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	675a      	str	r2, [r3, #116]	@ 0x74
	SynthParameters.lfo_output_waveform = 0;
 80018b8:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	679a      	str	r2, [r3, #120]	@ 0x78

	// LFO output frequency setting
	SynthParameters.lfo_frequency = 127;
 80018be:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018c0:	227f      	movs	r2, #127	@ 0x7f
 80018c2:	67da      	str	r2, [r3, #124]	@ 0x7c

	// VCA modulation source settings
	SynthParameters.vca_cv_en = 0;
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	SynthParameters.vca_cv_sel = 0;
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en = 1;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	SynthParameters.vca_output_sel = 1;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018de:	2201      	movs	r2, #1
 80018e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity = 127;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018e6:	227f      	movs	r2, #127	@ 0x7f
 80018e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	SynthParameters.vca_offset = 127;
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018ee:	227f      	movs	r2, #127	@ 0x7f
 80018f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	// envelope output settings
	SynthParameters.env_en = 1;
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	SynthParameters.env_loop = 0;
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SynthParameters.env_invert = 0;
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001906:	2200      	movs	r2, #0
 8001908:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	// envelope timing settings
	//SynthParameters.env_attack_rate = 0;
	SynthParameters.env_attack_rate = 127;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800190e:	227f      	movs	r2, #127	@ 0x7f
 8001910:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	SynthParameters.env_release_rate = 127;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 8001916:	227f      	movs	r2, #127	@ 0x7f
 8001918:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	//SynthParameters.env_release_rate = 255;
	SynthParameters.env_decay_rate = 127;
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <Synth_Initialize_Preset+0x160>)
 800191e:	227f      	movs	r2, #127	@ 0x7f
 8001920:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//SynthParameters.env_decay_rate = 0;

	Mixer_Digital_Pot_Control();
 8001924:	f000 f82e 	bl	8001984 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8001928:	f000 f8b2 	bl	8001a90 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 800192c:	f000 f8dc 	bl	8001ae8 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8001930:	f000 f8f6 	bl	8001b20 <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8001934:	f000 f920 	bl	8001b78 <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8001938:	f000 f838 	bl	80019ac <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 800193c:	f000 f864 	bl	8001a08 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8001940:	f000 f890 	bl	8001a64 <VCA_Digital_Pot_Control>

	ENV_Mode_Control();
 8001944:	f000 f926 	bl	8001b94 <ENV_Mode_Control>
	ENV_Digital_Pot_Control();
 8001948:	f000 f966 	bl	8001c18 <ENV_Digital_Pot_Control>

	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000358 	.word	0x20000358

08001958 <Gate_Control>:
//	HAL_GPIO_WritePin(GATE_PORT, GATE_PIN, GPIO_PIN_SET);
//
//	return;
//}

void Gate_Control(int gate_state){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

	gpio_reg = GPIO_State_Change(GATE_PORT, gpio_reg, GATE_PIN, gate_state);
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <Gate_Control+0x28>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	2000      	movs	r0, #0
 800196c:	f000 faee 	bl	8001f4c <GPIO_State_Change>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b02      	ldr	r3, [pc, #8]	@ (8001980 <Gate_Control+0x28>)
 8001976:	801a      	strh	r2, [r3, #0]

	return;
 8001978:	bf00      	nop
}
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000408 	.word	0x20000408

08001984 <Mixer_Digital_Pot_Control>:

void Mixer_Digital_Pot_Control(){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <Mixer_Digital_Pot_Control+0x24>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	2200      	movs	r2, #0
 800198e:	4619      	mov	r1, r3
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fe55 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <Mixer_Digital_Pot_Control+0x24>)
 8001998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff fe4e 	bl	8001640 <Digital_Pot_Wiper_Set>

    return;
 80019a4:	bf00      	nop
}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000358 	.word	0x20000358

080019ac <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <VCA_Mod_Source_Control+0x54>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <VCA_Mod_Source_Control+0x58>)
 80019b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2207      	movs	r2, #7
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 fabf 	bl	8001f4c <GPIO_State_Change>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <VCA_Mod_Source_Control+0x54>)
 80019d4:	801a      	strh	r2, [r3, #0]

    // select modulation source
    gpio_reg = GPIO_State_Change(VCA_SEL_PORT, gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <VCA_Mod_Source_Control+0x54>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <VCA_Mod_Source_Control+0x58>)
 80019de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	2001      	movs	r0, #1
 80019f0:	f000 faac 	bl	8001f4c <GPIO_State_Change>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b01      	ldr	r3, [pc, #4]	@ (8001a00 <VCA_Mod_Source_Control+0x54>)
 80019fa:	801a      	strh	r2, [r3, #0]

    return;
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000408 	.word	0x20000408
 8001a04:	20000358 	.word	0x20000358

08001a08 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <VCA_Bypass_Switch_Control+0x54>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <VCA_Bypass_Switch_Control+0x58>)
 8001a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2206      	movs	r2, #6
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 fa91 	bl	8001f4c <GPIO_State_Change>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <VCA_Bypass_Switch_Control+0x54>)
 8001a30:	801a      	strh	r2, [r3, #0]

    // update output source selection; true = bypass VCA, false = output through VCA
    gpio_reg = GPIO_State_Change(VCA_BYP_PORT, gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <VCA_Bypass_Switch_Control+0x54>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <VCA_Bypass_Switch_Control+0x58>)
 8001a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2205      	movs	r2, #5
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 fa7e 	bl	8001f4c <GPIO_State_Change>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b01      	ldr	r3, [pc, #4]	@ (8001a5c <VCA_Bypass_Switch_Control+0x54>)
 8001a56:	801a      	strh	r2, [r3, #0]

    return;
 8001a58:	bf00      	nop
}
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000408 	.word	0x20000408
 8001a60:	20000358 	.word	0x20000358

08001a64 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <VCA_Digital_Pot_Control+0x28>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	2006      	movs	r0, #6
 8001a74:	f7ff fde4 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <VCA_Digital_Pot_Control+0x28>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	2007      	movs	r0, #7
 8001a84:	f7ff fddc 	bl	8001640 <Digital_Pot_Wiper_Set>

    return;
 8001a88:	bf00      	nop
}
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000358 	.word	0x20000358

08001a90 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <Filter_Mod_Source_Control+0x50>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <Filter_Mod_Source_Control+0x54>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fa4e 	bl	8001f4c <GPIO_State_Change>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <Filter_Mod_Source_Control+0x50>)
 8001ab6:	801a      	strh	r2, [r3, #0]

    // select modulation source; true = LFO, false = envelope
    gpio_reg = GPIO_State_Change(VCF_SEL_PORT, gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <Filter_Mod_Source_Control+0x50>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <Filter_Mod_Source_Control+0x54>)
 8001ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fa3c 	bl	8001f4c <GPIO_State_Change>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b01      	ldr	r3, [pc, #4]	@ (8001ae0 <Filter_Mod_Source_Control+0x50>)
 8001ada:	801a      	strh	r2, [r3, #0]

    return;
 8001adc:	bf00      	nop
}
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000408 	.word	0x20000408
 8001ae4:	20000358 	.word	0x20000358

08001ae8 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <Filter_Digital_Pot_Control+0x34>)
 8001aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001af0:	2200      	movs	r2, #0
 8001af2:	4619      	mov	r1, r3
 8001af4:	2004      	movs	r0, #4
 8001af6:	f7ff fda3 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8001afa:	4b08      	ldr	r3, [pc, #32]	@ (8001b1c <Filter_Digital_Pot_Control+0x34>)
 8001afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001afe:	2200      	movs	r2, #0
 8001b00:	4619      	mov	r1, r3
 8001b02:	2003      	movs	r0, #3
 8001b04:	f7ff fd9c 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <Filter_Digital_Pot_Control+0x34>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff fd95 	bl	8001640 <Digital_Pot_Wiper_Set>

    return;
 8001b16:	bf00      	nop
}
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000358 	.word	0x20000358

08001b20 <LFO_Output_Control>:

void LFO_Output_Control() {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    gpio_reg = GPIO_State_Change(LFO_EN_PORT, gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <LFO_Output_Control+0x50>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <LFO_Output_Control+0x54>)
 8001b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2207      	movs	r2, #7
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 fa06 	bl	8001f4c <GPIO_State_Change>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <LFO_Output_Control+0x50>)
 8001b46:	801a      	strh	r2, [r3, #0]

    // select LFO output waveform; true = square wave, false = triangle wave
    gpio_reg = GPIO_State_Change(LFO_SEL_PORT, gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <LFO_Output_Control+0x50>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <LFO_Output_Control+0x54>)
 8001b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2206      	movs	r2, #6
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f000 f9f4 	bl	8001f4c <GPIO_State_Change>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b01      	ldr	r3, [pc, #4]	@ (8001b70 <LFO_Output_Control+0x50>)
 8001b6a:	801a      	strh	r2, [r3, #0]

    return;
 8001b6c:	bf00      	nop
}
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000408 	.word	0x20000408
 8001b74:	20000358 	.word	0x20000358

08001b78 <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <LFO_Digital_Pot_Control+0x18>)
 8001b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	2005      	movs	r0, #5
 8001b86:	f7ff fd5b 	bl	8001640 <Digital_Pot_Wiper_Set>

    return;
 8001b8a:	bf00      	nop
}
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000358 	.word	0x20000358

08001b94 <ENV_Mode_Control>:

void ENV_Mode_Control() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    gpio_reg = GPIO_State_Change(ENV_EN_PORT, gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <ENV_Mode_Control+0x80>)
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2205      	movs	r2, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f9cb 	bl	8001f4c <GPIO_State_Change>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001bbc:	801a      	strh	r2, [r3, #0]

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    gpio_reg = GPIO_State_Change(ENV_LP_PORT, gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <ENV_Mode_Control+0x80>)
 8001bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 f9b8 	bl	8001f4c <GPIO_State_Change>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001be2:	801a      	strh	r2, [r3, #0]

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    gpio_reg = GPIO_State_Change(ENV_POL_PORT, gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <ENV_Mode_Control+0x80>)
 8001bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f000 f9a5 	bl	8001f4c <GPIO_State_Change>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b02      	ldr	r3, [pc, #8]	@ (8001c10 <ENV_Mode_Control+0x7c>)
 8001c08:	801a      	strh	r2, [r3, #0]

    return;
 8001c0a:	bf00      	nop
}
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000408 	.word	0x20000408
 8001c14:	20000358 	.word	0x20000358

08001c18 <ENV_Digital_Pot_Control>:

void ENV_Digital_Pot_Control(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2120      	movs	r1, #32
 8001c20:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <ENV_Digital_Pot_Control+0x44>)
 8001c22:	f000 ff97 	bl	8002b54 <HAL_GPIO_WritePin>

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <ENV_Digital_Pot_Control+0x48>)
 8001c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2008      	movs	r0, #8
 8001c32:	f7ff fd05 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <ENV_Digital_Pot_Control+0x48>)
 8001c38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2009      	movs	r0, #9
 8001c42:	f7ff fcfd 	bl	8001640 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <ENV_Digital_Pot_Control+0x48>)
 8001c48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	200a      	movs	r0, #10
 8001c52:	f7ff fcf5 	bl	8001640 <Digital_Pot_Wiper_Set>

    return;
 8001c56:	bf00      	nop
}
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	20000358 	.word	0x20000358

08001c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001c8e:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <MX_USART2_UART_Init+0x9c>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001ccc:	2208      	movs	r2, #8
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cd2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd8:	4811      	ldr	r0, [pc, #68]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cda:	f005 fabb 	bl	8007254 <HAL_UART_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f7fe ff5d 	bl	8000ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cec:	f007 fb31 	bl	8009352 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8001cf6:	f7fe ff54 	bl	8000ba2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001cfe:	f007 fb66 	bl	80093ce <HAL_UARTEx_SetRxFifoThreshold>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8001d08:	f7fe ff4b 	bl	8000ba2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <MX_USART2_UART_Init+0x98>)
 8001d0e:	f007 fae7 	bl	80092e0 <HAL_UARTEx_DisableFifoMode>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8001d18:	f7fe ff43 	bl	8000ba2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000040c 	.word	0x2000040c
 8001d24:	40004400 	.word	0x40004400

08001d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09e      	sub	sp, #120	@ 0x78
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2250      	movs	r2, #80	@ 0x50
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00b fb85 	bl	800d458 <memset>
  if(uartHandle->Instance==USART2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <HAL_UART_MspInit+0xb4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d13d      	bne.n	8001dd4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 ffa1 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d70:	f7fe ff17 	bl	8000ba2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_UART_MspInit+0xb8>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001da4:	2318      	movs	r3, #24
 8001da6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db4:	2307      	movs	r3, #7
 8001db6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4809      	ldr	r0, [pc, #36]	@ (8001de4 <HAL_UART_MspInit+0xbc>)
 8001dc0:	f000 fd46 	bl	8002850 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2026      	movs	r0, #38	@ 0x26
 8001dca:	f000 fa92 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dce:	2026      	movs	r0, #38	@ 0x26
 8001dd0:	f000 faa9 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3778      	adds	r7, #120	@ 0x78
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40004400 	.word	0x40004400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000400 	.word	0x48000400

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001de8:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ff3a 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f00b fb27 	bl	800d468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7fe fe01 	bl	8000a20 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   r0, =_estack
 8001e20:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001e2c:	0800d584 	.word	0x0800d584
  ldr r2, =_sbss
 8001e30:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001e34:	20001e74 	.word	0x20001e74

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	4603      	mov	r3, r0
 8001e44:	460a      	mov	r2, r1
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	230a      	movs	r3, #10
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	218e      	movs	r1, #142	@ 0x8e
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <DAC_Register_Write+0x38>)
 8001e68:	f000 ff42 	bl	8002cf0 <HAL_I2C_Mem_Write>

	return;
 8001e6c:	bf00      	nop
}
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200001a0 	.word	0x200001a0

08001e78 <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	2055      	movs	r0, #85	@ 0x55
 8001e80:	f7ff ffdc 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8001e84:	2127      	movs	r1, #39	@ 0x27
 8001e86:	2040      	movs	r0, #64	@ 0x40
 8001e88:	f7ff ffd8 	bl	8001e3c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8001e8c:	2127      	movs	r1, #39	@ 0x27
 8001e8e:	2041      	movs	r0, #65	@ 0x41
 8001e90:	f7ff ffd4 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8001e94:	2127      	movs	r1, #39	@ 0x27
 8001e96:	2044      	movs	r0, #68	@ 0x44
 8001e98:	f7ff ffd0 	bl	8001e3c <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 8001e9c:	2127      	movs	r1, #39	@ 0x27
 8001e9e:	2045      	movs	r0, #69	@ 0x45
 8001ea0:	f7ff ffcc 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2046      	movs	r0, #70	@ 0x46
 8001ea8:	f7ff ffc8 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 8001eac:	21e0      	movs	r1, #224	@ 0xe0
 8001eae:	2049      	movs	r0, #73	@ 0x49
 8001eb0:	f7ff ffc4 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2056      	movs	r0, #86	@ 0x56
 8001eb8:	f7ff ffc0 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	204b      	movs	r0, #75	@ 0x4b
 8001ec0:	f7ff ffbc 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIXER , 0x11); // analog mixer close switch 2 and 5
 8001ec4:	2111      	movs	r1, #17
 8001ec6:	2058      	movs	r0, #88	@ 0x58
 8001ec8:	f7ff ffb8 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 8001ecc:	21ec      	movs	r1, #236	@ 0xec
 8001ece:	2049      	movs	r0, #73	@ 0x49
 8001ed0:	f7ff ffb4 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	204a      	movs	r0, #74	@ 0x4a
 8001ed8:	f7ff ffb0 	bl	8001e3c <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 8001edc:	2130      	movs	r1, #48	@ 0x30
 8001ede:	2059      	movs	r0, #89	@ 0x59
 8001ee0:	f7ff ffac 	bl	8001e3c <DAC_Register_Write>

	return;
 8001ee4:	bf00      	nop
}
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	230a      	movs	r3, #10
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2301      	movs	r3, #1
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	21ee      	movs	r1, #238	@ 0xee
 8001f12:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <GPIO_Register_Write+0x38>)
 8001f14:	f000 feec 	bl	8002cf0 <HAL_I2C_Mem_Write>

	return;
 8001f18:	bf00      	nop
}
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200001a0 	.word	0x200001a0

08001f24 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2006      	movs	r0, #6
 8001f2c:	f7ff ffdc 	bl	8001ee8 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8001f30:	2100      	movs	r1, #0
 8001f32:	2007      	movs	r0, #7
 8001f34:	f7ff ffd8 	bl	8001ee8 <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7ff ffd4 	bl	8001ee8 <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8001f40:	2100      	movs	r1, #0
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7ff ffd0 	bl	8001ee8 <GPIO_Register_Write>

	return;
 8001f48:	bf00      	nop
}
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <GPIO_State_Change>:
    GPIO_Register_Write(selected_bank, gpio_reg);

    return gpio_reg;
}*/

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	461a      	mov	r2, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	dd02      	ble.n	8001f6c <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 8001f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f6a:	e051      	b.n	8002010 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d121      	bne.n	8001fb6 <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 8001f72:	7a7b      	ldrb	r3, [r7, #9]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 8001f78:	2201      	movs	r2, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	817b      	strh	r3, [r7, #10]
 8001f8c:	e00b      	b.n	8001fa6 <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 8001f8e:	2201      	movs	r2, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 8001fa6:	897b      	ldrh	r3, [r7, #10]
 8001fa8:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 8001faa:	7dbb      	ldrb	r3, [r7, #22]
 8001fac:	4619      	mov	r1, r3
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7ff ff9a 	bl	8001ee8 <GPIO_Register_Write>
 8001fb4:	e02b      	b.n	800200e <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d125      	bne.n	8002008 <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	e00c      	b.n	8001ff4 <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	2201      	movs	r2, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 8001ff4:	897b      	ldrh	r3, [r7, #10]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2003      	movs	r0, #3
 8002002:	f7ff ff71 	bl	8001ee8 <GPIO_Register_Write>
 8002006:	e002      	b.n	800200e <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 8002008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800200c:	e000      	b.n	8002010 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 800200e:	897b      	ldrh	r3, [r7, #10]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002022:	2003      	movs	r0, #3
 8002024:	f000 f95a 	bl	80022dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002028:	200f      	movs	r0, #15
 800202a:	f000 f80d 	bl	8002048 <HAL_InitTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	e001      	b.n	800203e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203a:	f7ff fa8f 	bl	800155c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203e:	79fb      	ldrb	r3, [r7, #7]

}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_InitTick+0x68>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d022      	beq.n	80020a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800205c:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_InitTick+0x6c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <HAL_InitTick+0x68>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002068:	fbb1 f3f3 	udiv	r3, r1, r3
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f966 	bl	8002342 <HAL_SYSTICK_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b0f      	cmp	r3, #15
 8002080:	d809      	bhi.n	8002096 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002082:	2200      	movs	r2, #0
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	f04f 30ff 	mov.w	r0, #4294967295
 800208a:	f000 f932 	bl	80022f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <HAL_InitTick+0x70>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e007      	b.n	80020a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e004      	b.n	80020a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e001      	b.n	80020a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_IncTick+0x1c>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_IncTick+0x20>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a03      	ldr	r2, [pc, #12]	@ (80020d8 <HAL_IncTick+0x1c>)
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	200004a0 	.word	0x200004a0
 80020dc:	20000008 	.word	0x20000008

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200004a0 	.word	0x200004a0

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d004      	beq.n	800211c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_Delay+0x40>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211c:	bf00      	nop
 800211e:	f7ff ffdf 	bl	80020e0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d8f7      	bhi.n	800211e <HAL_Delay+0x26>
  {
  }
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000008 	.word	0x20000008

0800213c <__NVIC_SetPriorityGrouping>:
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	@ (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	@ (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a8:	d301      	bcc.n	80022ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00f      	b.n	80022ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <SysTick_Config+0x40>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b6:	210f      	movs	r1, #15
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f7ff ff8e 	bl	80021dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <SysTick_Config+0x40>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <SysTick_Config+0x40>)
 80022c8:	2207      	movs	r2, #7
 80022ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000e010 	.word	0xe000e010

080022dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff29 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff40 	bl	8002184 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff90 	bl	8002230 <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5f 	bl	80021dc <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff33 	bl	80021a0 <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa4 	bl	8002298 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e08d      	b.n	800248a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4b47      	ldr	r3, [pc, #284]	@ (8002494 <HAL_DMA_Init+0x138>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d80f      	bhi.n	800239a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b45      	ldr	r3, [pc, #276]	@ (8002498 <HAL_DMA_Init+0x13c>)
 8002382:	4413      	add	r3, r2
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_DMA_Init+0x140>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a42      	ldr	r2, [pc, #264]	@ (80024a0 <HAL_DMA_Init+0x144>)
 8002396:	641a      	str	r2, [r3, #64]	@ 0x40
 8002398:	e00e      	b.n	80023b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	4b40      	ldr	r3, [pc, #256]	@ (80024a4 <HAL_DMA_Init+0x148>)
 80023a2:	4413      	add	r3, r2
 80023a4:	4a3d      	ldr	r2, [pc, #244]	@ (800249c <HAL_DMA_Init+0x140>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	009a      	lsls	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_DMA_Init+0x14c>)
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80023ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f9be 	bl	800278c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002418:	d102      	bne.n	8002420 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002434:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d010      	beq.n	8002460 <HAL_DMA_Init+0x104>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b04      	cmp	r3, #4
 8002444:	d80c      	bhi.n	8002460 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9de 	bl	8002808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e008      	b.n	8002472 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40020407 	.word	0x40020407
 8002498:	bffdfff8 	.word	0xbffdfff8
 800249c:	cccccccd 	.word	0xcccccccd
 80024a0:	40020000 	.word	0x40020000
 80024a4:	bffdfbf8 	.word	0xbffdfbf8
 80024a8:	40020400 	.word	0x40020400

080024ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d005      	beq.n	80024d0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e037      	b.n	8002540 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 020e 	bic.w	r2, r2, #14
 80024de:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ee:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800251c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002534:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800253e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d00d      	beq.n	8002592 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2204      	movs	r2, #4
 800257a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e047      	b.n	8002622 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 020e 	bic.w	r2, r2, #14
 80025a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002600:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
    }
  }
  return status;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d026      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d021      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	2104      	movs	r1, #4
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	2b00      	cmp	r3, #0
 800269a:	d071      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026a4:	e06c      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2202      	movs	r2, #2
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02e      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d029      	beq.n	8002718 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020a 	bic.w	r2, r2, #10
 80026e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2102      	movs	r1, #2
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d038      	beq.n	8002780 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002716:	e033      	b.n	8002780 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2208      	movs	r2, #8
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02a      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d025      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 020e 	bic.w	r2, r2, #14
 8002744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f003 021f 	and.w	r2, r3, #31
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002780:	bf00      	nop
 8002782:	bf00      	nop
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d802      	bhi.n	80027a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e001      	b.n	80027aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3b08      	subs	r3, #8
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	009a      	lsls	r2, r3, #2
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80027d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2201      	movs	r2, #1
 80027e0:	409a      	lsls	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40020407 	.word	0x40020407
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020820 	.word	0x40020820
 8002800:	cccccccd 	.word	0xcccccccd
 8002804:	40020880 	.word	0x40020880

08002808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a08      	ldr	r2, [pc, #32]	@ (800284c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800282a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3b01      	subs	r3, #1
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	1000823f 	.word	0x1000823f
 800284c:	40020940 	.word	0x40020940

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800285e:	e15a      	b.n	8002b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 814c 	beq.w	8002b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d005      	beq.n	8002890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800288c:	2b02      	cmp	r3, #2
 800288e:	d130      	bne.n	80028f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c6:	2201      	movs	r2, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f003 0201 	and.w	r2, r3, #1
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d017      	beq.n	800292e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d123      	bne.n	8002982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	6939      	ldr	r1, [r7, #16]
 800297e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0203 	and.w	r2, r3, #3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80a6 	beq.w	8002b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_GPIO_Init+0x2e4>)
 80029c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002b34 <HAL_GPIO_Init+0x2e4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80029d0:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_GPIO_Init+0x2e4>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029dc:	4a56      	ldr	r2, [pc, #344]	@ (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a06:	d01f      	beq.n	8002a48 <HAL_GPIO_Init+0x1f8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b3c <HAL_GPIO_Init+0x2ec>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d019      	beq.n	8002a44 <HAL_GPIO_Init+0x1f4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a4b      	ldr	r2, [pc, #300]	@ (8002b40 <HAL_GPIO_Init+0x2f0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <HAL_GPIO_Init+0x1f0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b44 <HAL_GPIO_Init+0x2f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00d      	beq.n	8002a3c <HAL_GPIO_Init+0x1ec>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a49      	ldr	r2, [pc, #292]	@ (8002b48 <HAL_GPIO_Init+0x2f8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <HAL_GPIO_Init+0x1e8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a48      	ldr	r2, [pc, #288]	@ (8002b4c <HAL_GPIO_Init+0x2fc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_GPIO_Init+0x1e4>
 8002a30:	2305      	movs	r3, #5
 8002a32:	e00a      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a34:	2306      	movs	r3, #6
 8002a36:	e008      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e006      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e004      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e002      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5a:	4937      	ldr	r1, [pc, #220]	@ (8002b38 <HAL_GPIO_Init+0x2e8>)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a68:	4b39      	ldr	r3, [pc, #228]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a8c:	4a30      	ldr	r2, [pc, #192]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a92:	4b2f      	ldr	r3, [pc, #188]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ab6:	4a26      	ldr	r2, [pc, #152]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0a:	4a11      	ldr	r2, [pc, #68]	@ (8002b50 <HAL_GPIO_Init+0x300>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f ae9d 	bne.w	8002860 <HAL_GPIO_Init+0x10>
  }
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	48000400 	.word	0x48000400
 8002b40:	48000800 	.word	0x48000800
 8002b44:	48000c00 	.word	0x48000c00
 8002b48:	48001000 	.word	0x48001000
 8002b4c:	48001400 	.word	0x48001400
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43d9      	mvns	r1, r3
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e08d      	b.n	8002ce6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fdf4 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	@ 0x24
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d108      	bne.n	8002c5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e007      	b.n	8002c6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	817b      	strh	r3, [r7, #10]
 8002d02:	460b      	mov	r3, r1
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 80f9 	bne.w	8002f0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x34>
 8002d1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0ed      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Mem_Write+0x4e>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0e6      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d46:	f7ff f9cb 	bl	80020e0 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2319      	movs	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f955 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0d1      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2221      	movs	r2, #33	@ 0x21
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2240      	movs	r2, #64	@ 0x40
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d90:	88f8      	ldrh	r0, [r7, #6]
 8002d92:	893a      	ldrh	r2, [r7, #8]
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4603      	mov	r3, r0
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f8b9 	bl	8002f18 <I2C_RequestMemoryWrite>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0a9      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d90e      	bls.n	8002de0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	@ 0xff
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fad9 	bl	8003390 <I2C_TransferConfig>
 8002dde:	e00f      	b.n	8002e00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8979      	ldrh	r1, [r7, #10]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fac8 	bl	8003390 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f958 	bl	80030ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e07b      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d034      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x1c8>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d130      	bne.n	8002eb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f8d1 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e04d      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2bff      	cmp	r3, #255	@ 0xff
 8002e78:	d90e      	bls.n	8002e98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	22ff      	movs	r2, #255	@ 0xff
 8002e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa7d 	bl	8003390 <I2C_TransferConfig>
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fa6c 	bl	8003390 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d19e      	bne.n	8002e00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f93e 	bl	8003148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e01a      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2220      	movs	r2, #32
 8002edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <HAL_I2C_Mem_Write+0x224>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	fe00e800 	.word	0xfe00e800

08002f18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	813b      	strh	r3, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <I2C_RequestMemoryWrite+0xa4>)
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa25 	bl	8003390 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	69b9      	ldr	r1, [r7, #24]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8b5 	bl	80030ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02c      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f60:	893b      	ldrh	r3, [r7, #8]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f6a:	e015      	b.n	8002f98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f89b 	bl	80030ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e012      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2180      	movs	r1, #128	@ 0x80
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f830 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	80002000 	.word	0x80002000

08002fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d103      	bne.n	8002fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d007      	beq.n	8002ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	619a      	str	r2, [r3, #24]
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003018:	e03b      	b.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8d6 	bl	80031d0 <I2C_IsErrorOccurred>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e041      	b.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d02d      	beq.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7ff f853 	bl	80020e0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d122      	bne.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	429a      	cmp	r2, r3
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	429a      	cmp	r2, r3
 8003068:	d113      	bne.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d0b4      	beq.n	800301a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030c6:	e033      	b.n	8003130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f87f 	bl	80031d0 <I2C_IsErrorOccurred>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e031      	b.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e2:	d025      	beq.n	8003130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e4:	f7fe fffc 	bl	80020e0 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d302      	bcc.n	80030fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11a      	bne.n	8003130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d013      	beq.n	8003130 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d1c4      	bne.n	80030c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003154:	e02f      	b.n	80031b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f838 	bl	80031d0 <I2C_IsErrorOccurred>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02d      	b.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe ffb9 	bl	80020e0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d11a      	bne.n	80031b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d013      	beq.n	80031b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d1c8      	bne.n	8003156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d068      	beq.n	80032ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2210      	movs	r2, #16
 8003202:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003204:	e049      	b.n	800329a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d045      	beq.n	800329a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fe ff67 	bl	80020e0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_IsErrorOccurred+0x54>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d13a      	bne.n	800329a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003236:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003246:	d121      	bne.n	800328c <I2C_IsErrorOccurred+0xbc>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800324e:	d01d      	beq.n	800328c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	2b20      	cmp	r3, #32
 8003254:	d01a      	beq.n	800328c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003264:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003266:	f7fe ff3b 	bl	80020e0 <HAL_GetTick>
 800326a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326c:	e00e      	b.n	800328c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800326e:	f7fe ff37 	bl	80020e0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b19      	cmp	r3, #25
 800327a:	d907      	bls.n	800328c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800328a:	e006      	b.n	800329a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d1e9      	bne.n	800326e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d003      	beq.n	80032b0 <I2C_IsErrorOccurred+0xe0>
 80032a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0aa      	beq.n	8003206 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2220      	movs	r2, #32
 80032be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003312:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800333c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01c      	beq.n	800337e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fe3b 	bl	8002fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <I2C_IsErrorOccurred+0x1bc>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800337e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003382:	4618      	mov	r0, r3
 8003384:	3728      	adds	r7, #40	@ 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	fe00e800 	.word	0xfe00e800

08003390 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	4613      	mov	r3, r2
 80033a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033a8:	7a7b      	ldrb	r3, [r7, #9]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	0d5b      	lsrs	r3, r3, #21
 80033ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <I2C_TransferConfig+0x60>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	43db      	mvns	r3, r3
 80033d4:	ea02 0103 	and.w	r1, r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	03ff63ff 	.word	0x03ff63ff

080033f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	d138      	bne.n	800347c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003414:	2302      	movs	r3, #2
 8003416:	e032      	b.n	800347e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	@ 0x24
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003446:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b20      	cmp	r3, #32
 800349e:	d139      	bne.n	8003514 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e033      	b.n	8003516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2224      	movs	r2, #36	@ 0x24
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0d0      	b.n	80036d8 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd f9c0 	bl	80008d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003566:	f023 030f 	bic.w	r3, r3, #15
 800356a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2202      	movs	r2, #2
 8003572:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d061      	beq.n	8003640 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003584:	2310      	movs	r3, #16
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e001      	b.n	800358e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d802      	bhi.n	800359c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800359c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80035a0:	f002 fdc0 	bl	8006124 <HAL_RCCEx_GetPeriphCLKFreq>
 80035a4:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ae:	d125      	bne.n	80035fc <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	3305      	adds	r3, #5
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	e01f      	b.n	800361a <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	3305      	adds	r3, #5
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e00e      	b.n	800361a <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	fbb2 f2f3 	udiv	r2, r2, r3
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	3305      	adds	r3, #5
 8003618:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4a30      	ldr	r2, [pc, #192]	@ (80036e0 <HAL_I2S_Init+0x1bc>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e003      	b.n	8003648 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003640:	2302      	movs	r3, #2
 8003642:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d902      	bls.n	8003654 <HAL_I2S_Init+0x130>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2bff      	cmp	r3, #255	@ 0xff
 8003652:	d907      	bls.n	8003664 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e039      	b.n	80036d8 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	ea42 0103 	orr.w	r1, r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	430a      	orrs	r2, r1
 8003676:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003682:	f023 030f 	bic.w	r3, r3, #15
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6851      	ldr	r1, [r2, #4]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68d2      	ldr	r2, [r2, #12]
 8003694:	4311      	orrs	r1, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6992      	ldr	r2, [r2, #24]
 800369a:	430a      	orrs	r2, r1
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b30      	cmp	r3, #48	@ 0x30
 80036ae:	d003      	beq.n	80036b8 <HAL_I2S_Init+0x194>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2bb0      	cmp	r3, #176	@ 0xb0
 80036b6:	d107      	bne.n	80036c8 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	cccccccd 	.word	0xcccccccd

080036e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0c0      	b.n	8003878 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f009 fba0 	bl	800ce50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2203      	movs	r2, #3
 8003714:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f005 fefa 	bl	8009516 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e03e      	b.n	80037a6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	3311      	adds	r3, #17
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	3310      	adds	r3, #16
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	3313      	adds	r3, #19
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	3320      	adds	r3, #32
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	440b      	add	r3, r1
 8003786:	3324      	adds	r3, #36	@ 0x24
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	3301      	adds	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	791b      	ldrb	r3, [r3, #4]
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3bb      	bcc.n	8003728 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e044      	b.n	8003840 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003824:	7bfa      	ldrb	r2, [r7, #15]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	440b      	add	r3, r1
 8003832:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3301      	adds	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	791b      	ldrb	r3, [r3, #4]
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3b5      	bcc.n	80037b6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003856:	f005 fe79 	bl	800954c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7a9b      	ldrb	r3, [r3, #10]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f001 fc0e 	bl	8005092 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_PCD_Start+0x16>
 8003892:	2302      	movs	r3, #2
 8003894:	e012      	b.n	80038bc <HAL_PCD_Start+0x3c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 fe20 	bl	80094e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f007 fbfd 	bl	800b0ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f007 fc02 	bl	800b0da <USB_ReadInterrupts>
 80038d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb06 	bl	8003ef4 <PCD_EP_ISR_Handler>

    return;
 80038e8:	e110      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003906:	b292      	uxth	r2, r2
 8003908:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f009 fb30 	bl	800cf72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003912:	2100      	movs	r1, #0
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8fc 	bl	8003b12 <HAL_PCD_SetAddress>

    return;
 800391a:	e0f7      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003938:	b292      	uxth	r2, r2
 800393a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800393e:	e0e5      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800395c:	b292      	uxth	r2, r2
 800395e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003962:	e0d3      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d034      	beq.n	80039d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0204 	bic.w	r2, r2, #4
 8003980:	b292      	uxth	r2, r2
 8003982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0208 	bic.w	r2, r2, #8
 8003998:	b292      	uxth	r2, r2
 800399a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d107      	bne.n	80039b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039b0:	2100      	movs	r1, #0
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f009 fcd0 	bl	800d358 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f009 fb13 	bl	800cfe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039d0:	b292      	uxth	r2, r2
 80039d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039d6:	e099      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d027      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0208 	orr.w	r2, r2, #8
 80039f4:	b292      	uxth	r2, r2
 80039f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0204 	orr.w	r2, r2, #4
 8003a24:	b292      	uxth	r2, r2
 8003a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f009 fac0 	bl	800cfb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a30:	e06c      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d040      	beq.n	8003abe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12b      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0204 	orr.w	r2, r2, #4
 8003a70:	b292      	uxth	r2, r2
 8003a72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0208 	orr.w	r2, r2, #8
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003aac:	2101      	movs	r1, #1
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f009 fc52 	bl	800d358 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003ab4:	e02a      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f009 fa7a 	bl	800cfb0 <HAL_PCD_SuspendCallback>
    return;
 8003abc:	e026      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00f      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ada:	b292      	uxth	r2, r2
 8003adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f009 fa38 	bl	800cf56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ae6:	e011      	b.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b04:	b292      	uxth	r2, r2
 8003b06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b0a:	bf00      	nop
  }
}
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_PCD_SetAddress+0x1a>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e012      	b.n	8003b52 <HAL_PCD_SetAddress+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f007 fa9e 	bl	800b084 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	4608      	mov	r0, r1
 8003b64:	4611      	mov	r1, r2
 8003b66:	461a      	mov	r2, r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	70fb      	strb	r3, [r7, #3]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	803b      	strh	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da0e      	bge.n	8003b9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 0207 	and.w	r2, r3, #7
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	3310      	adds	r3, #16
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	705a      	strb	r2, [r3, #1]
 8003b9c:	e00e      	b.n	8003bbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 0207 	and.w	r2, r3, #7
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003bc8:	883b      	ldrh	r3, [r7, #0]
 8003bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	78ba      	ldrb	r2, [r7, #2]
 8003bd6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bd8:	78bb      	ldrb	r3, [r7, #2]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d102      	bne.n	8003be4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_PCD_EP_Open+0x98>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e00e      	b.n	8003c10 <HAL_PCD_EP_Open+0xb6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f005 fcc1 	bl	8009588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da0e      	bge.n	8003c4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 0207 	and.w	r2, r3, #7
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	705a      	strb	r2, [r3, #1]
 8003c48:	e00e      	b.n	8003c68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	f003 0207 	and.w	r2, r3, #7
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_PCD_EP_Close+0x6a>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e00e      	b.n	8003ca0 <HAL_PCD_EP_Close+0x88>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f006 f961 	bl	8009f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6979      	ldr	r1, [r7, #20]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f006 fb19 	bl	800a332 <USB_EPStartXfer>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 0207 	and.w	r2, r3, #7
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003d2c:	681b      	ldr	r3, [r3, #0]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	460b      	mov	r3, r1
 8003d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	f003 0207 	and.w	r2, r3, #7
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3310      	adds	r3, #16
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2201      	movs	r2, #1
 8003d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f006 faca 	bl	800a332 <USB_EPStartXfer>

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	7912      	ldrb	r2, [r2, #4]
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e03e      	b.n	8003e44 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da0e      	bge.n	8003dec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	f003 0207 	and.w	r2, r3, #7
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	3310      	adds	r3, #16
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	705a      	strb	r2, [r3, #1]
 8003dea:	e00c      	b.n	8003e06 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_PCD_EP_SetStall+0x7e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e00e      	b.n	8003e44 <HAL_PCD_EP_SetStall+0x9c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 f82b 	bl	800ae90 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	7912      	ldrb	r2, [r2, #4]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e040      	b.n	8003eec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	da0e      	bge.n	8003e90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 0207 	and.w	r2, r3, #7
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	3310      	adds	r3, #16
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	705a      	strb	r2, [r3, #1]
 8003e8e:	e00e      	b.n	8003eae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 0207 	and.w	r2, r3, #7
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_PCD_EP_ClrStall+0x82>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e00e      	b.n	8003eec <HAL_PCD_EP_ClrStall+0xa0>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f007 f828 	bl	800af32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b092      	sub	sp, #72	@ 0x48
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003efc:	e333      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f06:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003f14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8108 	bne.w	800412e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f1e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d14c      	bne.n	8003fc2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3310      	adds	r3, #16
 8003f50:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	441a      	add	r2, r3
 8003f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f008 ffc9 	bl	800cf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7b1b      	ldrb	r3, [r3, #12]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 82e5 	beq.w	8004566 <PCD_EP_ISR_Handler+0x672>
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 82e0 	bne.w	8004566 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	731a      	strb	r2, [r3, #12]
 8003fc0:	e2d1      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fc8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003fd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d032      	beq.n	8004042 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004002:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800400e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004010:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004014:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004016:	b29b      	uxth	r3, r3
 8004018:	f007 f8b1 	bl	800b17e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29a      	uxth	r2, r3
 8004024:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004028:	4013      	ands	r3, r2
 800402a:	817b      	strh	r3, [r7, #10]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	897a      	ldrh	r2, [r7, #10]
 8004032:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f008 ff44 	bl	800cec8 <HAL_PCD_SetupStageCallback>
 8004040:	e291      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004042:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004046:	2b00      	cmp	r3, #0
 8004048:	f280 828d 	bge.w	8004566 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004058:	4013      	ands	r3, r2
 800405a:	81fb      	strh	r3, [r7, #14]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	89fa      	ldrh	r2, [r7, #14]
 8004062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004066:	b292      	uxth	r2, r2
 8004068:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800408e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <PCD_EP_ISR_Handler+0x1da>
 800409a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f007 f863 	bl	800b17e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	441a      	add	r2, r3
 80040c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f008 ff0f 	bl	800ceec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80040d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f040 8242 	bne.w	8004566 <PCD_EP_ISR_Handler+0x672>
 80040e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040e4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80040e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040ec:	f000 823b 	beq.w	8004566 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004100:	81bb      	strh	r3, [r7, #12]
 8004102:	89bb      	ldrh	r3, [r7, #12]
 8004104:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004108:	81bb      	strh	r3, [r7, #12]
 800410a:	89bb      	ldrh	r3, [r7, #12]
 800410c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004110:	81bb      	strh	r3, [r7, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	89bb      	ldrh	r3, [r7, #12]
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
 800412c:	e21b      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004140:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004144:	2b00      	cmp	r3, #0
 8004146:	f280 80f1 	bge.w	800432c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29a      	uxth	r2, r3
 800415c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004160:	4013      	ands	r3, r2
 8004162:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004174:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004178:	b292      	uxth	r2, r2
 800417a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800417c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004194:	7b1b      	ldrb	r3, [r3, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d123      	bne.n	80041e2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80041c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 808b 	beq.w	80042e2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	6959      	ldr	r1, [r3, #20]
 80041d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d6:	88da      	ldrh	r2, [r3, #6]
 80041d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041dc:	f006 ffcf 	bl	800b17e <USB_ReadPMA>
 80041e0:	e07f      	b.n	80042e2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d109      	bne.n	80041fe <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80041ec:	461a      	mov	r2, r3
 80041ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f9c6 	bl	8004582 <HAL_PCD_EP_DB_Receive>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80041fc:	e071      	b.n	80042e2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004218:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d022      	beq.n	800429e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	4413      	add	r3, r2
 8004272:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004280:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004284:	2b00      	cmp	r3, #0
 8004286:	d02c      	beq.n	80042e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428e:	6959      	ldr	r1, [r3, #20]
 8004290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004292:	891a      	ldrh	r2, [r3, #8]
 8004294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004298:	f006 ff71 	bl	800b17e <USB_ReadPMA>
 800429c:	e021      	b.n	80042e2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80042c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d8:	895a      	ldrh	r2, [r3, #10]
 80042da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042de:	f006 ff4e 	bl	800b17e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042ea:	441a      	add	r2, r3
 80042ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80042f8:	441a      	add	r2, r3
 80042fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <PCD_EP_ISR_Handler+0x41e>
 8004306:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800430a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d206      	bcs.n	8004320 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f008 fde7 	bl	800ceec <HAL_PCD_DataOutStageCallback>
 800431e:	e005      	b.n	800432c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004326:	4618      	mov	r0, r3
 8004328:	f006 f803 	bl	800a332 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800432c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8117 	beq.w	8004566 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004338:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	3310      	adds	r3, #16
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004366:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	441a      	add	r2, r3
 8004376:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2b01      	cmp	r3, #1
 800438a:	f040 80a1 	bne.w	80044d0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004396:	7b1b      	ldrb	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8092 	beq.w	80044c2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800439e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d046      	beq.n	8004436 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d126      	bne.n	80043fe <PCD_EP_ISR_Handler+0x50a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	4413      	add	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00da      	lsls	r2, r3, #3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4413      	add	r3, r2
 80043d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e061      	b.n	80044c2 <PCD_EP_ISR_Handler+0x5ce>
 80043fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d15d      	bne.n	80044c2 <PCD_EP_ISR_Handler+0x5ce>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004414:	b29b      	uxth	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	00da      	lsls	r2, r3, #3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2200      	movs	r2, #0
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e045      	b.n	80044c2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d126      	bne.n	8004492 <PCD_EP_ISR_Handler+0x59e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	4413      	add	r3, r2
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
 800445c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	00da      	lsls	r2, r3, #3
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	4413      	add	r3, r2
 8004466:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	b29a      	uxth	r2, r3
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e017      	b.n	80044c2 <PCD_EP_ISR_Handler+0x5ce>
 8004492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d113      	bne.n	80044c2 <PCD_EP_ISR_Handler+0x5ce>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	4413      	add	r3, r2
 80044aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	00da      	lsls	r2, r3, #3
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	4413      	add	r3, r2
 80044b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	2200      	movs	r2, #0
 80044c0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f008 fd2a 	bl	800cf22 <HAL_PCD_DataInStageCallback>
 80044ce:	e04a      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d13f      	bne.n	800455a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044fe:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004506:	429a      	cmp	r2, r3
 8004508:	d906      	bls.n	8004518 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	e002      	b.n	800451e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f008 fcf8 	bl	800cf22 <HAL_PCD_DataInStageCallback>
 8004532:	e018      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800453a:	441a      	add	r2, r3
 800453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004546:	441a      	add	r2, r3
 8004548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004552:	4618      	mov	r0, r3
 8004554:	f005 feed 	bl	800a332 <USB_EPStartXfer>
 8004558:	e005      	b.n	8004566 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800455a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800455c:	461a      	mov	r2, r3
 800455e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f917 	bl	8004794 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800456e:	b29b      	uxth	r3, r3
 8004570:	b21b      	sxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	f6ff acc3 	blt.w	8003efe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3748      	adds	r7, #72	@ 0x48
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	4613      	mov	r3, r2
 800458e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d07c      	beq.n	8004694 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	8b7b      	ldrh	r3, [r7, #26]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d306      	bcc.n	80045d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	8b7b      	ldrh	r3, [r7, #26]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	619a      	str	r2, [r3, #24]
 80045d6:	e002      	b.n	80045de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2200      	movs	r2, #0
 80045dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d123      	bne.n	800462e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004600:	833b      	strh	r3, [r7, #24]
 8004602:	8b3b      	ldrh	r3, [r7, #24]
 8004604:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004608:	833b      	strh	r3, [r7, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8b3b      	ldrh	r3, [r7, #24]
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01f      	beq.n	8004678 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004652:	82fb      	strh	r3, [r7, #22]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	8afb      	ldrh	r3, [r7, #22]
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004670:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004678:	8b7b      	ldrh	r3, [r7, #26]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8085 	beq.w	800478a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6959      	ldr	r1, [r3, #20]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	891a      	ldrh	r2, [r3, #8]
 800468c:	8b7b      	ldrh	r3, [r7, #26]
 800468e:	f006 fd76 	bl	800b17e <USB_ReadPMA>
 8004692:	e07a      	b.n	800478a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	8b7b      	ldrh	r3, [r7, #26]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d306      	bcc.n	80046d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	8b7b      	ldrh	r3, [r7, #26]
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	619a      	str	r2, [r3, #24]
 80046d0:	e002      	b.n	80046d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d123      	bne.n	8004728 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	83fb      	strh	r3, [r7, #30]
 80046fc:	8bfb      	ldrh	r3, [r7, #30]
 80046fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004702:	83fb      	strh	r3, [r7, #30]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	8bfb      	ldrh	r3, [r7, #30]
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11f      	bne.n	8004772 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474c:	83bb      	strh	r3, [r7, #28]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	8bbb      	ldrh	r3, [r7, #28]
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800476a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004772:	8b7b      	ldrh	r3, [r7, #26]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6959      	ldr	r1, [r3, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	895a      	ldrh	r2, [r3, #10]
 8004784:	8b7b      	ldrh	r3, [r7, #26]
 8004786:	f006 fcfa 	bl	800b17e <USB_ReadPMA>
    }
  }

  return count;
 800478a:	8b7b      	ldrh	r3, [r7, #26]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b0a6      	sub	sp, #152	@ 0x98
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 81f7 	beq.w	8004b9c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047de:	429a      	cmp	r2, r3
 80047e0:	d907      	bls.n	80047f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	619a      	str	r2, [r3, #24]
 80047f0:	e002      	b.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 80e1 	bne.w	80049c4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d126      	bne.n	8004858 <HAL_PCD_EP_DB_Transmit+0xc4>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004818:	b29b      	uxth	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	4413      	add	r3, r2
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	4413      	add	r3, r2
 800482c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483c:	b29a      	uxth	r2, r3
 800483e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e01a      	b.n	800488e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d116      	bne.n	800488e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	4413      	add	r3, r2
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	00da      	lsls	r2, r3, #3
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	4413      	add	r3, r2
 8004882:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488a:	2200      	movs	r2, #0
 800488c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d126      	bne.n	80048ea <HAL_PCD_EP_DB_Transmit+0x156>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	4413      	add	r3, r2
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00da      	lsls	r2, r3, #3
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	4413      	add	r3, r2
 80048be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e017      	b.n	800491a <HAL_PCD_EP_DB_Transmit+0x186>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	785b      	ldrb	r3, [r3, #1]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d113      	bne.n	800491a <HAL_PCD_EP_DB_Transmit+0x186>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	4413      	add	r3, r2
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	00da      	lsls	r2, r3, #3
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	4413      	add	r3, r2
 800490e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	2200      	movs	r2, #0
 8004918:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d123      	bne.n	800496a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493c:	837b      	strh	r3, [r7, #26]
 800493e:	8b7b      	ldrh	r3, [r7, #26]
 8004940:	f083 0320 	eor.w	r3, r3, #32
 8004944:	837b      	strh	r3, [r7, #26]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	8b7b      	ldrh	r3, [r7, #26]
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	4619      	mov	r1, r3
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f008 fad6 	bl	800cf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01f      	beq.n	80049c0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	833b      	strh	r3, [r7, #24]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	8b3b      	ldrh	r3, [r7, #24]
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e31f      	b.n	8005004 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d021      	beq.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 82ca 	bne.w	8004fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a26:	441a      	add	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a34:	441a      	add	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d309      	bcc.n	8004a5a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	621a      	str	r2, [r3, #32]
 8004a58:	e015      	b.n	8004a86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004a62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004a66:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a70:	e009      	b.n	8004a86 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d15f      	bne.n	8004b4e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa2:	4413      	add	r3, r2
 8004aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00da      	lsls	r2, r3, #3
 8004aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aae:	4413      	add	r3, r2
 8004ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e051      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ae6:	d816      	bhi.n	8004b16 <HAL_PCD_EP_DB_Transmit+0x382>
 8004ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_PCD_EP_DB_Transmit+0x36a>
 8004af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afa:	3301      	adds	r3, #1
 8004afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	e037      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x398>
 8004b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	029b      	lsls	r3, r3, #10
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	e01b      	b.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d117      	bne.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6a:	4413      	add	r3, r2
 8004b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	00da      	lsls	r2, r3, #3
 8004b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	891a      	ldrh	r2, [r3, #8]
 8004b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f006 fab0 	bl	800b0fa <USB_WritePMA>
 8004b9a:	e20a      	b.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d307      	bcc.n	8004be0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	619a      	str	r2, [r3, #24]
 8004bde:	e002      	b.n	8004be6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 80f6 	bne.w	8004ddc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d126      	bne.n	8004c46 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c0c:	4413      	add	r3, r2
 8004c0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	00da      	lsls	r2, r3, #3
 8004c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c18:	4413      	add	r3, r2
 8004c1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c42:	801a      	strh	r2, [r3, #0]
 8004c44:	e01a      	b.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d116      	bne.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c62:	4413      	add	r3, r2
 8004c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6e:	4413      	add	r3, r2
 8004c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c78:	2200      	movs	r2, #0
 8004c7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d12f      	bne.n	8004cec <HAL_PCD_EP_DB_Transmit+0x558>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	00da      	lsls	r2, r3, #3
 8004cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	e01c      	b.n	8004d26 <HAL_PCD_EP_DB_Transmit+0x592>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d118      	bne.n	8004d26 <HAL_PCD_EP_DB_Transmit+0x592>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d04:	4413      	add	r3, r2
 8004d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00da      	lsls	r2, r3, #3
 8004d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d14:	4413      	add	r3, r2
 8004d16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d22:	2200      	movs	r2, #0
 8004d24:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	78db      	ldrb	r3, [r3, #3]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d127      	bne.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004d4c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004d50:	f083 0320 	eor.w	r3, r3, #32
 8004d54:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	441a      	add	r2, r3
 8004d66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f008 f8cc 	bl	800cf22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d121      	bne.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e113      	b.n	8005004 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d121      	bne.n	8004e2a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 80be 	bne.w	8004fb2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e3e:	441a      	add	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d309      	bcc.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	621a      	str	r2, [r3, #32]
 8004e70:	e015      	b.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004e7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e88:	e009      	b.n	8004e9e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d15f      	bne.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ec0:	4413      	add	r3, r2
 8004ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	00da      	lsls	r2, r3, #3
 8004eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ecc:	4413      	add	r3, r2
 8004ece:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004eea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	e04e      	b.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8004f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f02:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f04:	d816      	bhi.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x788>
 8004f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f18:	3301      	adds	r3, #1
 8004f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e034      	b.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8004f34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f46:	3b01      	subs	r3, #1
 8004f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	e018      	b.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d114      	bne.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x80a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f82:	4413      	add	r3, r2
 8004f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	00da      	lsls	r2, r3, #3
 8004f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f8e:	4413      	add	r3, r2
 8004f90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6959      	ldr	r1, [r3, #20]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	895a      	ldrh	r2, [r3, #10]
 8004faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f006 f8a4 	bl	800b0fa <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fcc:	82fb      	strh	r3, [r7, #22]
 8004fce:	8afb      	ldrh	r3, [r7, #22]
 8004fd0:	f083 0310 	eor.w	r3, r3, #16
 8004fd4:	82fb      	strh	r3, [r7, #22]
 8004fd6:	8afb      	ldrh	r3, [r7, #22]
 8004fd8:	f083 0320 	eor.w	r3, r3, #32
 8004fdc:	82fb      	strh	r3, [r7, #22]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8afb      	ldrh	r3, [r7, #22]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3798      	adds	r7, #152	@ 0x98
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	817b      	strh	r3, [r7, #10]
 800501a:	4613      	mov	r3, r2
 800501c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800501e:	897b      	ldrh	r3, [r7, #10]
 8005020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	f003 0207 	and.w	r2, r3, #7
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3310      	adds	r3, #16
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e009      	b.n	8005056 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005042:	897a      	ldrh	r2, [r7, #10]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005056:	893b      	ldrh	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d107      	bne.n	800506c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	b29a      	uxth	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	80da      	strh	r2, [r3, #6]
 800506a:	e00b      	b.n	8005084 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2201      	movs	r2, #1
 8005070:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	b29a      	uxth	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	b29a      	uxth	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d141      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005102:	d131      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b47      	ldr	r3, [pc, #284]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	4a46      	ldr	r2, [pc, #280]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005114:	4b43      	ldr	r3, [pc, #268]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800511c:	4a41      	ldr	r2, [pc, #260]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005124:	4b40      	ldr	r3, [pc, #256]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2232      	movs	r2, #50	@ 0x32
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	4a3f      	ldr	r2, [pc, #252]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800513a:	e002      	b.n	8005142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005142:	4b38      	ldr	r3, [pc, #224]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d102      	bne.n	8005156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f2      	bne.n	800513c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005156:	4b33      	ldr	r3, [pc, #204]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005162:	d158      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e057      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005178:	e04d      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d141      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005182:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d131      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a0:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2232      	movs	r2, #50	@ 0x32
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c6:	e002      	b.n	80051ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051da:	d102      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d112      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005204:	e007      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800520e:	4a05      	ldr	r2, [pc, #20]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40007000 	.word	0x40007000
 8005228:	20000000 	.word	0x20000000
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005234:	4b05      	ldr	r3, [pc, #20]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a04      	ldr	r2, [pc, #16]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800523a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40007000 	.word	0x40007000

08005250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e2fe      	b.n	8005860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b97      	ldr	r3, [pc, #604]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b94      	ldr	r3, [pc, #592]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d102      	bne.n	800528e <HAL_RCC_OscConfig+0x3e>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d002      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e2d9      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a84      	ldr	r2, [pc, #528]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7b      	ldr	r2, [pc, #492]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b78      	ldr	r3, [pc, #480]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a77      	ldr	r2, [pc, #476]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b75      	ldr	r3, [pc, #468]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc feea 	bl	80020e0 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fc fee6 	bl	80020e0 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e29e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	4b6a      	ldr	r3, [pc, #424]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fc fed6 	bl	80020e0 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7fc fed2 	bl	80020e0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	@ 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e28a      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	4b60      	ldr	r3, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d075      	beq.n	8005452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	4b59      	ldr	r3, [pc, #356]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005370:	4b56      	ldr	r3, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d102      	bne.n	8005386 <HAL_RCC_OscConfig+0x136>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d002      	beq.n	800538c <HAL_RCC_OscConfig+0x13c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11f      	bne.n	80053cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	4b4f      	ldr	r3, [pc, #316]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x154>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e25d      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4946      	ldr	r1, [pc, #280]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053b8:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <HAL_RCC_OscConfig+0x280>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc fe43 	bl	8002048 <HAL_InitTick>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d043      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e249      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d023      	beq.n	800541c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3c      	ldr	r2, [pc, #240]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fc fe7e 	bl	80020e0 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fc fe7a 	bl	80020e0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e232      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	492d      	ldr	r1, [pc, #180]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e01a      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fc fe5a 	bl	80020e0 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fc fe56 	bl	80020e0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e20e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1e0>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d041      	beq.n	80054e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fc fe33 	bl	80020e0 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fc fe2f 	bl	80020e0 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1e7      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <HAL_RCC_OscConfig+0x22e>
 800549e:	e020      	b.n	80054e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a6:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fe16 	bl	80020e0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b6:	e00d      	b.n	80054d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fc fe12 	bl	80020e0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d906      	bls.n	80054d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1ca      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ea      	bne.n	80054b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a6 	beq.w	800563c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054f4:	4b84      	ldr	r3, [pc, #528]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_OscConfig+0x2b4>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x2b6>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b7f      	ldr	r3, [pc, #508]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	4a7e      	ldr	r2, [pc, #504]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
 8005516:	4b7c      	ldr	r3, [pc, #496]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005526:	4b79      	ldr	r3, [pc, #484]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b76      	ldr	r3, [pc, #472]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a75      	ldr	r2, [pc, #468]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fc fdcf 	bl	80020e0 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fc fdcb 	bl	80020e0 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e183      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005558:	4b6c      	ldr	r3, [pc, #432]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d108      	bne.n	800557e <HAL_RCC_OscConfig+0x32e>
 800556c:	4b66      	ldr	r3, [pc, #408]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800557c:	e024      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d110      	bne.n	80055a8 <HAL_RCC_OscConfig+0x358>
 8005586:	4b60      	ldr	r3, [pc, #384]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558c:	4a5e      	ldr	r2, [pc, #376]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005596:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055a6:	e00f      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 80055a8:	4b57      	ldr	r3, [pc, #348]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	4a56      	ldr	r2, [pc, #344]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b8:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	4a52      	ldr	r2, [pc, #328]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fc fd86 	bl	80020e0 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fc fd82 	bl	80020e0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e138      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	4b46      	ldr	r3, [pc, #280]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ed      	beq.n	80055d8 <HAL_RCC_OscConfig+0x388>
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fc fd6f 	bl	80020e0 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005604:	e00a      	b.n	800561c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fc fd6b 	bl	80020e0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e121      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ed      	bne.n	8005606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d03c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01c      	beq.n	800568a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005650:	4b2d      	ldr	r3, [pc, #180]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005656:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fc fd3e 	bl	80020e0 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005668:	f7fc fd3a 	bl	80020e0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0f2      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567a:	4b23      	ldr	r3, [pc, #140]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <HAL_RCC_OscConfig+0x418>
 8005688:	e01b      	b.n	80056c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800568a:	4b1f      	ldr	r3, [pc, #124]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005690:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fc fd21 	bl	80020e0 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a2:	f7fc fd1d 	bl	80020e0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0d5      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b4:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80c9 	beq.w	800585e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d15e      	bne.n	80057a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fc fcf7 	bl	80020e0 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	e00c      	b.n	8005710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f6:	f7fc fcf3 	bl	80020e0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d905      	bls.n	8005710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0ab      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	4b55      	ldr	r3, [pc, #340]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ec      	bne.n	80056f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571c:	4b52      	ldr	r3, [pc, #328]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	4b52      	ldr	r3, [pc, #328]	@ (800586c <HAL_RCC_OscConfig+0x61c>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6a11      	ldr	r1, [r2, #32]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800572c:	3a01      	subs	r2, #1
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	4311      	orrs	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4311      	orrs	r1, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	3a01      	subs	r2, #1
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800574a:	0852      	lsrs	r2, r2, #1
 800574c:	3a01      	subs	r2, #1
 800574e:	0652      	lsls	r2, r2, #25
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005756:	06d2      	lsls	r2, r2, #27
 8005758:	430a      	orrs	r2, r1
 800575a:	4943      	ldr	r1, [pc, #268]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a40      	ldr	r2, [pc, #256]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800576c:	4b3e      	ldr	r3, [pc, #248]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a3d      	ldr	r2, [pc, #244]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fcb2 	bl	80020e0 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fc fcae 	bl	80020e0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e066      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x530>
 800579e:	e05e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fc fc98 	bl	80020e0 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc fc94 	bl	80020e0 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e04c      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c6:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057d2:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	4924      	ldr	r1, [pc, #144]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x620>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
 80057de:	e03e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e039      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d12c      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	3b01      	subs	r3, #1
 800580c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d123      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d11b      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d113      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d109      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	019f800c 	.word	0x019f800c
 8005870:	feeefffc 	.word	0xfeeefffc

08005874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e11e      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b91      	ldr	r3, [pc, #580]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d910      	bls.n	80058bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b8e      	ldr	r3, [pc, #568]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 020f 	bic.w	r2, r3, #15
 80058a2:	498c      	ldr	r1, [pc, #560]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b8a      	ldr	r3, [pc, #552]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e106      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d073      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d129      	bne.n	8005924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d0:	4b81      	ldr	r3, [pc, #516]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f4      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058e0:	f000 f99e 	bl	8005c20 <RCC_GetSysClockFreqFromPLLSource>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a7c      	ldr	r2, [pc, #496]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d93f      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058ee:	4b7a      	ldr	r3, [pc, #488]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12f      	bne.n	800596e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800590e:	4b72      	ldr	r3, [pc, #456]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005916:	4a70      	ldr	r2, [pc, #448]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e024      	b.n	800596e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0c6      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	4b66      	ldr	r3, [pc, #408]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0be      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800594c:	f000 f8ce 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a61      	ldr	r2, [pc, #388]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d909      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800595a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005962:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4957      	ldr	r1, [pc, #348]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fc fbae 	bl	80020e0 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc fbaa 	bl	80020e0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e095      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c8:	4b43      	ldr	r3, [pc, #268]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a42      	ldr	r2, [pc, #264]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059e0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059e8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b39      	ldr	r3, [pc, #228]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4936      	ldr	r1, [pc, #216]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a16:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d21d      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f023 020f 	bic.w	r2, r3, #15
 8005a2c:	4929      	ldr	r1, [pc, #164]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a34:	f7fc fb54 	bl	80020e0 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fc fb50 	bl	80020e0 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03b      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1ed      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	490f      	ldr	r1, [pc, #60]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a9e:	f000 f825 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490c      	ldr	r1, [pc, #48]	@ (8005ae0 <HAL_RCC_ClockConfig+0x26c>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x270>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc fac0 	bl	8002048 <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40022000 	.word	0x40022000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	04c4b400 	.word	0x04c4b400
 8005ae0:	0800d534 	.word	0x0800d534
 8005ae4:	20000000 	.word	0x20000000
 8005ae8:	20000004 	.word	0x20000004

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005af2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e047      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b04:	4b27      	ldr	r3, [pc, #156]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e03e      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d136      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b20      	ldr	r3, [pc, #128]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	4a1a      	ldr	r2, [pc, #104]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a16      	ldr	r2, [pc, #88]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
      break;
 8005b72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0e5b      	lsrs	r3, r3, #25
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e001      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	016e3600 	.word	0x016e3600

08005bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000000 	.word	0x20000000

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bcc:	f7ff fff0 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4904      	ldr	r1, [pc, #16]	@ (8005bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	0800d544 	.word	0x0800d544

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bf8:	f7ff ffda 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0adb      	lsrs	r3, r3, #11
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800d544 	.word	0x0800d544

08005c20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c26:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d10c      	bne.n	8005c5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c44:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	0a12      	lsrs	r2, r2, #8
 8005c52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	617b      	str	r3, [r7, #20]
    break;
 8005c5c:	e00c      	b.n	8005c78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	0a12      	lsrs	r2, r2, #8
 8005c6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
    break;
 8005c76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c78:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	0e5b      	lsrs	r3, r3, #25
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	3301      	adds	r3, #1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c92:	687b      	ldr	r3, [r7, #4]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	016e3600 	.word	0x016e3600
 8005ca8:	00f42400 	.word	0x00f42400

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8098 	beq.w	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b40      	ldr	r3, [pc, #256]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	4a3f      	ldr	r2, [pc, #252]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a39      	ldr	r2, [pc, #228]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fc f9ed 	bl	80020e0 <HAL_GetTick>
 8005d06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d08:	e009      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fc f9e9 	bl	80020e0 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1e:	4b30      	ldr	r3, [pc, #192]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d159      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d30:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4c:	4b23      	ldr	r3, [pc, #140]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d68:	4b1c      	ldr	r3, [pc, #112]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d78:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fc f9a9 	bl	80020e0 <HAL_GetTick>
 8005d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d90:	e00b      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fc f9a5 	bl	80020e0 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d902      	bls.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	74fb      	strb	r3, [r7, #19]
            break;
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005daa:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ec      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbe:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dcc:	4903      	ldr	r1, [pc, #12]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dd4:	e008      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	74bb      	strb	r3, [r7, #18]
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005de8:	7c7b      	ldrb	r3, [r7, #17]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4ba7      	ldr	r3, [pc, #668]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	4aa6      	ldr	r2, [pc, #664]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e06:	4ba1      	ldr	r3, [pc, #644]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f023 0203 	bic.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	499d      	ldr	r1, [pc, #628]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e28:	4b98      	ldr	r3, [pc, #608]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	f023 020c 	bic.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4995      	ldr	r1, [pc, #596]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e4a:	4b90      	ldr	r3, [pc, #576]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	498c      	ldr	r1, [pc, #560]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e6c:	4b87      	ldr	r3, [pc, #540]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	4984      	ldr	r1, [pc, #528]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	497b      	ldr	r1, [pc, #492]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb0:	4b76      	ldr	r3, [pc, #472]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	4973      	ldr	r1, [pc, #460]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	496a      	ldr	r1, [pc, #424]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef4:	4b65      	ldr	r3, [pc, #404]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	4962      	ldr	r1, [pc, #392]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f16:	4b5d      	ldr	r3, [pc, #372]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	4959      	ldr	r1, [pc, #356]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f38:	4b54      	ldr	r3, [pc, #336]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	4951      	ldr	r1, [pc, #324]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d015      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	4948      	ldr	r1, [pc, #288]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f78:	d105      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7a:	4b44      	ldr	r3, [pc, #272]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4a43      	ldr	r2, [pc, #268]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f84:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d015      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f92:	4b3e      	ldr	r3, [pc, #248]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa0:	493a      	ldr	r1, [pc, #232]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fb0:	d105      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fb2:	4b36      	ldr	r3, [pc, #216]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	4a35      	ldr	r2, [pc, #212]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fbc:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d015      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fca:	4b30      	ldr	r3, [pc, #192]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	492c      	ldr	r1, [pc, #176]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fe8:	d105      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fea:	4b28      	ldr	r3, [pc, #160]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a27      	ldr	r2, [pc, #156]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ff4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d015      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006002:	4b22      	ldr	r3, [pc, #136]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006008:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	491e      	ldr	r1, [pc, #120]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006020:	d105      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006022:	4b1a      	ldr	r3, [pc, #104]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a19      	ldr	r2, [pc, #100]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800602c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d015      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800603a:	4b14      	ldr	r3, [pc, #80]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006040:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	4910      	ldr	r1, [pc, #64]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006058:	d105      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800605a:	4b0c      	ldr	r3, [pc, #48]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	4a0b      	ldr	r2, [pc, #44]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006060:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006064:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d018      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	4902      	ldr	r1, [pc, #8]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	e001      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800608c:	40021000 	.word	0x40021000
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006096:	d105      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006098:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800609e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060be:	4918      	ldr	r1, [pc, #96]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ce:	d105      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060d0:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a12      	ldr	r2, [pc, #72]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d015      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f6:	490a      	ldr	r1, [pc, #40]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006106:	d105      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006108:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800610e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006114:	7cbb      	ldrb	r3, [r7, #18]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40021000 	.word	0x40021000

08006124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006136:	d136      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006138:	4bb3      	ldr	r3, [pc, #716]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006144:	4bb0      	ldr	r3, [pc, #704]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d108      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006158:	d104      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	f000 bce6 	b.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006164:	4ba8      	ldr	r3, [pc, #672]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d108      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006178:	d104      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800617a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	f000 bcd6 	b.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006184:	4ba0      	ldr	r3, [pc, #640]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800618c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006190:	f040 84ce 	bne.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619a:	f040 84c9 	bne.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 800619e:	4b9b      	ldr	r3, [pc, #620]	@ (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	f000 bcc5 	b.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80061a6:	4b98      	ldr	r3, [pc, #608]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d10c      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061b2:	4b95      	ldr	r3, [pc, #596]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061be:	d102      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80061c0:	4b93      	ldr	r3, [pc, #588]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e017      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e014      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80061cc:	4b8e      	ldr	r3, [pc, #568]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061d8:	4b8b      	ldr	r3, [pc, #556]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e4:	d102      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 80061e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e001      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061f6:	4b84      	ldr	r3, [pc, #528]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	3301      	adds	r3, #1
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006210:	f000 843c 	beq.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800621a:	f200 8464 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	f000 83f7 	beq.w	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622e:	f200 845a 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006238:	f000 83b0 	beq.w	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006242:	f200 8450 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800624c:	f000 8378 	beq.w	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006256:	f200 8446 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006260:	f000 8335 	beq.w	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626a:	f200 843c 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006274:	f000 82f6 	beq.w	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800627e:	f200 8432 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	f000 82a8 	beq.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006292:	f200 8428 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629c:	f000 825a 	beq.w	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a6:	f200 841e 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b0:	f000 8214 	beq.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ba:	f200 8414 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c4:	f000 81e0 	beq.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ce:	f200 840a 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b80      	cmp	r3, #128	@ 0x80
 80062d6:	f000 81b2 	beq.w	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b80      	cmp	r3, #128	@ 0x80
 80062de:	f200 8402 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d84b      	bhi.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 83fb 	beq.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	2b1f      	cmp	r3, #31
 80062f6:	f200 83f6 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	0800638b 	.word	0x0800638b
 8006304:	080063ed 	.word	0x080063ed
 8006308:	08006ae7 	.word	0x08006ae7
 800630c:	08006461 	.word	0x08006461
 8006310:	08006ae7 	.word	0x08006ae7
 8006314:	08006ae7 	.word	0x08006ae7
 8006318:	08006ae7 	.word	0x08006ae7
 800631c:	080064c3 	.word	0x080064c3
 8006320:	08006ae7 	.word	0x08006ae7
 8006324:	08006ae7 	.word	0x08006ae7
 8006328:	08006ae7 	.word	0x08006ae7
 800632c:	08006ae7 	.word	0x08006ae7
 8006330:	08006ae7 	.word	0x08006ae7
 8006334:	08006ae7 	.word	0x08006ae7
 8006338:	08006ae7 	.word	0x08006ae7
 800633c:	08006525 	.word	0x08006525
 8006340:	08006ae7 	.word	0x08006ae7
 8006344:	08006ae7 	.word	0x08006ae7
 8006348:	08006ae7 	.word	0x08006ae7
 800634c:	08006ae7 	.word	0x08006ae7
 8006350:	08006ae7 	.word	0x08006ae7
 8006354:	08006ae7 	.word	0x08006ae7
 8006358:	08006ae7 	.word	0x08006ae7
 800635c:	08006ae7 	.word	0x08006ae7
 8006360:	08006ae7 	.word	0x08006ae7
 8006364:	08006ae7 	.word	0x08006ae7
 8006368:	08006ae7 	.word	0x08006ae7
 800636c:	08006ae7 	.word	0x08006ae7
 8006370:	08006ae7 	.word	0x08006ae7
 8006374:	08006ae7 	.word	0x08006ae7
 8006378:	08006ae7 	.word	0x08006ae7
 800637c:	0800658d 	.word	0x0800658d
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b40      	cmp	r3, #64	@ 0x40
 8006384:	f000 8136 	beq.w	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 8006388:	e3ad      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800638a:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 800639c:	f7ff fc2a 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80063a0:	61f8      	str	r0, [r7, #28]
      break;
 80063a2:	e3a2      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d103      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 80063aa:	f7ff fb9f 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80063ae:	61f8      	str	r0, [r7, #28]
      break;
 80063b0:	e39b      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 80063b2:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063be:	d105      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d102      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80063c8:	61fb      	str	r3, [r7, #28]
      break;
 80063ca:	e38e      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80063cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	f040 8387 	bne.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	f040 8383 	bne.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 80063e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e8:	61fb      	str	r3, [r7, #28]
      break;
 80063ea:	e37e      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80063fe:	f7ff fbe3 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8006402:	61f8      	str	r0, [r7, #28]
      break;
 8006404:	e373      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000
 800640c:	000b71b0 	.word	0x000b71b0
 8006410:	00f42400 	.word	0x00f42400
 8006414:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b04      	cmp	r3, #4
 800641c:	d103      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 800641e:	f7ff fb65 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006422:	61f8      	str	r0, [r7, #28]
      break;
 8006424:	e363      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006426:	4ba3      	ldr	r3, [pc, #652]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800642e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006432:	d105      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2b08      	cmp	r3, #8
 8006438:	d102      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 800643a:	4b9f      	ldr	r3, [pc, #636]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800643c:	61fb      	str	r3, [r7, #28]
      break;
 800643e:	e356      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006440:	4b9c      	ldr	r3, [pc, #624]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	f040 834f 	bne.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b0c      	cmp	r3, #12
 8006454:	f040 834b 	bne.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 8006458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800645c:	61fb      	str	r3, [r7, #28]
      break;
 800645e:	e346      	b.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006460:	4b94      	ldr	r3, [pc, #592]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006466:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800646a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006472:	f7ff fba9 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8006476:	61f8      	str	r0, [r7, #28]
      break;
 8006478:	e33b      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b10      	cmp	r3, #16
 800647e:	d103      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8006480:	f7ff fb34 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006484:	61f8      	str	r0, [r7, #28]
      break;
 8006486:	e334      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006488:	4b8a      	ldr	r3, [pc, #552]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006494:	d105      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b20      	cmp	r3, #32
 800649a:	d102      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 800649c:	4b86      	ldr	r3, [pc, #536]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800649e:	61fb      	str	r3, [r7, #28]
      break;
 80064a0:	e327      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80064a2:	4b84      	ldr	r3, [pc, #528]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f040 8320 	bne.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b30      	cmp	r3, #48	@ 0x30
 80064b6:	f040 831c 	bne.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 80064ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064be:	61fb      	str	r3, [r7, #28]
      break;
 80064c0:	e317      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064c2:	4b7c      	ldr	r3, [pc, #496]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80064cc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7ff fb78 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
      break;
 80064da:	e30c      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b40      	cmp	r3, #64	@ 0x40
 80064e0:	d103      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 80064e2:	f7ff fb03 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80064e6:	61f8      	str	r0, [r7, #28]
      break;
 80064e8:	e305      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80064ea:	4b72      	ldr	r3, [pc, #456]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064f6:	d105      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b80      	cmp	r3, #128	@ 0x80
 80064fc:	d102      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 80064fe:	4b6e      	ldr	r3, [pc, #440]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006500:	61fb      	str	r3, [r7, #28]
      break;
 8006502:	e2f8      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006504:	4b6b      	ldr	r3, [pc, #428]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b02      	cmp	r3, #2
 8006510:	f040 82f1 	bne.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2bc0      	cmp	r3, #192	@ 0xc0
 8006518:	f040 82ed 	bne.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 800651c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006520:	61fb      	str	r3, [r7, #28]
      break;
 8006522:	e2e8      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006524:	4b63      	ldr	r3, [pc, #396]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006536:	f7ff fb47 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 800653a:	61f8      	str	r0, [r7, #28]
      break;
 800653c:	e2dd      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006544:	d103      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006546:	f7ff fad1 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 800654a:	61f8      	str	r0, [r7, #28]
      break;
 800654c:	e2d5      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800654e:	4b59      	ldr	r3, [pc, #356]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655a:	d106      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006562:	d102      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8006564:	4b54      	ldr	r3, [pc, #336]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006566:	61fb      	str	r3, [r7, #28]
      break;
 8006568:	e2c7      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800656a:	4b52      	ldr	r3, [pc, #328]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	f040 82c0 	bne.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006580:	f040 82bb 	bne.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8006584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006588:	61fb      	str	r3, [r7, #28]
      break;
 800658a:	e2b6      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800658c:	4b49      	ldr	r3, [pc, #292]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006596:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 800659e:	f7ff fb13 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80065a2:	61f8      	str	r0, [r7, #28]
      break;
 80065a4:	e2ab      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ac:	d103      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 80065ae:	f7ff fa9d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80065b2:	61f8      	str	r0, [r7, #28]
      break;
 80065b4:	e2a3      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80065b6:	4b3f      	ldr	r3, [pc, #252]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c2:	d106      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ca:	d102      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 80065cc:	4b3a      	ldr	r3, [pc, #232]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065ce:	61fb      	str	r3, [r7, #28]
      break;
 80065d0:	e295      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80065d2:	4b38      	ldr	r3, [pc, #224]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	f040 828e 	bne.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065e8:	f040 8289 	bne.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 80065ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f0:	61fb      	str	r3, [r7, #28]
      break;
 80065f2:	e284      	b.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065f4:	4b2f      	ldr	r3, [pc, #188]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80065fe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006606:	f7ff fadf 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 800660a:	61f8      	str	r0, [r7, #28]
      break;
 800660c:	e279      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006614:	d103      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8006616:	f7ff fa69 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 800661a:	61f8      	str	r0, [r7, #28]
      break;
 800661c:	e271      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800661e:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662a:	f040 826a 	bne.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006634:	f040 8265 	bne.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 8006638:	4b1f      	ldr	r3, [pc, #124]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800663a:	61fb      	str	r3, [r7, #28]
      break;
 800663c:	e261      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800663e:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006648:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006650:	f7ff faba 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8006654:	61f8      	str	r0, [r7, #28]
      break;
 8006656:	e256      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800665e:	d103      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8006660:	f7ff fa44 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006664:	61f8      	str	r0, [r7, #28]
      break;
 8006666:	e24e      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006668:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006674:	f040 8247 	bne.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800667e:	f040 8242 	bne.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006684:	61fb      	str	r3, [r7, #28]
      break;
 8006686:	e23e      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006688:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006692:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800669a:	f7ff fa95 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 800669e:	61f8      	str	r0, [r7, #28]
      break;
 80066a0:	e233      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d108      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 80066aa:	f7ff fa1f 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80066ae:	61f8      	str	r0, [r7, #28]
      break;
 80066b0:	e22b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 80066b2:	bf00      	nop
 80066b4:	40021000 	.word	0x40021000
 80066b8:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80066bc:	4b9b      	ldr	r3, [pc, #620]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c8:	f040 821f 	bne.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d2:	f040 821a 	bne.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 80066d6:	4b96      	ldr	r3, [pc, #600]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80066d8:	61fb      	str	r3, [r7, #28]
      break;
 80066da:	e216      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066dc:	4b93      	ldr	r3, [pc, #588]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80066e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066ee:	f7ff fa6b 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80066f2:	61f8      	str	r0, [r7, #28]
      break;
 80066f4:	e20b      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80066f6:	4b8d      	ldr	r3, [pc, #564]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b02      	cmp	r3, #2
 8006702:	d107      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800670a:	d103      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 800670c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	e01e      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006714:	4b85      	ldr	r3, [pc, #532]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006720:	d106      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006728:	d102      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 800672a:	4b81      	ldr	r3, [pc, #516]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e010      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006730:	4b7e      	ldr	r3, [pc, #504]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	f040 81e7 	bne.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006746:	f040 81e2 	bne.w	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 800674a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800674e:	61fb      	str	r3, [r7, #28]
      break;
 8006750:	e1dd      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8006752:	e1dc      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006754:	4b75      	ldr	r3, [pc, #468]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800675e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006766:	f7ff f9c1 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 800676a:	61f8      	str	r0, [r7, #28]
      break;
 800676c:	e1d1      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006774:	d11b      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8006776:	4b6d      	ldr	r3, [pc, #436]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 81c7 	beq.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006784:	4b69      	ldr	r3, [pc, #420]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	fb03 f202 	mul.w	r2, r3, r2
 8006798:	4b64      	ldr	r3, [pc, #400]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	0d5b      	lsrs	r3, r3, #21
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	3301      	adds	r3, #1
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	61fb      	str	r3, [r7, #28]
      break;
 80067ac:	e1b1      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b4:	d102      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 80067b6:	4b5f      	ldr	r3, [pc, #380]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80067b8:	61fb      	str	r3, [r7, #28]
      break;
 80067ba:	e1aa      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 80067bc:	4b5b      	ldr	r3, [pc, #364]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c8:	f040 81a3 	bne.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067d2:	f040 819e 	bne.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 80067d6:	4b56      	ldr	r3, [pc, #344]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80067d8:	61fb      	str	r3, [r7, #28]
      break;
 80067da:	e19a      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067dc:	4b53      	ldr	r3, [pc, #332]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80067e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 80067ee:	f7ff f97d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80067f2:	61f8      	str	r0, [r7, #28]
      break;
 80067f4:	e18f      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067fc:	d11b      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80067fe:	4b4b      	ldr	r3, [pc, #300]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8185 	beq.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800680c:	4b47      	ldr	r3, [pc, #284]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006816:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	fb03 f202 	mul.w	r2, r3, r2
 8006820:	4b42      	ldr	r3, [pc, #264]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	0d5b      	lsrs	r3, r3, #21
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	3301      	adds	r3, #1
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006832:	61fb      	str	r3, [r7, #28]
      break;
 8006834:	e16f      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800683c:	d102      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 800683e:	4b3d      	ldr	r3, [pc, #244]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006840:	61fb      	str	r3, [r7, #28]
      break;
 8006842:	e168      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8006844:	4b39      	ldr	r3, [pc, #228]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006850:	f040 8161 	bne.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800685a:	f040 815c 	bne.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 800685e:	4b34      	ldr	r3, [pc, #208]	@ (8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006860:	61fb      	str	r3, [r7, #28]
      break;
 8006862:	e158      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006864:	4b31      	ldr	r3, [pc, #196]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800686e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006876:	d103      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006878:	f7ff f9a6 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 800687c:	61f8      	str	r0, [r7, #28]
      break;
 800687e:	e14c      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8006886:	4b2c      	ldr	r3, [pc, #176]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8006888:	61fb      	str	r3, [r7, #28]
      break;
 800688a:	e146      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006892:	f040 8142 	bne.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8006896:	4b25      	ldr	r3, [pc, #148]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 813b 	beq.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068a4:	4b21      	ldr	r3, [pc, #132]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ae:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	fb03 f202 	mul.w	r2, r3, r2
 80068b8:	4b1c      	ldr	r3, [pc, #112]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	0d5b      	lsrs	r3, r3, #21
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	3301      	adds	r3, #1
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	61fb      	str	r3, [r7, #28]
      break;
 80068cc:	e125      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80068ce:	4b17      	ldr	r3, [pc, #92]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068d8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068e0:	d114      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80068e2:	4b12      	ldr	r3, [pc, #72]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ec:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	fb03 f202 	mul.w	r2, r3, r2
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	0d5b      	lsrs	r3, r3, #21
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	3301      	adds	r3, #1
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	61fb      	str	r3, [r7, #28]
      break;
 800690a:	e108      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800690e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	f040 8101 	bne.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80fd 	bne.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 8006924:	4b05      	ldr	r3, [pc, #20]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006926:	61fb      	str	r3, [r7, #28]
      break;
 8006928:	e0f9      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000
 8006930:	00f42400 	.word	0x00f42400
 8006934:	00bb8000 	.word	0x00bb8000
 8006938:	016e3600 	.word	0x016e3600
 800693c:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006940:	4b7e      	ldr	r3, [pc, #504]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800694a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006952:	d114      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006954:	4b79      	ldr	r3, [pc, #484]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	fb03 f202 	mul.w	r2, r3, r2
 8006968:	4b74      	ldr	r3, [pc, #464]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	0d5b      	lsrs	r3, r3, #21
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	3301      	adds	r3, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	61fb      	str	r3, [r7, #28]
      break;
 800697c:	e0d1      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800697e:	4b6f      	ldr	r3, [pc, #444]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b02      	cmp	r3, #2
 800698a:	f040 80ca 	bne.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 80c6 	bne.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 8006996:	4b6a      	ldr	r3, [pc, #424]	@ (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 8006998:	61fb      	str	r3, [r7, #28]
      break;
 800699a:	e0c2      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800699c:	4b67      	ldr	r3, [pc, #412]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069a6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ae:	d129      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80069b0:	4b62      	ldr	r3, [pc, #392]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80b4 	beq.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069be:	4b5f      	ldr	r3, [pc, #380]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c8:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80069ca:	4b5c      	ldr	r3, [pc, #368]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	0edb      	lsrs	r3, r3, #27
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80069dc:	4b57      	ldr	r3, [pc, #348]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 80069e8:	2311      	movs	r3, #17
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e001      	b.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 80069ee:	2307      	movs	r3, #7
 80069f0:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	fb03 f202 	mul.w	r2, r3, r2
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	61fb      	str	r3, [r7, #28]
      break;
 8006a02:	e090      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a0a:	f040 808c 	bne.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7ff f86d 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006a12:	61f8      	str	r0, [r7, #28]
      break;
 8006a14:	e087      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8006a16:	4b49      	ldr	r3, [pc, #292]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a20:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a28:	d128      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8006a2a:	4b44      	ldr	r3, [pc, #272]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d079      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a36:	4b41      	ldr	r3, [pc, #260]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a40:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006a42:	4b3e      	ldr	r3, [pc, #248]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	0edb      	lsrs	r3, r3, #27
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006a54:	4b39      	ldr	r3, [pc, #228]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 8006a60:	2311      	movs	r3, #17
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e001      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 8006a66:	2307      	movs	r3, #7
 8006a68:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	fb03 f202 	mul.w	r2, r3, r2
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	61fb      	str	r3, [r7, #28]
      break;
 8006a7a:	e056      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a82:	d152      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 8006a84:	f7ff f832 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006a88:	61f8      	str	r0, [r7, #28]
      break;
 8006a8a:	e04e      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 8006a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a96:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a9e:	d114      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006aa0:	4b26      	ldr	r3, [pc, #152]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aaa:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	fb03 f202 	mul.w	r2, r3, r2
 8006ab4:	4b21      	ldr	r3, [pc, #132]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	0d5b      	lsrs	r3, r3, #21
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	61fb      	str	r3, [r7, #28]
      break;
 8006ac8:	e031      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8006ad4:	61fb      	str	r3, [r7, #28]
      break;
 8006ad6:	e02a      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d127      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006ade:	f7ff f805 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006ae2:	61f8      	str	r0, [r7, #28]
      break;
 8006ae4:	e023      	b.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e022      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006aea:	bf00      	nop
 8006aec:	e020      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006aee:	bf00      	nop
 8006af0:	e01e      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006af2:	bf00      	nop
 8006af4:	e01c      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006af6:	bf00      	nop
 8006af8:	e01a      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006afa:	bf00      	nop
 8006afc:	e018      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006afe:	bf00      	nop
 8006b00:	e016      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b02:	bf00      	nop
 8006b04:	e014      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b06:	bf00      	nop
 8006b08:	e012      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e010      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e00e      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b12:	bf00      	nop
 8006b14:	e00c      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b16:	bf00      	nop
 8006b18:	e00a      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e008      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8006b2e:	bf00      	nop
    }
  }

  return(frequency);
 8006b30:	69fb      	ldr	r3, [r7, #28]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	02dc6c00 	.word	0x02dc6c00
 8006b44:	00f42400 	.word	0x00f42400

08006b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e09d      	b.n	8006c96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b6a:	d009      	beq.n	8006b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61da      	str	r2, [r3, #28]
 8006b72:	e005      	b.n	8006b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa fc9a 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bc0:	d902      	bls.n	8006bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	e002      	b.n	8006bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006bd6:	d007      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2a:	ea42 0103 	orr.w	r1, r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	f003 0204 	and.w	r2, r3, #4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c64:	ea42 0103 	orr.w	r1, r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b088      	sub	sp, #32
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cae:	f7fb fa17 	bl	80020e0 <HAL_GetTick>
 8006cb2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e15c      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_SPI_Transmit+0x36>
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e154      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_SPI_Transmit+0x48>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e14d      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d38:	d10f      	bne.n	8006d5a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d007      	beq.n	8006d78 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d80:	d952      	bls.n	8006e28 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_SPI_Transmit+0xf2>
 8006d8a:	8b7b      	ldrh	r3, [r7, #26]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d145      	bne.n	8006e1c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	881a      	ldrh	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	1c9a      	adds	r2, r3, #2
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006db4:	e032      	b.n	8006e1c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d112      	bne.n	8006dea <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	881a      	ldrh	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006de8:	e018      	b.n	8006e1c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dea:	f7fb f979 	bl	80020e0 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d803      	bhi.n	8006e02 <HAL_SPI_Transmit+0x164>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d102      	bne.n	8006e08 <HAL_SPI_Transmit+0x16a>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0b2      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1c7      	bne.n	8006db6 <HAL_SPI_Transmit+0x118>
 8006e26:	e083      	b.n	8006f30 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_SPI_Transmit+0x198>
 8006e30:	8b7b      	ldrh	r3, [r7, #26]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d177      	bne.n	8006f26 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d912      	bls.n	8006e66 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	881a      	ldrh	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b02      	subs	r3, #2
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e64:	e05f      	b.n	8006f26 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e8c:	e04b      	b.n	8006f26 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d12b      	bne.n	8006ef4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d912      	bls.n	8006ecc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	881a      	ldrh	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b02      	subs	r3, #2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eca:	e02c      	b.n	8006f26 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ef2:	e018      	b.n	8006f26 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ef4:	f7fb f8f4 	bl	80020e0 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d803      	bhi.n	8006f0c <HAL_SPI_Transmit+0x26e>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d102      	bne.n	8006f12 <HAL_SPI_Transmit+0x274>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e02d      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1ae      	bne.n	8006e8e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f947 	bl	80071c8 <SPI_EndRxTxTransaction>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f9c:	f7fb f8a0 	bl	80020e0 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4413      	add	r3, r2
 8006faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fac:	f7fb f898 	bl	80020e0 <HAL_GetTick>
 8006fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fb2:	4b39      	ldr	r3, [pc, #228]	@ (8007098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	015b      	lsls	r3, r3, #5
 8006fb8:	0d1b      	lsrs	r3, r3, #20
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	fb02 f303 	mul.w	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fc2:	e054      	b.n	800706e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d050      	beq.n	800706e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fcc:	f7fb f888 	bl	80020e0 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d902      	bls.n	8006fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d13d      	bne.n	800705e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffa:	d111      	bne.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007004:	d004      	beq.n	8007010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700e:	d107      	bne.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800701e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007028:	d10f      	bne.n	800704a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e017      	b.n	800708e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	3b01      	subs	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d19b      	bne.n	8006fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3720      	adds	r7, #32
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000000 	.word	0x20000000

0800709c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80070ae:	f7fb f817 	bl	80020e0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80070be:	f7fb f80f 	bl	80020e0 <HAL_GetTick>
 80070c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070cc:	4b3d      	ldr	r3, [pc, #244]	@ (80071c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	00da      	lsls	r2, r3, #3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	0d1b      	lsrs	r3, r3, #20
 80070dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070de:	fb02 f303 	mul.w	r3, r2, r3
 80070e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070e4:	e060      	b.n	80071a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070ec:	d107      	bne.n	80070fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d050      	beq.n	80071a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007106:	f7fa ffeb 	bl	80020e0 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007112:	429a      	cmp	r2, r3
 8007114:	d902      	bls.n	800711c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d13d      	bne.n	8007198 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800712a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007134:	d111      	bne.n	800715a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800713e:	d004      	beq.n	800714a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007148:	d107      	bne.n	800715a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007158:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007162:	d10f      	bne.n	8007184 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007182:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e010      	b.n	80071ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d196      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3728      	adds	r7, #40	@ 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000000 	.word	0x20000000

080071c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff ff5b 	bl	800709c <SPI_WaitFifoStateUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f0:	f043 0220 	orr.w	r2, r3, #32
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e027      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	2180      	movs	r1, #128	@ 0x80
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fec0 	bl	8006f8c <SPI_WaitFlagStateUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e014      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff ff34 	bl	800709c <SPI_WaitFifoStateUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e000      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e042      	b.n	80072ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fa fd55 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2224      	movs	r2, #36	@ 0x24
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 ff60 	bl	8008164 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc61 	bl	8007b6c <UART_SetConfig>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e01b      	b.n	80072ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0201 	orr.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ffdf 	bl	80082a8 <UART_CheckIdleState>
 80072ea:	4603      	mov	r3, r0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	@ 0x28
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730a:	2b20      	cmp	r3, #32
 800730c:	d17b      	bne.n	8007406 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_UART_Transmit+0x26>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e074      	b.n	8007408 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2221      	movs	r2, #33	@ 0x21
 800732a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800732e:	f7fa fed7 	bl	80020e0 <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734c:	d108      	bne.n	8007360 <HAL_UART_Transmit+0x6c>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e003      	b.n	8007368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007368:	e030      	b.n	80073cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2200      	movs	r2, #0
 8007372:	2180      	movs	r1, #128	@ 0x80
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 f841 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e03d      	b.n	8007408 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	3302      	adds	r3, #2
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	e007      	b.n	80073ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1c8      	bne.n	800736a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	2140      	movs	r1, #64	@ 0x40
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 f80a 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e006      	b.n	8007408 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e000      	b.n	8007408 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	@ 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007424:	2b20      	cmp	r3, #32
 8007426:	d137      	bne.n	8007498 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_UART_Receive_IT+0x24>
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e030      	b.n	800749a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <HAL_UART_Receive_IT+0x94>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d01f      	beq.n	8007488 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d018      	beq.n	8007488 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	613b      	str	r3, [r7, #16]
   return(result);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	69f9      	ldr	r1, [r7, #28]
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	61bb      	str	r3, [r7, #24]
   return(result);
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e6      	bne.n	8007456 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	461a      	mov	r2, r3
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f001 f822 	bl	80084d8 <UART_Start_Receive_IT>
 8007494:	4603      	mov	r3, r0
 8007496:	e000      	b.n	800749a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3728      	adds	r7, #40	@ 0x28
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40008000 	.word	0x40008000

080074a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b0ba      	sub	sp, #232	@ 0xe8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80074d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80074d6:	4013      	ands	r3, r2
 80074d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80074dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d11b      	bne.n	800751c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d015      	beq.n	800751c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8300 	beq.w	8007b12 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      }
      return;
 800751a:	e2fa      	b.n	8007b12 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800751c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8123 	beq.w	800776c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007526:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800752a:	4b8d      	ldr	r3, [pc, #564]	@ (8007760 <HAL_UART_IRQHandler+0x2b8>)
 800752c:	4013      	ands	r3, r2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007536:	4b8b      	ldr	r3, [pc, #556]	@ (8007764 <HAL_UART_IRQHandler+0x2bc>)
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8116 	beq.w	800776c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d011      	beq.n	8007570 <HAL_UART_IRQHandler+0xc8>
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2201      	movs	r2, #1
 800755e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007566:	f043 0201 	orr.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d011      	beq.n	80075a0 <HAL_UART_IRQHandler+0xf8>
 800757c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2202      	movs	r2, #2
 800758e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007596:	f043 0204 	orr.w	r2, r3, #4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d011      	beq.n	80075d0 <HAL_UART_IRQHandler+0x128>
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2204      	movs	r2, #4
 80075be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c6:	f043 0202 	orr.w	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d017      	beq.n	800760c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d105      	bne.n	80075f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007760 <HAL_UART_IRQHandler+0x2b8>)
 80075ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2208      	movs	r2, #8
 80075fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007602:	f043 0208 	orr.w	r2, r3, #8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007614:	2b00      	cmp	r3, #0
 8007616:	d012      	beq.n	800763e <HAL_UART_IRQHandler+0x196>
 8007618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800761c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800762c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007634:	f043 0220 	orr.w	r2, r3, #32
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8266 	beq.w	8007b16 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d013      	beq.n	800767e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007684:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007692:	2b40      	cmp	r3, #64	@ 0x40
 8007694:	d005      	beq.n	80076a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800769a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d054      	beq.n	800774c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 f83a 	bl	800871c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b2:	2b40      	cmp	r3, #64	@ 0x40
 80076b4:	d146      	bne.n	8007744 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80076e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80076e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80076ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1d9      	bne.n	80076b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007712:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <HAL_UART_IRQHandler+0x2c0>)
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800771c:	4618      	mov	r0, r3
 800771e:	f7fa ff1e 	bl	800255e <HAL_DMA_Abort_IT>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d019      	beq.n	800775c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800772e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007736:	4610      	mov	r0, r2
 8007738:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773a:	e00f      	b.n	800775c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9ff 	bl	8007b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	e00b      	b.n	800775c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9fb 	bl	8007b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774a:	e007      	b.n	800775c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f9f7 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800775a:	e1dc      	b.n	8007b16 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	bf00      	nop
    return;
 800775e:	e1da      	b.n	8007b16 <HAL_UART_IRQHandler+0x66e>
 8007760:	10000001 	.word	0x10000001
 8007764:	04000120 	.word	0x04000120
 8007768:	080087e9 	.word	0x080087e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	f040 8170 	bne.w	8007a56 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 8169 	beq.w	8007a56 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8162 	beq.w	8007a56 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2210      	movs	r2, #16
 8007798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a4:	2b40      	cmp	r3, #64	@ 0x40
 80077a6:	f040 80d8 	bne.w	800795a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80af 	beq.w	8007920 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077cc:	429a      	cmp	r2, r3
 80077ce:	f080 80a7 	bcs.w	8007920 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 8087 	bne.w	80078fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007804:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800780c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800781a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800781e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007826:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1da      	bne.n	80077f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800784a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800785e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007862:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007866:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e1      	bne.n	800783a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800789a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800789c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e3      	bne.n	8007876 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078cc:	f023 0310 	bic.w	r3, r3, #16
 80078d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e4      	bne.n	80078bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fa fdd7 	bl	80024ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007910:	b29b      	uxth	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	b29b      	uxth	r3, r3
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f91b 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800791e:	e0fc      	b.n	8007b1a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792a:	429a      	cmp	r2, r3
 800792c:	f040 80f5 	bne.w	8007b1a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	f040 80eb 	bne.w	8007b1a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8fe 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
      return;
 8007958:	e0df      	b.n	8007b1a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007966:	b29b      	uxth	r3, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80d1 	beq.w	8007b1e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800797c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80cc 	beq.w	8007b1e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800799a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e4      	bne.n	8007986 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	623b      	str	r3, [r7, #32]
   return(result);
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80079e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e1      	bne.n	80079bc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f023 0310 	bic.w	r3, r3, #16
 8007a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	69b9      	ldr	r1, [r7, #24]
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e4      	bne.n	8007a0c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f880 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a54:	e063      	b.n	8007b1e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <HAL_UART_IRQHandler+0x5d8>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fc13 	bl	80092a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a7e:	e051      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d014      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03a      	beq.n	8007b22 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
    }
    return;
 8007ab4:	e035      	b.n	8007b22 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x62e>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fe9c 	bl	800880c <UART_EndTransmit_IT>
    return;
 8007ad4:	e026      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_UART_IRQHandler+0x64e>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fbec 	bl	80092cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af4:	e016      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_UART_IRQHandler+0x67c>
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da0c      	bge.n	8007b24 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fbd4 	bl	80092b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b10:	e008      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
      return;
 8007b12:	bf00      	nop
 8007b14:	e006      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
    return;
 8007b16:	bf00      	nop
 8007b18:	e004      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
      return;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
      return;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <HAL_UART_IRQHandler+0x67c>
    return;
 8007b22:	bf00      	nop
  }
}
 8007b24:	37e8      	adds	r7, #232	@ 0xe8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop

08007b2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b70:	b08c      	sub	sp, #48	@ 0x30
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4baa      	ldr	r3, [pc, #680]	@ (8007e44 <UART_SetConfig+0x2d8>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a9f      	ldr	r2, [pc, #636]	@ (8007e48 <UART_SetConfig+0x2dc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007be2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf6:	f023 010f 	bic.w	r1, r3, #15
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a90      	ldr	r2, [pc, #576]	@ (8007e4c <UART_SetConfig+0x2e0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d125      	bne.n	8007c5c <UART_SetConfig+0xf0>
 8007c10:	4b8f      	ldr	r3, [pc, #572]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d81a      	bhi.n	8007c54 <UART_SetConfig+0xe8>
 8007c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <UART_SetConfig+0xb8>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c45 	.word	0x08007c45
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	e116      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	e112      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007c44:	2304      	movs	r3, #4
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e10e      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e10a      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e106      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a7c      	ldr	r2, [pc, #496]	@ (8007e54 <UART_SetConfig+0x2e8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d138      	bne.n	8007cd8 <UART_SetConfig+0x16c>
 8007c66:	4b7a      	ldr	r3, [pc, #488]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	f003 030c 	and.w	r3, r3, #12
 8007c70:	2b0c      	cmp	r3, #12
 8007c72:	d82d      	bhi.n	8007cd0 <UART_SetConfig+0x164>
 8007c74:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <UART_SetConfig+0x110>)
 8007c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7a:	bf00      	nop
 8007c7c:	08007cb1 	.word	0x08007cb1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cc1 	.word	0x08007cc1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cc9 	.word	0x08007cc9
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb6:	e0d8      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cbe:	e0d4      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	e0d0      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007cc8:	2308      	movs	r3, #8
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e0cc      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e0c8      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8007e58 <UART_SetConfig+0x2ec>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d125      	bne.n	8007d2e <UART_SetConfig+0x1c2>
 8007ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cec:	2b30      	cmp	r3, #48	@ 0x30
 8007cee:	d016      	beq.n	8007d1e <UART_SetConfig+0x1b2>
 8007cf0:	2b30      	cmp	r3, #48	@ 0x30
 8007cf2:	d818      	bhi.n	8007d26 <UART_SetConfig+0x1ba>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d00a      	beq.n	8007d0e <UART_SetConfig+0x1a2>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d814      	bhi.n	8007d26 <UART_SetConfig+0x1ba>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <UART_SetConfig+0x19a>
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d008      	beq.n	8007d16 <UART_SetConfig+0x1aa>
 8007d04:	e00f      	b.n	8007d26 <UART_SetConfig+0x1ba>
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d0c:	e0ad      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d14:	e0a9      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d16:	2304      	movs	r3, #4
 8007d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1c:	e0a5      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d1e:	2308      	movs	r3, #8
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d24:	e0a1      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d26:	2310      	movs	r3, #16
 8007d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2c:	e09d      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a4a      	ldr	r2, [pc, #296]	@ (8007e5c <UART_SetConfig+0x2f0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d125      	bne.n	8007d84 <UART_SetConfig+0x218>
 8007d38:	4b45      	ldr	r3, [pc, #276]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d44:	d016      	beq.n	8007d74 <UART_SetConfig+0x208>
 8007d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d48:	d818      	bhi.n	8007d7c <UART_SetConfig+0x210>
 8007d4a:	2b80      	cmp	r3, #128	@ 0x80
 8007d4c:	d00a      	beq.n	8007d64 <UART_SetConfig+0x1f8>
 8007d4e:	2b80      	cmp	r3, #128	@ 0x80
 8007d50:	d814      	bhi.n	8007d7c <UART_SetConfig+0x210>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <UART_SetConfig+0x1f0>
 8007d56:	2b40      	cmp	r3, #64	@ 0x40
 8007d58:	d008      	beq.n	8007d6c <UART_SetConfig+0x200>
 8007d5a:	e00f      	b.n	8007d7c <UART_SetConfig+0x210>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d62:	e082      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6a:	e07e      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d72:	e07a      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d74:	2308      	movs	r3, #8
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7a:	e076      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d82:	e072      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a35      	ldr	r2, [pc, #212]	@ (8007e60 <UART_SetConfig+0x2f4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d12a      	bne.n	8007de4 <UART_SetConfig+0x278>
 8007d8e:	4b30      	ldr	r3, [pc, #192]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d9c:	d01a      	beq.n	8007dd4 <UART_SetConfig+0x268>
 8007d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da2:	d81b      	bhi.n	8007ddc <UART_SetConfig+0x270>
 8007da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da8:	d00c      	beq.n	8007dc4 <UART_SetConfig+0x258>
 8007daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dae:	d815      	bhi.n	8007ddc <UART_SetConfig+0x270>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <UART_SetConfig+0x250>
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007db8:	d008      	beq.n	8007dcc <UART_SetConfig+0x260>
 8007dba:	e00f      	b.n	8007ddc <UART_SetConfig+0x270>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc2:	e052      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e04e      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e04a      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	e046      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de2:	e042      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a17      	ldr	r2, [pc, #92]	@ (8007e48 <UART_SetConfig+0x2dc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d13a      	bne.n	8007e64 <UART_SetConfig+0x2f8>
 8007dee:	4b18      	ldr	r3, [pc, #96]	@ (8007e50 <UART_SetConfig+0x2e4>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dfc:	d01a      	beq.n	8007e34 <UART_SetConfig+0x2c8>
 8007dfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e02:	d81b      	bhi.n	8007e3c <UART_SetConfig+0x2d0>
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e08:	d00c      	beq.n	8007e24 <UART_SetConfig+0x2b8>
 8007e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e0e:	d815      	bhi.n	8007e3c <UART_SetConfig+0x2d0>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <UART_SetConfig+0x2b0>
 8007e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e18:	d008      	beq.n	8007e2c <UART_SetConfig+0x2c0>
 8007e1a:	e00f      	b.n	8007e3c <UART_SetConfig+0x2d0>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	e022      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e01e      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e01a      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3a:	e016      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	e012      	b.n	8007e6a <UART_SetConfig+0x2fe>
 8007e44:	cfff69f3 	.word	0xcfff69f3
 8007e48:	40008000 	.word	0x40008000
 8007e4c:	40013800 	.word	0x40013800
 8007e50:	40021000 	.word	0x40021000
 8007e54:	40004400 	.word	0x40004400
 8007e58:	40004800 	.word	0x40004800
 8007e5c:	40004c00 	.word	0x40004c00
 8007e60:	40005000 	.word	0x40005000
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4aae      	ldr	r2, [pc, #696]	@ (8008128 <UART_SetConfig+0x5bc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	f040 8097 	bne.w	8007fa4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d823      	bhi.n	8007ec6 <UART_SetConfig+0x35a>
 8007e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <UART_SetConfig+0x318>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ec7 	.word	0x08007ec7
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007eb7 	.word	0x08007eb7
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ec7 	.word	0x08007ec7
 8007ea0:	08007ec7 	.word	0x08007ec7
 8007ea4:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea8:	f7fd fe8e 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8007eac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b9e      	ldr	r3, [pc, #632]	@ (800812c <UART_SetConfig+0x5c0>)
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fd fe19 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8007eba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8130 	beq.w	800813a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	4a94      	ldr	r2, [pc, #592]	@ (8008130 <UART_SetConfig+0x5c4>)
 8007ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	4413      	add	r3, r2
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d305      	bcc.n	8007f0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d903      	bls.n	8007f12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f10:	e113      	b.n	800813a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	2200      	movs	r2, #0
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	60fa      	str	r2, [r7, #12]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	4a84      	ldr	r2, [pc, #528]	@ (8008130 <UART_SetConfig+0x5c4>)
 8007f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2200      	movs	r2, #0
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f34:	f7f8 f970 	bl	8000218 <__aeabi_uldivmod>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	020b      	lsls	r3, r1, #8
 8007f4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f4e:	0202      	lsls	r2, r0, #8
 8007f50:	6979      	ldr	r1, [r7, #20]
 8007f52:	6849      	ldr	r1, [r1, #4]
 8007f54:	0849      	lsrs	r1, r1, #1
 8007f56:	2000      	movs	r0, #0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	eb12 0804 	adds.w	r8, r2, r4
 8007f60:	eb43 0905 	adc.w	r9, r3, r5
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	469a      	mov	sl, r3
 8007f6c:	4693      	mov	fp, r2
 8007f6e:	4652      	mov	r2, sl
 8007f70:	465b      	mov	r3, fp
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 f94f 	bl	8000218 <__aeabi_uldivmod>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4613      	mov	r3, r2
 8007f80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f88:	d308      	bcc.n	8007f9c <UART_SetConfig+0x430>
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f90:	d204      	bcs.n	8007f9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a3a      	ldr	r2, [r7, #32]
 8007f98:	60da      	str	r2, [r3, #12]
 8007f9a:	e0ce      	b.n	800813a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fa2:	e0ca      	b.n	800813a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fac:	d166      	bne.n	800807c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007fae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fb2:	2b08      	cmp	r3, #8
 8007fb4:	d827      	bhi.n	8008006 <UART_SetConfig+0x49a>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x450>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fe9 	.word	0x08007fe9
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	08008007 	.word	0x08008007
 8007fcc:	08007ff7 	.word	0x08007ff7
 8007fd0:	08008007 	.word	0x08008007
 8007fd4:	08008007 	.word	0x08008007
 8007fd8:	08008007 	.word	0x08008007
 8007fdc:	08007fff 	.word	0x08007fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe0:	f7fd fdf2 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fe6:	e014      	b.n	8008012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe8:	f7fd fe04 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 8007fec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fee:	e010      	b.n	8008012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff0:	4b4e      	ldr	r3, [pc, #312]	@ (800812c <UART_SetConfig+0x5c0>)
 8007ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ff4:	e00d      	b.n	8008012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff6:	f7fd fd79 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8007ffa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ffc:	e009      	b.n	8008012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008004:	e005      	b.n	8008012 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8090 	beq.w	800813a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801e:	4a44      	ldr	r2, [pc, #272]	@ (8008130 <UART_SetConfig+0x5c4>)
 8008020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008024:	461a      	mov	r2, r3
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	fbb3 f3f2 	udiv	r3, r3, r2
 800802c:	005a      	lsls	r2, r3, #1
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	441a      	add	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d916      	bls.n	8008074 <UART_SetConfig+0x508>
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800804c:	d212      	bcs.n	8008074 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f023 030f 	bic.w	r3, r3, #15
 8008056:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	b29b      	uxth	r3, r3
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	b29a      	uxth	r2, r3
 8008064:	8bfb      	ldrh	r3, [r7, #30]
 8008066:	4313      	orrs	r3, r2
 8008068:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	8bfa      	ldrh	r2, [r7, #30]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e062      	b.n	800813a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800807a:	e05e      	b.n	800813a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800807c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008080:	2b08      	cmp	r3, #8
 8008082:	d828      	bhi.n	80080d6 <UART_SetConfig+0x56a>
 8008084:	a201      	add	r2, pc, #4	@ (adr r2, 800808c <UART_SetConfig+0x520>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	080080d7 	.word	0x080080d7
 800809c:	080080c7 	.word	0x080080c7
 80080a0:	080080d7 	.word	0x080080d7
 80080a4:	080080d7 	.word	0x080080d7
 80080a8:	080080d7 	.word	0x080080d7
 80080ac:	080080cf 	.word	0x080080cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b0:	f7fd fd8a 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80080b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080b6:	e014      	b.n	80080e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b8:	f7fd fd9c 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80080bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080be:	e010      	b.n	80080e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c0:	4b1a      	ldr	r3, [pc, #104]	@ (800812c <UART_SetConfig+0x5c0>)
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080c4:	e00d      	b.n	80080e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080c6:	f7fd fd11 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80080ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080cc:	e009      	b.n	80080e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d4:	e005      	b.n	80080e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080e0:	bf00      	nop
    }

    if (pclk != 0U)
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d028      	beq.n	800813a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	4a10      	ldr	r2, [pc, #64]	@ (8008130 <UART_SetConfig+0x5c4>)
 80080ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	441a      	add	r2, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	2b0f      	cmp	r3, #15
 8008110:	d910      	bls.n	8008134 <UART_SetConfig+0x5c8>
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008118:	d20c      	bcs.n	8008134 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	b29a      	uxth	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60da      	str	r2, [r3, #12]
 8008124:	e009      	b.n	800813a <UART_SetConfig+0x5ce>
 8008126:	bf00      	nop
 8008128:	40008000 	.word	0x40008000
 800812c:	00f42400 	.word	0x00f42400
 8008130:	0800d54c 	.word	0x0800d54c
      }
      else
      {
        ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2201      	movs	r2, #1
 800813e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2201      	movs	r2, #1
 8008146:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2200      	movs	r2, #0
 800814e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2200      	movs	r2, #0
 8008154:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008156:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800815a:	4618      	mov	r0, r3
 800815c:	3730      	adds	r7, #48	@ 0x30
 800815e:	46bd      	mov	sp, r7
 8008160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01a      	beq.n	800827a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008262:	d10a      	bne.n	800827a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b098      	sub	sp, #96	@ 0x60
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082b8:	f7f9 ff12 	bl	80020e0 <HAL_GetTick>
 80082bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0308 	and.w	r3, r3, #8
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d12f      	bne.n	800832c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d4:	2200      	movs	r2, #0
 80082d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f88e 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d022      	beq.n	800832c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008304:	647b      	str	r3, [r7, #68]	@ 0x44
 8008306:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800830a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e063      	b.n	80083f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b04      	cmp	r3, #4
 8008338:	d149      	bne.n	80083ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800833a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008342:	2200      	movs	r2, #0
 8008344:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f857 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d03c      	beq.n	80083ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	623b      	str	r3, [r7, #32]
   return(result);
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008372:	633b      	str	r3, [r7, #48]	@ 0x30
 8008374:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	60fb      	str	r3, [r7, #12]
   return(result);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f023 0301 	bic.w	r3, r3, #1
 800839c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3308      	adds	r3, #8
 80083a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083a6:	61fa      	str	r2, [r7, #28]
 80083a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	69b9      	ldr	r1, [r7, #24]
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	617b      	str	r3, [r7, #20]
   return(result);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e012      	b.n	80083f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3758      	adds	r7, #88	@ 0x58
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840c:	e04f      	b.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d04b      	beq.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008416:	f7f9 fe63 	bl	80020e0 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	429a      	cmp	r2, r3
 8008424:	d302      	bcc.n	800842c <UART_WaitOnFlagUntilTimeout+0x30>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e04e      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	d037      	beq.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d034      	beq.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b40      	cmp	r3, #64	@ 0x40
 8008448:	d031      	beq.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	2b08      	cmp	r3, #8
 8008456:	d110      	bne.n	800847a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2208      	movs	r2, #8
 800845e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f95b 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2208      	movs	r2, #8
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e029      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008488:	d111      	bne.n	80084ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f941 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e00f      	b.n	80084ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69da      	ldr	r2, [r3, #28]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4013      	ands	r3, r2
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	bf0c      	ite	eq
 80084be:	2301      	moveq	r3, #1
 80084c0:	2300      	movne	r3, #0
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d0a0      	beq.n	800840e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d8:	b480      	push	{r7}
 80084da:	b0a3      	sub	sp, #140	@ 0x8c
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	88fa      	ldrh	r2, [r7, #6]
 80084f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800850a:	d10e      	bne.n	800852a <UART_Start_Receive_IT+0x52>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <UART_Start_Receive_IT+0x48>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800851a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800851e:	e02d      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	22ff      	movs	r2, #255	@ 0xff
 8008524:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008528:	e028      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <UART_Start_Receive_IT+0x76>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <UART_Start_Receive_IT+0x6c>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	22ff      	movs	r2, #255	@ 0xff
 800853e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008542:	e01b      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	227f      	movs	r2, #127	@ 0x7f
 8008548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800854c:	e016      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008556:	d10d      	bne.n	8008574 <UART_Start_Receive_IT+0x9c>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <UART_Start_Receive_IT+0x92>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	227f      	movs	r2, #127	@ 0x7f
 8008564:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008568:	e008      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	223f      	movs	r2, #63	@ 0x3f
 800856e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008572:	e003      	b.n	800857c <UART_Start_Receive_IT+0xa4>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2222      	movs	r2, #34	@ 0x22
 8008588:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800859c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80085b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80085b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80085b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80085be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e3      	bne.n	800858c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085cc:	d14f      	bne.n	800866e <UART_Start_Receive_IT+0x196>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d349      	bcc.n	800866e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e2:	d107      	bne.n	80085f4 <UART_Start_Receive_IT+0x11c>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a47      	ldr	r2, [pc, #284]	@ (800870c <UART_Start_Receive_IT+0x234>)
 80085f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80085f2:	e002      	b.n	80085fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4a46      	ldr	r2, [pc, #280]	@ (8008710 <UART_Start_Receive_IT+0x238>)
 80085f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01a      	beq.n	8008638 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008626:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800862a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e4      	bne.n	8008602 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008658:	64ba      	str	r2, [r7, #72]	@ 0x48
 800865a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800865e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e5      	bne.n	8008638 <UART_Start_Receive_IT+0x160>
 800866c:	e046      	b.n	80086fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008676:	d107      	bne.n	8008688 <UART_Start_Receive_IT+0x1b0>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d103      	bne.n	8008688 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a24      	ldr	r2, [pc, #144]	@ (8008714 <UART_Start_Receive_IT+0x23c>)
 8008684:	675a      	str	r2, [r3, #116]	@ 0x74
 8008686:	e002      	b.n	800868e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a23      	ldr	r2, [pc, #140]	@ (8008718 <UART_Start_Receive_IT+0x240>)
 800868c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d019      	beq.n	80086ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80086aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e6      	bne.n	8008696 <UART_Start_Receive_IT+0x1be>
 80086c8:	e018      	b.n	80086fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	613b      	str	r3, [r7, #16]
   return(result);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	f043 0320 	orr.w	r3, r3, #32
 80086de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086e8:	623b      	str	r3, [r7, #32]
 80086ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	69f9      	ldr	r1, [r7, #28]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	378c      	adds	r7, #140	@ 0x8c
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	08008f39 	.word	0x08008f39
 8008710:	08008bd5 	.word	0x08008bd5
 8008714:	08008a1d 	.word	0x08008a1d
 8008718:	08008865 	.word	0x08008865

0800871c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b095      	sub	sp, #84	@ 0x54
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008742:	643b      	str	r3, [r7, #64]	@ 0x40
 8008744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e6      	bne.n	8008724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800877a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800877c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d118      	bne.n	80087c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f023 0310 	bic.w	r3, r3, #16
 80087aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6979      	ldr	r1, [r7, #20]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	613b      	str	r3, [r7, #16]
   return(result);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087dc:	bf00      	nop
 80087de:	3754      	adds	r7, #84	@ 0x54
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff f99e 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60bb      	str	r3, [r7, #8]
   return(result);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	613b      	str	r3, [r7, #16]
   return(result);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff f969 	bl	8007b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b09c      	sub	sp, #112	@ 0x70
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800887c:	2b22      	cmp	r3, #34	@ 0x22
 800887e:	f040 80be 	bne.w	80089fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800888c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008890:	b2d9      	uxtb	r1, r3
 8008892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008896:	b2da      	uxtb	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800889c:	400a      	ands	r2, r1
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 80a1 	bne.w	8008a0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e6      	bne.n	80088cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	667b      	str	r3, [r7, #100]	@ 0x64
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800891e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008920:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800892c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e5      	bne.n	80088fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <UART_RxISR_8BIT+0x1b4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d01f      	beq.n	8008990 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d018      	beq.n	8008990 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	623b      	str	r3, [r7, #32]
   return(result);
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008972:	663b      	str	r3, [r7, #96]	@ 0x60
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800897c:	633b      	str	r3, [r7, #48]	@ 0x30
 800897e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008994:	2b01      	cmp	r3, #1
 8008996:	d12e      	bne.n	80089f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	69b9      	ldr	r1, [r7, #24]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b10      	cmp	r3, #16
 80089dc:	d103      	bne.n	80089e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2210      	movs	r2, #16
 80089e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff f8b0 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089f4:	e00b      	b.n	8008a0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7f8 f934 	bl	8000c64 <HAL_UART_RxCpltCallback>
}
 80089fc:	e007      	b.n	8008a0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f042 0208 	orr.w	r2, r2, #8
 8008a0c:	619a      	str	r2, [r3, #24]
}
 8008a0e:	bf00      	nop
 8008a10:	3770      	adds	r7, #112	@ 0x70
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40008000 	.word	0x40008000

08008a1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b09c      	sub	sp, #112	@ 0x70
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a34:	2b22      	cmp	r3, #34	@ 0x22
 8008a36:	f040 80be 	bne.w	8008bb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a52:	4013      	ands	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5e:	1c9a      	adds	r2, r3, #2
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f040 80a1 	bne.w	8008bc6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aa4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e5      	bne.n	8008ab6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a33      	ldr	r2, [pc, #204]	@ (8008bd0 <UART_RxISR_16BIT+0x1b4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d01f      	beq.n	8008b48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d018      	beq.n	8008b48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e6      	bne.n	8008b16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d12e      	bne.n	8008bae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f023 0310 	bic.w	r3, r3, #16
 8008b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b74:	61bb      	str	r3, [r7, #24]
 8008b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6979      	ldr	r1, [r7, #20]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	613b      	str	r3, [r7, #16]
   return(result);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e6      	bne.n	8008b56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	2b10      	cmp	r3, #16
 8008b94:	d103      	bne.n	8008b9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2210      	movs	r2, #16
 8008b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7fe ffd4 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bac:	e00b      	b.n	8008bc6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7f8 f858 	bl	8000c64 <HAL_UART_RxCpltCallback>
}
 8008bb4:	e007      	b.n	8008bc6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	699a      	ldr	r2, [r3, #24]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0208 	orr.w	r2, r2, #8
 8008bc4:	619a      	str	r2, [r3, #24]
}
 8008bc6:	bf00      	nop
 8008bc8:	3770      	adds	r7, #112	@ 0x70
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40008000 	.word	0x40008000

08008bd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b0ac      	sub	sp, #176	@ 0xb0
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008be2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c0a:	2b22      	cmp	r3, #34	@ 0x22
 8008c0c:	f040 8183 	bne.w	8008f16 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c16:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c1a:	e126      	b.n	8008e6a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c22:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008c2a:	b2d9      	uxtb	r1, r3
 8008c2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c36:	400a      	ands	r2, r1
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d053      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d011      	beq.n	8008c9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c94:	f043 0201 	orr.w	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d011      	beq.n	8008cce <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00b      	beq.n	8008cce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cc4:	f043 0204 	orr.w	r2, r3, #4
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d011      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2204      	movs	r2, #4
 8008cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf4:	f043 0202 	orr.w	r2, r3, #2
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d006      	beq.n	8008d16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fe ff19 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f040 80a3 	bne.w	8008e6a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d48:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008d4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e4      	bne.n	8008d24 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d82:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008d84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e1      	bne.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a60      	ldr	r2, [pc, #384]	@ (8008f30 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d021      	beq.n	8008df8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01a      	beq.n	8008df8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008de4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008de6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e4      	bne.n	8008dc2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d130      	bne.n	8008e62 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e16:	f023 0310 	bic.w	r3, r3, #16
 8008e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e4      	bne.n	8008e06 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d103      	bne.n	8008e52 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fe fe7a 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008e60:	e00e      	b.n	8008e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7f7 fefe 	bl	8000c64 <HAL_UART_RxCpltCallback>
        break;
 8008e68:	e00a      	b.n	8008e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e6a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d006      	beq.n	8008e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f47f aece 	bne.w	8008c1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e86:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d049      	beq.n	8008f26 <UART_RxISR_8BIT_FIFOEN+0x352>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e98:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d242      	bcs.n	8008f26 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e3      	bne.n	8008ea0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a16      	ldr	r2, [pc, #88]	@ (8008f34 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008edc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f043 0320 	orr.w	r3, r3, #32
 8008ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f00:	61bb      	str	r3, [r7, #24]
 8008f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	6979      	ldr	r1, [r7, #20]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e4      	bne.n	8008ede <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f14:	e007      	b.n	8008f26 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	699a      	ldr	r2, [r3, #24]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f042 0208 	orr.w	r2, r2, #8
 8008f24:	619a      	str	r2, [r3, #24]
}
 8008f26:	bf00      	nop
 8008f28:	37b0      	adds	r7, #176	@ 0xb0
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	40008000 	.word	0x40008000
 8008f34:	08008865 	.word	0x08008865

08008f38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b0ae      	sub	sp, #184	@ 0xb8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f46:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f6e:	2b22      	cmp	r3, #34	@ 0x22
 8008f70:	f040 8187 	bne.w	8009282 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f7a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f7e:	e12a      	b.n	80091d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f92:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f96:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa8:	1c9a      	adds	r2, r3, #2
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d053      	beq.n	800907e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d011      	beq.n	8009006 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ffc:	f043 0201 	orr.w	r2, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009006:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d011      	beq.n	8009036 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2202      	movs	r2, #2
 8009024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800902c:	f043 0204 	orr.w	r2, r3, #4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2204      	movs	r2, #4
 8009054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905c:	f043 0202 	orr.w	r2, r3, #2
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7fe fd65 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 80a5 	bne.w	80091d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800909a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800909c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e2      	bne.n	800908c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3308      	adds	r3, #8
 80090ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80090ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e1      	bne.n	80090c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a60      	ldr	r2, [pc, #384]	@ (800929c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d021      	beq.n	8009164 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01a      	beq.n	8009164 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800913c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800913e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009152:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800915e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e4      	bne.n	800912e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d130      	bne.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009182:	f023 0310 	bic.w	r3, r3, #16
 8009186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009194:	647b      	str	r3, [r7, #68]	@ 0x44
 8009196:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800919a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e4      	bne.n	8009172 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d103      	bne.n	80091be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2210      	movs	r2, #16
 80091bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7fe fcc4 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80091cc:	e00e      	b.n	80091ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f7 fd48 	bl	8000c64 <HAL_UART_RxCpltCallback>
        break;
 80091d4:	e00a      	b.n	80091ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d006      	beq.n	80091ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80091de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f47f aeca 	bne.w	8008f80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d049      	beq.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009204:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009208:	429a      	cmp	r2, r3
 800920a:	d242      	bcs.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	623b      	str	r3, [r7, #32]
   return(result);
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009230:	633a      	str	r2, [r7, #48]	@ 0x30
 8009232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e3      	bne.n	800920c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009248:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60fb      	str	r3, [r7, #12]
   return(result);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	69b9      	ldr	r1, [r7, #24]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	617b      	str	r3, [r7, #20]
   return(result);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e4      	bne.n	800924a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009280:	e007      	b.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0208 	orr.w	r2, r2, #8
 8009290:	619a      	str	r2, [r3, #24]
}
 8009292:	bf00      	nop
 8009294:	37b8      	adds	r7, #184	@ 0xb8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40008000 	.word	0x40008000
 80092a0:	08008a1d 	.word	0x08008a1d

080092a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e027      	b.n	8009346 <HAL_UARTEx_DisableFifoMode+0x66>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2224      	movs	r2, #36	@ 0x24
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009366:	2302      	movs	r3, #2
 8009368:	e02d      	b.n	80093c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2224      	movs	r2, #36	@ 0x24
 8009376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f850 	bl	800944c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e02d      	b.n	8009442 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2224      	movs	r2, #36	@ 0x24
 80093f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f812 	bl	800944c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009458:	2b00      	cmp	r3, #0
 800945a:	d108      	bne.n	800946e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800946c:	e031      	b.n	80094d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800946e:	2308      	movs	r3, #8
 8009470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009472:	2308      	movs	r3, #8
 8009474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	0e5b      	lsrs	r3, r3, #25
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	0f5b      	lsrs	r3, r3, #29
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	7b3a      	ldrb	r2, [r7, #12]
 800949a:	4911      	ldr	r1, [pc, #68]	@ (80094e0 <UARTEx_SetNbDataToProcess+0x94>)
 800949c:	5c8a      	ldrb	r2, [r1, r2]
 800949e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094a2:	7b3a      	ldrb	r2, [r7, #12]
 80094a4:	490f      	ldr	r1, [pc, #60]	@ (80094e4 <UARTEx_SetNbDataToProcess+0x98>)
 80094a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	7b7a      	ldrb	r2, [r7, #13]
 80094b8:	4909      	ldr	r1, [pc, #36]	@ (80094e0 <UARTEx_SetNbDataToProcess+0x94>)
 80094ba:	5c8a      	ldrb	r2, [r1, r2]
 80094bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094c0:	7b7a      	ldrb	r2, [r7, #13]
 80094c2:	4908      	ldr	r1, [pc, #32]	@ (80094e4 <UARTEx_SetNbDataToProcess+0x98>)
 80094c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	0800d564 	.word	0x0800d564
 80094e4:	0800d56c 	.word	0x0800d56c

080094e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80094f8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80094fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009516:	b480      	push	{r7}
 8009518:	b085      	sub	sp, #20
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800951e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009522:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	b29b      	uxth	r3, r3
 8009530:	43db      	mvns	r3, r3
 8009532:	b29b      	uxth	r3, r3
 8009534:	4013      	ands	r3, r2
 8009536:	b29a      	uxth	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	1d3b      	adds	r3, r7, #4
 8009556:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009588:	b480      	push	{r7}
 800958a:	b0a7      	sub	sp, #156	@ 0x9c
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80095aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ae:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	78db      	ldrb	r3, [r3, #3]
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d81f      	bhi.n	80095fa <USB_ActivateEndpoint+0x72>
 80095ba:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <USB_ActivateEndpoint+0x38>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	080095ed 	.word	0x080095ed
 80095c8:	08009603 	.word	0x08009603
 80095cc:	080095df 	.word	0x080095df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80095d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80095d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80095d8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80095dc:	e012      	b.n	8009604 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80095de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80095e2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80095e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80095ea:	e00b      	b.n	8009604 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80095ec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80095f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80095f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80095f8:	e004      	b.n	8009604 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8009600:	e000      	b.n	8009604 <USB_ActivateEndpoint+0x7c>
      break;
 8009602:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	441a      	add	r2, r3
 800960e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800961a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800961e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009622:	b29b      	uxth	r3, r3
 8009624:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	b21b      	sxth	r3, r3
 8009636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800963a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963e:	b21a      	sxth	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b21b      	sxth	r3, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	b21b      	sxth	r3, r3
 800964a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	441a      	add	r2, r3
 8009658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800965c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966c:	b29b      	uxth	r3, r3
 800966e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	7b1b      	ldrb	r3, [r3, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 8180 	bne.w	800997a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 8084 	beq.w	800978c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	61bb      	str	r3, [r7, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800968e:	b29b      	uxth	r3, r3
 8009690:	461a      	mov	r2, r3
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	4413      	add	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	00da      	lsls	r2, r3, #3
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	88db      	ldrh	r3, [r3, #6]
 80096ac:	085b      	lsrs	r3, r3, #1
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	827b      	strh	r3, [r7, #18]
 80096c6:	8a7b      	ldrh	r3, [r7, #18]
 80096c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01b      	beq.n	8009708 <USB_ActivateEndpoint+0x180>
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e6:	823b      	strh	r3, [r7, #16]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	441a      	add	r2, r3
 80096f2:	8a3b      	ldrh	r3, [r7, #16]
 80096f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009700:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009704:	b29b      	uxth	r3, r3
 8009706:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	78db      	ldrb	r3, [r3, #3]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d020      	beq.n	8009752 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009726:	81bb      	strh	r3, [r7, #12]
 8009728:	89bb      	ldrh	r3, [r7, #12]
 800972a:	f083 0320 	eor.w	r3, r3, #32
 800972e:	81bb      	strh	r3, [r7, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	441a      	add	r2, r3
 800973a:	89bb      	ldrh	r3, [r7, #12]
 800973c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800974c:	b29b      	uxth	r3, r3
 800974e:	8013      	strh	r3, [r2, #0]
 8009750:	e3f9      	b.n	8009f46 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009768:	81fb      	strh	r3, [r7, #14]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	441a      	add	r2, r3
 8009774:	89fb      	ldrh	r3, [r7, #14]
 8009776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800977a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800977e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009786:	b29b      	uxth	r3, r3
 8009788:	8013      	strh	r3, [r2, #0]
 800978a:	e3dc      	b.n	8009f46 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009796:	b29b      	uxth	r3, r3
 8009798:	461a      	mov	r2, r3
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	4413      	add	r3, r2
 800979e:	633b      	str	r3, [r7, #48]	@ 0x30
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	00da      	lsls	r2, r3, #3
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	4413      	add	r3, r2
 80097aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	88db      	ldrh	r3, [r3, #6]
 80097b4:	085b      	lsrs	r3, r3, #1
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	4413      	add	r3, r2
 80097d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	00da      	lsls	r2, r3, #3
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	4413      	add	r3, r2
 80097de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <USB_ActivateEndpoint+0x28a>
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980a:	b29a      	uxth	r2, r3
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	e041      	b.n	8009896 <USB_ActivateEndpoint+0x30e>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	2b3e      	cmp	r3, #62	@ 0x3e
 8009818:	d81c      	bhi.n	8009854 <USB_ActivateEndpoint+0x2cc>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <USB_ActivateEndpoint+0x2b2>
 8009830:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009834:	3301      	adds	r3, #1
 8009836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29a      	uxth	r2, r3
 8009840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009844:	b29b      	uxth	r3, r3
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	b29b      	uxth	r3, r3
 800984a:	4313      	orrs	r3, r2
 800984c:	b29a      	uxth	r2, r3
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e020      	b.n	8009896 <USB_ActivateEndpoint+0x30e>
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	095b      	lsrs	r3, r3, #5
 800985a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 031f 	and.w	r3, r3, #31
 8009866:	2b00      	cmp	r3, #0
 8009868:	d104      	bne.n	8009874 <USB_ActivateEndpoint+0x2ec>
 800986a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800986e:	3b01      	subs	r3, #1
 8009870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29a      	uxth	r2, r3
 800987a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800987e:	b29b      	uxth	r3, r3
 8009880:	029b      	lsls	r3, r3, #10
 8009882:	b29b      	uxth	r3, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	b29b      	uxth	r3, r3
 8009888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009890:	b29a      	uxth	r2, r3
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80098a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80098a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01b      	beq.n	80098e6 <USB_ActivateEndpoint+0x35e>
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c4:	843b      	strh	r3, [r7, #32]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	441a      	add	r2, r3
 80098d0:	8c3b      	ldrh	r3, [r7, #32]
 80098d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d124      	bne.n	8009938 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009904:	83bb      	strh	r3, [r7, #28]
 8009906:	8bbb      	ldrh	r3, [r7, #28]
 8009908:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800990c:	83bb      	strh	r3, [r7, #28]
 800990e:	8bbb      	ldrh	r3, [r7, #28]
 8009910:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009914:	83bb      	strh	r3, [r7, #28]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	8bbb      	ldrh	r3, [r7, #28]
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800992e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]
 8009936:	e306      	b.n	8009f46 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800994a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800994e:	83fb      	strh	r3, [r7, #30]
 8009950:	8bfb      	ldrh	r3, [r7, #30]
 8009952:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009956:	83fb      	strh	r3, [r7, #30]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	441a      	add	r2, r3
 8009962:	8bfb      	ldrh	r3, [r7, #30]
 8009964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800996c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009974:	b29b      	uxth	r3, r3
 8009976:	8013      	strh	r3, [r2, #0]
 8009978:	e2e5      	b.n	8009f46 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d11e      	bne.n	80099c0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009998:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	441a      	add	r2, r3
 80099a6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80099aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099b2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80099b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	8013      	strh	r3, [r2, #0]
 80099be:	e01d      	b.n	80099fc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80099d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	441a      	add	r2, r3
 80099e4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80099e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a0c:	4413      	add	r3, r2
 8009a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	00da      	lsls	r2, r3, #3
 8009a16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	891b      	ldrh	r3, [r3, #8]
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a40:	4413      	add	r3, r2
 8009a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	00da      	lsls	r2, r3, #3
 8009a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a52:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	895b      	ldrh	r3, [r3, #10]
 8009a58:	085b      	lsrs	r3, r3, #1
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f040 81af 	bne.w	8009dcc <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8009a7e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01d      	beq.n	8009ac6 <USB_ActivateEndpoint+0x53e>
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	441a      	add	r2, r3
 8009aae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009ad6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8009ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01d      	beq.n	8009b1e <USB_ActivateEndpoint+0x596>
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009af8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d16b      	bne.n	8009bfe <USB_ActivateEndpoint+0x676>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b36:	4413      	add	r3, r2
 8009b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	00da      	lsls	r2, r3, #3
 8009b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b42:	4413      	add	r3, r2
 8009b44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b58:	801a      	strh	r2, [r3, #0]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <USB_ActivateEndpoint+0x5f0>
 8009b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b74:	801a      	strh	r2, [r3, #0]
 8009b76:	e05d      	b.n	8009c34 <USB_ActivateEndpoint+0x6ac>
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b7e:	d81c      	bhi.n	8009bba <USB_ActivateEndpoint+0x632>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	085b      	lsrs	r3, r3, #1
 8009b86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <USB_ActivateEndpoint+0x618>
 8009b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bb6:	801a      	strh	r2, [r3, #0]
 8009bb8:	e03c      	b.n	8009c34 <USB_ActivateEndpoint+0x6ac>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 031f 	and.w	r3, r3, #31
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <USB_ActivateEndpoint+0x652>
 8009bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	029b      	lsls	r3, r3, #10
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bfa:	801a      	strh	r2, [r3, #0]
 8009bfc:	e01a      	b.n	8009c34 <USB_ActivateEndpoint+0x6ac>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d116      	bne.n	8009c34 <USB_ActivateEndpoint+0x6ac>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c16:	4413      	add	r3, r2
 8009c18:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	00da      	lsls	r2, r3, #3
 8009c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c22:	4413      	add	r3, r2
 8009c24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c28:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d16b      	bne.n	8009d18 <USB_ActivateEndpoint+0x790>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c50:	4413      	add	r3, r2
 8009c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	00da      	lsls	r2, r3, #3
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <USB_ActivateEndpoint+0x70a>
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8e:	801a      	strh	r2, [r3, #0]
 8009c90:	e05b      	b.n	8009d4a <USB_ActivateEndpoint+0x7c2>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c98:	d81c      	bhi.n	8009cd4 <USB_ActivateEndpoint+0x74c>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d004      	beq.n	8009cba <USB_ActivateEndpoint+0x732>
 8009cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	029b      	lsls	r3, r3, #10
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	e03a      	b.n	8009d4a <USB_ActivateEndpoint+0x7c2>
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	f003 031f 	and.w	r3, r3, #31
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d104      	bne.n	8009cf4 <USB_ActivateEndpoint+0x76c>
 8009cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	e018      	b.n	8009d4a <USB_ActivateEndpoint+0x7c2>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d114      	bne.n	8009d4a <USB_ActivateEndpoint+0x7c2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d2c:	4413      	add	r3, r2
 8009d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	00da      	lsls	r2, r3, #3
 8009d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d48:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	441a      	add	r2, r3
 8009d7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009da8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	441a      	add	r2, r3
 8009db4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	8013      	strh	r3, [r2, #0]
 8009dca:	e0bc      	b.n	8009f46 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009ddc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009de0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01d      	beq.n	8009e24 <USB_ActivateEndpoint+0x89c>
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	441a      	add	r2, r3
 8009e0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009e34:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01d      	beq.n	8009e7c <USB_ActivateEndpoint+0x8f4>
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e56:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	441a      	add	r2, r3
 8009e64:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	78db      	ldrb	r3, [r3, #3]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d024      	beq.n	8009ece <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e9a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009e9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009ea2:	f083 0320 	eor.w	r3, r3, #32
 8009ea6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	441a      	add	r2, r3
 8009eb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	8013      	strh	r3, [r2, #0]
 8009ecc:	e01d      	b.n	8009f0a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f20:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	441a      	add	r2, r3
 8009f2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f46:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	379c      	adds	r7, #156	@ 0x9c
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop

08009f58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b08d      	sub	sp, #52	@ 0x34
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	7b1b      	ldrb	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f040 808e 	bne.w	800a088 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d044      	beq.n	8009ffe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	81bb      	strh	r3, [r7, #12]
 8009f82:	89bb      	ldrh	r3, [r7, #12]
 8009f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01b      	beq.n	8009fc4 <USB_DeactivateEndpoint+0x6c>
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa2:	817b      	strh	r3, [r7, #10]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	441a      	add	r2, r3
 8009fae:	897b      	ldrh	r3, [r7, #10]
 8009fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fda:	813b      	strh	r3, [r7, #8]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	441a      	add	r2, r3
 8009fe6:	893b      	ldrh	r3, [r7, #8]
 8009fe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	8013      	strh	r3, [r2, #0]
 8009ffc:	e192      	b.n	800a324 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	827b      	strh	r3, [r7, #18]
 800a00c:	8a7b      	ldrh	r3, [r7, #18]
 800a00e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01b      	beq.n	800a04e <USB_DeactivateEndpoint+0xf6>
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a02c:	823b      	strh	r3, [r7, #16]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	441a      	add	r2, r3
 800a038:	8a3b      	ldrh	r3, [r7, #16]
 800a03a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a03e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a042:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a064:	81fb      	strh	r3, [r7, #14]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	441a      	add	r2, r3
 800a070:	89fb      	ldrh	r3, [r7, #14]
 800a072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a07a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a082:	b29b      	uxth	r3, r3
 800a084:	8013      	strh	r3, [r2, #0]
 800a086:	e14d      	b.n	800a324 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f040 80a5 	bne.w	800a1dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	843b      	strh	r3, [r7, #32]
 800a0a0:	8c3b      	ldrh	r3, [r7, #32]
 800a0a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d01b      	beq.n	800a0e2 <USB_DeactivateEndpoint+0x18a>
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c0:	83fb      	strh	r3, [r7, #30]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	441a      	add	r2, r3
 800a0cc:	8bfb      	ldrh	r3, [r7, #30]
 800a0ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	83bb      	strh	r3, [r7, #28]
 800a0f0:	8bbb      	ldrh	r3, [r7, #28]
 800a0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01b      	beq.n	800a132 <USB_DeactivateEndpoint+0x1da>
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a10c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a110:	837b      	strh	r3, [r7, #26]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	441a      	add	r2, r3
 800a11c:	8b7b      	ldrh	r3, [r7, #26]
 800a11e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a12a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a12e:	b29b      	uxth	r3, r3
 800a130:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a148:	833b      	strh	r3, [r7, #24]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	441a      	add	r2, r3
 800a154:	8b3b      	ldrh	r3, [r7, #24]
 800a156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a15a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a162:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a166:	b29b      	uxth	r3, r3
 800a168:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a17c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a180:	82fb      	strh	r3, [r7, #22]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	441a      	add	r2, r3
 800a18c:	8afb      	ldrh	r3, [r7, #22]
 800a18e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1b8:	82bb      	strh	r3, [r7, #20]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	441a      	add	r2, r3
 800a1c4:	8abb      	ldrh	r3, [r7, #20]
 800a1c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	8013      	strh	r3, [r2, #0]
 800a1da:	e0a3      	b.n	800a324 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a1ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a1ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d01b      	beq.n	800a22c <USB_DeactivateEndpoint+0x2d4>
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a20a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	441a      	add	r2, r3
 800a216:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a21c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a228:	b29b      	uxth	r3, r3
 800a22a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a23a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d01b      	beq.n	800a27c <USB_DeactivateEndpoint+0x324>
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a25a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a26c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a274:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	441a      	add	r2, r3
 800a2d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a2d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a302:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	441a      	add	r2, r3
 800a30e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a320:	b29b      	uxth	r3, r3
 800a322:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3734      	adds	r7, #52	@ 0x34
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b0ac      	sub	sp, #176	@ 0xb0
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	785b      	ldrb	r3, [r3, #1]
 800a340:	2b01      	cmp	r3, #1
 800a342:	f040 84ca 	bne.w	800acda <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	699a      	ldr	r2, [r3, #24]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d904      	bls.n	800a35c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a35a:	e003      	b.n	800a364 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	7b1b      	ldrb	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d122      	bne.n	800a3b2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6959      	ldr	r1, [r3, #20]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	88da      	ldrh	r2, [r3, #6]
 800a374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a378:	b29b      	uxth	r3, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 febd 	bl	800b0fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	613b      	str	r3, [r7, #16]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	4413      	add	r3, r2
 800a392:	613b      	str	r3, [r7, #16]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	00da      	lsls	r2, r3, #3
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	4413      	add	r3, r2
 800a39e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	801a      	strh	r2, [r3, #0]
 800a3ae:	f000 bc6f 	b.w	800ac90 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	78db      	ldrb	r3, [r3, #3]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	f040 831e 	bne.w	800a9f8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	6a1a      	ldr	r2, [r3, #32]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	f240 82cf 	bls.w	800a968 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	441a      	add	r2, r3
 800a3ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a3f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a3fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a402:	b29b      	uxth	r3, r3
 800a404:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	6a1a      	ldr	r2, [r3, #32]
 800a40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 814f 	beq.w	800a6ca <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d16b      	bne.n	800a510 <USB_EPStartXfer+0x1de>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a442:	b29b      	uxth	r3, r3
 800a444:	461a      	mov	r2, r3
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	4413      	add	r3, r2
 800a44a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	00da      	lsls	r2, r3, #3
 800a452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a454:	4413      	add	r3, r2
 800a456:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a45a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a466:	b29a      	uxth	r2, r3
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <USB_EPStartXfer+0x158>
 800a474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a482:	b29a      	uxth	r2, r3
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	801a      	strh	r2, [r3, #0]
 800a488:	e05b      	b.n	800a542 <USB_EPStartXfer+0x210>
 800a48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a48e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a490:	d81c      	bhi.n	800a4cc <USB_EPStartXfer+0x19a>
 800a492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a496:	085b      	lsrs	r3, r3, #1
 800a498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a49c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d004      	beq.n	800a4b2 <USB_EPStartXfer+0x180>
 800a4a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e03a      	b.n	800a542 <USB_EPStartXfer+0x210>
 800a4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4da:	f003 031f 	and.w	r3, r3, #31
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <USB_EPStartXfer+0x1ba>
 800a4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	029b      	lsls	r3, r3, #10
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a508:	b29a      	uxth	r2, r3
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	801a      	strh	r2, [r3, #0]
 800a50e:	e018      	b.n	800a542 <USB_EPStartXfer+0x210>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	785b      	ldrb	r3, [r3, #1]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d114      	bne.n	800a542 <USB_EPStartXfer+0x210>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51e:	b29b      	uxth	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	4413      	add	r3, r2
 800a526:	633b      	str	r3, [r7, #48]	@ 0x30
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	00da      	lsls	r2, r3, #3
 800a52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a530:	4413      	add	r3, r2
 800a532:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	895b      	ldrh	r3, [r3, #10]
 800a546:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	6959      	ldr	r1, [r3, #20]
 800a54e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a552:	b29b      	uxth	r3, r3
 800a554:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fdce 	bl	800b0fa <USB_WritePMA>
            ep->xfer_buff += len;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a566:	441a      	add	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	6a1a      	ldr	r2, [r3, #32]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	429a      	cmp	r2, r3
 800a576:	d907      	bls.n	800a588 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	621a      	str	r2, [r3, #32]
 800a586:	e006      	b.n	800a596 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2200      	movs	r2, #0
 800a594:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d16b      	bne.n	800a676 <USB_EPStartXfer+0x344>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	61bb      	str	r3, [r7, #24]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	00da      	lsls	r2, r3, #3
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	801a      	strh	r2, [r3, #0]
 800a5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <USB_EPStartXfer+0x2be>
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	801a      	strh	r2, [r3, #0]
 800a5ee:	e05d      	b.n	800a6ac <USB_EPStartXfer+0x37a>
 800a5f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5f6:	d81c      	bhi.n	800a632 <USB_EPStartXfer+0x300>
 800a5f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <USB_EPStartXfer+0x2e6>
 800a60e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a622:	b29b      	uxth	r3, r3
 800a624:	029b      	lsls	r3, r3, #10
 800a626:	b29b      	uxth	r3, r3
 800a628:	4313      	orrs	r3, r2
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	e03c      	b.n	800a6ac <USB_EPStartXfer+0x37a>
 800a632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a636:	095b      	lsrs	r3, r3, #5
 800a638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a63c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a640:	f003 031f 	and.w	r3, r3, #31
 800a644:	2b00      	cmp	r3, #0
 800a646:	d104      	bne.n	800a652 <USB_EPStartXfer+0x320>
 800a648:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a64c:	3b01      	subs	r3, #1
 800a64e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29a      	uxth	r2, r3
 800a658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	029b      	lsls	r3, r3, #10
 800a660:	b29b      	uxth	r3, r3
 800a662:	4313      	orrs	r3, r2
 800a664:	b29b      	uxth	r3, r3
 800a666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a66e:	b29a      	uxth	r2, r3
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	e01a      	b.n	800a6ac <USB_EPStartXfer+0x37a>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d116      	bne.n	800a6ac <USB_EPStartXfer+0x37a>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a688:	b29b      	uxth	r3, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	4413      	add	r3, r2
 800a690:	623b      	str	r3, [r7, #32]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	00da      	lsls	r2, r3, #3
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	4413      	add	r3, r2
 800a69c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6a0:	61fb      	str	r3, [r7, #28]
 800a6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	891b      	ldrh	r3, [r3, #8]
 800a6b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	6959      	ldr	r1, [r3, #20]
 800a6b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fd19 	bl	800b0fa <USB_WritePMA>
 800a6c8:	e2e2      	b.n	800ac90 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d16b      	bne.n	800a7aa <USB_EPStartXfer+0x478>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e2:	4413      	add	r3, r2
 800a6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	00da      	lsls	r2, r3, #3
 800a6ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a700:	b29a      	uxth	r2, r3
 800a702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10a      	bne.n	800a724 <USB_EPStartXfer+0x3f2>
 800a70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	b29b      	uxth	r3, r3
 800a714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a720:	801a      	strh	r2, [r3, #0]
 800a722:	e05d      	b.n	800a7e0 <USB_EPStartXfer+0x4ae>
 800a724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a728:	2b3e      	cmp	r3, #62	@ 0x3e
 800a72a:	d81c      	bhi.n	800a766 <USB_EPStartXfer+0x434>
 800a72c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <USB_EPStartXfer+0x41a>
 800a742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a746:	3301      	adds	r3, #1
 800a748:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29a      	uxth	r2, r3
 800a752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b29a      	uxth	r2, r3
 800a760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	e03c      	b.n	800a7e0 <USB_EPStartXfer+0x4ae>
 800a766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d104      	bne.n	800a786 <USB_EPStartXfer+0x454>
 800a77c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a780:	3b01      	subs	r3, #1
 800a782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a790:	b29b      	uxth	r3, r3
 800a792:	029b      	lsls	r3, r3, #10
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a6:	801a      	strh	r2, [r3, #0]
 800a7a8:	e01a      	b.n	800a7e0 <USB_EPStartXfer+0x4ae>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d116      	bne.n	800a7e0 <USB_EPStartXfer+0x4ae>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7c2:	4413      	add	r3, r2
 800a7c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	00da      	lsls	r2, r3, #3
 800a7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	891b      	ldrh	r3, [r3, #8]
 800a7e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	6959      	ldr	r1, [r3, #20]
 800a7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fc7f 	bl	800b0fa <USB_WritePMA>
            ep->xfer_buff += len;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	695a      	ldr	r2, [r3, #20]
 800a800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a804:	441a      	add	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6a1a      	ldr	r2, [r3, #32]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	429a      	cmp	r2, r3
 800a814:	d907      	bls.n	800a826 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6a1a      	ldr	r2, [r3, #32]
 800a81a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	621a      	str	r2, [r3, #32]
 800a824:	e006      	b.n	800a834 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2200      	movs	r2, #0
 800a832:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	643b      	str	r3, [r7, #64]	@ 0x40
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	785b      	ldrb	r3, [r3, #1]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d16b      	bne.n	800a918 <USB_EPStartXfer+0x5e6>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	4413      	add	r3, r2
 800a852:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	00da      	lsls	r2, r3, #3
 800a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85c:	4413      	add	r3, r2
 800a85e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a86e:	b29a      	uxth	r2, r3
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	801a      	strh	r2, [r3, #0]
 800a874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <USB_EPStartXfer+0x560>
 800a87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e05b      	b.n	800a94a <USB_EPStartXfer+0x618>
 800a892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a896:	2b3e      	cmp	r3, #62	@ 0x3e
 800a898:	d81c      	bhi.n	800a8d4 <USB_EPStartXfer+0x5a2>
 800a89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <USB_EPStartXfer+0x588>
 800a8b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	029b      	lsls	r3, r3, #10
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e03a      	b.n	800a94a <USB_EPStartXfer+0x618>
 800a8d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8e2:	f003 031f 	and.w	r3, r3, #31
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d104      	bne.n	800a8f4 <USB_EPStartXfer+0x5c2>
 800a8ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	029b      	lsls	r3, r3, #10
 800a902:	b29b      	uxth	r3, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	b29b      	uxth	r3, r3
 800a908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a910:	b29a      	uxth	r2, r3
 800a912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	e018      	b.n	800a94a <USB_EPStartXfer+0x618>
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	785b      	ldrb	r3, [r3, #1]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d114      	bne.n	800a94a <USB_EPStartXfer+0x618>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a926:	b29b      	uxth	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a92c:	4413      	add	r3, r2
 800a92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	00da      	lsls	r2, r3, #3
 800a936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a938:	4413      	add	r3, r2
 800a93a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a944:	b29a      	uxth	r2, r3
 800a946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a948:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	895b      	ldrh	r3, [r3, #10]
 800a94e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6959      	ldr	r1, [r3, #20]
 800a956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fbca 	bl	800b0fa <USB_WritePMA>
 800a966:	e193      	b.n	800ac90 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a986:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	441a      	add	r2, r3
 800a994:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a99c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9bc:	4413      	add	r3, r2
 800a9be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	00da      	lsls	r2, r3, #3
 800a9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a9d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	891b      	ldrh	r3, [r3, #8]
 800a9de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6959      	ldr	r1, [r3, #20]
 800a9e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fb82 	bl	800b0fa <USB_WritePMA>
 800a9f6:	e14b      	b.n	800ac90 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	6a1a      	ldr	r2, [r3, #32]
 800a9fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa00:	1ad2      	subs	r2, r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 809a 	beq.w	800ab52 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	785b      	ldrb	r3, [r3, #1]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d16b      	bne.n	800ab02 <USB_EPStartXfer+0x7d0>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa3a:	4413      	add	r3, r2
 800aa3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	00da      	lsls	r2, r3, #3
 800aa44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa46:	4413      	add	r3, r2
 800aa48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa4c:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10a      	bne.n	800aa7c <USB_EPStartXfer+0x74a>
 800aa66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa78:	801a      	strh	r2, [r3, #0]
 800aa7a:	e05b      	b.n	800ab34 <USB_EPStartXfer+0x802>
 800aa7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa80:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa82:	d81c      	bhi.n	800aabe <USB_EPStartXfer+0x78c>
 800aa84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa88:	085b      	lsrs	r3, r3, #1
 800aa8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <USB_EPStartXfer+0x772>
 800aa9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	029b      	lsls	r3, r3, #10
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	4313      	orrs	r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaba:	801a      	strh	r2, [r3, #0]
 800aabc:	e03a      	b.n	800ab34 <USB_EPStartXfer+0x802>
 800aabe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aac2:	095b      	lsrs	r3, r3, #5
 800aac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aacc:	f003 031f 	and.w	r3, r3, #31
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d104      	bne.n	800aade <USB_EPStartXfer+0x7ac>
 800aad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aad8:	3b01      	subs	r3, #1
 800aada:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aade:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	029b      	lsls	r3, r3, #10
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aafe:	801a      	strh	r2, [r3, #0]
 800ab00:	e018      	b.n	800ab34 <USB_EPStartXfer+0x802>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d114      	bne.n	800ab34 <USB_EPStartXfer+0x802>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	461a      	mov	r2, r3
 800ab14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab16:	4413      	add	r3, r2
 800ab18:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	00da      	lsls	r2, r3, #3
 800ab20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab22:	4413      	add	r3, r2
 800ab24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	895b      	ldrh	r3, [r3, #10]
 800ab38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	6959      	ldr	r1, [r3, #20]
 800ab40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fad5 	bl	800b0fa <USB_WritePMA>
 800ab50:	e09e      	b.n	800ac90 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	785b      	ldrb	r3, [r3, #1]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d16b      	bne.n	800ac32 <USB_EPStartXfer+0x900>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	461a      	mov	r2, r3
 800ab68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab6a:	4413      	add	r3, r2
 800ab6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	00da      	lsls	r2, r3, #3
 800ab74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ab76:	4413      	add	r3, r2
 800ab78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <USB_EPStartXfer+0x87a>
 800ab96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	e063      	b.n	800ac74 <USB_EPStartXfer+0x942>
 800abac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800abb2:	d81c      	bhi.n	800abee <USB_EPStartXfer+0x8bc>
 800abb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abb8:	085b      	lsrs	r3, r3, #1
 800abba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USB_EPStartXfer+0x8a2>
 800abca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800abce:	3301      	adds	r3, #1
 800abd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800abde:	b29b      	uxth	r3, r3
 800abe0:	029b      	lsls	r3, r3, #10
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	4313      	orrs	r3, r2
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e042      	b.n	800ac74 <USB_EPStartXfer+0x942>
 800abee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abf2:	095b      	lsrs	r3, r3, #5
 800abf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abfc:	f003 031f 	and.w	r3, r3, #31
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <USB_EPStartXfer+0x8dc>
 800ac04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	029b      	lsls	r3, r3, #10
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e020      	b.n	800ac74 <USB_EPStartXfer+0x942>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	785b      	ldrb	r3, [r3, #1]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d11c      	bne.n	800ac74 <USB_EPStartXfer+0x942>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	461a      	mov	r2, r3
 800ac4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac4e:	4413      	add	r3, r2
 800ac50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	00da      	lsls	r2, r3, #3
 800ac5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac5e:	4413      	add	r3, r2
 800ac60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6959      	ldr	r1, [r3, #20]
 800ac80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa35 	bl	800b0fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca6:	817b      	strh	r3, [r7, #10]
 800aca8:	897b      	ldrh	r3, [r7, #10]
 800acaa:	f083 0310 	eor.w	r3, r3, #16
 800acae:	817b      	strh	r3, [r7, #10]
 800acb0:	897b      	ldrh	r3, [r7, #10]
 800acb2:	f083 0320 	eor.w	r3, r3, #32
 800acb6:	817b      	strh	r3, [r7, #10]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	441a      	add	r2, r3
 800acc2:	897b      	ldrh	r3, [r7, #10]
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e0d5      	b.n	800ae86 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	7b1b      	ldrb	r3, [r3, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d156      	bne.n	800ad90 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d122      	bne.n	800ad30 <USB_EPStartXfer+0x9fe>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	78db      	ldrb	r3, [r3, #3]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d11e      	bne.n	800ad30 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad08:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	441a      	add	r2, r3
 800ad16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ad1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad22:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ad26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	8013      	strh	r3, [r2, #0]
 800ad2e:	e01d      	b.n	800ad6c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ad42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad46:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	441a      	add	r2, r3
 800ad54:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800ad58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	699a      	ldr	r2, [r3, #24]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d907      	bls.n	800ad88 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	699a      	ldr	r2, [r3, #24]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	1ad2      	subs	r2, r2, r3
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	619a      	str	r2, [r3, #24]
 800ad86:	e054      	b.n	800ae32 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	619a      	str	r2, [r3, #24]
 800ad8e:	e050      	b.n	800ae32 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	78db      	ldrb	r3, [r3, #3]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d142      	bne.n	800ae1e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d048      	beq.n	800ae32 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800adb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800adb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <USB_EPStartXfer+0xa96>
 800adbc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800adc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10b      	bne.n	800ade0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800adc8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800adcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800add0:	2b00      	cmp	r3, #0
 800add2:	d12e      	bne.n	800ae32 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800add4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800add8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800addc:	2b00      	cmp	r3, #0
 800adde:	d128      	bne.n	800ae32 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	441a      	add	r2, r3
 800ae04:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ae08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	8013      	strh	r3, [r2, #0]
 800ae1c:	e009      	b.n	800ae32 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	78db      	ldrb	r3, [r3, #3]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d103      	bne.n	800ae2e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	619a      	str	r2, [r3, #24]
 800ae2c:	e001      	b.n	800ae32 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e02a      	b.n	800ae88 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	441a      	add	r2, r3
 800ae6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	37b0      	adds	r7, #176	@ 0xb0
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d020      	beq.n	800aee4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb8:	81bb      	strh	r3, [r7, #12]
 800aeba:	89bb      	ldrh	r3, [r7, #12]
 800aebc:	f083 0310 	eor.w	r3, r3, #16
 800aec0:	81bb      	strh	r3, [r7, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	441a      	add	r2, r3
 800aecc:	89bb      	ldrh	r3, [r7, #12]
 800aece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aede:	b29b      	uxth	r3, r3
 800aee0:	8013      	strh	r3, [r2, #0]
 800aee2:	e01f      	b.n	800af24 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aefa:	81fb      	strh	r3, [r7, #14]
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af02:	81fb      	strh	r3, [r7, #14]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	441a      	add	r2, r3
 800af0e:	89fb      	ldrh	r3, [r7, #14]
 800af10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af20:	b29b      	uxth	r3, r3
 800af22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af32:	b480      	push	{r7}
 800af34:	b087      	sub	sp, #28
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	785b      	ldrb	r3, [r3, #1]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d04c      	beq.n	800afde <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	823b      	strh	r3, [r7, #16]
 800af52:	8a3b      	ldrh	r3, [r7, #16]
 800af54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01b      	beq.n	800af94 <USB_EPClearStall+0x62>
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af72:	81fb      	strh	r3, [r7, #14]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	441a      	add	r2, r3
 800af7e:	89fb      	ldrh	r3, [r7, #14]
 800af80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af90:	b29b      	uxth	r3, r3
 800af92:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	78db      	ldrb	r3, [r3, #3]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d06c      	beq.n	800b076 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afb2:	81bb      	strh	r3, [r7, #12]
 800afb4:	89bb      	ldrh	r3, [r7, #12]
 800afb6:	f083 0320 	eor.w	r3, r3, #32
 800afba:	81bb      	strh	r3, [r7, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	441a      	add	r2, r3
 800afc6:	89bb      	ldrh	r3, [r7, #12]
 800afc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd8:	b29b      	uxth	r3, r3
 800afda:	8013      	strh	r3, [r2, #0]
 800afdc:	e04b      	b.n	800b076 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	82fb      	strh	r3, [r7, #22]
 800afec:	8afb      	ldrh	r3, [r7, #22]
 800afee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d01b      	beq.n	800b02e <USB_EPClearStall+0xfc>
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	b29b      	uxth	r3, r3
 800b004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b00c:	82bb      	strh	r3, [r7, #20]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	441a      	add	r2, r3
 800b018:	8abb      	ldrh	r3, [r7, #20]
 800b01a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b01e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	881b      	ldrh	r3, [r3, #0]
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b044:	827b      	strh	r3, [r7, #18]
 800b046:	8a7b      	ldrh	r3, [r7, #18]
 800b048:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b04c:	827b      	strh	r3, [r7, #18]
 800b04e:	8a7b      	ldrh	r3, [r7, #18]
 800b050:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b054:	827b      	strh	r3, [r7, #18]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	441a      	add	r2, r3
 800b060:	8a7b      	ldrh	r3, [r7, #18]
 800b062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b06a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b072:	b29b      	uxth	r3, r3
 800b074:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	371c      	adds	r7, #28
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2280      	movs	r2, #128	@ 0x80
 800b09a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b085      	sub	sp, #20
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b08b      	sub	sp, #44	@ 0x2c
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	4611      	mov	r1, r2
 800b106:	461a      	mov	r2, r3
 800b108:	460b      	mov	r3, r1
 800b10a:	80fb      	strh	r3, [r7, #6]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b110:	88bb      	ldrh	r3, [r7, #4]
 800b112:	3301      	adds	r3, #1
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b120:	88fa      	ldrh	r2, [r7, #6]
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	4413      	add	r3, r2
 800b126:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b12a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b130:	e01b      	b.n	800b16a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	3301      	adds	r3, #1
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	b21a      	sxth	r2, r3
 800b142:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b146:	4313      	orrs	r3, r2
 800b148:	b21b      	sxth	r3, r3
 800b14a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	8a7a      	ldrh	r2, [r7, #18]
 800b150:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	3302      	adds	r3, #2
 800b156:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	3301      	adds	r3, #1
 800b15c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	3301      	adds	r3, #1
 800b162:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b166:	3b01      	subs	r3, #1
 800b168:	627b      	str	r3, [r7, #36]	@ 0x24
 800b16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e0      	bne.n	800b132 <USB_WritePMA+0x38>
  }
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	372c      	adds	r7, #44	@ 0x2c
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b17e:	b480      	push	{r7}
 800b180:	b08b      	sub	sp, #44	@ 0x2c
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	4611      	mov	r1, r2
 800b18a:	461a      	mov	r2, r3
 800b18c:	460b      	mov	r3, r1
 800b18e:	80fb      	strh	r3, [r7, #6]
 800b190:	4613      	mov	r3, r2
 800b192:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b194:	88bb      	ldrh	r3, [r7, #4]
 800b196:	085b      	lsrs	r3, r3, #1
 800b198:	b29b      	uxth	r3, r3
 800b19a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1a4:	88fa      	ldrh	r2, [r7, #6]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1b4:	e018      	b.n	800b1e8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	3302      	adds	r3, #2
 800b1c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	0a1b      	lsrs	r3, r3, #8
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e3      	bne.n	800b1b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b1ee:	88bb      	ldrh	r3, [r7, #4]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d007      	beq.n	800b20a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	b2da      	uxtb	r2, r3
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	701a      	strb	r2, [r3, #0]
  }
}
 800b20a:	bf00      	nop
 800b20c:	372c      	adds	r7, #44	@ 0x2c
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	460b      	mov	r3, r1
 800b220:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b222:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b226:	f002 f8cd 	bl	800d3c4 <USBD_static_malloc>
 800b22a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b23a:	2302      	movs	r3, #2
 800b23c:	e066      	b.n	800b30c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7c1b      	ldrb	r3, [r3, #16]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d119      	bne.n	800b282 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b24e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b252:	2202      	movs	r2, #2
 800b254:	2181      	movs	r1, #129	@ 0x81
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 ff5b 	bl	800d112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b266:	2202      	movs	r2, #2
 800b268:	2101      	movs	r1, #1
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 ff51 	bl	800d112 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2210      	movs	r2, #16
 800b27c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b280:	e016      	b.n	800b2b0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b282:	2340      	movs	r3, #64	@ 0x40
 800b284:	2202      	movs	r2, #2
 800b286:	2181      	movs	r1, #129	@ 0x81
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f001 ff42 	bl	800d112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b294:	2340      	movs	r3, #64	@ 0x40
 800b296:	2202      	movs	r2, #2
 800b298:	2101      	movs	r1, #1
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f001 ff39 	bl	800d112 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2210      	movs	r2, #16
 800b2ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	2182      	movs	r1, #130	@ 0x82
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f001 ff2b 	bl	800d112 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7c1b      	ldrb	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fffc 	bl	800d2f0 <USBD_LL_PrepareReceive>
 800b2f8:	e007      	b.n	800b30a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b300:	2340      	movs	r3, #64	@ 0x40
 800b302:	2101      	movs	r1, #1
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fff3 	bl	800d2f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b320:	2181      	movs	r1, #129	@ 0x81
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 ff1b 	bl	800d15e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b32e:	2101      	movs	r1, #1
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 ff14 	bl	800d15e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b33e:	2182      	movs	r1, #130	@ 0x82
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 ff0c 	bl	800d15e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00e      	beq.n	800b37e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b370:	4618      	mov	r0, r3
 800b372:	f002 f835 	bl	800d3e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b398:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e0af      	b.n	800b510 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d03f      	beq.n	800b43c <USBD_CDC_Setup+0xb4>
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	f040 809f 	bne.w	800b500 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	88db      	ldrh	r3, [r3, #6]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d02e      	beq.n	800b428 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	b25b      	sxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da16      	bge.n	800b402 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b3e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	88d2      	ldrh	r2, [r2, #6]
 800b3e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	88db      	ldrh	r3, [r3, #6]
 800b3ec:	2b07      	cmp	r3, #7
 800b3ee:	bf28      	it	cs
 800b3f0:	2307      	movcs	r3, #7
 800b3f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	89fa      	ldrh	r2, [r7, #14]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fa9d 	bl	800c93a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b400:	e085      	b.n	800b50e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	785a      	ldrb	r2, [r3, #1]
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	88db      	ldrh	r3, [r3, #6]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b418:	6939      	ldr	r1, [r7, #16]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	88db      	ldrh	r3, [r3, #6]
 800b41e:	461a      	mov	r2, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fab6 	bl	800c992 <USBD_CtlPrepareRx>
      break;
 800b426:	e072      	b.n	800b50e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	7850      	ldrb	r0, [r2, #1]
 800b434:	2200      	movs	r2, #0
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	4798      	blx	r3
      break;
 800b43a:	e068      	b.n	800b50e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	2b0b      	cmp	r3, #11
 800b442:	d852      	bhi.n	800b4ea <USBD_CDC_Setup+0x162>
 800b444:	a201      	add	r2, pc, #4	@ (adr r2, 800b44c <USBD_CDC_Setup+0xc4>)
 800b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44a:	bf00      	nop
 800b44c:	0800b47d 	.word	0x0800b47d
 800b450:	0800b4f9 	.word	0x0800b4f9
 800b454:	0800b4eb 	.word	0x0800b4eb
 800b458:	0800b4eb 	.word	0x0800b4eb
 800b45c:	0800b4eb 	.word	0x0800b4eb
 800b460:	0800b4eb 	.word	0x0800b4eb
 800b464:	0800b4eb 	.word	0x0800b4eb
 800b468:	0800b4eb 	.word	0x0800b4eb
 800b46c:	0800b4eb 	.word	0x0800b4eb
 800b470:	0800b4eb 	.word	0x0800b4eb
 800b474:	0800b4a7 	.word	0x0800b4a7
 800b478:	0800b4d1 	.word	0x0800b4d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b03      	cmp	r3, #3
 800b486:	d107      	bne.n	800b498 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b488:	f107 030a 	add.w	r3, r7, #10
 800b48c:	2202      	movs	r2, #2
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 fa52 	bl	800c93a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b496:	e032      	b.n	800b4fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 f9dc 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	75fb      	strb	r3, [r7, #23]
          break;
 800b4a4:	e02b      	b.n	800b4fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d107      	bne.n	800b4c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4b2:	f107 030d 	add.w	r3, r7, #13
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 fa3d 	bl	800c93a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4c0:	e01d      	b.n	800b4fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f001 f9c7 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ce:	e016      	b.n	800b4fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d00f      	beq.n	800b4fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 f9ba 	bl	800c858 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b4e8:	e008      	b.n	800b4fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 f9b3 	bl	800c858 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b4f6:	e002      	b.n	800b4fe <USBD_CDC_Setup+0x176>
          break;
 800b4f8:	bf00      	nop
 800b4fa:	e008      	b.n	800b50e <USBD_CDC_Setup+0x186>
          break;
 800b4fc:	bf00      	nop
      }
      break;
 800b4fe:	e006      	b.n	800b50e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f9a8 	bl	800c858 <USBD_CtlError>
      ret = USBD_FAIL;
 800b508:	2303      	movs	r3, #3
 800b50a:	75fb      	strb	r3, [r7, #23]
      break;
 800b50c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b52a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b536:	2303      	movs	r3, #3
 800b538:	e04f      	b.n	800b5da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b540:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	440b      	add	r3, r1
 800b550:	3318      	adds	r3, #24
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d029      	beq.n	800b5ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b558:	78fa      	ldrb	r2, [r7, #3]
 800b55a:	6879      	ldr	r1, [r7, #4]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	440b      	add	r3, r1
 800b566:	3318      	adds	r3, #24
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	78f9      	ldrb	r1, [r7, #3]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	460b      	mov	r3, r1
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	440b      	add	r3, r1
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4403      	add	r3, r0
 800b578:	3320      	adds	r3, #32
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b580:	fb01 f303 	mul.w	r3, r1, r3
 800b584:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b586:	2b00      	cmp	r3, #0
 800b588:	d110      	bne.n	800b5ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b58a:	78fa      	ldrb	r2, [r7, #3]
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	3318      	adds	r3, #24
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b59e:	78f9      	ldrb	r1, [r7, #3]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 fe82 	bl	800d2ae <USBD_LL_Transmit>
 800b5aa:	e015      	b.n	800b5d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	e015      	b.n	800b630 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 fe92 	bl	800d332 <USBD_LL_GetRxDataSize>
 800b60e:	4602      	mov	r2, r0
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b62a:	4611      	mov	r1, r2
 800b62c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b646:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b64e:	2303      	movs	r3, #3
 800b650:	e01a      	b.n	800b688 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d014      	beq.n	800b686 <USBD_CDC_EP0_RxReady+0x4e>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b662:	2bff      	cmp	r3, #255	@ 0xff
 800b664:	d00f      	beq.n	800b686 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b674:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b67c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	22ff      	movs	r2, #255	@ 0xff
 800b682:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2243      	movs	r2, #67	@ 0x43
 800b69c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b69e:	4b03      	ldr	r3, [pc, #12]	@ (800b6ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20000094 	.word	0x20000094

0800b6b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2243      	movs	r2, #67	@ 0x43
 800b6bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b6be:	4b03      	ldr	r3, [pc, #12]	@ (800b6cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	20000050 	.word	0x20000050

0800b6d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2243      	movs	r2, #67	@ 0x43
 800b6dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b6de:	4b03      	ldr	r3, [pc, #12]	@ (800b6ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	200000d8 	.word	0x200000d8

0800b6f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	220a      	movs	r2, #10
 800b6fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6fe:	4b03      	ldr	r3, [pc, #12]	@ (800b70c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	2000000c 	.word	0x2000000c

0800b710 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	e004      	b.n	800b72e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b087      	sub	sp, #28
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b74c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b754:	2303      	movs	r3, #3
 800b756:	e008      	b.n	800b76a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b786:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b78e:	2303      	movs	r3, #3
 800b790:	e004      	b.n	800b79c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e016      	b.n	800b7f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7d8:	2101      	movs	r1, #1
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f001 fd88 	bl	800d2f0 <USBD_LL_PrepareReceive>
 800b7e0:	e007      	b.n	800b7f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7e8:	2340      	movs	r3, #64	@ 0x40
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 fd7f 	bl	800d2f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b810:	2303      	movs	r3, #3
 800b812:	e01f      	b.n	800b854 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	79fa      	ldrb	r2, [r7, #7]
 800b846:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f001 fbe7 	bl	800d01c <USBD_LL_Init>
 800b84e:	4603      	mov	r3, r0
 800b850:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b852:	7dfb      	ldrb	r3, [r7, #23]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b870:	2303      	movs	r3, #3
 800b872:	e016      	b.n	800b8a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00b      	beq.n	800b8a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	f107 020e 	add.w	r2, r7, #14
 800b894:	4610      	mov	r0, r2
 800b896:	4798      	blx	r3
 800b898:	4602      	mov	r2, r0
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f001 fc12 	bl	800d0dc <USBD_LL_Start>
 800b8b8:	4603      	mov	r3, r0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d009      	beq.n	800b906 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
 800b902:	4603      	mov	r3, r0
 800b904:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	78fa      	ldrb	r2, [r7, #3]
 800b930:	4611      	mov	r1, r2
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	4798      	blx	r3
  }

  return USBD_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	4618      	mov	r0, r3
 800b954:	f000 ff46 	bl	800c7e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b966:	461a      	mov	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b974:	f003 031f 	and.w	r3, r3, #31
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d01a      	beq.n	800b9b2 <USBD_LL_SetupStage+0x72>
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d822      	bhi.n	800b9c6 <USBD_LL_SetupStage+0x86>
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <USBD_LL_SetupStage+0x4a>
 800b984:	2b01      	cmp	r3, #1
 800b986:	d00a      	beq.n	800b99e <USBD_LL_SetupStage+0x5e>
 800b988:	e01d      	b.n	800b9c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9ee 	bl	800bd74 <USBD_StdDevReq>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
      break;
 800b99c:	e020      	b.n	800b9e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa52 	bl	800be50 <USBD_StdItfReq>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b0:	e016      	b.n	800b9e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa91 	bl	800bee2 <USBD_StdEPReq>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c4:	e00c      	b.n	800b9e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 fbe1 	bl	800d19c <USBD_LL_StallEP>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9de:	bf00      	nop
  }

  return ret;
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b086      	sub	sp, #24
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	60f8      	str	r0, [r7, #12]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d138      	bne.n	800ba70 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d14a      	bne.n	800baa6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d913      	bls.n	800ba44 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	1ad2      	subs	r2, r2, r3
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	4293      	cmp	r3, r2
 800ba34:	bf28      	it	cs
 800ba36:	4613      	movcs	r3, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 ffc5 	bl	800c9cc <USBD_CtlContinueRx>
 800ba42:	e030      	b.n	800baa6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d10b      	bne.n	800ba68 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 ffc0 	bl	800c9ee <USBD_CtlSendStatus>
 800ba6e:	e01a      	b.n	800baa6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d114      	bne.n	800baa6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00e      	beq.n	800baa6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	7afa      	ldrb	r2, [r7, #11]
 800ba92:	4611      	mov	r1, r2
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	e000      	b.n	800baa8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	460b      	mov	r3, r1
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800babe:	7afb      	ldrb	r3, [r7, #11]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d16b      	bne.n	800bb9c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3314      	adds	r3, #20
 800bac8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d156      	bne.n	800bb82 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	429a      	cmp	r2, r3
 800bade:	d914      	bls.n	800bb0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 ff3a 	bl	800c970 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bafc:	2300      	movs	r3, #0
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f001 fbf4 	bl	800d2f0 <USBD_LL_PrepareReceive>
 800bb08:	e03b      	b.n	800bb82 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	68da      	ldr	r2, [r3, #12]
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d11c      	bne.n	800bb50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d316      	bcc.n	800bb50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d20f      	bcs.n	800bb50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb30:	2200      	movs	r2, #0
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 ff1b 	bl	800c970 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb42:	2300      	movs	r3, #0
 800bb44:	2200      	movs	r2, #0
 800bb46:	2100      	movs	r1, #0
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f001 fbd1 	bl	800d2f0 <USBD_LL_PrepareReceive>
 800bb4e:	e018      	b.n	800bb82 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d10b      	bne.n	800bb74 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb74:	2180      	movs	r1, #128	@ 0x80
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f001 fb10 	bl	800d19c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f000 ff49 	bl	800ca14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d122      	bne.n	800bbd2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff fe98 	bl	800b8c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bb9a:	e01a      	b.n	800bbd2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d114      	bne.n	800bbd2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	7afa      	ldrb	r2, [r7, #11]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	4798      	blx	r3
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	e000      	b.n	800bbd4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3718      	adds	r7, #24
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e02f      	b.n	800bc70 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00f      	beq.n	800bc3a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d009      	beq.n	800bc3a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	6852      	ldr	r2, [r2, #4]
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	4611      	mov	r1, r2
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc3a:	2340      	movs	r3, #64	@ 0x40
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f001 fa66 	bl	800d112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2240      	movs	r2, #64	@ 0x40
 800bc52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc56:	2340      	movs	r3, #64	@ 0x40
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fa58 	bl	800d112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2240      	movs	r2, #64	@ 0x40
 800bc6c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	78fa      	ldrb	r2, [r7, #3]
 800bc88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2204      	movs	r2, #4
 800bcb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d106      	bne.n	800bce6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e012      	b.n	800bd30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d10b      	bne.n	800bd2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd56:	8a3b      	ldrh	r3, [r7, #16]
 800bd58:	021b      	lsls	r3, r3, #8
 800bd5a:	b21a      	sxth	r2, r3
 800bd5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	b21b      	sxth	r3, r3
 800bd64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd66:	89fb      	ldrh	r3, [r7, #14]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	371c      	adds	r7, #28
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd8a:	2b40      	cmp	r3, #64	@ 0x40
 800bd8c:	d005      	beq.n	800bd9a <USBD_StdDevReq+0x26>
 800bd8e:	2b40      	cmp	r3, #64	@ 0x40
 800bd90:	d853      	bhi.n	800be3a <USBD_StdDevReq+0xc6>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00b      	beq.n	800bdae <USBD_StdDevReq+0x3a>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d14f      	bne.n	800be3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bdac:	e04a      	b.n	800be44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d83b      	bhi.n	800be2e <USBD_StdDevReq+0xba>
 800bdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <USBD_StdDevReq+0x48>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800be25 	.word	0x0800be25
 800bdc4:	0800be2f 	.word	0x0800be2f
 800bdc8:	0800be1b 	.word	0x0800be1b
 800bdcc:	0800be2f 	.word	0x0800be2f
 800bdd0:	0800bdef 	.word	0x0800bdef
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be2f 	.word	0x0800be2f
 800bddc:	0800be07 	.word	0x0800be07
 800bde0:	0800bdf9 	.word	0x0800bdf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f9de 	bl	800c1a8 <USBD_GetDescriptor>
          break;
 800bdec:	e024      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fb6d 	bl	800c4d0 <USBD_SetAddress>
          break;
 800bdf6:	e01f      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fbac 	bl	800c558 <USBD_SetConfig>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
          break;
 800be04:	e018      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fc4b 	bl	800c6a4 <USBD_GetConfig>
          break;
 800be0e:	e013      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fc7c 	bl	800c710 <USBD_GetStatus>
          break;
 800be18:	e00e      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fcab 	bl	800c778 <USBD_SetFeature>
          break;
 800be22:	e009      	b.n	800be38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fcba 	bl	800c7a0 <USBD_ClrFeature>
          break;
 800be2c:	e004      	b.n	800be38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fd11 	bl	800c858 <USBD_CtlError>
          break;
 800be36:	bf00      	nop
      }
      break;
 800be38:	e004      	b.n	800be44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd0b 	bl	800c858 <USBD_CtlError>
      break;
 800be42:	bf00      	nop
  }

  return ret;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop

0800be50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be66:	2b40      	cmp	r3, #64	@ 0x40
 800be68:	d005      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be6a:	2b40      	cmp	r3, #64	@ 0x40
 800be6c:	d82f      	bhi.n	800bece <USBD_StdItfReq+0x7e>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be72:	2b20      	cmp	r3, #32
 800be74:	d12b      	bne.n	800bece <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	2b02      	cmp	r3, #2
 800be82:	d81d      	bhi.n	800bec0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	889b      	ldrh	r3, [r3, #4]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d813      	bhi.n	800beb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	88db      	ldrh	r3, [r3, #6]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d110      	bne.n	800beca <USBD_StdItfReq+0x7a>
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10d      	bne.n	800beca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fd9d 	bl	800c9ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800beb4:	e009      	b.n	800beca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fccd 	bl	800c858 <USBD_CtlError>
          break;
 800bebe:	e004      	b.n	800beca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcc8 	bl	800c858 <USBD_CtlError>
          break;
 800bec8:	e000      	b.n	800becc <USBD_StdItfReq+0x7c>
          break;
 800beca:	bf00      	nop
      }
      break;
 800becc:	e004      	b.n	800bed8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fcc1 	bl	800c858 <USBD_CtlError>
      break;
 800bed6:	bf00      	nop
  }

  return ret;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	889b      	ldrh	r3, [r3, #4]
 800bef4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800befe:	2b40      	cmp	r3, #64	@ 0x40
 800bf00:	d007      	beq.n	800bf12 <USBD_StdEPReq+0x30>
 800bf02:	2b40      	cmp	r3, #64	@ 0x40
 800bf04:	f200 8145 	bhi.w	800c192 <USBD_StdEPReq+0x2b0>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00c      	beq.n	800bf26 <USBD_StdEPReq+0x44>
 800bf0c:	2b20      	cmp	r3, #32
 800bf0e:	f040 8140 	bne.w	800c192 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
      break;
 800bf24:	e13a      	b.n	800c19c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	785b      	ldrb	r3, [r3, #1]
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d007      	beq.n	800bf3e <USBD_StdEPReq+0x5c>
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	f300 8129 	bgt.w	800c186 <USBD_StdEPReq+0x2a4>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d07f      	beq.n	800c038 <USBD_StdEPReq+0x156>
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d03c      	beq.n	800bfb6 <USBD_StdEPReq+0xd4>
 800bf3c:	e123      	b.n	800c186 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d002      	beq.n	800bf50 <USBD_StdEPReq+0x6e>
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d016      	beq.n	800bf7c <USBD_StdEPReq+0x9a>
 800bf4e:	e02c      	b.n	800bfaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <USBD_StdEPReq+0x90>
 800bf56:	7bbb      	ldrb	r3, [r7, #14]
 800bf58:	2b80      	cmp	r3, #128	@ 0x80
 800bf5a:	d00a      	beq.n	800bf72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f91b 	bl	800d19c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf66:	2180      	movs	r1, #128	@ 0x80
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 f917 	bl	800d19c <USBD_LL_StallEP>
 800bf6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf70:	e020      	b.n	800bfb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fc6f 	bl	800c858 <USBD_CtlError>
              break;
 800bf7a:	e01b      	b.n	800bfb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	885b      	ldrh	r3, [r3, #2]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10e      	bne.n	800bfa2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <USBD_StdEPReq+0xc0>
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b80      	cmp	r3, #128	@ 0x80
 800bf8e:	d008      	beq.n	800bfa2 <USBD_StdEPReq+0xc0>
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d104      	bne.n	800bfa2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf98:	7bbb      	ldrb	r3, [r7, #14]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f001 f8fd 	bl	800d19c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fd23 	bl	800c9ee <USBD_CtlSendStatus>

              break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fc53 	bl	800c858 <USBD_CtlError>
              break;
 800bfb2:	bf00      	nop
          }
          break;
 800bfb4:	e0ec      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d002      	beq.n	800bfc8 <USBD_StdEPReq+0xe6>
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d016      	beq.n	800bff4 <USBD_StdEPReq+0x112>
 800bfc6:	e030      	b.n	800c02a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00d      	beq.n	800bfea <USBD_StdEPReq+0x108>
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
 800bfd0:	2b80      	cmp	r3, #128	@ 0x80
 800bfd2:	d00a      	beq.n	800bfea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 f8df 	bl	800d19c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfde:	2180      	movs	r1, #128	@ 0x80
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 f8db 	bl	800d19c <USBD_LL_StallEP>
 800bfe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe8:	e025      	b.n	800c036 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fc33 	bl	800c858 <USBD_CtlError>
              break;
 800bff2:	e020      	b.n	800c036 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	885b      	ldrh	r3, [r3, #2]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d11b      	bne.n	800c034 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 f8e5 	bl	800d1da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fcec 	bl	800c9ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c028:	e004      	b.n	800c034 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fc13 	bl	800c858 <USBD_CtlError>
              break;
 800c032:	e000      	b.n	800c036 <USBD_StdEPReq+0x154>
              break;
 800c034:	bf00      	nop
          }
          break;
 800c036:	e0ab      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b02      	cmp	r3, #2
 800c042:	d002      	beq.n	800c04a <USBD_StdEPReq+0x168>
 800c044:	2b03      	cmp	r3, #3
 800c046:	d032      	beq.n	800c0ae <USBD_StdEPReq+0x1cc>
 800c048:	e097      	b.n	800c17a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d007      	beq.n	800c060 <USBD_StdEPReq+0x17e>
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	2b80      	cmp	r3, #128	@ 0x80
 800c054:	d004      	beq.n	800c060 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fbfd 	bl	800c858 <USBD_CtlError>
                break;
 800c05e:	e091      	b.n	800c184 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	da0b      	bge.n	800c080 <USBD_StdEPReq+0x19e>
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	3310      	adds	r3, #16
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	3304      	adds	r3, #4
 800c07e:	e00b      	b.n	800c098 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	4413      	add	r3, r2
 800c096:	3304      	adds	r3, #4
 800c098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fc47 	bl	800c93a <USBD_CtlSendData>
              break;
 800c0ac:	e06a      	b.n	800c184 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	da11      	bge.n	800c0da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	3324      	adds	r3, #36	@ 0x24
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d117      	bne.n	800c100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fbc0 	bl	800c858 <USBD_CtlError>
                  break;
 800c0d8:	e054      	b.n	800c184 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	f003 020f 	and.w	r2, r3, #15
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d104      	bne.n	800c100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fbad 	bl	800c858 <USBD_CtlError>
                  break;
 800c0fe:	e041      	b.n	800c184 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c104:	2b00      	cmp	r3, #0
 800c106:	da0b      	bge.n	800c120 <USBD_StdEPReq+0x23e>
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	3310      	adds	r3, #16
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	3304      	adds	r3, #4
 800c11e:	e00b      	b.n	800c138 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c120:	7bbb      	ldrb	r3, [r7, #14]
 800c122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	3304      	adds	r3, #4
 800c138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <USBD_StdEPReq+0x264>
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b80      	cmp	r3, #128	@ 0x80
 800c144:	d103      	bne.n	800c14e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e00e      	b.n	800c16c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f860 	bl	800d218 <USBD_LL_IsStallEP>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2201      	movs	r2, #1
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	e002      	b.n	800c16c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2202      	movs	r2, #2
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fbe1 	bl	800c93a <USBD_CtlSendData>
              break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fb6b 	bl	800c858 <USBD_CtlError>
              break;
 800c182:	bf00      	nop
          }
          break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb65 	bl	800c858 <USBD_CtlError>
          break;
 800c18e:	bf00      	nop
      }
      break;
 800c190:	e004      	b.n	800c19c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb5f 	bl	800c858 <USBD_CtlError>
      break;
 800c19a:	bf00      	nop
  }

  return ret;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	2b0e      	cmp	r3, #14
 800c1ca:	f200 8152 	bhi.w	800c472 <USBD_GetDescriptor+0x2ca>
 800c1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d4 <USBD_GetDescriptor+0x2c>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c245 	.word	0x0800c245
 800c1d8:	0800c25d 	.word	0x0800c25d
 800c1dc:	0800c29d 	.word	0x0800c29d
 800c1e0:	0800c473 	.word	0x0800c473
 800c1e4:	0800c473 	.word	0x0800c473
 800c1e8:	0800c413 	.word	0x0800c413
 800c1ec:	0800c43f 	.word	0x0800c43f
 800c1f0:	0800c473 	.word	0x0800c473
 800c1f4:	0800c473 	.word	0x0800c473
 800c1f8:	0800c473 	.word	0x0800c473
 800c1fc:	0800c473 	.word	0x0800c473
 800c200:	0800c473 	.word	0x0800c473
 800c204:	0800c473 	.word	0x0800c473
 800c208:	0800c473 	.word	0x0800c473
 800c20c:	0800c211 	.word	0x0800c211
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c216:	69db      	ldr	r3, [r3, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00b      	beq.n	800c234 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7c12      	ldrb	r2, [r2, #16]
 800c228:	f107 0108 	add.w	r1, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c232:	e126      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fb0e 	bl	800c858 <USBD_CtlError>
        err++;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	3301      	adds	r3, #1
 800c240:	72fb      	strb	r3, [r7, #11]
      break;
 800c242:	e11e      	b.n	800c482 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7c12      	ldrb	r2, [r2, #16]
 800c250:	f107 0108 	add.w	r1, r7, #8
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
 800c258:	60f8      	str	r0, [r7, #12]
      break;
 800c25a:	e112      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7c1b      	ldrb	r3, [r3, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10d      	bne.n	800c280 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26c:	f107 0208 	add.w	r2, r7, #8
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c27e:	e100      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c288:	f107 0208 	add.w	r2, r7, #8
 800c28c:	4610      	mov	r0, r2
 800c28e:	4798      	blx	r3
 800c290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	2202      	movs	r2, #2
 800c298:	701a      	strb	r2, [r3, #0]
      break;
 800c29a:	e0f2      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	885b      	ldrh	r3, [r3, #2]
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b05      	cmp	r3, #5
 800c2a4:	f200 80ac 	bhi.w	800c400 <USBD_GetDescriptor+0x258>
 800c2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b0 <USBD_GetDescriptor+0x108>)
 800c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2fd 	.word	0x0800c2fd
 800c2b8:	0800c331 	.word	0x0800c331
 800c2bc:	0800c365 	.word	0x0800c365
 800c2c0:	0800c399 	.word	0x0800c399
 800c2c4:	0800c3cd 	.word	0x0800c3cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e091      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fab2 	bl	800c858 <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e089      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e077      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa98 	bl	800c858 <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e06f      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e05d      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fa7e 	bl	800c858 <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e055      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e043      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa64 	bl	800c858 <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e03b      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7c12      	ldrb	r2, [r2, #16]
 800c3b0:	f107 0108 	add.w	r1, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ba:	e029      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa4a 	bl	800c858 <USBD_CtlError>
            err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ca:	e021      	b.n	800c410 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ee:	e00f      	b.n	800c410 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa30 	bl	800c858 <USBD_CtlError>
            err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fe:	e007      	b.n	800c410 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa28 	bl	800c858 <USBD_CtlError>
          err++;
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	3301      	adds	r3, #1
 800c40c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c40e:	bf00      	nop
      }
      break;
 800c410:	e037      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	7c1b      	ldrb	r3, [r3, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d109      	bne.n	800c42e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c422:	f107 0208 	add.w	r2, r7, #8
 800c426:	4610      	mov	r0, r2
 800c428:	4798      	blx	r3
 800c42a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c42c:	e029      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fa11 	bl	800c858 <USBD_CtlError>
        err++;
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	3301      	adds	r3, #1
 800c43a:	72fb      	strb	r3, [r7, #11]
      break;
 800c43c:	e021      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7c1b      	ldrb	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10d      	bne.n	800c462 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44e:	f107 0208 	add.w	r2, r7, #8
 800c452:	4610      	mov	r0, r2
 800c454:	4798      	blx	r3
 800c456:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	2207      	movs	r2, #7
 800c45e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c460:	e00f      	b.n	800c482 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f9f7 	bl	800c858 <USBD_CtlError>
        err++;
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	3301      	adds	r3, #1
 800c46e:	72fb      	strb	r3, [r7, #11]
      break;
 800c470:	e007      	b.n	800c482 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f9ef 	bl	800c858 <USBD_CtlError>
      err++;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	3301      	adds	r3, #1
 800c47e:	72fb      	strb	r3, [r7, #11]
      break;
 800c480:	bf00      	nop
  }

  if (err != 0U)
 800c482:	7afb      	ldrb	r3, [r7, #11]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d11e      	bne.n	800c4c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	88db      	ldrh	r3, [r3, #6]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d016      	beq.n	800c4be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c490:	893b      	ldrh	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	88da      	ldrh	r2, [r3, #6]
 800c49a:	893b      	ldrh	r3, [r7, #8]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	bf28      	it	cs
 800c4a0:	4613      	movcs	r3, r2
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4a6:	893b      	ldrh	r3, [r7, #8]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	68f9      	ldr	r1, [r7, #12]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fa44 	bl	800c93a <USBD_CtlSendData>
 800c4b2:	e009      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f9ce 	bl	800c858 <USBD_CtlError>
 800c4bc:	e004      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fa95 	bl	800c9ee <USBD_CtlSendStatus>
 800c4c4:	e000      	b.n	800c4c8 <USBD_GetDescriptor+0x320>
    return;
 800c4c6:	bf00      	nop
  }
}
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop

0800c4d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	889b      	ldrh	r3, [r3, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d131      	bne.n	800c546 <USBD_SetAddress+0x76>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	88db      	ldrh	r3, [r3, #6]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d12d      	bne.n	800c546 <USBD_SetAddress+0x76>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4f0:	d829      	bhi.n	800c546 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	885b      	ldrh	r3, [r3, #2]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b03      	cmp	r3, #3
 800c508:	d104      	bne.n	800c514 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f9a3 	bl	800c858 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c512:	e01d      	b.n	800c550 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7bfa      	ldrb	r2, [r7, #15]
 800c518:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fea5 	bl	800d270 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fa61 	bl	800c9ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2202      	movs	r2, #2
 800c536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53a:	e009      	b.n	800c550 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c544:	e004      	b.n	800c550 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f985 	bl	800c858 <USBD_CtlError>
  }
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	4b4c      	ldr	r3, [pc, #304]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c56e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c570:	4b4b      	ldr	r3, [pc, #300]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d905      	bls.n	800c584 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f96c 	bl	800c858 <USBD_CtlError>
    return USBD_FAIL;
 800c580:	2303      	movs	r3, #3
 800c582:	e088      	b.n	800c696 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d002      	beq.n	800c596 <USBD_SetConfig+0x3e>
 800c590:	2b03      	cmp	r3, #3
 800c592:	d025      	beq.n	800c5e0 <USBD_SetConfig+0x88>
 800c594:	e071      	b.n	800c67a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c596:	4b42      	ldr	r3, [pc, #264]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01c      	beq.n	800c5d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c59e:	4b40      	ldr	r3, [pc, #256]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5a8:	4b3d      	ldr	r3, [pc, #244]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff f992 	bl	800b8d8 <USBD_SetClassConfig>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5b8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d004      	beq.n	800c5c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f949 	bl	800c858 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5c6:	e065      	b.n	800c694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fa10 	bl	800c9ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5d6:	e05d      	b.n	800c694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa08 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c5de:	e059      	b.n	800c694 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5e0:	4b2f      	ldr	r3, [pc, #188]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d112      	bne.n	800c60e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5f0:	4b2b      	ldr	r3, [pc, #172]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5fa:	4b29      	ldr	r3, [pc, #164]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff f985 	bl	800b910 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f9f1 	bl	800c9ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c60c:	e042      	b.n	800c694 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c60e:	4b24      	ldr	r3, [pc, #144]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d02a      	beq.n	800c672 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff f973 	bl	800b910 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c62a:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c634:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff f94c 	bl	800b8d8 <USBD_SetClassConfig>
 800c640:	4603      	mov	r3, r0
 800c642:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00f      	beq.n	800c66a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f903 	bl	800c858 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff f958 	bl	800b910 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2202      	movs	r2, #2
 800c664:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c668:	e014      	b.n	800c694 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9bf 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c670:	e010      	b.n	800c694 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f9bb 	bl	800c9ee <USBD_CtlSendStatus>
      break;
 800c678:	e00c      	b.n	800c694 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f8eb 	bl	800c858 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c682:	4b07      	ldr	r3, [pc, #28]	@ (800c6a0 <USBD_SetConfig+0x148>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff f941 	bl	800b910 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
      break;
 800c692:	bf00      	nop
  }

  return ret;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200004a4 	.word	0x200004a4

0800c6a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	88db      	ldrh	r3, [r3, #6]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d004      	beq.n	800c6c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f8cd 	bl	800c858 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6be:	e023      	b.n	800c708 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	dc02      	bgt.n	800c6d2 <USBD_GetConfig+0x2e>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dc03      	bgt.n	800c6d8 <USBD_GetConfig+0x34>
 800c6d0:	e015      	b.n	800c6fe <USBD_GetConfig+0x5a>
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d00b      	beq.n	800c6ee <USBD_GetConfig+0x4a>
 800c6d6:	e012      	b.n	800c6fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f927 	bl	800c93a <USBD_CtlSendData>
        break;
 800c6ec:	e00c      	b.n	800c708 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f91f 	bl	800c93a <USBD_CtlSendData>
        break;
 800c6fc:	e004      	b.n	800c708 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f8a9 	bl	800c858 <USBD_CtlError>
        break;
 800c706:	bf00      	nop
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c720:	b2db      	uxtb	r3, r3
 800c722:	3b01      	subs	r3, #1
 800c724:	2b02      	cmp	r3, #2
 800c726:	d81e      	bhi.n	800c766 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	88db      	ldrh	r3, [r3, #6]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d004      	beq.n	800c73a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f890 	bl	800c858 <USBD_CtlError>
        break;
 800c738:	e01a      	b.n	800c770 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f043 0202 	orr.w	r2, r3, #2
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	330c      	adds	r3, #12
 800c75a:	2202      	movs	r2, #2
 800c75c:	4619      	mov	r1, r3
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f8eb 	bl	800c93a <USBD_CtlSendData>
      break;
 800c764:	e004      	b.n	800c770 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f875 	bl	800c858 <USBD_CtlError>
      break;
 800c76e:	bf00      	nop
  }
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	885b      	ldrh	r3, [r3, #2]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d106      	bne.n	800c798 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f92b 	bl	800c9ee <USBD_CtlSendStatus>
  }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	d80b      	bhi.n	800c7d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	885b      	ldrh	r3, [r3, #2]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d10c      	bne.n	800c7da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f910 	bl	800c9ee <USBD_CtlSendStatus>
      }
      break;
 800c7ce:	e004      	b.n	800c7da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f840 	bl	800c858 <USBD_CtlError>
      break;
 800c7d8:	e000      	b.n	800c7dc <USBD_ClrFeature+0x3c>
      break;
 800c7da:	bf00      	nop
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	781a      	ldrb	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff fa92 	bl	800bd38 <SWAPBYTE>
 800c814:	4603      	mov	r3, r0
 800c816:	461a      	mov	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3301      	adds	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff fa85 	bl	800bd38 <SWAPBYTE>
 800c82e:	4603      	mov	r3, r0
 800c830:	461a      	mov	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3301      	adds	r3, #1
 800c83a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	3301      	adds	r3, #1
 800c840:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff fa78 	bl	800bd38 <SWAPBYTE>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	80da      	strh	r2, [r3, #6]
}
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c862:	2180      	movs	r1, #128	@ 0x80
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fc99 	bl	800d19c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c86a:	2100      	movs	r1, #0
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fc95 	bl	800d19c <USBD_LL_StallEP>
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d036      	beq.n	800c8fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c894:	6938      	ldr	r0, [r7, #16]
 800c896:	f000 f836 	bl	800c906 <USBD_GetLen>
 800c89a:	4603      	mov	r3, r0
 800c89c:	3301      	adds	r3, #1
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	7812      	ldrb	r2, [r2, #0]
 800c8b2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	4413      	add	r3, r2
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8ca:	e013      	b.n	800c8f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	613b      	str	r3, [r7, #16]
    idx++;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1e7      	bne.n	800c8cc <USBD_GetString+0x52>
 800c8fc:	e000      	b.n	800c900 <USBD_GetString+0x86>
    return;
 800c8fe:	bf00      	nop
  }
}
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c916:	e005      	b.n	800c924 <USBD_GetLen+0x1e>
  {
    len++;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	3301      	adds	r3, #1
 800c91c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	3301      	adds	r3, #1
 800c922:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1f5      	bne.n	800c918 <USBD_GetLen+0x12>
  }

  return len;
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2202      	movs	r2, #2
 800c94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	2100      	movs	r1, #0
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 fca4 	bl	800d2ae <USBD_LL_Transmit>

  return USBD_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	2100      	movs	r1, #0
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 fc93 	bl	800d2ae <USBD_LL_Transmit>

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2203      	movs	r2, #3
 800c9a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 fc97 	bl	800d2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fc86 	bl	800d2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9fe:	2300      	movs	r3, #0
 800ca00:	2200      	movs	r2, #0
 800ca02:	2100      	movs	r1, #0
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fc52 	bl	800d2ae <USBD_LL_Transmit>

  return USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca24:	2300      	movs	r3, #0
 800ca26:	2200      	movs	r2, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fc60 	bl	800d2f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800ca40:	2200      	movs	r2, #0
 800ca42:	2120      	movs	r1, #32
 800ca44:	4818      	ldr	r0, [pc, #96]	@ (800caa8 <MX_USB_Device_Init+0x6c>)
 800ca46:	f7f6 f885 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800ca4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ca4e:	f7f5 fb53 	bl	80020f8 <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800ca52:	2201      	movs	r2, #1
 800ca54:	2120      	movs	r1, #32
 800ca56:	4814      	ldr	r0, [pc, #80]	@ (800caa8 <MX_USB_Device_Init+0x6c>)
 800ca58:	f7f6 f87c 	bl	8002b54 <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	4913      	ldr	r1, [pc, #76]	@ (800caac <MX_USB_Device_Init+0x70>)
 800ca60:	4813      	ldr	r0, [pc, #76]	@ (800cab0 <MX_USB_Device_Init+0x74>)
 800ca62:	f7fe fecb 	bl	800b7fc <USBD_Init>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d001      	beq.n	800ca70 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800ca6c:	f7f4 f899 	bl	8000ba2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ca70:	4910      	ldr	r1, [pc, #64]	@ (800cab4 <MX_USB_Device_Init+0x78>)
 800ca72:	480f      	ldr	r0, [pc, #60]	@ (800cab0 <MX_USB_Device_Init+0x74>)
 800ca74:	f7fe fef2 	bl	800b85c <USBD_RegisterClass>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <MX_USB_Device_Init+0x46>
    Error_Handler();
 800ca7e:	f7f4 f890 	bl	8000ba2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ca82:	490d      	ldr	r1, [pc, #52]	@ (800cab8 <MX_USB_Device_Init+0x7c>)
 800ca84:	480a      	ldr	r0, [pc, #40]	@ (800cab0 <MX_USB_Device_Init+0x74>)
 800ca86:	f7fe fe43 	bl	800b710 <USBD_CDC_RegisterInterface>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <MX_USB_Device_Init+0x58>
    Error_Handler();
 800ca90:	f7f4 f887 	bl	8000ba2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ca94:	4806      	ldr	r0, [pc, #24]	@ (800cab0 <MX_USB_Device_Init+0x74>)
 800ca96:	f7fe ff08 	bl	800b8aa <USBD_Start>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <MX_USB_Device_Init+0x68>
    Error_Handler();
 800caa0:	f7f4 f87f 	bl	8000ba2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800caa4:	bf00      	nop
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	48000400 	.word	0x48000400
 800caac:	20000130 	.word	0x20000130
 800cab0:	200004a8 	.word	0x200004a8
 800cab4:	20000018 	.word	0x20000018
 800cab8:	2000011c 	.word	0x2000011c

0800cabc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cac0:	2200      	movs	r2, #0
 800cac2:	4905      	ldr	r1, [pc, #20]	@ (800cad8 <CDC_Init_FS+0x1c>)
 800cac4:	4805      	ldr	r0, [pc, #20]	@ (800cadc <CDC_Init_FS+0x20>)
 800cac6:	f7fe fe38 	bl	800b73a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800caca:	4905      	ldr	r1, [pc, #20]	@ (800cae0 <CDC_Init_FS+0x24>)
 800cacc:	4803      	ldr	r0, [pc, #12]	@ (800cadc <CDC_Init_FS+0x20>)
 800cace:	f7fe fe52 	bl	800b776 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000f78 	.word	0x20000f78
 800cadc:	200004a8 	.word	0x200004a8
 800cae0:	20000778 	.word	0x20000778

0800cae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caea:	4618      	mov	r0, r3
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	71fb      	strb	r3, [r7, #7]
 800cb00:	4613      	mov	r3, r2
 800cb02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb04:	79fb      	ldrb	r3, [r7, #7]
 800cb06:	2b23      	cmp	r3, #35	@ 0x23
 800cb08:	d84a      	bhi.n	800cba0 <CDC_Control_FS+0xac>
 800cb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb10 <CDC_Control_FS+0x1c>)
 800cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb10:	0800cba1 	.word	0x0800cba1
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cba1 	.word	0x0800cba1
 800cb1c:	0800cba1 	.word	0x0800cba1
 800cb20:	0800cba1 	.word	0x0800cba1
 800cb24:	0800cba1 	.word	0x0800cba1
 800cb28:	0800cba1 	.word	0x0800cba1
 800cb2c:	0800cba1 	.word	0x0800cba1
 800cb30:	0800cba1 	.word	0x0800cba1
 800cb34:	0800cba1 	.word	0x0800cba1
 800cb38:	0800cba1 	.word	0x0800cba1
 800cb3c:	0800cba1 	.word	0x0800cba1
 800cb40:	0800cba1 	.word	0x0800cba1
 800cb44:	0800cba1 	.word	0x0800cba1
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cba1 	.word	0x0800cba1
 800cb54:	0800cba1 	.word	0x0800cba1
 800cb58:	0800cba1 	.word	0x0800cba1
 800cb5c:	0800cba1 	.word	0x0800cba1
 800cb60:	0800cba1 	.word	0x0800cba1
 800cb64:	0800cba1 	.word	0x0800cba1
 800cb68:	0800cba1 	.word	0x0800cba1
 800cb6c:	0800cba1 	.word	0x0800cba1
 800cb70:	0800cba1 	.word	0x0800cba1
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	0800cba1 	.word	0x0800cba1
 800cb7c:	0800cba1 	.word	0x0800cba1
 800cb80:	0800cba1 	.word	0x0800cba1
 800cb84:	0800cba1 	.word	0x0800cba1
 800cb88:	0800cba1 	.word	0x0800cba1
 800cb8c:	0800cba1 	.word	0x0800cba1
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cba1 	.word	0x0800cba1
 800cb98:	0800cba1 	.word	0x0800cba1
 800cb9c:	0800cba1 	.word	0x0800cba1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cba0:	bf00      	nop
  }

  return (USBD_OK);
 800cba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4810      	ldr	r0, [pc, #64]	@ (800cc00 <CDC_Receive_FS+0x50>)
 800cbbe:	f7fe fdda 	bl	800b776 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbc2:	480f      	ldr	r0, [pc, #60]	@ (800cc00 <CDC_Receive_FS+0x50>)
 800cbc4:	f7fe fdf0 	bl	800b7a8 <USBD_CDC_ReceivePacket>

  usb_data_present = 1;
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	@ (800cc04 <CDC_Receive_FS+0x54>)
 800cbca:	2201      	movs	r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]

  uint8_t len = (uint8_t) *Len;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	73fb      	strb	r3, [r7, #15]
  memset (usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800cbd4:	2240      	movs	r2, #64	@ 0x40
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	480b      	ldr	r0, [pc, #44]	@ (800cc08 <CDC_Receive_FS+0x58>)
 800cbda:	f000 fc3d 	bl	800d458 <memset>
  memcpy (usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	4808      	ldr	r0, [pc, #32]	@ (800cc08 <CDC_Receive_FS+0x58>)
 800cbe6:	f000 fc63 	bl	800d4b0 <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800cbea:	2240      	movs	r2, #64	@ 0x40
 800cbec:	2100      	movs	r1, #0
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fc32 	bl	800d458 <memset>

  return (USBD_OK);
 800cbf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200004a8 	.word	0x200004a8
 800cc04:	200002dc 	.word	0x200002dc
 800cc08:	20000290 	.word	0x20000290

0800cc0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b087      	sub	sp, #28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	4613      	mov	r3, r2
 800cc18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	371c      	adds	r7, #28
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
	...

0800cc30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2212      	movs	r2, #18
 800cc40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cc42:	4b03      	ldr	r3, [pc, #12]	@ (800cc50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	20000150 	.word	0x20000150

0800cc54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2204      	movs	r2, #4
 800cc64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc66:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr
 800cc74:	20000164 	.word	0x20000164

0800cc78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4907      	ldr	r1, [pc, #28]	@ (800ccac <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc8e:	4808      	ldr	r0, [pc, #32]	@ (800ccb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc90:	f7ff fdf3 	bl	800c87a <USBD_GetString>
 800cc94:	e004      	b.n	800cca0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4904      	ldr	r1, [pc, #16]	@ (800ccac <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc9a:	4805      	ldr	r0, [pc, #20]	@ (800ccb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc9c:	f7ff fded 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca0:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001778 	.word	0x20001778
 800ccb0:	0800d4f0 	.word	0x0800d4f0

0800ccb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	4904      	ldr	r1, [pc, #16]	@ (800ccd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ccc4:	4804      	ldr	r0, [pc, #16]	@ (800ccd8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ccc6:	f7ff fdd8 	bl	800c87a <USBD_GetString>
  return USBD_StrDesc;
 800ccca:	4b02      	ldr	r3, [pc, #8]	@ (800ccd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	20001778 	.word	0x20001778
 800ccd8:	0800d504 	.word	0x0800d504

0800ccdc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	221a      	movs	r2, #26
 800ccec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccee:	f000 f843 	bl	800cd78 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ccf2:	4b02      	ldr	r3, [pc, #8]	@ (800ccfc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20000168 	.word	0x20000168

0800cd00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	6039      	str	r1, [r7, #0]
 800cd0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd0c:	79fb      	ldrb	r3, [r7, #7]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d105      	bne.n	800cd1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	4907      	ldr	r1, [pc, #28]	@ (800cd34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd16:	4808      	ldr	r0, [pc, #32]	@ (800cd38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd18:	f7ff fdaf 	bl	800c87a <USBD_GetString>
 800cd1c:	e004      	b.n	800cd28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	4904      	ldr	r1, [pc, #16]	@ (800cd34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd22:	4805      	ldr	r0, [pc, #20]	@ (800cd38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd24:	f7ff fda9 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd28:	4b02      	ldr	r3, [pc, #8]	@ (800cd34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20001778 	.word	0x20001778
 800cd38:	0800d518 	.word	0x0800d518

0800cd3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	@ (800cd70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	@ (800cd74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd54:	f7ff fd91 	bl	800c87a <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	@ (800cd70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd60:	f7ff fd8b 	bl	800c87a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20001778 	.word	0x20001778
 800cd74:	0800d524 	.word	0x0800d524

0800cd78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	@ (800cdbc <Get_SerialNum+0x44>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd84:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc0 <Get_SerialNum+0x48>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc4 <Get_SerialNum+0x4c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4413      	add	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd9e:	2208      	movs	r2, #8
 800cda0:	4909      	ldr	r1, [pc, #36]	@ (800cdc8 <Get_SerialNum+0x50>)
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 f814 	bl	800cdd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cda8:	2204      	movs	r2, #4
 800cdaa:	4908      	ldr	r1, [pc, #32]	@ (800cdcc <Get_SerialNum+0x54>)
 800cdac:	68b8      	ldr	r0, [r7, #8]
 800cdae:	f000 f80f 	bl	800cdd0 <IntToUnicode>
  }
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	1fff7590 	.word	0x1fff7590
 800cdc0:	1fff7594 	.word	0x1fff7594
 800cdc4:	1fff7598 	.word	0x1fff7598
 800cdc8:	2000016a 	.word	0x2000016a
 800cdcc:	2000017a 	.word	0x2000017a

0800cdd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4613      	mov	r3, r2
 800cddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cde2:	2300      	movs	r3, #0
 800cde4:	75fb      	strb	r3, [r7, #23]
 800cde6:	e027      	b.n	800ce38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	0f1b      	lsrs	r3, r3, #28
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	d80b      	bhi.n	800ce08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	0f1b      	lsrs	r3, r3, #28
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	440b      	add	r3, r1
 800ce00:	3230      	adds	r2, #48	@ 0x30
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e00a      	b.n	800ce1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	0f1b      	lsrs	r3, r3, #28
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	4619      	mov	r1, r3
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	440b      	add	r3, r1
 800ce18:	3237      	adds	r2, #55	@ 0x37
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	011b      	lsls	r3, r3, #4
 800ce22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	3301      	adds	r3, #1
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	3301      	adds	r3, #1
 800ce36:	75fb      	strb	r3, [r7, #23]
 800ce38:	7dfa      	ldrb	r2, [r7, #23]
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d3d3      	bcc.n	800cde8 <IntToUnicode+0x18>
  }
}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	371c      	adds	r7, #28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
	...

0800ce50 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b098      	sub	sp, #96	@ 0x60
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce58:	f107 0310 	add.w	r3, r7, #16
 800ce5c:	2250      	movs	r2, #80	@ 0x50
 800ce5e:	2100      	movs	r1, #0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 faf9 	bl	800d458 <memset>
  if(pcdHandle->Instance==USB)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a15      	ldr	r2, [pc, #84]	@ (800cec0 <HAL_PCD_MspInit+0x70>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d122      	bne.n	800ceb6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce74:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ce76:	2300      	movs	r3, #0
 800ce78:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce7a:	f107 0310 	add.w	r3, r7, #16
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7f8 ff14 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ce8a:	f7f3 fe8a 	bl	8000ba2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cec4 <HAL_PCD_MspInit+0x74>)
 800ce90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce92:	4a0c      	ldr	r2, [pc, #48]	@ (800cec4 <HAL_PCD_MspInit+0x74>)
 800ce94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce98:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cec4 <HAL_PCD_MspInit+0x74>)
 800ce9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cea2:	60fb      	str	r3, [r7, #12]
 800cea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cea6:	2200      	movs	r2, #0
 800cea8:	2100      	movs	r1, #0
 800ceaa:	2014      	movs	r0, #20
 800ceac:	f7f5 fa21 	bl	80022f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ceb0:	2014      	movs	r0, #20
 800ceb2:	f7f5 fa38 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ceb6:	bf00      	nop
 800ceb8:	3760      	adds	r7, #96	@ 0x60
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	40005c00 	.word	0x40005c00
 800cec4:	40021000 	.word	0x40021000

0800cec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cedc:	4619      	mov	r1, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	f7fe fd2e 	bl	800b940 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cefe:	78fa      	ldrb	r2, [r7, #3]
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	78fb      	ldrb	r3, [r7, #3]
 800cf14:	4619      	mov	r1, r3
 800cf16:	f7fe fd68 	bl	800b9ea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf34:	78fa      	ldrb	r2, [r7, #3]
 800cf36:	6879      	ldr	r1, [r7, #4]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	440b      	add	r3, r1
 800cf42:	3324      	adds	r3, #36	@ 0x24
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	78fb      	ldrb	r3, [r7, #3]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f7fe fdb1 	bl	800bab0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cf4e:	bf00      	nop
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe fec5 	bl	800bcf4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	795b      	ldrb	r3, [r3, #5]
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d001      	beq.n	800cf8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf86:	f7f3 fe0c 	bl	8000ba2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf90:	7bfa      	ldrb	r2, [r7, #15]
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fe fe6f 	bl	800bc78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe fe1b 	bl	800bbdc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cfa6:	bf00      	nop
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe fe6a 	bl	800bc98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7a5b      	ldrb	r3, [r3, #9]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfcc:	4b04      	ldr	r3, [pc, #16]	@ (800cfe0 <HAL_PCD_SuspendCallback+0x30>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	4a03      	ldr	r2, [pc, #12]	@ (800cfe0 <HAL_PCD_SuspendCallback+0x30>)
 800cfd2:	f043 0306 	orr.w	r3, r3, #6
 800cfd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	e000ed00 	.word	0xe000ed00

0800cfe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	7a5b      	ldrb	r3, [r3, #9]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d007      	beq.n	800d004 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cff4:	4b08      	ldr	r3, [pc, #32]	@ (800d018 <HAL_PCD_ResumeCallback+0x34>)
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	4a07      	ldr	r2, [pc, #28]	@ (800d018 <HAL_PCD_ResumeCallback+0x34>)
 800cffa:	f023 0306 	bic.w	r3, r3, #6
 800cffe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d000:	f000 f9f8 	bl	800d3f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fe5a 	bl	800bcc4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	e000ed00 	.word	0xe000ed00

0800d01c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d024:	4a2b      	ldr	r2, [pc, #172]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a29      	ldr	r2, [pc, #164]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d030:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d034:	4b27      	ldr	r3, [pc, #156]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d036:	4a28      	ldr	r2, [pc, #160]	@ (800d0d8 <USBD_LL_Init+0xbc>)
 800d038:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d03a:	4b26      	ldr	r3, [pc, #152]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d03c:	2208      	movs	r2, #8
 800d03e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d040:	4b24      	ldr	r3, [pc, #144]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d042:	2202      	movs	r2, #2
 800d044:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d046:	4b23      	ldr	r3, [pc, #140]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d048:	2202      	movs	r2, #2
 800d04a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d04c:	4b21      	ldr	r3, [pc, #132]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d04e:	2200      	movs	r2, #0
 800d050:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d052:	4b20      	ldr	r3, [pc, #128]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d054:	2200      	movs	r2, #0
 800d056:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d058:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d05e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d060:	2200      	movs	r2, #0
 800d062:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d064:	481b      	ldr	r0, [pc, #108]	@ (800d0d4 <USBD_LL_Init+0xb8>)
 800d066:	f7f6 fb3d 	bl	80036e4 <HAL_PCD_Init>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d070:	f7f3 fd97 	bl	8000ba2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d07a:	2318      	movs	r3, #24
 800d07c:	2200      	movs	r2, #0
 800d07e:	2100      	movs	r1, #0
 800d080:	f7f7 ffc4 	bl	800500c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d08a:	2358      	movs	r3, #88	@ 0x58
 800d08c:	2200      	movs	r2, #0
 800d08e:	2180      	movs	r1, #128	@ 0x80
 800d090:	f7f7 ffbc 	bl	800500c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d09a:	23c0      	movs	r3, #192	@ 0xc0
 800d09c:	2200      	movs	r2, #0
 800d09e:	2181      	movs	r1, #129	@ 0x81
 800d0a0:	f7f7 ffb4 	bl	800500c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	f7f7 ffab 	bl	800500c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	2182      	movs	r1, #130	@ 0x82
 800d0c4:	f7f7 ffa2 	bl	800500c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20001978 	.word	0x20001978
 800d0d8:	40005c00 	.word	0x40005c00

0800d0dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7f6 fbc4 	bl	8003880 <HAL_PCD_Start>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 f97e 	bl	800d400 <USBD_Get_USB_Status>
 800d104:	4603      	mov	r3, r0
 800d106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d108:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	4608      	mov	r0, r1
 800d11c:	4611      	mov	r1, r2
 800d11e:	461a      	mov	r2, r3
 800d120:	4603      	mov	r3, r0
 800d122:	70fb      	strb	r3, [r7, #3]
 800d124:	460b      	mov	r3, r1
 800d126:	70bb      	strb	r3, [r7, #2]
 800d128:	4613      	mov	r3, r2
 800d12a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d13a:	78bb      	ldrb	r3, [r7, #2]
 800d13c:	883a      	ldrh	r2, [r7, #0]
 800d13e:	78f9      	ldrb	r1, [r7, #3]
 800d140:	f7f6 fd0b 	bl	8003b5a <HAL_PCD_EP_Open>
 800d144:	4603      	mov	r3, r0
 800d146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d148:	7bfb      	ldrb	r3, [r7, #15]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f958 	bl	800d400 <USBD_Get_USB_Status>
 800d150:	4603      	mov	r3, r0
 800d152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d154:	7bbb      	ldrb	r3, [r7, #14]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16e:	2300      	movs	r3, #0
 800d170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d178:	78fa      	ldrb	r2, [r7, #3]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7f6 fd4b 	bl	8003c18 <HAL_PCD_EP_Close>
 800d182:	4603      	mov	r3, r0
 800d184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d186:	7bfb      	ldrb	r3, [r7, #15]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 f939 	bl	800d400 <USBD_Get_USB_Status>
 800d18e:	4603      	mov	r3, r0
 800d190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d192:	7bbb      	ldrb	r3, [r7, #14]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f6 fdf4 	bl	8003da8 <HAL_PCD_EP_SetStall>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f91a 	bl	800d400 <USBD_Get_USB_Status>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1f4:	78fa      	ldrb	r2, [r7, #3]
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7f6 fe27 	bl	8003e4c <HAL_PCD_EP_ClrStall>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d202:	7bfb      	ldrb	r3, [r7, #15]
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f8fb 	bl	800d400 <USBD_Get_USB_Status>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d22a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d22c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d230:	2b00      	cmp	r3, #0
 800d232:	da0b      	bge.n	800d24c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d23a:	68f9      	ldr	r1, [r7, #12]
 800d23c:	4613      	mov	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	00db      	lsls	r3, r3, #3
 800d244:	440b      	add	r3, r1
 800d246:	3312      	adds	r3, #18
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	e00b      	b.n	800d264 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d24c:	78fb      	ldrb	r3, [r7, #3]
 800d24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d252:	68f9      	ldr	r1, [r7, #12]
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	440b      	add	r3, r1
 800d25e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d262:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d28a:	78fa      	ldrb	r2, [r7, #3]
 800d28c:	4611      	mov	r1, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f6 fc3f 	bl	8003b12 <HAL_PCD_SetAddress>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 f8b0 	bl	800d400 <USBD_Get_USB_Status>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b086      	sub	sp, #24
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	603b      	str	r3, [r7, #0]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d2cc:	7af9      	ldrb	r1, [r7, #11]
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	f7f6 fd32 	bl	8003d3a <HAL_PCD_EP_Transmit>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f88f 	bl	800d400 <USBD_Get_USB_Status>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d30e:	7af9      	ldrb	r1, [r7, #11]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	f7f6 fcc8 	bl	8003ca8 <HAL_PCD_EP_Receive>
 800d318:	4603      	mov	r3, r0
 800d31a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 f86e 	bl	800d400 <USBD_Get_USB_Status>
 800d324:	4603      	mov	r3, r0
 800d326:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d328:	7dbb      	ldrb	r3, [r7, #22]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b082      	sub	sp, #8
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	460b      	mov	r3, r1
 800d33c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d344:	78fa      	ldrb	r2, [r7, #3]
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f6 fcde 	bl	8003d0a <HAL_PCD_EP_GetRxCount>
 800d34e:	4603      	mov	r3, r0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d002      	beq.n	800d370 <HAL_PCDEx_LPM_Callback+0x18>
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d013      	beq.n	800d396 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d36e:	e023      	b.n	800d3b8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7a5b      	ldrb	r3, [r3, #9]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d378:	f000 f83c 	bl	800d3f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d37c:	4b10      	ldr	r3, [pc, #64]	@ (800d3c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d382:	f023 0306 	bic.w	r3, r3, #6
 800d386:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fe fc98 	bl	800bcc4 <USBD_LL_Resume>
    break;
 800d394:	e010      	b.n	800d3b8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe fc7b 	bl	800bc98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	7a5b      	ldrb	r3, [r3, #9]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3aa:	4b05      	ldr	r3, [pc, #20]	@ (800d3c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	4a04      	ldr	r2, [pc, #16]	@ (800d3c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3b0:	f043 0306 	orr.w	r3, r3, #6
 800d3b4:	6113      	str	r3, [r2, #16]
    break;
 800d3b6:	bf00      	nop
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	e000ed00 	.word	0xe000ed00

0800d3c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3cc:	4b03      	ldr	r3, [pc, #12]	@ (800d3dc <USBD_static_malloc+0x18>)
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	20001c54 	.word	0x20001c54

0800d3e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]

}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d3f8:	f7f3 fb88 	bl	8000b0c <SystemClock_Config>
}
 800d3fc:	bf00      	nop
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d817      	bhi.n	800d444 <USBD_Get_USB_Status+0x44>
 800d414:	a201      	add	r2, pc, #4	@ (adr r2, 800d41c <USBD_Get_USB_Status+0x1c>)
 800d416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41a:	bf00      	nop
 800d41c:	0800d42d 	.word	0x0800d42d
 800d420:	0800d433 	.word	0x0800d433
 800d424:	0800d439 	.word	0x0800d439
 800d428:	0800d43f 	.word	0x0800d43f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]
    break;
 800d430:	e00b      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d432:	2303      	movs	r3, #3
 800d434:	73fb      	strb	r3, [r7, #15]
    break;
 800d436:	e008      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d438:	2301      	movs	r3, #1
 800d43a:	73fb      	strb	r3, [r7, #15]
    break;
 800d43c:	e005      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d43e:	2303      	movs	r3, #3
 800d440:	73fb      	strb	r3, [r7, #15]
    break;
 800d442:	e002      	b.n	800d44a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d444:	2303      	movs	r3, #3
 800d446:	73fb      	strb	r3, [r7, #15]
    break;
 800d448:	bf00      	nop
  }
  return usb_status;
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3714      	adds	r7, #20
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <memset>:
 800d458:	4402      	add	r2, r0
 800d45a:	4603      	mov	r3, r0
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d100      	bne.n	800d462 <memset+0xa>
 800d460:	4770      	bx	lr
 800d462:	f803 1b01 	strb.w	r1, [r3], #1
 800d466:	e7f9      	b.n	800d45c <memset+0x4>

0800d468 <__libc_init_array>:
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	4d0d      	ldr	r5, [pc, #52]	@ (800d4a0 <__libc_init_array+0x38>)
 800d46c:	4c0d      	ldr	r4, [pc, #52]	@ (800d4a4 <__libc_init_array+0x3c>)
 800d46e:	1b64      	subs	r4, r4, r5
 800d470:	10a4      	asrs	r4, r4, #2
 800d472:	2600      	movs	r6, #0
 800d474:	42a6      	cmp	r6, r4
 800d476:	d109      	bne.n	800d48c <__libc_init_array+0x24>
 800d478:	4d0b      	ldr	r5, [pc, #44]	@ (800d4a8 <__libc_init_array+0x40>)
 800d47a:	4c0c      	ldr	r4, [pc, #48]	@ (800d4ac <__libc_init_array+0x44>)
 800d47c:	f000 f826 	bl	800d4cc <_init>
 800d480:	1b64      	subs	r4, r4, r5
 800d482:	10a4      	asrs	r4, r4, #2
 800d484:	2600      	movs	r6, #0
 800d486:	42a6      	cmp	r6, r4
 800d488:	d105      	bne.n	800d496 <__libc_init_array+0x2e>
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d490:	4798      	blx	r3
 800d492:	3601      	adds	r6, #1
 800d494:	e7ee      	b.n	800d474 <__libc_init_array+0xc>
 800d496:	f855 3b04 	ldr.w	r3, [r5], #4
 800d49a:	4798      	blx	r3
 800d49c:	3601      	adds	r6, #1
 800d49e:	e7f2      	b.n	800d486 <__libc_init_array+0x1e>
 800d4a0:	0800d57c 	.word	0x0800d57c
 800d4a4:	0800d57c 	.word	0x0800d57c
 800d4a8:	0800d57c 	.word	0x0800d57c
 800d4ac:	0800d580 	.word	0x0800d580

0800d4b0 <memcpy>:
 800d4b0:	440a      	add	r2, r1
 800d4b2:	4291      	cmp	r1, r2
 800d4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4b8:	d100      	bne.n	800d4bc <memcpy+0xc>
 800d4ba:	4770      	bx	lr
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4c6:	4291      	cmp	r1, r2
 800d4c8:	d1f9      	bne.n	800d4be <memcpy+0xe>
 800d4ca:	bd10      	pop	{r4, pc}

0800d4cc <_init>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	bf00      	nop
 800d4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d2:	bc08      	pop	{r3}
 800d4d4:	469e      	mov	lr, r3
 800d4d6:	4770      	bx	lr

0800d4d8 <_fini>:
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	bf00      	nop
 800d4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4de:	bc08      	pop	{r3}
 800d4e0:	469e      	mov	lr, r3
 800d4e2:	4770      	bx	lr
