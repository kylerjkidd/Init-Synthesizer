
Init-Synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc50  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800fe28  0800fe28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e4  080106e4  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  080106e4  080106e4  000116e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106ec  080106ec  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106ec  080106ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106f0  080106f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080106f4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  200001d4  080108c8  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002068  080108c8  00013068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d49f  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006658  00000000  00000000  0003f6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002030  00000000  00000000  00045d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001895  00000000  00000000  00047d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262b9  00000000  00000000  000495c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e23d  00000000  00000000  0006f87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db56a  00000000  00000000  0009dabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00179025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088d0  00000000  00000000  001790e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001819b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00181a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00181b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d4 	.word	0x200001d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800fe10 	.word	0x0800fe10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d8 	.word	0x200001d8
 8000214:	0800fe10 	.word	0x0800fe10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f002 fd11 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f002 fd28 	bl	800382a <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	@ 0x30
 8000dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a70      	ldr	r2, [pc, #448]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e22:	4b68      	ldr	r3, [pc, #416]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b65      	ldr	r3, [pc, #404]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a64      	ldr	r2, [pc, #400]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e52:	4b5c      	ldr	r3, [pc, #368]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b53      	ldr	r3, [pc, #332]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a52      	ldr	r2, [pc, #328]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b50      	ldr	r3, [pc, #320]	@ (8000fc4 <MX_GPIO_Init+0x1dc>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f242 01b0 	movw	r1, #8368	@ 0x20b0
 8000e94:	484c      	ldr	r0, [pc, #304]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000e96:	f003 f8df 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 f8d8 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_5
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f244 21e3 	movw	r1, #17123	@ 0x42e3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000eb0:	f003 f8d2 	bl	8004058 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4845      	ldr	r0, [pc, #276]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000eba:	f003 f8cd 	bl	8004058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ebe:	f242 03b0 	movw	r3, #8368	@ 0x20b0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	483c      	ldr	r0, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f002 ff3c 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000edc:	f64c 030f 	movw	r3, #51215	@ 0xc80f
 8000ee0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4835      	ldr	r0, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x1e0>)
 8000ef2:	f002 ff2f 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	2303      	movs	r3, #3
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4832      	ldr	r0, [pc, #200]	@ (8000fd4 <MX_GPIO_Init+0x1ec>)
 8000f0c:	f002 ff22 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f10:	f248 135f 	movw	r3, #33119	@ 0x815f
 8000f14:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f002 ff14 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000f2c:	f44f 63d4 	mov.w	r3, #1696	@ 0x6a0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f002 ff04 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB6
                           PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_6
 8000f4c:	f244 23c3 	movw	r3, #17091	@ 0x42c3
 8000f50:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f66:	f002 fef5 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8000f6a:	f640 5304 	movw	r3, #3332	@ 0xd04
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000f80:	f002 fee8 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_GPIO_Init+0x1e8>)
 8000f9c:	f002 feda 	bl	8003d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_GPIO_Init+0x1e4>)
 8000fb8:	f002 fecc 	bl	8003d54 <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000c00 	.word	0x48000c00
 8000fd4:	48001800 	.word	0x48001800

08000fd8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <MX_I2C3_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B21E5A;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <MX_I2C3_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_I2C3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_I2C3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C3_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C3_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	@ (800104c <MX_I2C3_Init+0x74>)
 8001014:	f003 f852 	bl	80040bc <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9f0 	bl	8001402 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_I2C3_Init+0x74>)
 8001026:	f003 fc67 	bl	80048f8 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9e7 	bl	8001402 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_I2C3_Init+0x74>)
 8001038:	f003 fca9 	bl	800498e <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9de 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f0 	.word	0x200001f0
 8001050:	40007800 	.word	0x40007800
 8001054:	20b21e5a 	.word	0x20b21e5a

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	@ 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2250      	movs	r2, #80	@ 0x50
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00e fa1d 	bl	800f4b8 <memset>
  if(i2cHandle->Instance==I2C3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <HAL_I2C_MspInit+0xa8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d137      	bne.n	80010f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f9b0 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010a2:	f000 f9ae 	bl	8001402 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80010d0:	2308      	movs	r3, #8
 80010d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <HAL_I2C_MspInit+0xb0>)
 80010dc:	f002 fe3a 	bl	8003d54 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e4:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_I2C_MspInit+0xac>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	3778      	adds	r7, #120	@ 0x78
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40007800 	.word	0x40007800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_I2S2_Init+0x4c>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2S2_Init+0x48>)
 800112c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001134:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2S2_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2S2_Init+0x48>)
 8001142:	f003 fc71 	bl	8004a28 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 800114c:	f000 f959 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000244 	.word	0x20000244
 8001158:	40003800 	.word	0x40003800

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09e      	sub	sp, #120	@ 0x78
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2250      	movs	r2, #80	@ 0x50
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f00e f99b 	bl	800f4b8 <memset>
  if(i2sHandle->Instance==SPI2)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a43      	ldr	r2, [pc, #268]	@ (8001294 <HAL_I2S_MspInit+0x138>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17f      	bne.n	800128c <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001192:	2300      	movs	r3, #0
 8001194:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f006 f92e 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80011a6:	f000 f92c 	bl	8001402 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b38      	ldr	r3, [pc, #224]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a34      	ldr	r2, [pc, #208]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <HAL_I2S_MspInit+0x13c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001204:	2305      	movs	r3, #5
 8001206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_I2S_MspInit+0x140>)
 8001210:	f002 fda0 	bl	8003d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001224:	2306      	movs	r3, #6
 8001226:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <HAL_I2S_MspInit+0x144>)
 8001230:	f002 fd90 	bl	8003d54 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <HAL_I2S_MspInit+0x14c>)
 8001238:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800123c:	220d      	movs	r2, #13
 800123e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001242:	2210      	movs	r2, #16
 8001244:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001258:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 800126a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800126e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001272:	f002 faf5 	bl	8003860 <HAL_DMA_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2S_MspInit+0x124>
    {
      Error_Handler();
 800127c:	f000 f8c1 	bl	8001402 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_I2S_MspInit+0x148>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	@ 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003800 	.word	0x40003800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000280 	.word	0x20000280
 80012a8:	40020008 	.word	0x40020008

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f002 f933 	bl	800351c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f859 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fd95 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012be:	f7ff fd69 	bl	8000d94 <MX_DMA_Init>
  MX_I2S2_Init();
 80012c2:	f7ff ff23 	bl	800110c <MX_I2S2_Init>
  MX_I2C3_Init();
 80012c6:	f7ff fe87 	bl	8000fd8 <MX_I2C3_Init>
  MX_SPI3_Init();
 80012ca:	f001 f93b 	bl	8002544 <MX_SPI3_Init>
  MX_USB_Device_Init();
 80012ce:	f00d fb79 	bl	800e9c4 <MX_USB_Device_Init>
  MX_USART2_UART_Init();
 80012d2:	f001 ff5b 	bl	800318c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80012d6:	f001 fefb 	bl	80030d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 80012da:	481f      	ldr	r0, [pc, #124]	@ (8001358 <main+0xac>)
 80012dc:	f007 fbba 	bl	8008a54 <HAL_TIM_Base_Start_IT>

  System_Reset_Initialize();
 80012e0:	f001 fd38 	bl	8002d54 <System_Reset_Initialize>

  Synth_Reset_Initialize();
 80012e4:	f001 fab6 	bl	8002854 <Synth_Reset_Initialize>

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET); // trigger gate
  //HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET); // set gate low
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f002 feb1 	bl	8004058 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point

  //HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, sys.red_led_state); // red

  HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET); // red
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f002 feaa 	bl	8004058 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, sys.temp_buf , 1); // set up interrupt for MIDI/serial input
 8001304:	2201      	movs	r2, #1
 8001306:	4915      	ldr	r1, [pc, #84]	@ (800135c <main+0xb0>)
 8001308:	4815      	ldr	r0, [pc, #84]	@ (8001360 <main+0xb4>)
 800130a:	f008 f815 	bl	8009338 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, midi_buf, 3);

  uint8_t data[] = "INIT-READY\n";
 800130e:	4a15      	ldr	r2, [pc, #84]	@ (8001364 <main+0xb8>)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	ca07      	ldmia	r2, {r0, r1, r2}
 8001314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, data, 10, 1000);
 8001318:	1d39      	adds	r1, r7, #4
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	220a      	movs	r2, #10
 8001320:	480f      	ldr	r0, [pc, #60]	@ (8001360 <main+0xb4>)
 8001322:	f007 ff7b 	bl	800921c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(sys.midi_data_present == 1){
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <main+0xbc>)
 8001328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <main+0x86>
		  MIDI_Decode_Handler();
 800132e:	f000 f86f 	bl	8001410 <MIDI_Decode_Handler>
	  }

	  if(sys.usb_data_present == 1){
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <main+0xbc>)
 8001334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <main+0x92>
		  Serial_Command_Handler();
 800133a:	f000 fc91 	bl	8001c60 <Serial_Command_Handler>
	  }

	  //Gate_Control();

	  if((sys.note_status_bit == 1)){
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <main+0xbc>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001342:	2b01      	cmp	r3, #1
 8001344:	d1ef      	bne.n	8001326 <main+0x7a>

		  Waveform_Synthesis_Handler(sys.midi_note_input, sys.midi_note_velocity);
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <main+0xbc>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134a:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <main+0xbc>)
 800134c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fa87 	bl	8001864 <Waveform_Synthesis_Handler>
	  if(sys.midi_data_present == 1){
 8001356:	e7e6      	b.n	8001326 <main+0x7a>
 8001358:	2000047c 	.word	0x2000047c
 800135c:	20000453 	.word	0x20000453
 8001360:	200004c8 	.word	0x200004c8
 8001364:	0800fe28 	.word	0x0800fe28
 8001368:	200003f4 	.word	0x200003f4

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2238      	movs	r2, #56	@ 0x38
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00e f89c 	bl	800f4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800138e:	2000      	movs	r0, #0
 8001390:	f005 fa52 	bl	8006838 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001394:	2321      	movs	r3, #33	@ 0x21
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	2303      	movs	r3, #3
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 80013ae:	231c      	movs	r3, #28
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 faec 	bl	80069a0 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ce:	f000 f818 	bl	8001402 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2303      	movs	r3, #3
 80013d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2104      	movs	r1, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fdea 	bl	8006fc4 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013f6:	f000 f804 	bl	8001402 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	@ 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001406:	b672      	cpsid	i
}
 8001408:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140a:	bf00      	nop
 800140c:	e7fd      	b.n	800140a <Error_Handler+0x8>
	...

08001410 <MIDI_Decode_Handler>:

#include "midi.h"
#include "serial.h"
#include "system.h"

void MIDI_Decode_Handler(){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0

	//memcpy (midi_buf, rx_buf, temp_buf_index);

	int status_byte = sys.midi_buf[0];
 8001416:	4b2f      	ldr	r3, [pc, #188]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001418:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800141c:	60fb      	str	r3, [r7, #12]
	int data_byte1  = sys.midi_buf[1];
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001424:	60bb      	str	r3, [r7, #8]
	int data_byte2  = sys.midi_buf[2];
 8001426:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001428:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800142c:	607b      	str	r3, [r7, #4]

	if(status_byte < 0x80){ // if the status byte is less than 128, it is assumed to be ASCII and a system level command
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b7f      	cmp	r3, #127	@ 0x7f
 8001432:	dc0a      	bgt.n	800144a <MIDI_Decode_Handler+0x3a>

		Serial_Command_Handler();
 8001434:	f000 fc14 	bl	8001c60 <Serial_Command_Handler>

		sys.temp_buf_index = 0;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 800143a:	2200      	movs	r2, #0
 800143c:	665a      	str	r2, [r3, #100]	@ 0x64
	    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 800143e:	2203      	movs	r2, #3
 8001440:	2100      	movs	r1, #0
 8001442:	4825      	ldr	r0, [pc, #148]	@ (80014d8 <MIDI_Decode_Handler+0xc8>)
 8001444:	f00e f838 	bl	800f4b8 <memset>

	    return;
 8001448:	e040      	b.n	80014cc <MIDI_Decode_Handler+0xbc>
	}

	sys.midi_data_present = 0; // reset interrupt flag
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 800144c:	2200      	movs	r2, #0
 800144e:	66da      	str	r2, [r3, #108]	@ 0x6c

	status_byte = ( 0xF0 & status_byte); // mask out MIDI channel byte
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001456:	60fb      	str	r3, [r7, #12]

    if(status_byte == 0x80){
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b80      	cmp	r3, #128	@ 0x80
 800145c:	d111      	bne.n	8001482 <MIDI_Decode_Handler+0x72>
    	sys.note_status_bit    =  0; // note off
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001460:	2200      	movs	r2, #0
 8001462:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 800146a:	4a1a      	ldr	r2, [pc, #104]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6793      	str	r3, [r2, #120]	@ 0x78

    	sys.gate = 0;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001472:	2200      	movs	r2, #0
 8001474:	67da      	str	r2, [r3, #124]	@ 0x7c
    	Gate_Control();
 8001476:	f001 fcd1 	bl	8002e1c <Gate_Control>
    	Command_Blink_Status_LED(0); // report no error
 800147a:	2000      	movs	r0, #0
 800147c:	f001 fdb2 	bl	8002fe4 <Command_Blink_Status_LED>
 8001480:	e01b      	b.n	80014ba <MIDI_Decode_Handler+0xaa>
    }
    else if(status_byte == 0x90){
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b90      	cmp	r3, #144	@ 0x90
 8001486:	d111      	bne.n	80014ac <MIDI_Decode_Handler+0x9c>
    	sys.note_status_bit    =  1; // note on
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 800148a:	2201      	movs	r2, #1
 800148c:	671a      	str	r2, [r3, #112]	@ 0x70
    	sys.midi_note_input    = data_byte1;
 800148e:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	6753      	str	r3, [r2, #116]	@ 0x74
    	sys.midi_note_velocity = data_byte2;
 8001494:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6793      	str	r3, [r2, #120]	@ 0x78

    	sys.gate = 1;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 800149c:	2201      	movs	r2, #1
 800149e:	67da      	str	r2, [r3, #124]	@ 0x7c
    	Gate_Control();
 80014a0:	f001 fcbc 	bl	8002e1c <Gate_Control>
    	Command_Blink_Status_LED(0);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f001 fd9d 	bl	8002fe4 <Command_Blink_Status_LED>
 80014aa:	e006      	b.n	80014ba <MIDI_Decode_Handler+0xaa>
    }
    else{
    	sys.note_status_bit = -1; // invalid status command
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 80014ae:	f04f 32ff 	mov.w	r2, #4294967295
 80014b2:	671a      	str	r2, [r3, #112]	@ 0x70
    	Command_Blink_Status_LED(1); // report an error;
 80014b4:	2001      	movs	r0, #1
 80014b6:	f001 fd95 	bl	8002fe4 <Command_Blink_Status_LED>
    }

    sys.temp_buf_index = 0;
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MIDI_Decode_Handler+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	665a      	str	r2, [r3, #100]	@ 0x64
    memset (sys.midi_buf, '\0', 3); // clear buffer of old data
 80014c0:	2203      	movs	r2, #3
 80014c2:	2100      	movs	r1, #0
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MIDI_Decode_Handler+0xc8>)
 80014c6:	f00d fff7 	bl	800f4b8 <memset>

    return;
 80014ca:	bf00      	nop
}
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200003f4 	.word	0x200003f4
 80014d8:	20000450 	.word	0x20000450

080014dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

	sys.midi_buf[sys.temp_buf_index] = sys.temp_buf[0]; // store the received byte into midi_buf
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014ea:	f892 105f 	ldrb.w	r1, [r2, #95]	@ 0x5f
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        // increment the buffer index
        if (++sys.temp_buf_index >= 3)
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 80014fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001500:	6653      	str	r3, [r2, #100]	@ 0x64
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001506:	2b02      	cmp	r3, #2
 8001508:	dd05      	ble.n	8001516 <HAL_UART_RxCpltCallback+0x3a>
        {
        	sys.temp_buf_index = 0;    // reset index after storing 3 bytes (to start a new group)
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	665a      	str	r2, [r3, #100]	@ 0x64
            sys.midi_data_present = 1; // set flag to indicate a complete command has been entered
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_UART_RxCpltCallback+0x4c>)
 8001512:	2201      	movs	r2, #1
 8001514:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // reset interrupt for next byte
        HAL_UART_Receive_IT(&huart2, sys.temp_buf, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	4904      	ldr	r1, [pc, #16]	@ (800152c <HAL_UART_RxCpltCallback+0x50>)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <HAL_UART_RxCpltCallback+0x54>)
 800151c:	f007 ff0c 	bl	8009338 <HAL_UART_Receive_IT>

}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200003f4 	.word	0x200003f4
 800152c:	20000453 	.word	0x20000453
 8001530:	200004c8 	.word	0x200004c8

08001534 <Calculate_Frequency>:
#include "synth.h"
#include "midi.h"
#include "system.h"

// Function to calculate the frequency of a given note
float Calculate_Frequency(float note_number) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
    return A4_FREQ * powf(2.0, (note_number - 69.0) / 12.0); // MIDI note number for A4 is 69
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7fe ffce 	bl	80004e0 <__aeabi_f2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <Calculate_Frequency+0x78>)
 800154a:	f7fe fe69 	bl	8000220 <__aeabi_dsub>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <Calculate_Frequency+0x7c>)
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fa4c 	bl	8000a04 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	ee00 3a90 	vmov	s1, r3
 8001572:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001576:	f00d ffff 	bl	800f578 <powf>
 800157a:	ee10 3a10 	vmov	r3, s0
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffae 	bl	80004e0 <__aeabi_f2d>
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <Calculate_Frequency+0x80>)
 800158a:	f7ff f801 	bl	8000590 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fa35 	bl	8000a04 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee07 3a90 	vmov	s15, r3
}
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40514000 	.word	0x40514000
 80015b0:	40280000 	.word	0x40280000
 80015b4:	407b8000 	.word	0x407b8000

080015b8 <Synthesize_Sine_Wave>:
	sample = 32767*arm_sin_f32( (freq * TAU * t) + (fm_intensity*arm_sin_f32(freq*fm_harmonic*TAU*t)) ); // sine wave formula

	return sample;
}

int16_t Synthesize_Sine_Wave(float t, float freq){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	ed87 0a01 	vstr	s0, [r7, #4]
 80015c2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*arm_sin_f32(freq * TAU * t); // sine wave formula
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe ff8a 	bl	80004e0 <__aeabi_f2d>
 80015cc:	a317      	add	r3, pc, #92	@ (adr r3, 800162c <Synthesize_Sine_Wave+0x74>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ffdd 	bl	8000590 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	461d      	mov	r5, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe ff7e 	bl	80004e0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe ffd0 	bl	8000590 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa04 	bl	8000a04 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	ee00 3a10 	vmov	s0, r3
 8001602:	f00d ff13 	bl	800f42c <arm_sin_f32>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001628 <Synthesize_Sine_Wave+0x70>
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	81fb      	strh	r3, [r7, #14]
	//sample = 32767*sin(freq * TAU * t); // sine wave formula

	return sample;
 800161c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	46fffe00 	.word	0x46fffe00
 800162c:	54442d18 	.word	0x54442d18
 8001630:	401921fb 	.word	0x401921fb
 8001634:	00000000 	.word	0x00000000

08001638 <Synthesize_Pulse_Wave>:

int16_t Synthesize_Pulse_Wave(float t, float freq, float duty_cycle){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001642:	edc7 0a02 	vstr	s1, [r7, #8]
 8001646:	ed87 1a01 	vstr	s2, [r7, #4]

	int16_t sample;
	float phase = fmodf(t * freq, 1.0); // Phase of the wave
 800164a:	ed97 7a03 	vldr	s14, [r7, #12]
 800164e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f00d ff6b 	bl	800f538 <fmodf>
 8001662:	ed87 0a05 	vstr	s0, [r7, #20]
	sample = 32767*((phase < duty_cycle) ? 1.0 : -1.0); // Square wave formula with adjustable duty cycle
 8001666:	ed97 7a05 	vldr	s14, [r7, #20]
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d503      	bpl.n	8001680 <Synthesize_Pulse_Wave+0x48>
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	490e      	ldr	r1, [pc, #56]	@ (80016b8 <Synthesize_Pulse_Wave+0x80>)
 800167e:	e002      	b.n	8001686 <Synthesize_Pulse_Wave+0x4e>
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	490d      	ldr	r1, [pc, #52]	@ (80016bc <Synthesize_Pulse_Wave+0x84>)
 8001686:	a30a      	add	r3, pc, #40	@ (adr r3, 80016b0 <Synthesize_Pulse_Wave+0x78>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ff80 	bl	8000590 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f98c 	bl	80009b4 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	827b      	strh	r3, [r7, #18]

	return sample;
 80016a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40dfffc0 	.word	0x40dfffc0
 80016b8:	3ff00000 	.word	0x3ff00000
 80016bc:	bff00000 	.word	0xbff00000

080016c0 <Synthesize_Triangle_Wave>:

int16_t Synthesize_Triangle_Wave(float t, float freq){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ca:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
    float phase = fmodf(t * freq, 1.0); // Phase of the wave
 80016ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d2:	edd7 7a00 	vldr	s15, [r7]
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f00d ff29 	bl	800f538 <fmodf>
 80016e6:	ed87 0a02 	vstr	s0, [r7, #8]

		// Triangle wave formula
		if (phase < 0.25)
 80016ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ee:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d519      	bpl.n	8001730 <Synthesize_Triangle_Wave+0x70>
			sample = 32767*(phase * 4.0);
 80016fc:	68b8      	ldr	r0, [r7, #8]
 80016fe:	f7fe feef 	bl	80004e0 <__aeabi_f2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 8001708:	f7fe ff42 	bl	8000590 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a330      	add	r3, pc, #192	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff39 	bl	8000590 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f945 	bl	80009b4 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	e04c      	b.n	80017ca <Synthesize_Triangle_Wave+0x10a>
		else if (phase < 0.75)
 8001730:	edd7 7a02 	vldr	s15, [r7, #8]
 8001734:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d521      	bpl.n	8001786 <Synthesize_Triangle_Wave+0xc6>
			sample = 32767*(2.0 - (phase * 4.0));
 8001742:	68b8      	ldr	r0, [r7, #8]
 8001744:	f7fe fecc 	bl	80004e0 <__aeabi_f2d>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 800174e:	f7fe ff1f 	bl	8000590 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800175e:	f7fe fd5f 	bl	8000220 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a31b      	add	r3, pc, #108	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff0e 	bl	8000590 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f91a 	bl	80009b4 <__aeabi_d2iz>
 8001780:	4603      	mov	r3, r0
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	e021      	b.n	80017ca <Synthesize_Triangle_Wave+0x10a>
		else
			sample = 32767*((phase - 1.0) * 4.0);
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7fe feaa 	bl	80004e0 <__aeabi_f2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <Synthesize_Triangle_Wave+0x124>)
 8001792:	f7fe fd45 	bl	8000220 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <Synthesize_Triangle_Wave+0x120>)
 80017a4:	f7fe fef4 	bl	8000590 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	a309      	add	r3, pc, #36	@ (adr r3, 80017d8 <Synthesize_Triangle_Wave+0x118>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe feeb 	bl	8000590 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f8f7 	bl	80009b4 <__aeabi_d2iz>
 80017c6:	4603      	mov	r3, r0
 80017c8:	81fb      	strh	r3, [r7, #14]

	return sample;
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40dfffc0 	.word	0x40dfffc0
 80017e0:	40100000 	.word	0x40100000
 80017e4:	3ff00000 	.word	0x3ff00000

080017e8 <Synthesize_Sawtooth_Wave>:

int16_t Synthesize_Sawtooth_Wave(float t, float freq){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80017f2:	edc7 0a00 	vstr	s1, [r7]

	int16_t sample;
	sample = 32767*fmodf(t * freq, 1.0) * 2.0 - 32767; // Sawtooth wave formula
 80017f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017fa:	edd7 7a00 	vldr	s15, [r7]
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	f00d fe95 	bl	800f538 <fmodf>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
 8001812:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001860 <Synthesize_Sawtooth_Wave+0x78>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe5f 	bl	80004e0 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f7fe fcfd 	bl	8000224 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	a309      	add	r3, pc, #36	@ (adr r3, 8001858 <Synthesize_Sawtooth_Wave+0x70>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fcf2 	bl	8000220 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f8b6 	bl	80009b4 <__aeabi_d2iz>
 8001848:	4603      	mov	r3, r0
 800184a:	81fb      	strh	r3, [r7, #14]

	return sample;
 800184c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	00000000 	.word	0x00000000
 800185c:	40dfffc0 	.word	0x40dfffc0
 8001860:	46fffe00 	.word	0x46fffe00

08001864 <Waveform_Synthesis_Handler>:

int Waveform_Synthesis_Handler(int midi_note, int velocity){
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001872:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8001876:	6018      	str	r0, [r3, #0]
 8001878:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800187c:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8001880:	6019      	str	r1, [r3, #0]

    HAL_StatusTypeDef res;
    int16_t signal[sample_rate];
    int nsamples = sample_rate;
 8001882:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8001886:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800188a:	f102 0218 	add.w	r2, r2, #24
 800188e:	6013      	str	r3, [r2, #0]

    float freq1 = Calculate_Frequency(midi_note + (SynthParameters.note_offset1 - 12));
 8001890:	4bcb      	ldr	r3, [pc, #812]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f1a3 020c 	sub.w	r2, r3, #12
 8001898:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800189c:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	f7ff fe40 	bl	8001534 <Calculate_Frequency>
 80018b4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018b8:	f103 0314 	add.w	r3, r3, #20
 80018bc:	ed83 0a00 	vstr	s0, [r3]
    float freq2 = Calculate_Frequency(midi_note + (SynthParameters.note_offset2 - 12));
 80018c0:	4bbf      	ldr	r3, [pc, #764]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	f1a3 020c 	sub.w	r2, r3, #12
 80018c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018cc:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	f7ff fe28 	bl	8001534 <Calculate_Frequency>
 80018e4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80018e8:	f103 0310 	add.w	r3, r3, #16
 80018ec:	ed83 0a00 	vstr	s0, [r3]

    // even indices (signal[i]) represent the left channel of the DAC (Oscillator 1)
    // odd indices  (signal[i+1]) represent the right channel of the DAC (Oscillator 2)
    // this allows the production of two distinctly programmable waveforms with one audio DAC

    int i = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80018f6:	f102 021c 	add.w	r2, r2, #28
 80018fa:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 80018fc:	e152      	b.n	8001ba4 <Waveform_Synthesis_Handler+0x340>
        float t = ((float)i/2.0)/((float)nsamples);
 80018fe:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001902:	f103 031c 	add.w	r3, r3, #28
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ee17 0a90 	vmov	r0, s15
 8001914:	f7fe fde4 	bl	80004e0 <__aeabi_f2d>
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001920:	f7fe ff60 	bl	80007e4 <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001930:	f103 0318 	add.w	r3, r3, #24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fdcd 	bl	80004e0 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe ff49 	bl	80007e4 <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f853 	bl	8000a04 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001964:	f102 0208 	add.w	r2, r2, #8
 8001968:	6013      	str	r3, [r2, #0]

        // oscillator 1 handler
        if(SynthParameters.oscillator1 == 1){
 800196a:	4b95      	ldr	r3, [pc, #596]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d11b      	bne.n	80019aa <Waveform_Synthesis_Handler+0x146>
        	signal[i] = Synthesize_Sine_Wave(t, freq1);
 8001972:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001976:	f103 0314 	add.w	r3, r3, #20
 800197a:	edd3 0a00 	vldr	s1, [r3]
 800197e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001982:	f103 0308 	add.w	r3, r3, #8
 8001986:	ed93 0a00 	vldr	s0, [r3]
 800198a:	f7ff fe15 	bl	80015b8 <Synthesize_Sine_Wave>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001996:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 800199a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 800199e:	f102 021c 	add.w	r2, r2, #28
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019a8:	e066      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sine_Wave_FM(t, freq1, fm_intensity1, fm_harmonic1);
        }
        else if(SynthParameters.oscillator1 == 2){
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d120      	bne.n	80019f4 <Waveform_Synthesis_Handler+0x190>
        	signal[i] = Synthesize_Pulse_Wave(t, freq1, SynthParameters.duty_cycle1);
 80019b2:	4b83      	ldr	r3, [pc, #524]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019b4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80019b8:	eeb0 1a67 	vmov.f32	s2, s15
 80019bc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019c0:	f103 0314 	add.w	r3, r3, #20
 80019c4:	edd3 0a00 	vldr	s1, [r3]
 80019c8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80019cc:	f103 0308 	add.w	r3, r3, #8
 80019d0:	ed93 0a00 	vldr	s0, [r3]
 80019d4:	f7ff fe30 	bl	8001638 <Synthesize_Pulse_Wave>
 80019d8:	4603      	mov	r3, r0
 80019da:	4619      	mov	r1, r3
 80019dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019e0:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 80019e4:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80019e8:	f102 021c 	add.w	r2, r2, #28
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80019f2:	e041      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 3){
 80019f4:	4b72      	ldr	r3, [pc, #456]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d11b      	bne.n	8001a34 <Waveform_Synthesis_Handler+0x1d0>
        	signal[i] = Synthesize_Triangle_Wave(t, freq1);
 80019fc:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a00:	f103 0314 	add.w	r3, r3, #20
 8001a04:	edd3 0a00 	vldr	s1, [r3]
 8001a08:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a0c:	f103 0308 	add.w	r3, r3, #8
 8001a10:	ed93 0a00 	vldr	s0, [r3]
 8001a14:	f7ff fe54 	bl	80016c0 <Synthesize_Triangle_Wave>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a20:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a24:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a28:	f102 021c 	add.w	r2, r2, #28
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a32:	e021      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        }
        else if(SynthParameters.oscillator1 == 4){
 8001a34:	4b62      	ldr	r3, [pc, #392]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d11b      	bne.n	8001a74 <Waveform_Synthesis_Handler+0x210>
        	signal[i] = Synthesize_Sawtooth_Wave(t, freq1);
 8001a3c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a40:	f103 0314 	add.w	r3, r3, #20
 8001a44:	edd3 0a00 	vldr	s1, [r3]
 8001a48:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a4c:	f103 0308 	add.w	r3, r3, #8
 8001a50:	ed93 0a00 	vldr	s0, [r3]
 8001a54:	f7ff fec8 	bl	80017e8 <Synthesize_Sawtooth_Wave>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a60:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001a64:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001a68:	f102 021c 	add.w	r2, r2, #28
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a72:	e001      	b.n	8001a78 <Waveform_Synthesis_Handler+0x214>
        	//signal[i] = Synthesize_Sawtooth_Wave(t, 440);

        }
        else return 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d3      	b.n	8001c20 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i] = signal[i]*(velocity/127); // adjust intensity per velocity

        // oscillator 2 handler
        if(SynthParameters.oscillator2 == 1){
 8001a78:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d11c      	bne.n	8001aba <Waveform_Synthesis_Handler+0x256>
        	signal[i+1] = Synthesize_Sine_Wave(t, freq2);
 8001a80:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a84:	f103 031c 	add.w	r3, r3, #28
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5c      	adds	r4, r3, #1
 8001a8c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a90:	f103 0310 	add.w	r3, r3, #16
 8001a94:	edd3 0a00 	vldr	s1, [r3]
 8001a98:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001a9c:	f103 0308 	add.w	r3, r3, #8
 8001aa0:	ed93 0a00 	vldr	s0, [r3]
 8001aa4:	f7ff fd88 	bl	80015b8 <Synthesize_Sine_Wave>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ab0:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001ab4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001ab8:	e069      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sine_Wave_FM(t, freq2, fm_intensity2, fm_harmonic2);
        }
        else if(SynthParameters.oscillator2 == 2){
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d121      	bne.n	8001b06 <Waveform_Synthesis_Handler+0x2a2>
        	signal[i+1] = Synthesize_Pulse_Wave(t, freq2, SynthParameters.duty_cycle2);
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001ac4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ac8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001acc:	f103 031c 	add.w	r3, r3, #28
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c5c      	adds	r4, r3, #1
 8001ad4:	eeb0 1a67 	vmov.f32	s2, s15
 8001ad8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001adc:	f103 0310 	add.w	r3, r3, #16
 8001ae0:	edd3 0a00 	vldr	s1, [r3]
 8001ae4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ae8:	f103 0308 	add.w	r3, r3, #8
 8001aec:	ed93 0a00 	vldr	s0, [r3]
 8001af0:	f7ff fda2 	bl	8001638 <Synthesize_Pulse_Wave>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001afc:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b04:	e043      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 3){
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d11c      	bne.n	8001b48 <Waveform_Synthesis_Handler+0x2e4>
        	signal[i+1] = Synthesize_Triangle_Wave(t, freq2);
 8001b0e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b12:	f103 031c 	add.w	r3, r3, #28
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1c5c      	adds	r4, r3, #1
 8001b1a:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b1e:	f103 0310 	add.w	r3, r3, #16
 8001b22:	edd3 0a00 	vldr	s1, [r3]
 8001b26:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b2a:	f103 0308 	add.w	r3, r3, #8
 8001b2e:	ed93 0a00 	vldr	s0, [r3]
 8001b32:	f7ff fdc5 	bl	80016c0 <Synthesize_Triangle_Wave>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b3e:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b42:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b46:	e022      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        }
        else if(SynthParameters.oscillator2 == 4){
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <Waveform_Synthesis_Handler+0x35c>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11c      	bne.n	8001b8a <Waveform_Synthesis_Handler+0x326>
        	signal[i+1] = Synthesize_Sawtooth_Wave(t, freq2);
 8001b50:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b54:	f103 031c 	add.w	r3, r3, #28
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1c5c      	adds	r4, r3, #1
 8001b5c:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b60:	f103 0310 	add.w	r3, r3, #16
 8001b64:	edd3 0a00 	vldr	s1, [r3]
 8001b68:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b6c:	f103 0308 	add.w	r3, r3, #8
 8001b70:	ed93 0a00 	vldr	s0, [r3]
 8001b74:	f7ff fe38 	bl	80017e8 <Synthesize_Sawtooth_Wave>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b80:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 8001b84:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001b88:	e001      	b.n	8001b8e <Waveform_Synthesis_Handler+0x32a>
        	//signal[i+1] = Synthesize_Sawtooth_Wave(t, 440);
        }
        else return 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e048      	b.n	8001c20 <Waveform_Synthesis_Handler+0x3bc>

        //signal[i+1] = signal[i+1]*(velocity/127); // adjust intensity per velocity

        i += 2;
 8001b8e:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001b92:	f103 031c 	add.w	r3, r3, #28
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001b9e:	f102 021c 	add.w	r2, r2, #28
 8001ba2:	6013      	str	r3, [r2, #0]
    while(i < nsamples) {
 8001ba4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001ba8:	f103 031c 	add.w	r3, r3, #28
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bb2:	f103 0318 	add.w	r3, r3, #24
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f6ff aea0 	blt.w	80018fe <Waveform_Synthesis_Handler+0x9a>
    }

    while(sys.note_status_bit == 1 ) {
 8001bbe:	e02a      	b.n	8001c16 <Waveform_Synthesis_Handler+0x3b2>
 8001bc0:	20000344 	.word	0x20000344
    	//while(1) {
    	res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal, nsamples, 1000);
 8001bc4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bc8:	f103 0318 	add.w	r3, r3, #24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f107 0120 	add.w	r1, r7, #32
 8001bd4:	3918      	subs	r1, #24
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <Waveform_Synthesis_Handler+0x3c8>)
 8001bdc:	f003 f804 	bl	8004be8 <HAL_I2S_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8001be6:	f102 020f 	add.w	r2, r2, #15
 8001bea:	7013      	strb	r3, [r2, #0]
        if(res != HAL_OK) {
 8001bec:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 8001bf0:	f103 030f 	add.w	r3, r3, #15
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <Waveform_Synthesis_Handler+0x3a6>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f002 fa28 	bl	8004058 <HAL_GPIO_WritePin>

            //UART_Printf("I2S - ERROR, res = %d!\r\n", res);
            break;
 8001c08:	e009      	b.n	8001c1e <Waveform_Synthesis_Handler+0x3ba>
        }

        if((sys.midi_data_present == 1)){
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <Waveform_Synthesis_Handler+0x3cc>)
 8001c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <Waveform_Synthesis_Handler+0x3b2>
        	MIDI_Decode_Handler();
 8001c12:	f7ff fbfd 	bl	8001410 <MIDI_Decode_Handler>
    while(sys.note_status_bit == 1 ) {
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <Waveform_Synthesis_Handler+0x3cc>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d0d2      	beq.n	8001bc4 <Waveform_Synthesis_Handler+0x360>
        }
    }

    return 0;
 8001c1e:	2300      	movs	r3, #0

}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	20000244 	.word	0x20000244
 8001c30:	200003f4 	.word	0x200003f4

08001c34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c38:	f3bf 8f4f 	dsb	sy
}
 8001c3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <__NVIC_SystemReset+0x24>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c46:	4904      	ldr	r1, [pc, #16]	@ (8001c58 <__NVIC_SystemReset+0x24>)
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_SystemReset+0x28>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4e:	f3bf 8f4f 	dsb	sy
}
 8001c52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <__NVIC_SystemReset+0x20>
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	05fa0004 	.word	0x05fa0004

08001c60 <Serial_Command_Handler>:
#include "serial.h"
#include "system.h"

extern System sys;

void Serial_Command_Handler(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0

    //usb_data_present = 0;
	int error_check = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
	//int sys.value_returned = 0;

	sys.value_returned = 0;
 8001c6a:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]

	int command_byte;
	int address_byte;
	int data_byte;

    if(sys.usb_data_present == 1){
 8001c70:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d10b      	bne.n	8001c90 <Serial_Command_Handler+0x30>
    	sys.usb_data_present = 0;
 8001c78:	4b5f      	ldr	r3, [pc, #380]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	669a      	str	r2, [r3, #104]	@ 0x68

        command_byte = sys.usb_vcp_buffer[0];
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c80:	7f1b      	ldrb	r3, [r3, #28]
 8001c82:	613b      	str	r3, [r7, #16]
        address_byte = sys.usb_vcp_buffer[1];
 8001c84:	4b5c      	ldr	r3, [pc, #368]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c86:	7f5b      	ldrb	r3, [r3, #29]
 8001c88:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.usb_vcp_buffer[2];
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c8c:	7f9b      	ldrb	r3, [r3, #30]
 8001c8e:	60bb      	str	r3, [r7, #8]

    }

    if(sys.midi_data_present == 1){
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10e      	bne.n	8001cb6 <Serial_Command_Handler+0x56>
    	sys.midi_data_present = 0;
 8001c98:	4b57      	ldr	r3, [pc, #348]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        command_byte = sys.midi_buf[0];
 8001c9e:	4b56      	ldr	r3, [pc, #344]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001ca0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ca4:	613b      	str	r3, [r7, #16]
        address_byte = sys.midi_buf[1];
 8001ca6:	4b54      	ldr	r3, [pc, #336]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001cac:	60fb      	str	r3, [r7, #12]
        data_byte    = sys.midi_buf[2];
 8001cae:	4b52      	ldr	r3, [pc, #328]	@ (8001df8 <Serial_Command_Handler+0x198>)
 8001cb0:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001cb4:	60bb      	str	r3, [r7, #8]

    }

    switch(command_byte) {
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3b41      	subs	r3, #65	@ 0x41
 8001cba:	2b19      	cmp	r3, #25
 8001cbc:	d87e      	bhi.n	8001dbc <Serial_Command_Handler+0x15c>
 8001cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <Serial_Command_Handler+0x64>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001d2d 	.word	0x08001d2d
 8001cc8:	08001dbd 	.word	0x08001dbd
 8001ccc:	08001d39 	.word	0x08001d39
 8001cd0:	08001dbd 	.word	0x08001dbd
 8001cd4:	08001d45 	.word	0x08001d45
 8001cd8:	08001d51 	.word	0x08001d51
 8001cdc:	08001dbd 	.word	0x08001dbd
 8001ce0:	08001dbd 	.word	0x08001dbd
 8001ce4:	08001d5d 	.word	0x08001d5d
 8001ce8:	08001dbd 	.word	0x08001dbd
 8001cec:	08001dbd 	.word	0x08001dbd
 8001cf0:	08001dbd 	.word	0x08001dbd
 8001cf4:	08001d65 	.word	0x08001d65
 8001cf8:	08001dbd 	.word	0x08001dbd
 8001cfc:	08001d71 	.word	0x08001d71
 8001d00:	08001d7d 	.word	0x08001d7d
 8001d04:	08001dbd 	.word	0x08001dbd
 8001d08:	08001d89 	.word	0x08001d89
 8001d0c:	08001dbd 	.word	0x08001dbd
 8001d10:	08001dbd 	.word	0x08001dbd
 8001d14:	08001dbd 	.word	0x08001dbd
 8001d18:	08001dbd 	.word	0x08001dbd
 8001d1c:	08001dbd 	.word	0x08001dbd
 8001d20:	08001dbd 	.word	0x08001dbd
 8001d24:	08001dbd 	.word	0x08001dbd
 8001d28:	08001dbd 	.word	0x08001dbd
        case 'A': // voltage controlled amplifier command

        	error_check = VCA_Command_Handler(address_byte, data_byte);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f866 	bl	8001e00 <VCA_Command_Handler>
 8001d34:	6178      	str	r0, [r7, #20]

            break;
 8001d36:	e042      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'C': // communication settings command

        	error_check = Communication_Command_Handler(address_byte, data_byte);
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f974 	bl	8002028 <Communication_Command_Handler>
 8001d40:	6178      	str	r0, [r7, #20]

            break;
 8001d42:	e03c      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'E': // envelope command

        	error_check = Envelope_Command_Handler(address_byte, data_byte);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f9c6 	bl	80020d8 <Envelope_Command_Handler>
 8001d4c:	6178      	str	r0, [r7, #20]

            break;
 8001d4e:	e036      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'F': // low pass filter command

        	error_check = Filter_Command_Handler(address_byte, data_byte);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fa80 	bl	8002258 <Filter_Command_Handler>
 8001d58:	6178      	str	r0, [r7, #20]

            break;
 8001d5a:	e030      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'I': // initialize preset command

        	error_check = Synth_Initialize_Preset();
 8001d5c:	f000 fdca 	bl	80028f4 <Synth_Initialize_Preset>
 8001d60:	6178      	str	r0, [r7, #20]

            break;
 8001d62:	e02c      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'L': // load preset command

            break;
        case 'M': // mixer command

        	error_check = Mixer_Command_Handler(address_byte, data_byte);
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fb00 	bl	800236c <Mixer_Command_Handler>
 8001d6c:	6178      	str	r0, [r7, #20]

            break;
 8001d6e:	e026      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'O': // LFO command

        	error_check = LFO_Command_Handler(address_byte, data_byte);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fb44 	bl	8002400 <LFO_Command_Handler>
 8001d78:	6178      	str	r0, [r7, #20]

            break;
 8001d7a:	e020      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'P': // preset save/load command

        	error_check = Preset_Command_Handler(address_byte, data_byte);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fba2 	bl	80024c8 <Preset_Command_Handler>
 8001d84:	6178      	str	r0, [r7, #20]

            break;
 8001d86:	e01a      	b.n	8001dbe <Serial_Command_Handler+0x15e>
        case 'R': // reset command

        	for(int i=0; i <4 ; i++){
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	e011      	b.n	8001db2 <Serial_Command_Handler+0x152>
        	HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8001d8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d96:	f002 f977 	bl	8004088 <HAL_GPIO_TogglePin>
        	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8001d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f002 f971 	bl	8004088 <HAL_GPIO_TogglePin>
        	HAL_Delay(125);
 8001da6:	207d      	movs	r0, #125	@ 0x7d
 8001da8:	f001 fc28 	bl	80035fc <HAL_Delay>
        	for(int i=0; i <4 ; i++){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	ddea      	ble.n	8001d8e <Serial_Command_Handler+0x12e>
        	}

			NVIC_SystemReset();
 8001db8:	f7ff ff3c 	bl	8001c34 <__NVIC_SystemReset>

            break;
        default:
            // do nothing on invalid command

            break;
 8001dbc:	bf00      	nop
    }

    //error_check ? Command_Error() : Command_Success();
    error_check ? Command_Blink_Status_LED(1) : Command_Blink_Status_LED(0);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <Serial_Command_Handler+0x16c>
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f001 f90d 	bl	8002fe4 <Command_Blink_Status_LED>
 8001dca:	e002      	b.n	8001dd2 <Serial_Command_Handler+0x172>
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 f909 	bl	8002fe4 <Command_Blink_Status_LED>

    Command_Response_Handler(error_check, command_byte, address_byte, data_byte);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f001 f85c 	bl	8002e9c <Command_Response_Handler>

    memset (sys.usb_vcp_buffer, '\0', 64); // clear buffer of old data
 8001de4:	2240      	movs	r2, #64	@ 0x40
 8001de6:	2100      	movs	r1, #0
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <Serial_Command_Handler+0x19c>)
 8001dea:	f00d fb65 	bl	800f4b8 <memset>

}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200003f4 	.word	0x200003f4
 8001dfc:	20000410 	.word	0x20000410

08001e00 <VCA_Command_Handler>:

// ===========================================================================================================
// A - VCA functions

int VCA_Command_Handler(int address, int data){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3b31      	subs	r3, #49	@ 0x31
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d87d      	bhi.n	8001f12 <VCA_Command_Handler+0x112>
 8001e16:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <VCA_Command_Handler+0x1c>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e31 	.word	0x08001e31
 8001e20:	08001e5b 	.word	0x08001e5b
 8001e24:	08001e85 	.word	0x08001e85
 8001e28:	08001eb7 	.word	0x08001eb7
 8001e2c:	08001ee9 	.word	0x08001ee9
        case '1': // VCA modulation offset

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e30:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e34:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e38:	22ff      	movs	r2, #255	@ 0xff
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f001 f881 	bl	8002f44 <Command_Error_Check>
 8001e42:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <VCA_Command_Handler+0x56>
                SynthParameters.vca_offset = data;
 8001e4a:	4a35      	ldr	r2, [pc, #212]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                VCA_Digital_Pot_Control();
 8001e52:	f000 fe79 	bl	8002b48 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	e05c      	b.n	8001f14 <VCA_Command_Handler+0x114>
        case '2': // VCA modulation intensity

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 255, 0, 0);
 8001e5a:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e5e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e62:	22ff      	movs	r2, #255	@ 0xff
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	2000      	movs	r0, #0
 8001e68:	f001 f86c 	bl	8002f44 <Command_Error_Check>
 8001e6c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <VCA_Command_Handler+0x80>
                SynthParameters.vca_cv_intensity = data;
 8001e74:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
                VCA_Digital_Pot_Control();
 8001e7c:	f000 fe64 	bl	8002b48 <VCA_Digital_Pot_Control>
            }

        	return error_check;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	e047      	b.n	8001f14 <VCA_Command_Handler+0x114>
        case '3': // VCA modulation control

        	error_check = Command_Error_Check(OPTION_BOX_CHECK, data, 3, 0, 0);
 8001e84:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e88:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	2001      	movs	r0, #1
 8001e92:	f001 f857 	bl	8002f44 <Command_Error_Check>
 8001e96:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <VCA_Command_Handler+0xb2>
                SynthParameters.vca_mod_source = data;
 8001e9e:	4a20      	ldr	r2, [pc, #128]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6013      	str	r3, [r2, #0]
                VCA_Mod_Source_Decode(SynthParameters.vca_mod_source);
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f88b 	bl	8001fc4 <VCA_Mod_Source_Decode>
                VCA_Mod_Source_Control();
 8001eae:	f000 fde7 	bl	8002a80 <VCA_Mod_Source_Control>
            }

        	return error_check;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	e02e      	b.n	8001f14 <VCA_Command_Handler+0x114>
        case '4': // VCA signal bypass control

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8001eb6:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001eba:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	6839      	ldr	r1, [r7, #0]
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f001 f83e 	bl	8002f44 <Command_Error_Check>
 8001ec8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <VCA_Command_Handler+0xe4>
                SynthParameters.vca_bypass = data;
 8001ed0:	4a13      	ldr	r2, [pc, #76]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6053      	str	r3, [r2, #4]
                VCA_Mod_Source_Decode(SynthParameters.vca_bypass);
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <VCA_Command_Handler+0x120>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f872 	bl	8001fc4 <VCA_Mod_Source_Decode>
                VCA_Bypass_Switch_Control();
 8001ee0:	f000 fe00 	bl	8002ae4 <VCA_Bypass_Switch_Control>
            }

        	return error_check;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	e015      	b.n	8001f14 <VCA_Command_Handler+0x114>
        case '5': // read back setting value

        	error_check = Command_Error_Check(NUMBER_CHECK, data, 4, 0, 0);
 8001ee8:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001eec:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001f1c <VCA_Command_Handler+0x11c>
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f001 f825 	bl	8002f44 <Command_Error_Check>
 8001efa:	60f8      	str	r0, [r7, #12]

        	//VCA_Value_Query(data);
            if (error_check == 0) {
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <VCA_Command_Handler+0x10e>
            	VCA_Value_Query(data);
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f000 f810 	bl	8001f28 <VCA_Value_Query>
                sys.value_returned = 1; // tell the serial handler a response has been sent
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <VCA_Command_Handler+0x124>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	60da      	str	r2, [r3, #12]
            }

        	return error_check;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	e000      	b.n	8001f14 <VCA_Command_Handler+0x114>
        default:
            // do nothing on invalid command

        	return error_check;
 8001f12:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	00000000 	.word	0x00000000
 8001f20:	20000344 	.word	0x20000344
 8001f24:	200003f4 	.word	0x200003f4

08001f28 <VCA_Value_Query>:

void VCA_Value_Query(int data){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

	uint8_t return_data[3] = {'A', data , 0};
 8001f30:	2341      	movs	r3, #65	@ 0x41
 8001f32:	733b      	strb	r3, [r7, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	737b      	strb	r3, [r7, #13]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73bb      	strb	r3, [r7, #14]

    switch(data) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3b31      	subs	r3, #49	@ 0x31
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d820      	bhi.n	8001f88 <VCA_Value_Query+0x60>
 8001f46:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <VCA_Value_Query+0x24>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f69 	.word	0x08001f69
 8001f54:	08001f75 	.word	0x08001f75
 8001f58:	08001f7f 	.word	0x08001f7f
        case '1': // VCA modulation offset
        	return_data[2] = SynthParameters.vca_offset;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <VCA_Value_Query+0x90>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	73bb      	strb	r3, [r7, #14]
            break;
 8001f66:	e010      	b.n	8001f8a <VCA_Value_Query+0x62>
        case '2': // VCA modulation intensity
        	return_data[2] = SynthParameters.vca_cv_intensity;
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <VCA_Value_Query+0x90>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	73bb      	strb	r3, [r7, #14]
            break;
 8001f72:	e00a      	b.n	8001f8a <VCA_Value_Query+0x62>
        case '3': // VCA modulation control
        	return_data[2] = SynthParameters.vca_mod_source;
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <VCA_Value_Query+0x90>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73bb      	strb	r3, [r7, #14]
            break;
 8001f7c:	e005      	b.n	8001f8a <VCA_Value_Query+0x62>
        case '4': // VCA signal bypass control
        	return_data[2] = SynthParameters.vca_bypass;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <VCA_Value_Query+0x90>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	73bb      	strb	r3, [r7, #14]
            break;
 8001f86:	e000      	b.n	8001f8a <VCA_Value_Query+0x62>
        default:  // do nothing on invalid command

            break;
 8001f88:	bf00      	nop
    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00c fdff 	bl	800eb94 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <VCA_Value_Query+0x94>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <VCA_Value_Query+0x88>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8001f9e:	f107 010c 	add.w	r1, r7, #12
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <VCA_Value_Query+0x98>)
 8001faa:	f007 f937 	bl	800921c <HAL_UART_Transmit>
    }

	return;
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
}
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000344 	.word	0x20000344
 8001fbc:	200003f4 	.word	0x200003f4
 8001fc0:	200004c8 	.word	0x200004c8

08001fc4 <VCA_Mod_Source_Decode>:

void VCA_Mod_Source_Decode(int data){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

    switch(data) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d017      	beq.n	8002002 <VCA_Mod_Source_Decode+0x3e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	dc1d      	bgt.n	8002014 <VCA_Mod_Source_Decode+0x50>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <VCA_Mod_Source_Decode+0x22>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d005      	beq.n	8001ff0 <VCA_Mod_Source_Decode+0x2c>
        	SynthParameters.vca_cv_en = 1;
        	SynthParameters.vca_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command
            break;
 8001fe4:	e016      	b.n	8002014 <VCA_Mod_Source_Decode+0x50>
        	SynthParameters.vca_cv_en = 0;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <VCA_Mod_Source_Decode+0x60>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            break;
 8001fee:	e012      	b.n	8002016 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <VCA_Mod_Source_Decode+0x60>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 1;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <VCA_Mod_Source_Decode+0x60>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8002000:	e009      	b.n	8002016 <VCA_Mod_Source_Decode+0x52>
        	SynthParameters.vca_cv_en = 1;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <VCA_Mod_Source_Decode+0x60>)
 8002004:	2201      	movs	r2, #1
 8002006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        	SynthParameters.vca_cv_sel = 0;
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <VCA_Mod_Source_Decode+0x60>)
 800200c:	2200      	movs	r2, #0
 800200e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            break;
 8002012:	e000      	b.n	8002016 <VCA_Mod_Source_Decode+0x52>
            break;
 8002014:	bf00      	nop
    }

	return;
 8002016:	bf00      	nop
}
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000344 	.word	0x20000344

08002028 <Communication_Command_Handler>:
}

// ===========================================================================================================
// C - communication settings function

int Communication_Command_Handler(int address, int data){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b33      	cmp	r3, #51	@ 0x33
 800203a:	d02f      	beq.n	800209c <Communication_Command_Handler+0x74>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b33      	cmp	r3, #51	@ 0x33
 8002040:	dc40      	bgt.n	80020c4 <Communication_Command_Handler+0x9c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b31      	cmp	r3, #49	@ 0x31
 8002046:	d003      	beq.n	8002050 <Communication_Command_Handler+0x28>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b32      	cmp	r3, #50	@ 0x32
 800204c:	d012      	beq.n	8002074 <Communication_Command_Handler+0x4c>
 800204e:	e039      	b.n	80020c4 <Communication_Command_Handler+0x9c>
        case '1': // echo command/acknowledge response setting; true = echo, false = acknowledge

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002050:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002054:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002058:	2201      	movs	r2, #1
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	2000      	movs	r0, #0
 800205e:	f000 ff71 	bl	8002f44 <Command_Error_Check>
 8002062:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <Communication_Command_Handler+0x48>
            	sys.serial_cmd_echo = data;
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <Communication_Command_Handler+0xac>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6013      	str	r3, [r2, #0]
            }

        	return error_check;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	e028      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        case '2': // MIDI transmit enable setting; true = enabled, false = disabled

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 8002074:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80020d0 <Communication_Command_Handler+0xa8>
 8002078:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80020d0 <Communication_Command_Handler+0xa8>
 800207c:	2201      	movs	r2, #1
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	2000      	movs	r0, #0
 8002082:	f000 ff5f 	bl	8002f44 <Command_Error_Check>
 8002086:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d104      	bne.n	8002098 <Communication_Command_Handler+0x70>
            	sys.midi_tx_en = data;
 800208e:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <Communication_Command_Handler+0xac>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6093      	str	r3, [r2, #8]
            	MIDI_Port_Control();
 8002094:	f000 fed8 	bl	8002e48 <MIDI_Port_Control>
            }

        	return error_check;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	e014      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        case '3': // MIDI transmit output polarity setting; true = inverted, false = non-inverted

        	error_check = Command_Error_Check(MAX_RANGE_CHECK, data, 1, 0, 0);
 800209c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80020d0 <Communication_Command_Handler+0xa8>
 80020a0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80020d0 <Communication_Command_Handler+0xa8>
 80020a4:	2201      	movs	r2, #1
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	2000      	movs	r0, #0
 80020aa:	f000 ff4b 	bl	8002f44 <Command_Error_Check>
 80020ae:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <Communication_Command_Handler+0x98>
            	sys.midi_tx_pol = data;
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <Communication_Command_Handler+0xac>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6053      	str	r3, [r2, #4]
            	MIDI_Port_Control();
 80020bc:	f000 fec4 	bl	8002e48 <MIDI_Port_Control>
            }

        	return error_check;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	e000      	b.n	80020c6 <Communication_Command_Handler+0x9e>
        default:
            // do nothing on invalid command

        	return error_check;
 80020c4:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00000000 	.word	0x00000000
 80020d4:	200003f4 	.word	0x200003f4

080020d8 <Envelope_Command_Handler>:

// ===========================================================================================================
// E - envelope functions

int Envelope_Command_Handler(int address, int data){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]

    switch(address) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3b31      	subs	r3, #49	@ 0x31
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d864      	bhi.n	80021b8 <Envelope_Command_Handler+0xe0>
 80020ee:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <Envelope_Command_Handler+0x1c>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002109 	.word	0x08002109
 80020f8:	08002129 	.word	0x08002129
 80020fc:	08002149 	.word	0x08002149
 8002100:	08002169 	.word	0x08002169
 8002104:	08002191 	.word	0x08002191
        case '1': // envelope attack rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002108:	21ff      	movs	r1, #255	@ 0xff
 800210a:	6838      	ldr	r0, [r7, #0]
 800210c:	f000 f9f3 	bl	80024f6 <Command_Range_Check_Error>
 8002110:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <Envelope_Command_Handler+0x4c>
                SynthParameters.env_attack_rate = data;
 8002118:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
                Filter_Digital_Pot_Control();
 8002120:	f000 fd58 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	e048      	b.n	80021ba <Envelope_Command_Handler+0xe2>
        case '2': // envelope sustain level/decay rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002128:	21ff      	movs	r1, #255	@ 0xff
 800212a:	6838      	ldr	r0, [r7, #0]
 800212c:	f000 f9e3 	bl	80024f6 <Command_Range_Check_Error>
 8002130:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <Envelope_Command_Handler+0x6c>
                SynthParameters.env_decay_rate = data;
 8002138:	4a22      	ldr	r2, [pc, #136]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
                Filter_Digital_Pot_Control();
 8002140:	f000 fd48 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	e038      	b.n	80021ba <Envelope_Command_Handler+0xe2>
        case '3': // envelope release rate

        	error_check = Command_Range_Check_Error(data, 255);
 8002148:	21ff      	movs	r1, #255	@ 0xff
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f000 f9d3 	bl	80024f6 <Command_Range_Check_Error>
 8002150:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <Envelope_Command_Handler+0x8c>
                SynthParameters.env_release_rate = data;
 8002158:	4a1a      	ldr	r2, [pc, #104]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
                Filter_Digital_Pot_Control();
 8002160:	f000 fd38 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e028      	b.n	80021ba <Envelope_Command_Handler+0xe2>
        case '4': // envelope output polarity

        	error_check = Command_Range_Check_Error(data, 1);
 8002168:	2101      	movs	r1, #1
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	f000 f9c3 	bl	80024f6 <Command_Range_Check_Error>
 8002170:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <Envelope_Command_Handler+0xb4>
                SynthParameters.env_invert_mode = data;
 8002178:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6153      	str	r3, [r2, #20]
                Envelope_Output_Polarity_Decode(SynthParameters.env_invert_mode);
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f820 	bl	80021c8 <Envelope_Output_Polarity_Decode>
                ENV_Mode_Control();
 8002188:	f000 fd7e 	bl	8002c88 <ENV_Mode_Control>
            }

        	return error_check;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	e014      	b.n	80021ba <Envelope_Command_Handler+0xe2>
        case '5': // envelope loop mode control

        	error_check = Command_Range_Check_Error(data, 1);
 8002190:	2101      	movs	r1, #1
 8002192:	6838      	ldr	r0, [r7, #0]
 8002194:	f000 f9af 	bl	80024f6 <Command_Range_Check_Error>
 8002198:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <Envelope_Command_Handler+0xdc>
                SynthParameters.env_loop_mode = data;
 80021a0:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6193      	str	r3, [r2, #24]
                Envelope_Loop_Mode_Decode(SynthParameters.env_loop_mode);
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <Envelope_Command_Handler+0xec>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f830 	bl	8002210 <Envelope_Loop_Mode_Decode>
                ENV_Mode_Control();
 80021b0:	f000 fd6a 	bl	8002c88 <ENV_Mode_Control>
            }

        	return error_check;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	e000      	b.n	80021ba <Envelope_Command_Handler+0xe2>
        default:
            // do nothing on invalid command

        	return error_check;
 80021b8:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000344 	.word	0x20000344

080021c8 <Envelope_Output_Polarity_Decode>:

void Envelope_Output_Polarity_Decode(int data){
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

    if(data == 0){ // non-inverted envelope output
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <Envelope_Output_Polarity_Decode+0x20>
    	SynthParameters.env_en = 1;
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <Envelope_Output_Polarity_Decode+0x44>)
 80021d8:	2201      	movs	r2, #1
 80021da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 1;
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <Envelope_Output_Polarity_Decode+0x44>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    else if(data == 1){ // inverted envelope output
    	SynthParameters.env_en = 1;
    	SynthParameters.env_invert = 0;
    }

	return;
 80021e6:	e00b      	b.n	8002200 <Envelope_Output_Polarity_Decode+0x38>
    else if(data == 1){ // inverted envelope output
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <Envelope_Output_Polarity_Decode+0x38>
    	SynthParameters.env_en = 1;
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <Envelope_Output_Polarity_Decode+0x44>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_invert = 0;
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <Envelope_Output_Polarity_Decode+0x44>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	return;
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
}
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000344 	.word	0x20000344

08002210 <Envelope_Loop_Mode_Decode>:

void Envelope_Loop_Mode_Decode(int data){
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

    if(data == 0){ // disable loop mode
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <Envelope_Loop_Mode_Decode+0x20>
    	SynthParameters.env_en = 1;
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <Envelope_Loop_Mode_Decode+0x44>)
 8002220:	2201      	movs	r2, #1
 8002222:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 1;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <Envelope_Loop_Mode_Decode+0x44>)
 8002228:	2201      	movs	r2, #1
 800222a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    else if(data == 1){ // enable loop mode
    	SynthParameters.env_en = 1;
    	SynthParameters.env_loop = 0;
    }

	return;
 800222e:	e00b      	b.n	8002248 <Envelope_Loop_Mode_Decode+0x38>
    else if(data == 1){ // enable loop mode
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <Envelope_Loop_Mode_Decode+0x38>
    	SynthParameters.env_en = 1;
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <Envelope_Loop_Mode_Decode+0x44>)
 8002238:	2201      	movs	r2, #1
 800223a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    	SynthParameters.env_loop = 0;
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <Envelope_Loop_Mode_Decode+0x44>)
 8002240:	2200      	movs	r2, #0
 8002242:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	return;
 8002246:	bf00      	nop
 8002248:	bf00      	nop
}
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	20000344 	.word	0x20000344

08002258 <Filter_Command_Handler>:

// ===========================================================================================================
// F - filter functions

int Filter_Command_Handler(int address, int data){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]

    switch(address) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3b31      	subs	r3, #49	@ 0x31
 800226a:	2b03      	cmp	r3, #3
 800226c:	d84b      	bhi.n	8002306 <Filter_Command_Handler+0xae>
 800226e:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <Filter_Command_Handler+0x1c>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002285 	.word	0x08002285
 8002278:	080022a3 	.word	0x080022a3
 800227c:	080022c1 	.word	0x080022c1
 8002280:	080022df 	.word	0x080022df
        case '1': // filter cutoff

        	error_check = Command_Range_Check_Error(data, 255);
 8002284:	21ff      	movs	r1, #255	@ 0xff
 8002286:	6838      	ldr	r0, [r7, #0]
 8002288:	f000 f935 	bl	80024f6 <Command_Range_Check_Error>
 800228c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <Filter_Command_Handler+0x46>
                SynthParameters.vcf_cutoff = data;
 8002294:	4a1e      	ldr	r2, [pc, #120]	@ (8002310 <Filter_Command_Handler+0xb8>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	66d3      	str	r3, [r2, #108]	@ 0x6c
                Filter_Digital_Pot_Control();
 800229a:	f000 fc9b 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	e032      	b.n	8002308 <Filter_Command_Handler+0xb0>
        case '2': // filter resonance intensity

        	error_check = Command_Range_Check_Error(data, 255);
 80022a2:	21ff      	movs	r1, #255	@ 0xff
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	f000 f926 	bl	80024f6 <Command_Range_Check_Error>
 80022aa:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d104      	bne.n	80022bc <Filter_Command_Handler+0x64>
                SynthParameters.vcf_resonance = data;
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <Filter_Command_Handler+0xb8>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6713      	str	r3, [r2, #112]	@ 0x70
                Filter_Digital_Pot_Control();
 80022b8:	f000 fc8c 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	e023      	b.n	8002308 <Filter_Command_Handler+0xb0>
        case '3': // filter modulation intensity

        	error_check = Command_Range_Check_Error(data, 255);
 80022c0:	21ff      	movs	r1, #255	@ 0xff
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f000 f917 	bl	80024f6 <Command_Range_Check_Error>
 80022c8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <Filter_Command_Handler+0x82>
                SynthParameters.vcf_cv_intensity = data;
 80022d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <Filter_Command_Handler+0xb8>)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6693      	str	r3, [r2, #104]	@ 0x68
                Filter_Digital_Pot_Control();
 80022d6:	f000 fc7d 	bl	8002bd4 <Filter_Digital_Pot_Control>
            }

        	return error_check;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	e014      	b.n	8002308 <Filter_Command_Handler+0xb0>
        case '4': // filter modulation control

        	error_check = Command_Option_Check_Error(data, 3);
 80022de:	2103      	movs	r1, #3
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f000 f91a 	bl	800251a <Command_Option_Check_Error>
 80022e6:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <Filter_Command_Handler+0xaa>
                SynthParameters.vcf_mod_source = data;
 80022ee:	4a08      	ldr	r2, [pc, #32]	@ (8002310 <Filter_Command_Handler+0xb8>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6093      	str	r3, [r2, #8]
                Filter_Mod_Source_Decode(SynthParameters.vcf_mod_source);
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <Filter_Command_Handler+0xb8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f80b 	bl	8002314 <Filter_Mod_Source_Decode>
                Filter_Mod_Source_Control();
 80022fe:	f000 fc39 	bl	8002b74 <Filter_Mod_Source_Control>
            }

        	return error_check;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	e000      	b.n	8002308 <Filter_Command_Handler+0xb0>
        default:
            // do nothing on invalid command

        	return error_check;
 8002306:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000344 	.word	0x20000344

08002314 <Filter_Mod_Source_Decode>:

void Filter_Mod_Source_Decode(int data){
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

    switch(data) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d014      	beq.n	800234c <Filter_Mod_Source_Decode+0x38>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b03      	cmp	r3, #3
 8002326:	dc18      	bgt.n	800235a <Filter_Mod_Source_Decode+0x46>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d003      	beq.n	8002336 <Filter_Mod_Source_Decode+0x22>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d004      	beq.n	800233e <Filter_Mod_Source_Decode+0x2a>
        	SynthParameters.vcf_cv_sel = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8002334:	e011      	b.n	800235a <Filter_Mod_Source_Decode+0x46>
        	SynthParameters.vcf_cv_en = 0;
 8002336:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <Filter_Mod_Source_Decode+0x54>)
 8002338:	2200      	movs	r2, #0
 800233a:	661a      	str	r2, [r3, #96]	@ 0x60
            break;
 800233c:	e00e      	b.n	800235c <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <Filter_Mod_Source_Decode+0x54>)
 8002340:	2201      	movs	r2, #1
 8002342:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 1;
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <Filter_Mod_Source_Decode+0x54>)
 8002346:	2201      	movs	r2, #1
 8002348:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 800234a:	e007      	b.n	800235c <Filter_Mod_Source_Decode+0x48>
        	SynthParameters.vcf_cv_en = 1;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <Filter_Mod_Source_Decode+0x54>)
 800234e:	2201      	movs	r2, #1
 8002350:	661a      	str	r2, [r3, #96]	@ 0x60
        	SynthParameters.vcf_cv_sel = 0;
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <Filter_Mod_Source_Decode+0x54>)
 8002354:	2200      	movs	r2, #0
 8002356:	665a      	str	r2, [r3, #100]	@ 0x64
            break;
 8002358:	e000      	b.n	800235c <Filter_Mod_Source_Decode+0x48>
            break;
 800235a:	bf00      	nop
    }

	return;
 800235c:	bf00      	nop
}
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000344 	.word	0x20000344

0800236c <Mixer_Command_Handler>:

// ===========================================================================================================
// M - mixer function

int Mixer_Command_Handler(int address, int data){
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b33      	cmp	r3, #51	@ 0x33
 800237e:	d027      	beq.n	80023d0 <Mixer_Command_Handler+0x64>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b33      	cmp	r3, #51	@ 0x33
 8002384:	dc32      	bgt.n	80023ec <Mixer_Command_Handler+0x80>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b31      	cmp	r3, #49	@ 0x31
 800238a:	d003      	beq.n	8002394 <Mixer_Command_Handler+0x28>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b32      	cmp	r3, #50	@ 0x32
 8002390:	d00f      	beq.n	80023b2 <Mixer_Command_Handler+0x46>
 8002392:	e02b      	b.n	80023ec <Mixer_Command_Handler+0x80>
        case '1': // DAC output level

        	error_check = Command_Range_Check_Error(data, 255);
 8002394:	21ff      	movs	r1, #255	@ 0xff
 8002396:	6838      	ldr	r0, [r7, #0]
 8002398:	f000 f8ad 	bl	80024f6 <Command_Range_Check_Error>
 800239c:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <Mixer_Command_Handler+0x42>
                SynthParameters.dac_mixer_level = data;
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <Mixer_Command_Handler+0x8c>)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
                Mixer_Digital_Pot_Control();
 80023aa:	f000 fb55 	bl	8002a58 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	e01d      	b.n	80023ee <Mixer_Command_Handler+0x82>
        case '2': // filter output level

        	error_check = Command_Range_Check_Error(data, 255);
 80023b2:	21ff      	movs	r1, #255	@ 0xff
 80023b4:	6838      	ldr	r0, [r7, #0]
 80023b6:	f000 f89e 	bl	80024f6 <Command_Range_Check_Error>
 80023ba:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <Mixer_Command_Handler+0x60>
                SynthParameters.filter_out_level = data;
 80023c2:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <Mixer_Command_Handler+0x8c>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
                Mixer_Digital_Pot_Control();
 80023c8:	f000 fb46 	bl	8002a58 <Mixer_Digital_Pot_Control>
            }

        	return error_check;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	e00e      	b.n	80023ee <Mixer_Command_Handler+0x82>
        case '3': // enable/disable MIDI velocity

        	error_check = Command_Range_Check_Error(data, 1);
 80023d0:	2101      	movs	r1, #1
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f000 f88f 	bl	80024f6 <Command_Range_Check_Error>
 80023d8:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <Mixer_Command_Handler+0x7c>
            	sys.velocity_enable = data;
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <Mixer_Command_Handler+0x90>)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            }

        	return error_check;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	e000      	b.n	80023ee <Mixer_Command_Handler+0x82>
        default:
            // do nothing on invalid command

        	return error_check;
 80023ec:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000344 	.word	0x20000344
 80023fc:	200003f4 	.word	0x200003f4

08002400 <LFO_Command_Handler>:

// ===========================================================================================================
// O - LFO functions

int LFO_Command_Handler(int address, int data){
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]

	int error_check = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]

    switch(address) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b31      	cmp	r3, #49	@ 0x31
 8002412:	d003      	beq.n	800241c <LFO_Command_Handler+0x1c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b32      	cmp	r3, #50	@ 0x32
 8002418:	d00f      	beq.n	800243a <LFO_Command_Handler+0x3a>
 800241a:	e022      	b.n	8002462 <LFO_Command_Handler+0x62>
        case '1': // LFO frequency/rate

        	error_check = Command_Range_Check_Error(data, 255);
 800241c:	21ff      	movs	r1, #255	@ 0xff
 800241e:	6838      	ldr	r0, [r7, #0]
 8002420:	f000 f869 	bl	80024f6 <Command_Range_Check_Error>
 8002424:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <LFO_Command_Handler+0x36>
                SynthParameters.lfo_frequency = data;
 800242c:	4a0f      	ldr	r2, [pc, #60]	@ (800246c <LFO_Command_Handler+0x6c>)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	67d3      	str	r3, [r2, #124]	@ 0x7c
                LFO_Digital_Pot_Control();
 8002432:	f000 fc1b 	bl	8002c6c <LFO_Digital_Pot_Control>
            }

        	return error_check;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	e014      	b.n	8002464 <LFO_Command_Handler+0x64>
        case '2': // LFO output waveform

        	error_check = Command_Option_Check_Error(data, 3);
 800243a:	2103      	movs	r1, #3
 800243c:	6838      	ldr	r0, [r7, #0]
 800243e:	f000 f86c 	bl	800251a <Command_Option_Check_Error>
 8002442:	60f8      	str	r0, [r7, #12]

            if (error_check == 0) {
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <LFO_Command_Handler+0x5e>
                SynthParameters.lfo_waveform = data;
 800244a:	4a08      	ldr	r2, [pc, #32]	@ (800246c <LFO_Command_Handler+0x6c>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	61d3      	str	r3, [r2, #28]
                LFO_Waveform_Decode(SynthParameters.lfo_waveform);
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <LFO_Command_Handler+0x6c>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f80b 	bl	8002470 <LFO_Waveform_Decode>
                LFO_Output_Control();
 800245a:	f000 fbd7 	bl	8002c0c <LFO_Output_Control>
            }

        	return error_check;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e000      	b.n	8002464 <LFO_Command_Handler+0x64>
        default:
            // do nothing on invalid command

        	return error_check;
 8002462:	68fb      	ldr	r3, [r7, #12]
    }

    return error_check;
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000344 	.word	0x20000344

08002470 <LFO_Waveform_Decode>:

void LFO_Waveform_Decode(int data){
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

    switch(data) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d014      	beq.n	80024a8 <LFO_Waveform_Decode+0x38>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	dc18      	bgt.n	80024b6 <LFO_Waveform_Decode+0x46>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d003      	beq.n	8002492 <LFO_Waveform_Decode+0x22>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d004      	beq.n	800249a <LFO_Waveform_Decode+0x2a>
        	SynthParameters.lfo_output_waveform = 0;
            break;
        default:
            // do nothing on invalid command

            break;
 8002490:	e011      	b.n	80024b6 <LFO_Waveform_Decode+0x46>
        	SynthParameters.lfo_output_en = 0;
 8002492:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <LFO_Waveform_Decode+0x54>)
 8002494:	2200      	movs	r2, #0
 8002496:	675a      	str	r2, [r3, #116]	@ 0x74
            break;
 8002498:	e00e      	b.n	80024b8 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <LFO_Waveform_Decode+0x54>)
 800249c:	2201      	movs	r2, #1
 800249e:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 1;
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <LFO_Waveform_Decode+0x54>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80024a6:	e007      	b.n	80024b8 <LFO_Waveform_Decode+0x48>
        	SynthParameters.lfo_output_en = 1;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <LFO_Waveform_Decode+0x54>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	675a      	str	r2, [r3, #116]	@ 0x74
        	SynthParameters.lfo_output_waveform = 0;
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <LFO_Waveform_Decode+0x54>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	679a      	str	r2, [r3, #120]	@ 0x78
            break;
 80024b4:	e000      	b.n	80024b8 <LFO_Waveform_Decode+0x48>
            break;
 80024b6:	bf00      	nop
    }

	return;
 80024b8:	bf00      	nop
}
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	20000344 	.word	0x20000344

080024c8 <Preset_Command_Handler>:

// ===========================================================================================================
// P preset function

int Preset_Command_Handler(int address, int data){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]

    switch(address) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b31      	cmp	r3, #49	@ 0x31
 80024d6:	d003      	beq.n	80024e0 <Preset_Command_Handler+0x18>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b32      	cmp	r3, #50	@ 0x32
 80024dc:	d002      	beq.n	80024e4 <Preset_Command_Handler+0x1c>
 80024de:	e003      	b.n	80024e8 <Preset_Command_Handler+0x20>
        case '1': // preset save function

        	// preset save function

        	return 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e002      	b.n	80024ea <Preset_Command_Handler+0x22>
        case '2': // preset load function

        	// preset load function

        	return 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <Preset_Command_Handler+0x22>
        default:
            // do nothing on invalid command

        	//Command_Error();

        	return 1;
 80024e8:	2301      	movs	r3, #1
    }

    return 1;
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <Command_Range_Check_Error>:

	}

}*/

int Command_Range_Check_Error(int data, int max_value){
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range
	if(data <= max_value){
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	dc01      	bgt.n	800250c <Command_Range_Check_Error+0x16>
		return 0; // value is valid, return success
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <Command_Range_Check_Error+0x18>
	}
	else{
		return 1; // value is invalid, return error
 800250c:	2301      	movs	r3, #1
	}

}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <Command_Option_Check_Error>:

int Command_Option_Check_Error(int data, int max_value) {
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]

	// check if the value is outside the valid range or is zero
    if (data <= 0 || data > max_value) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	dd03      	ble.n	8002532 <Command_Option_Check_Error+0x18>
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	dd01      	ble.n	8002536 <Command_Option_Check_Error+0x1c>
        return 1; // value is invalid, return error
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <Command_Option_Check_Error+0x1e>
    }
    return 0; // value is valid
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <MX_SPI3_Init+0x78>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800255e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002562:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002576:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800257a:	2228      	movs	r2, #40	@ 0x28
 800257c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002592:	2207      	movs	r2, #7
 8002594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <MX_SPI3_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <MX_SPI3_Init+0x74>)
 800259e:	2208      	movs	r2, #8
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_SPI3_Init+0x74>)
 80025a4:	f005 fe78 	bl	8008298 <HAL_SPI_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f7fe ff28 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200002e0 	.word	0x200002e0
 80025bc:	40003c00 	.word	0x40003c00

080025c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_SPI_MspInit+0x7c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d128      	bne.n	8002634 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	4a16      	ldr	r2, [pc, #88]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_SPI_MspInit+0x80>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002624:	2306      	movs	r3, #6
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	@ (8002644 <HAL_SPI_MspInit+0x84>)
 8002630:	f001 fb90 	bl	8003d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	@ 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40003c00 	.word	0x40003c00
 8002640:	40021000 	.word	0x40021000
 8002644:	48000800 	.word	0x48000800

08002648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_MspInit+0x44>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	4a0e      	ldr	r2, [pc, #56]	@ (800268c <HAL_MspInit+0x44>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6613      	str	r3, [r2, #96]	@ 0x60
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <HAL_MspInit+0x44>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_MspInit+0x44>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4a08      	ldr	r2, [pc, #32]	@ (800268c <HAL_MspInit+0x44>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002670:	6593      	str	r3, [r2, #88]	@ 0x58
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_MspInit+0x44>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800267e:	f004 f97f 	bl	8006980 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <NMI_Handler+0x4>

08002698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <MemManage_Handler+0x4>

080026a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <BusFault_Handler+0x4>

080026b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <UsageFault_Handler+0x4>

080026b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e6:	f000 ff6b 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <DMA1_Channel1_IRQHandler+0x10>)
 80026f6:	f001 fa1b 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000280 	.word	0x20000280

08002704 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <USB_LP_IRQHandler+0x10>)
 800270a:	f002 fc83 	bl	8005014 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20001a34 	.word	0x20001a34

08002718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <USART2_IRQHandler+0x10>)
 800271e:	f006 fe57 	bl	80093d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200004c8 	.word	0x200004c8

0800272c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <TIM6_DAC_IRQHandler+0x10>)
 8002732:	f006 fa2e 	bl	8008b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000047c 	.word	0x2000047c

08002740 <Digital_Pot_Wiper_Set>:
extern System sys;
Synth SynthParameters;// = {10, 3.14};

//uint16_t sys.gpio_reg = 0x0000;

void Digital_Pot_Wiper_Set(int pot_address, int wiper_code, int invert){
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
	uint8_t spi_buf[1];
	GPIO_TypeDef* CSn_PORT;
	uint16_t CSn_PIN;

	//if invert bit is set, the command value is inverted
	spi_buf[0] = invert ? ~(wiper_code) : wiper_code;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <Digital_Pot_Wiper_Set+0x1c>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e001      	b.n	8002760 <Digital_Pot_Wiper_Set+0x20>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	743b      	strb	r3, [r7, #16]

    switch(pot_address) {
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d854      	bhi.n	8002812 <Digital_Pot_Wiper_Set+0xd2>
 8002768:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <Digital_Pot_Wiper_Set+0x30>)
 800276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276e:	bf00      	nop
 8002770:	0800279d 	.word	0x0800279d
 8002774:	080027a9 	.word	0x080027a9
 8002778:	080027b3 	.word	0x080027b3
 800277c:	080027bd 	.word	0x080027bd
 8002780:	080027c9 	.word	0x080027c9
 8002784:	080027d3 	.word	0x080027d3
 8002788:	080027dd 	.word	0x080027dd
 800278c:	080027e7 	.word	0x080027e7
 8002790:	080027f3 	.word	0x080027f3
 8002794:	080027ff 	.word	0x080027ff
 8002798:	08002809 	.word	0x08002809
        case 0:
            CSn_PORT = CS0_PORT;
 800279c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027a0:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS0_PIN;
 80027a2:	2320      	movs	r3, #32
 80027a4:	827b      	strh	r3, [r7, #18]
            break;
 80027a6:	e035      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 1:
            CSn_PORT = CS1_PORT;
 80027a8:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <Digital_Pot_Wiper_Set+0x104>)
 80027aa:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS1_PIN;
 80027ac:	2302      	movs	r3, #2
 80027ae:	827b      	strh	r3, [r7, #18]
            break;
 80027b0:	e030      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 2:
            CSn_PORT = CS2_PORT;
 80027b2:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <Digital_Pot_Wiper_Set+0x108>)
 80027b4:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS2_PIN;
 80027b6:	2304      	movs	r3, #4
 80027b8:	827b      	strh	r3, [r7, #18]
            break;
 80027ba:	e02b      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 3:
            CSn_PORT = CS3_PORT;
 80027bc:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <Digital_Pot_Wiper_Set+0x104>)
 80027be:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS3_PIN;
 80027c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c4:	827b      	strh	r3, [r7, #18]
            break;
 80027c6:	e025      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 4:
            CSn_PORT = CS4_PORT;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002844 <Digital_Pot_Wiper_Set+0x104>)
 80027ca:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS4_PIN;
 80027cc:	2340      	movs	r3, #64	@ 0x40
 80027ce:	827b      	strh	r3, [r7, #18]
            break;
 80027d0:	e020      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 5:
            CSn_PORT = CS5_PORT;
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <Digital_Pot_Wiper_Set+0x10c>)
 80027d4:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS5_PIN;
 80027d6:	2320      	movs	r3, #32
 80027d8:	827b      	strh	r3, [r7, #18]
            break;
 80027da:	e01b      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 6:
            CSn_PORT = CS6_PORT;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <Digital_Pot_Wiper_Set+0x104>)
 80027de:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS6_PIN;
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	827b      	strh	r3, [r7, #18]
            break;
 80027e4:	e016      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 7:
            CSn_PORT = CS7_PORT;
 80027e6:	4b19      	ldr	r3, [pc, #100]	@ (800284c <Digital_Pot_Wiper_Set+0x10c>)
 80027e8:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS7_PIN;
 80027ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027ee:	827b      	strh	r3, [r7, #18]
            break;
 80027f0:	e010      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 8:
            CSn_PORT = CS8_PORT;
 80027f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027f6:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS8_PIN;
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	827b      	strh	r3, [r7, #18]
            break;
 80027fc:	e00a      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 9:
            CSn_PORT = CS9_PORT;
 80027fe:	4b13      	ldr	r3, [pc, #76]	@ (800284c <Digital_Pot_Wiper_Set+0x10c>)
 8002800:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS9_PIN;
 8002802:	2310      	movs	r3, #16
 8002804:	827b      	strh	r3, [r7, #18]
            break;
 8002806:	e005      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        case 10:
            CSn_PORT = CS10_PORT;
 8002808:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <Digital_Pot_Wiper_Set+0x104>)
 800280a:	617b      	str	r3, [r7, #20]
            CSn_PIN =  CS10_PIN;
 800280c:	2301      	movs	r3, #1
 800280e:	827b      	strh	r3, [r7, #18]
            break;
 8002810:	e000      	b.n	8002814 <Digital_Pot_Wiper_Set+0xd4>
        default:
            // do nothing
            break;
 8002812:	bf00      	nop
    }

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, RESET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, RESET);
 8002814:	8a7b      	ldrh	r3, [r7, #18]
 8002816:	2200      	movs	r2, #0
 8002818:	4619      	mov	r1, r3
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f001 fc1c 	bl	8004058 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, (uint8_t*)spi_buf, 1, 10);
 8002820:	f107 0110 	add.w	r1, r7, #16
 8002824:	230a      	movs	r3, #10
 8002826:	2201      	movs	r2, #1
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <Digital_Pot_Wiper_Set+0x110>)
 800282a:	f005 fde0 	bl	80083ee <HAL_SPI_Transmit>

	//HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
	HAL_GPIO_WritePin(CSn_PORT, CSn_PIN, SET);
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	2201      	movs	r2, #1
 8002832:	4619      	mov	r1, r3
 8002834:	6978      	ldr	r0, [r7, #20]
 8002836:	f001 fc0f 	bl	8004058 <HAL_GPIO_WritePin>

	return;
 800283a:	bf00      	nop
}
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	48000400 	.word	0x48000400
 8002848:	48000c00 	.word	0x48000c00
 800284c:	48000800 	.word	0x48000800
 8002850:	200002e0 	.word	0x200002e0

08002854 <Synth_Reset_Initialize>:

void Synth_Reset_Initialize(){
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TP0_PORT, TP0_PIN, SET); // test point
 8002858:	2201      	movs	r2, #1
 800285a:	2120      	movs	r1, #32
 800285c:	4822      	ldr	r0, [pc, #136]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 800285e:	f001 fbfb 	bl	8004058 <HAL_GPIO_WritePin>

	// initialize all chip select lines
	HAL_GPIO_WritePin(CS0_PORT,  CS0_PIN,  SET);
 8002862:	2201      	movs	r2, #1
 8002864:	2120      	movs	r1, #32
 8002866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800286a:	f001 fbf5 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS1_PORT,  CS1_PIN,  SET);
 800286e:	2201      	movs	r2, #1
 8002870:	2102      	movs	r1, #2
 8002872:	481d      	ldr	r0, [pc, #116]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 8002874:	f001 fbf0 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_PORT,  CS2_PIN,  SET);
 8002878:	2201      	movs	r2, #1
 800287a:	2104      	movs	r1, #4
 800287c:	481b      	ldr	r0, [pc, #108]	@ (80028ec <Synth_Reset_Initialize+0x98>)
 800287e:	f001 fbeb 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_PORT,  CS3_PIN,  SET);
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002888:	4817      	ldr	r0, [pc, #92]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 800288a:	f001 fbe5 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_PORT,  CS4_PIN,  SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2140      	movs	r1, #64	@ 0x40
 8002892:	4815      	ldr	r0, [pc, #84]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 8002894:	f001 fbe0 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS5_PORT,  CS5_PIN,  SET);
 8002898:	2201      	movs	r2, #1
 800289a:	2120      	movs	r1, #32
 800289c:	4814      	ldr	r0, [pc, #80]	@ (80028f0 <Synth_Reset_Initialize+0x9c>)
 800289e:	f001 fbdb 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS6_PORT,  CS6_PIN,  SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	2180      	movs	r1, #128	@ 0x80
 80028a6:	4810      	ldr	r0, [pc, #64]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 80028a8:	f001 fbd6 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS7_PORT,  CS7_PIN,  SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b2:	480f      	ldr	r0, [pc, #60]	@ (80028f0 <Synth_Reset_Initialize+0x9c>)
 80028b4:	f001 fbd0 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS8_PORT,  CS8_PIN,  SET);
 80028b8:	2201      	movs	r2, #1
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c0:	f001 fbca 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS9_PORT,  CS9_PIN,  SET);
 80028c4:	2201      	movs	r2, #1
 80028c6:	2110      	movs	r1, #16
 80028c8:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <Synth_Reset_Initialize+0x9c>)
 80028ca:	f001 fbc5 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS10_PORT, CS10_PIN, SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	2101      	movs	r1, #1
 80028d2:	4805      	ldr	r0, [pc, #20]	@ (80028e8 <Synth_Reset_Initialize+0x94>)
 80028d4:	f001 fbc0 	bl	8004058 <HAL_GPIO_WritePin>

	// set gate low
	Gate_Control(0);
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 fa9f 	bl	8002e1c <Gate_Control>

	Synth_Initialize_Preset();
 80028de:	f000 f809 	bl	80028f4 <Synth_Initialize_Preset>

	return;
 80028e2:	bf00      	nop
}
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	48000400 	.word	0x48000400
 80028ec:	48000c00 	.word	0x48000c00
 80028f0:	48000800 	.word	0x48000800

080028f4 <Synth_Initialize_Preset>:

int Synth_Initialize_Preset(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0

	// system settings
	SynthParameters.vca_mod_source = 1;
 80028f8:	4b56      	ldr	r3, [pc, #344]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
	SynthParameters.vca_bypass = 1;
 80028fe:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002900:	2201      	movs	r2, #1
 8002902:	605a      	str	r2, [r3, #4]
	SynthParameters.vcf_mod_source = 1;
 8002904:	4b53      	ldr	r3, [pc, #332]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002906:	2201      	movs	r2, #1
 8002908:	609a      	str	r2, [r3, #8]
	SynthParameters.fm1_enable = 0;
 800290a:	4b52      	ldr	r3, [pc, #328]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
	SynthParameters.fm2_enable = 0;
 8002910:	4b50      	ldr	r3, [pc, #320]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
	SynthParameters.env_invert_mode = 0;
 8002916:	4b4f      	ldr	r3, [pc, #316]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
	SynthParameters.env_loop_mode = 0;
 800291c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
	SynthParameters.lfo_waveform = 1;
 8002922:	4b4c      	ldr	r3, [pc, #304]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002924:	2201      	movs	r2, #1
 8002926:	61da      	str	r2, [r3, #28]

	// waveform synthesis settings
	SynthParameters.oscillator1 = 4;
 8002928:	4b4a      	ldr	r3, [pc, #296]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800292a:	2204      	movs	r2, #4
 800292c:	621a      	str	r2, [r3, #32]
	SynthParameters.oscillator2 = 4;
 800292e:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002930:	2204      	movs	r2, #4
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24
	SynthParameters.note_offset1 = 12;
 8002934:	4b47      	ldr	r3, [pc, #284]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002936:	220c      	movs	r2, #12
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
	SynthParameters.note_offset2 = 12;
 800293a:	4b46      	ldr	r3, [pc, #280]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800293c:	220c      	movs	r2, #12
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
	SynthParameters.detune_osc1 = 100;
 8002940:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002942:	2264      	movs	r2, #100	@ 0x64
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
	SynthParameters.detune_osc2 = 100;
 8002946:	4b43      	ldr	r3, [pc, #268]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002948:	2264      	movs	r2, #100	@ 0x64
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
	SynthParameters.fm_intensity1 = 0.5;
 800294c:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800294e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002952:	639a      	str	r2, [r3, #56]	@ 0x38
	SynthParameters.fm_intensity2 = 0.5;
 8002954:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002956:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800295a:	63da      	str	r2, [r3, #60]	@ 0x3c
	SynthParameters.fm_harmonic1 = 1.0;
 800295c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800295e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
	SynthParameters.fm_harmonic2 = 1.0;
 8002964:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002966:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44
	SynthParameters.duty_cycle1 = 0.5;
 800296c:	4b39      	ldr	r3, [pc, #228]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800296e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002972:	649a      	str	r2, [r3, #72]	@ 0x48
	SynthParameters.duty_cycle2 = 0.5;
 8002974:	4b37      	ldr	r3, [pc, #220]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002976:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800297a:	64da      	str	r2, [r3, #76]	@ 0x4c
	SynthParameters.volume_osc1 = 100;
 800297c:	4b35      	ldr	r3, [pc, #212]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800297e:	2264      	movs	r2, #100	@ 0x64
 8002980:	651a      	str	r2, [r3, #80]	@ 0x50
	SynthParameters.volume_osc2 = 100;
 8002982:	4b34      	ldr	r3, [pc, #208]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002984:	2264      	movs	r2, #100	@ 0x64
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54

	// mixer output level settings
	SynthParameters.dac_mixer_level = 127;
 8002988:	4b32      	ldr	r3, [pc, #200]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800298a:	227f      	movs	r2, #127	@ 0x7f
 800298c:	659a      	str	r2, [r3, #88]	@ 0x58
	SynthParameters.filter_out_level = 127;
 800298e:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002990:	227f      	movs	r2, #127	@ 0x7f
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c

	// filter modulation source settings
	SynthParameters.vcf_cv_en = 0;
 8002994:	4b2f      	ldr	r3, [pc, #188]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002996:	2200      	movs	r2, #0
 8002998:	661a      	str	r2, [r3, #96]	@ 0x60
	SynthParameters.vcf_cv_sel = 0;
 800299a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 800299c:	2200      	movs	r2, #0
 800299e:	665a      	str	r2, [r3, #100]	@ 0x64

	// filter digital pot settings
	SynthParameters.vcf_cv_intensity = 127;
 80029a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029a2:	227f      	movs	r2, #127	@ 0x7f
 80029a4:	669a      	str	r2, [r3, #104]	@ 0x68
	SynthParameters.vcf_cutoff = 127;
 80029a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029a8:	227f      	movs	r2, #127	@ 0x7f
 80029aa:	66da      	str	r2, [r3, #108]	@ 0x6c
	SynthParameters.vcf_resonance = 127;
 80029ac:	4b29      	ldr	r3, [pc, #164]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029ae:	227f      	movs	r2, #127	@ 0x7f
 80029b0:	671a      	str	r2, [r3, #112]	@ 0x70

	// LFO output settings
	SynthParameters.lfo_output_en = 0;
 80029b2:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	675a      	str	r2, [r3, #116]	@ 0x74
	SynthParameters.lfo_output_waveform = 0;
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	679a      	str	r2, [r3, #120]	@ 0x78

	// LFO output frequency setting
	SynthParameters.lfo_frequency = 127;
 80029be:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029c0:	227f      	movs	r2, #127	@ 0x7f
 80029c2:	67da      	str	r2, [r3, #124]	@ 0x7c

	// VCA modulation source settings
	SynthParameters.vca_cv_en = 0;
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	SynthParameters.vca_cv_sel = 0;
 80029cc:	4b21      	ldr	r3, [pc, #132]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	// VCA output enable/bypass settings
	SynthParameters.vca_output_en = 1;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	SynthParameters.vca_output_sel = 1;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029de:	2201      	movs	r2, #1
 80029e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	// VCA modulation source intensity and offset settings
	SynthParameters.vca_cv_intensity = 127;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029e6:	227f      	movs	r2, #127	@ 0x7f
 80029e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	SynthParameters.vca_offset = 127;
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029ee:	227f      	movs	r2, #127	@ 0x7f
 80029f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	// envelope output settings
	SynthParameters.env_en = 1;
 80029f4:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	SynthParameters.env_loop = 0;
 80029fc:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	SynthParameters.env_invert = 0;
 8002a04:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	// envelope timing settings
	//SynthParameters.env_attack_rate = 0;
	SynthParameters.env_attack_rate = 127;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002a0e:	227f      	movs	r2, #127	@ 0x7f
 8002a10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	SynthParameters.env_release_rate = 127;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002a16:	227f      	movs	r2, #127	@ 0x7f
 8002a18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	//SynthParameters.env_release_rate = 255;
	SynthParameters.env_decay_rate = 127;
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <Synth_Initialize_Preset+0x160>)
 8002a1e:	227f      	movs	r2, #127	@ 0x7f
 8002a20:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//SynthParameters.env_decay_rate = 0;

	Mixer_Digital_Pot_Control();
 8002a24:	f000 f818 	bl	8002a58 <Mixer_Digital_Pot_Control>

	Filter_Mod_Source_Control();
 8002a28:	f000 f8a4 	bl	8002b74 <Filter_Mod_Source_Control>
	Filter_Digital_Pot_Control();
 8002a2c:	f000 f8d2 	bl	8002bd4 <Filter_Digital_Pot_Control>

	LFO_Output_Control();
 8002a30:	f000 f8ec 	bl	8002c0c <LFO_Output_Control>
	LFO_Digital_Pot_Control();
 8002a34:	f000 f91a 	bl	8002c6c <LFO_Digital_Pot_Control>

	VCA_Mod_Source_Control();
 8002a38:	f000 f822 	bl	8002a80 <VCA_Mod_Source_Control>
	VCA_Bypass_Switch_Control();
 8002a3c:	f000 f852 	bl	8002ae4 <VCA_Bypass_Switch_Control>
	VCA_Digital_Pot_Control();
 8002a40:	f000 f882 	bl	8002b48 <VCA_Digital_Pot_Control>

	ENV_Mode_Control();
 8002a44:	f000 f920 	bl	8002c88 <ENV_Mode_Control>
	ENV_Digital_Pot_Control();
 8002a48:	f000 f966 	bl	8002d18 <ENV_Digital_Pot_Control>

	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000344 	.word	0x20000344

08002a58 <Mixer_Digital_Pot_Control>:
//	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, gate_state);
//
//	return;
//}

void Mixer_Digital_Pot_Control(){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(0, SynthParameters.dac_mixer_level, 0);  // set DAC mixer output level
 8002a5c:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <Mixer_Digital_Pot_Control+0x24>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	2200      	movs	r2, #0
 8002a62:	4619      	mov	r1, r3
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7ff fe6b 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(1, SynthParameters.filter_out_level, 0); // set filter output level
 8002a6a:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <Mixer_Digital_Pot_Control+0x24>)
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff fe64 	bl	8002740 <Digital_Pot_Wiper_Set>

    return;
 8002a78:	bf00      	nop
}
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000344 	.word	0x20000344

08002a80 <VCA_Mod_Source_Control>:

void VCA_Mod_Source_Control() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_CV_SW_PORT, sys.gpio_reg, VCA_CV_SW_PIN, SynthParameters.vca_cv_en == 0);
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <VCA_Mod_Source_Control+0x5c>)
 8002a86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ae0 <VCA_Mod_Source_Control+0x60>)
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f000 fcd6 	bl	8003450 <GPIO_State_Change>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <VCA_Mod_Source_Control+0x5c>)
 8002aaa:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select modulation source
    sys.gpio_reg = GPIO_State_Change(VCA_SEL_PORT, sys.gpio_reg, VCA_SEL_PIN, SynthParameters.vca_cv_sel == 1);
 8002aae:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <VCA_Mod_Source_Control+0x5c>)
 8002ab0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <VCA_Mod_Source_Control+0x60>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f000 fcc1 	bl	8003450 <GPIO_State_Change>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	4b02      	ldr	r3, [pc, #8]	@ (8002adc <VCA_Mod_Source_Control+0x5c>)
 8002ad4:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002ad8:	bf00      	nop
}
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200003f4 	.word	0x200003f4
 8002ae0:	20000344 	.word	0x20000344

08002ae4 <VCA_Bypass_Switch_Control>:

void VCA_Bypass_Switch_Control() {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0

    // control VCA bypass switch enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_SW_PORT, sys.gpio_reg, VCA_BYP_SW_PIN, SynthParameters.vca_output_en == 0);
 8002ae8:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <VCA_Bypass_Switch_Control+0x5c>)
 8002aea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002aee:	4619      	mov	r1, r3
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <VCA_Bypass_Switch_Control+0x60>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2206      	movs	r2, #6
 8002b02:	2000      	movs	r0, #0
 8002b04:	f000 fca4 	bl	8003450 <GPIO_State_Change>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <VCA_Bypass_Switch_Control+0x5c>)
 8002b0e:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // update output source selection; true = bypass VCA, false = output through VCA
    sys.gpio_reg = GPIO_State_Change(VCA_BYP_PORT, sys.gpio_reg, VCA_BYP_PIN, SynthParameters.vca_output_sel == 1);
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <VCA_Bypass_Switch_Control+0x5c>)
 8002b14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <VCA_Bypass_Switch_Control+0x60>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 fc8f 	bl	8003450 <GPIO_State_Change>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4b02      	ldr	r3, [pc, #8]	@ (8002b40 <VCA_Bypass_Switch_Control+0x5c>)
 8002b38:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002b3c:	bf00      	nop
}
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200003f4 	.word	0x200003f4
 8002b44:	20000344 	.word	0x20000344

08002b48 <VCA_Digital_Pot_Control>:

void VCA_Digital_Pot_Control(){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(6, SynthParameters.vca_cv_intensity, 0); // set intensity of mod source
 8002b4c:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <VCA_Digital_Pot_Control+0x28>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	2200      	movs	r2, #0
 8002b54:	4619      	mov	r1, r3
 8002b56:	2006      	movs	r0, #6
 8002b58:	f7ff fdf2 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(7, SynthParameters.vca_offset, 0);       // set VCA offset
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <VCA_Digital_Pot_Control+0x28>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	2200      	movs	r2, #0
 8002b64:	4619      	mov	r1, r3
 8002b66:	2007      	movs	r0, #7
 8002b68:	f7ff fdea 	bl	8002740 <Digital_Pot_Wiper_Set>

    return;
 8002b6c:	bf00      	nop
}
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000344 	.word	0x20000344

08002b74 <Filter_Mod_Source_Control>:

void Filter_Mod_Source_Control() {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0

    // control CV enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(VCF_CV_SW_PORT, sys.gpio_reg, VCF_CV_SW_PIN, SynthParameters.vcf_cv_en == 0);
 8002b78:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <Filter_Mod_Source_Control+0x58>)
 8002b7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <Filter_Mod_Source_Control+0x5c>)
 8002b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2202      	movs	r2, #2
 8002b90:	2001      	movs	r0, #1
 8002b92:	f000 fc5d 	bl	8003450 <GPIO_State_Change>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <Filter_Mod_Source_Control+0x58>)
 8002b9c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select modulation source; true = LFO, false = envelope
    sys.gpio_reg = GPIO_State_Change(VCF_SEL_PORT, sys.gpio_reg, VCF_SEL_PIN, SynthParameters.vcf_cv_sel == 1);
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <Filter_Mod_Source_Control+0x58>)
 8002ba2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <Filter_Mod_Source_Control+0x5c>)
 8002baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f000 fc49 	bl	8003450 <GPIO_State_Change>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b02      	ldr	r3, [pc, #8]	@ (8002bcc <Filter_Mod_Source_Control+0x58>)
 8002bc4:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002bc8:	bf00      	nop
}
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200003f4 	.word	0x200003f4
 8002bd0:	20000344 	.word	0x20000344

08002bd4 <Filter_Digital_Pot_Control>:


void Filter_Digital_Pot_Control(){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(4, SynthParameters.vcf_cv_intensity, 0); // set intensity of mod source
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <Filter_Digital_Pot_Control+0x34>)
 8002bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4619      	mov	r1, r3
 8002be0:	2004      	movs	r0, #4
 8002be2:	f7ff fdad 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(3, SynthParameters.vcf_cutoff, 0);       // set filter cutoff
 8002be6:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <Filter_Digital_Pot_Control+0x34>)
 8002be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	2003      	movs	r0, #3
 8002bf0:	f7ff fda6 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(2, SynthParameters.vcf_resonance, 0);    // set resonance intensity
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <Filter_Digital_Pot_Control+0x34>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f7ff fd9f 	bl	8002740 <Digital_Pot_Wiper_Set>

    return;
 8002c02:	bf00      	nop
}
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000344 	.word	0x20000344

08002c0c <LFO_Output_Control>:

void LFO_Output_Control() {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

    // control LFO output enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(LFO_EN_PORT, sys.gpio_reg, LFO_EN_PIN, SynthParameters.lfo_output_en == 0);
 8002c10:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <LFO_Output_Control+0x58>)
 8002c12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002c16:	4619      	mov	r1, r3
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <LFO_Output_Control+0x5c>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2207      	movs	r2, #7
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f000 fc11 	bl	8003450 <GPIO_State_Change>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <LFO_Output_Control+0x58>)
 8002c34:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select LFO output waveform; true = square wave, false = triangle wave
    sys.gpio_reg = GPIO_State_Change(LFO_SEL_PORT, sys.gpio_reg, LFO_SEL_PIN, SynthParameters.lfo_output_waveform == 1);
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <LFO_Output_Control+0x58>)
 8002c3a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <LFO_Output_Control+0x5c>)
 8002c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2206      	movs	r2, #6
 8002c50:	2001      	movs	r0, #1
 8002c52:	f000 fbfd 	bl	8003450 <GPIO_State_Change>
 8002c56:	4603      	mov	r3, r0
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b02      	ldr	r3, [pc, #8]	@ (8002c64 <LFO_Output_Control+0x58>)
 8002c5c:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002c60:	bf00      	nop
}
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200003f4 	.word	0x200003f4
 8002c68:	20000344 	.word	0x20000344

08002c6c <LFO_Digital_Pot_Control>:

void LFO_Digital_Pot_Control(){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(5, SynthParameters.lfo_frequency, 0); // set LFO frequency
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <LFO_Digital_Pot_Control+0x18>)
 8002c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	2005      	movs	r0, #5
 8002c7a:	f7ff fd61 	bl	8002740 <Digital_Pot_Wiper_Set>

    return;
 8002c7e:	bf00      	nop
}
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000344 	.word	0x20000344

08002c88 <ENV_Mode_Control>:

void ENV_Mode_Control() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0

    // control envelope enable/disable (active low)
    sys.gpio_reg = GPIO_State_Change(ENV_EN_PORT, sys.gpio_reg, ENV_EN_PIN, SynthParameters.env_en == 0);
 8002c8c:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002c8e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002c92:	4619      	mov	r1, r3
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <ENV_Mode_Control+0x8c>)
 8002c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f000 fbd2 	bl	8003450 <GPIO_State_Change>
 8002cac:	4603      	mov	r3, r0
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002cb2:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select envelope loop/trigger mode; true = trigger mode, false = loop mode
    sys.gpio_reg = GPIO_State_Change(ENV_LP_PORT, sys.gpio_reg, ENV_LP_PIN, SynthParameters.env_loop == 0);
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002cb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <ENV_Mode_Control+0x8c>)
 8002cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2204      	movs	r2, #4
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f000 fbbd 	bl	8003450 <GPIO_State_Change>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002cdc:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    // select envelope inversion mode; true = inverter output, false = non-inverted output
    sys.gpio_reg = GPIO_State_Change(ENV_POL_PORT, sys.gpio_reg, ENV_POL_PIN, SynthParameters.env_invert == 0);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002ce2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <ENV_Mode_Control+0x8c>)
 8002cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 fba8 	bl	8003450 <GPIO_State_Change>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	4b02      	ldr	r3, [pc, #8]	@ (8002d10 <ENV_Mode_Control+0x88>)
 8002d06:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

    return;
 8002d0a:	bf00      	nop
}
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200003f4 	.word	0x200003f4
 8002d14:	20000344 	.word	0x20000344

08002d18 <ENV_Digital_Pot_Control>:

void ENV_Digital_Pot_Control(){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0

    Digital_Pot_Wiper_Set(8, SynthParameters.env_attack_rate, 0);    // set envelope attack rate
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <ENV_Digital_Pot_Control+0x38>)
 8002d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	2008      	movs	r0, #8
 8002d28:	f7ff fd0a 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(9, SynthParameters.env_release_rate, 0);   // set envelop release rate
 8002d2c:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <ENV_Digital_Pot_Control+0x38>)
 8002d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d32:	2200      	movs	r2, #0
 8002d34:	4619      	mov	r1, r3
 8002d36:	2009      	movs	r0, #9
 8002d38:	f7ff fd02 	bl	8002740 <Digital_Pot_Wiper_Set>
    Digital_Pot_Wiper_Set(10, SynthParameters.env_decay_rate, 0);    // set decay rate and sustain level
 8002d3c:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <ENV_Digital_Pot_Control+0x38>)
 8002d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	200a      	movs	r0, #10
 8002d48:	f7ff fcfa 	bl	8002740 <Digital_Pot_Wiper_Set>

    return;
 8002d4c:	bf00      	nop
}
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000344 	.word	0x20000344

08002d54 <System_Reset_Initialize>:
#include "audiodac.h"
#include "gpioxpndr.h"

System sys;

void System_Reset_Initialize(){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0

	// system controls
	sys.serial_cmd_echo = 0;
 8002d58:	4b2e      	ldr	r3, [pc, #184]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
	sys.midi_tx_pol = 0;
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
	sys.midi_tx_en = 0;
 8002d64:	4b2b      	ldr	r3, [pc, #172]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
	sys.value_returned = 0;
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
	sys.green_led_state = 0;
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
	sys.red_led_state = 0;
 8002d76:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
	sys.blink_counter = 0;
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]

	// communication buffers
	sys.usb_vcp_buffer[64] = 0;
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	sys.midi_buf[3] = 0;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	sys.temp_buf[3] = 0;
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
	sys.temp_buf_index = 0;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	665a      	str	r2, [r3, #100]	@ 0x64

	// communication status flags
	sys.usb_data_present = 0;
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	669a      	str	r2, [r3, #104]	@ 0x68
	sys.midi_data_present = 0;
 8002da6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	66da      	str	r2, [r3, #108]	@ 0x6c

	// midi variables
	sys.note_status_bit = 0;
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	671a      	str	r2, [r3, #112]	@ 0x70
	sys.midi_note_input = 0;
 8002db2:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	675a      	str	r2, [r3, #116]	@ 0x74
	sys.midi_note_velocity = 0;
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	679a      	str	r2, [r3, #120]	@ 0x78

	sys.gate = 0;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	67da      	str	r2, [r3, #124]	@ 0x7c
	sys.velocity_enable = 0;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	sys.gpio_reg = 0;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <System_Reset_Initialize+0xc0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET); // enable analog power supply
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dda:	480f      	ldr	r0, [pc, #60]	@ (8002e18 <System_Reset_Initialize+0xc4>)
 8002ddc:	f001 f93c 	bl	8004058 <HAL_GPIO_WritePin>

	DAC_Register_Init();
 8002de0:	f000 facc 	bl	800337c <DAC_Register_Init>

	DAC_Register_Write(0x40, 0x3F);
 8002de4:	213f      	movs	r1, #63	@ 0x3f
 8002de6:	2040      	movs	r0, #64	@ 0x40
 8002de8:	f000 faaa 	bl	8003340 <DAC_Register_Write>
	DAC_Register_Write(0x44, 0x3F);
 8002dec:	213f      	movs	r1, #63	@ 0x3f
 8002dee:	2044      	movs	r0, #68	@ 0x44
 8002df0:	f000 faa6 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(0x41, 0x3F);
 8002df4:	213f      	movs	r1, #63	@ 0x3f
 8002df6:	2041      	movs	r0, #65	@ 0x41
 8002df8:	f000 faa2 	bl	8003340 <DAC_Register_Write>
	DAC_Register_Write(0x45, 0x3F);
 8002dfc:	213f      	movs	r1, #63	@ 0x3f
 8002dfe:	2045      	movs	r0, #69	@ 0x45
 8002e00:	f000 fa9e 	bl	8003340 <DAC_Register_Write>

	GPIO_Register_Init();
 8002e04:	f000 fb10 	bl	8003428 <GPIO_Register_Init>

	MIDI_Port_Control();
 8002e08:	f000 f81e 	bl	8002e48 <MIDI_Port_Control>
	Gate_Control();
 8002e0c:	f000 f806 	bl	8002e1c <Gate_Control>

	return;
 8002e10:	bf00      	nop
}
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200003f4 	.word	0x200003f4
 8002e18:	48000400 	.word	0x48000400

08002e1c <Gate_Control>:

// ===========================================================================================================
// system functions

void Gate_Control(){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

	// gate control for envelope trigger and LED indicator
	sys.gpio_reg = GPIO_State_Change(GATE_PORT, sys.gpio_reg, GATE_PIN, sys.gate);
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <Gate_Control+0x28>)
 8002e22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002e26:	4619      	mov	r1, r3
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <Gate_Control+0x28>)
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 fb0e 	bl	8003450 <GPIO_State_Change>
 8002e34:	4603      	mov	r3, r0
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b02      	ldr	r3, [pc, #8]	@ (8002e44 <Gate_Control+0x28>)
 8002e3a:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	return;
 8002e3e:	bf00      	nop
}
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200003f4 	.word	0x200003f4

08002e48 <MIDI_Port_Control>:

void MIDI_Port_Control(){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0

	// enable or disable transmit through MIDI port
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_EN_PORT, sys.gpio_reg, MIDI_TX_EN_PIN, sys.midi_tx_en == 0);
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002e52:	4619      	mov	r1, r3
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2200      	movs	r2, #0
 8002e64:	2000      	movs	r0, #0
 8002e66:	f000 faf3 	bl	8003450 <GPIO_State_Change>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e70:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	// toggle polarity of MIDI UART output
	sys.gpio_reg = GPIO_State_Change(MIDI_TX_POL_PORT, sys.gpio_reg, MIDI_TX_POL_PIN, sys.midi_tx_pol);
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 fae4 	bl	8003450 <GPIO_State_Change>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b02      	ldr	r3, [pc, #8]	@ (8002e98 <MIDI_Port_Control+0x50>)
 8002e8e:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84

	return;
 8002e92:	bf00      	nop
}
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200003f4 	.word	0x200003f4

08002e9c <Command_Response_Handler>:
	}

	return;
}

void Command_Response_Handler(int error_check, uint8_t command_byte, uint8_t address_byte, uint8_t data_byte){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	70fb      	strb	r3, [r7, #3]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70bb      	strb	r3, [r7, #2]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	707b      	strb	r3, [r7, #1]

	uint8_t return_data[3];

	if(sys.value_returned == 1){ // exit early if response already returned
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <Command_Response_Handler+0x98>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d033      	beq.n	8002f26 <Command_Response_Handler+0x8a>
        return;
	}

    if (error_check == 1) {
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d109      	bne.n	8002ed8 <Command_Response_Handler+0x3c>
    	memcpy(return_data, "ERR", 3); // report error
 8002ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <Command_Response_Handler+0x9c>)
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	8019      	strh	r1, [r3, #0]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	0c12      	lsrs	r2, r2, #16
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e013      	b.n	8002f00 <Command_Response_Handler+0x64>

    } else if (sys.serial_cmd_echo == 1) { // echo command
 8002ed8:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <Command_Response_Handler+0x98>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <Command_Response_Handler+0x52>

        return_data[0] = command_byte;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	733b      	strb	r3, [r7, #12]
        return_data[1] = address_byte;
 8002ee4:	78bb      	ldrb	r3, [r7, #2]
 8002ee6:	737b      	strb	r3, [r7, #13]
        return_data[2] = data_byte;
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	73bb      	strb	r3, [r7, #14]
 8002eec:	e008      	b.n	8002f00 <Command_Response_Handler+0x64>

    } else {
    	memcpy(return_data, "ACK", 3); // acknowledge input
 8002eee:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <Command_Response_Handler+0xa0>)
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	8019      	strh	r1, [r3, #0]
 8002efa:	3302      	adds	r3, #2
 8002efc:	0c12      	lsrs	r2, r2, #16
 8002efe:	701a      	strb	r2, [r3, #0]

    }

    CDC_Transmit_FS(return_data, 3); // transmit return message
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	2103      	movs	r1, #3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00b fe44 	bl	800eb94 <CDC_Transmit_FS>

    if (sys.midi_tx_en == 1) { // send return message if enabled
 8002f0c:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <Command_Response_Handler+0x98>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10a      	bne.n	8002f2a <Command_Response_Handler+0x8e>
        HAL_UART_Transmit(&huart2, return_data, 3, 1000);
 8002f14:	f107 010c 	add.w	r1, r7, #12
 8002f18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4808      	ldr	r0, [pc, #32]	@ (8002f40 <Command_Response_Handler+0xa4>)
 8002f20:	f006 f97c 	bl	800921c <HAL_UART_Transmit>
    }

	return;
 8002f24:	e001      	b.n	8002f2a <Command_Response_Handler+0x8e>
        return;
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <Command_Response_Handler+0x90>
	return;
 8002f2a:	bf00      	nop
}
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200003f4 	.word	0x200003f4
 8002f38:	0800fe34 	.word	0x0800fe34
 8002f3c:	0800fe38 	.word	0x0800fe38
 8002f40:	200004c8 	.word	0x200004c8

08002f44 <Command_Error_Check>:

// check command argument to verify input is valid
int Command_Error_Check(ErrorCheckType checkType, int data, int max_value, float float_data, float float_max){
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6139      	str	r1, [r7, #16]
 8002f4e:	60fa      	str	r2, [r7, #12]
 8002f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f54:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f58:	75fb      	strb	r3, [r7, #23]
    switch (checkType) {
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d83a      	bhi.n	8002fd6 <Command_Error_Check+0x92>
 8002f60:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <Command_Error_Check+0x24>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	08002f9f 	.word	0x08002f9f
 8002f74:	08002fb7 	.word	0x08002fb7
        case MAX_RANGE_CHECK:

            return (data <= max_value) ? 0 : 1;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	bfcc      	ite	gt
 8002f80:	2301      	movgt	r3, #1
 8002f82:	2300      	movle	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e027      	b.n	8002fd8 <Command_Error_Check+0x94>
        case OPTION_BOX_CHECK:

            return (data <= 0 || data > max_value) ? 1 : 0;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd03      	ble.n	8002f96 <Command_Error_Check+0x52>
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dd01      	ble.n	8002f9a <Command_Error_Check+0x56>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e01e      	b.n	8002fd8 <Command_Error_Check+0x94>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e01c      	b.n	8002fd8 <Command_Error_Check+0x94>
        case NUMBER_CHECK:

            return (data <= '0' || data > max_value + '0') ? 1 : 0;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b30      	cmp	r3, #48	@ 0x30
 8002fa2:	dd04      	ble.n	8002fae <Command_Error_Check+0x6a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3330      	adds	r3, #48	@ 0x30
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dd01      	ble.n	8002fb2 <Command_Error_Check+0x6e>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e012      	b.n	8002fd8 <Command_Error_Check+0x94>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e010      	b.n	8002fd8 <Command_Error_Check+0x94>
        case FLOAT_RANGE_CHECK:

            return (float_data <= float_max) ? 0 : 1;
 8002fb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f083 0301 	eor.w	r3, r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e000      	b.n	8002fd8 <Command_Error_Check+0x94>
        default:
            return 1; // invalid input value
 8002fd6:	2301      	movs	r3, #1
    }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <Command_Blink_Status_LED>:

// if an error is detected, blink red LED twice, blink green LED once if no error
void Command_Blink_Status_LED(int error_check){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

	if(error_check == 1){
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d103      	bne.n	8002ffa <Command_Blink_Status_LED+0x16>
		sys.red_led_state = 1;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <Command_Blink_Status_LED+0x2c>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	e002      	b.n	8003000 <Command_Blink_Status_LED+0x1c>
	}
	else sys.green_led_state = 1;
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <Command_Blink_Status_LED+0x2c>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6); // start LED timer
 8003000:	4804      	ldr	r0, [pc, #16]	@ (8003014 <Command_Blink_Status_LED+0x30>)
 8003002:	f005 fd27 	bl	8008a54 <HAL_TIM_Base_Start_IT>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200003f4 	.word	0x200003f4
 8003014:	2000047c 	.word	0x2000047c

08003018 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

	if(htim == &htim6){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a20      	ldr	r2, [pc, #128]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d139      	bne.n	800309c <HAL_TIM_PeriodElapsedCallback+0x84>

		if(sys.red_led_state == 1){
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d118      	bne.n	8003062 <HAL_TIM_PeriodElapsedCallback+0x4a>

	        if (sys.blink_counter < 4) {
 8003030:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b03      	cmp	r3, #3
 8003036:	dc0b      	bgt.n	8003050 <HAL_TIM_PeriodElapsedCallback+0x38>
	            HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8003038:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800303c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003040:	f001 f822 	bl	8004088 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	3301      	adds	r3, #1
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800304c:	6193      	str	r3, [r2, #24]
 800304e:	e008      	b.n	8003062 <HAL_TIM_PeriodElapsedCallback+0x4a>
	        } else {
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 8003050:	4814      	ldr	r0, [pc, #80]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003052:	f005 fd6f 	bl	8008b34 <HAL_TIM_Base_Stop_IT>
	            sys.red_led_state = 0;
 8003056:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
	            sys.blink_counter = 0;
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
	        }
		}

		if(sys.green_led_state == 1){
 8003062:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d118      	bne.n	800309c <HAL_TIM_PeriodElapsedCallback+0x84>

	        if (sys.blink_counter < 2) {
 800306a:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	dc0b      	bgt.n	800308a <HAL_TIM_PeriodElapsedCallback+0x72>
	            HAL_GPIO_TogglePin(GRN_LED_PORT, GRN_LED_PIN);
 8003072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800307a:	f001 f805 	bl	8004088 <HAL_GPIO_TogglePin>
	            sys.blink_counter++;
 800307e:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	3301      	adds	r3, #1
 8003084:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003086:	6193      	str	r3, [r2, #24]
	        }
		}

	}

}
 8003088:	e008      	b.n	800309c <HAL_TIM_PeriodElapsedCallback+0x84>
	            HAL_TIM_Base_Stop_IT(&htim6); // stop the timer
 800308a:	4806      	ldr	r0, [pc, #24]	@ (80030a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800308c:	f005 fd52 	bl	8008b34 <HAL_TIM_Base_Stop_IT>
	            sys.green_led_state = 0;
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
	            sys.blink_counter = 0;
 8003096:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000047c 	.word	0x2000047c
 80030a8:	200003f4 	.word	0x200003f4

080030ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <SystemInit+0x20>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	4a05      	ldr	r2, [pc, #20]	@ (80030cc <SystemInit+0x20>)
 80030b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030e0:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <MX_TIM6_Init+0x68>)
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <MX_TIM6_Init+0x6c>)
 80030e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <MX_TIM6_Init+0x68>)
 80030e8:	f244 129f 	movw	r2, #16799	@ 0x419f
 80030ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ee:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <MX_TIM6_Init+0x68>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1249;
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <MX_TIM6_Init+0x68>)
 80030f6:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80030fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <MX_TIM6_Init+0x68>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003102:	480d      	ldr	r0, [pc, #52]	@ (8003138 <MX_TIM6_Init+0x68>)
 8003104:	f005 fc4e 	bl	80089a4 <HAL_TIM_Base_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800310e:	f7fe f978 	bl	8001402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4806      	ldr	r0, [pc, #24]	@ (8003138 <MX_TIM6_Init+0x68>)
 8003120:	f005 ff58 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800312a:	f7fe f96a 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000047c 	.word	0x2000047c
 800313c:	40001000 	.word	0x40001000

08003140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <HAL_TIM_Base_MspInit+0x44>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d113      	bne.n	800317a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003152:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <HAL_TIM_Base_MspInit+0x48>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	4a0c      	ldr	r2, [pc, #48]	@ (8003188 <HAL_TIM_Base_MspInit+0x48>)
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	6593      	str	r3, [r2, #88]	@ 0x58
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <HAL_TIM_Base_MspInit+0x48>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	2036      	movs	r0, #54	@ 0x36
 8003170:	f000 fb41 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003174:	2036      	movs	r0, #54	@ 0x36
 8003176:	f000 fb58 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40001000 	.word	0x40001000
 8003188:	40021000 	.word	0x40021000

0800318c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003190:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 8003192:	4a25      	ldr	r2, [pc, #148]	@ (8003228 <MX_USART2_UART_Init+0x9c>)
 8003194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 8003198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800319c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031b2:	220c      	movs	r2, #12
 80031b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031bc:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031c8:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031d0:	2208      	movs	r2, #8
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031dc:	4811      	ldr	r0, [pc, #68]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031de:	f005 ffcd 	bl	800917c <HAL_UART_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80031e8:	f7fe f90b 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ec:	2100      	movs	r1, #0
 80031ee:	480d      	ldr	r0, [pc, #52]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 80031f0:	f008 f843 	bl	800b27a <HAL_UARTEx_SetTxFifoThreshold>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80031fa:	f7fe f902 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fe:	2100      	movs	r1, #0
 8003200:	4808      	ldr	r0, [pc, #32]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 8003202:	f008 f878 	bl	800b2f6 <HAL_UARTEx_SetRxFifoThreshold>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800320c:	f7fe f8f9 	bl	8001402 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003210:	4804      	ldr	r0, [pc, #16]	@ (8003224 <MX_USART2_UART_Init+0x98>)
 8003212:	f007 fff9 	bl	800b208 <HAL_UARTEx_DisableFifoMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800321c:	f7fe f8f1 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200004c8 	.word	0x200004c8
 8003228:	40004400 	.word	0x40004400

0800322c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b09e      	sub	sp, #120	@ 0x78
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2250      	movs	r2, #80	@ 0x50
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f00c f933 	bl	800f4b8 <memset>
  if(uartHandle->Instance==USART2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <HAL_UART_MspInit+0xb4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d13d      	bne.n	80032d8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800325c:	2302      	movs	r3, #2
 800325e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f8c7 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003274:	f7fe f8c5 	bl	8001402 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003278:	4b1a      	ldr	r3, [pc, #104]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003282:	6593      	str	r3, [r2, #88]	@ 0x58
 8003284:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003290:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	4a13      	ldr	r2, [pc, #76]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_UART_MspInit+0xb8>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80032a8:	2318      	movs	r3, #24
 80032aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	2300      	movs	r3, #0
 80032b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032b8:	2307      	movs	r3, #7
 80032ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80032c0:	4619      	mov	r1, r3
 80032c2:	4809      	ldr	r0, [pc, #36]	@ (80032e8 <HAL_UART_MspInit+0xbc>)
 80032c4:	f000 fd46 	bl	8003d54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	2026      	movs	r0, #38	@ 0x26
 80032ce:	f000 fa92 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032d2:	2026      	movs	r0, #38	@ 0x26
 80032d4:	f000 faa9 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032d8:	bf00      	nop
 80032da:	3778      	adds	r7, #120	@ 0x78
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40021000 	.word	0x40021000
 80032e8:	48000400 	.word	0x48000400

080032ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032ec:	480d      	ldr	r0, [pc, #52]	@ (8003324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80032f0:	f7ff fedc 	bl	80030ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f4:	480c      	ldr	r0, [pc, #48]	@ (8003328 <LoopForever+0x6>)
  ldr r1, =_edata
 80032f6:	490d      	ldr	r1, [pc, #52]	@ (800332c <LoopForever+0xa>)
  ldr r2, =_sidata
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <LoopForever+0xe>)
  movs r3, #0
 80032fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032fc:	e002      	b.n	8003304 <LoopCopyDataInit>

080032fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003302:	3304      	adds	r3, #4

08003304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003308:	d3f9      	bcc.n	80032fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800330c:	4c0a      	ldr	r4, [pc, #40]	@ (8003338 <LoopForever+0x16>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003310:	e001      	b.n	8003316 <LoopFillZerobss>

08003312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003314:	3204      	adds	r2, #4

08003316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003318:	d3fb      	bcc.n	8003312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800331a:	f00c f8db 	bl	800f4d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800331e:	f7fd ffc5 	bl	80012ac <main>

08003322 <LoopForever>:

LoopForever:
    b LoopForever
 8003322:	e7fe      	b.n	8003322 <LoopForever>
  ldr   r0, =_estack
 8003324:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800332c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003330:	080106f4 	.word	0x080106f4
  ldr r2, =_sbss
 8003334:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003338:	20002068 	.word	0x20002068

0800333c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800333c:	e7fe      	b.n	800333c <ADC1_2_IRQHandler>
	...

08003340 <DAC_Register_Write>:

#include "i2c.h"

#include "audiodac.h"

void DAC_Register_Write(uint8_t register_addr, uint8_t data){
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af04      	add	r7, sp, #16
 8003346:	4603      	mov	r3, r0
 8003348:	460a      	mov	r2, r1
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	4613      	mov	r3, r2
 800334e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 8003350:	79bb      	ldrb	r3, [r7, #6]
 8003352:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	b29a      	uxth	r2, r3
 8003358:	230a      	movs	r3, #10
 800335a:	9302      	str	r3, [sp, #8]
 800335c:	2301      	movs	r3, #1
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	218e      	movs	r1, #142	@ 0x8e
 800336a:	4803      	ldr	r0, [pc, #12]	@ (8003378 <DAC_Register_Write+0x38>)
 800336c:	f000 ff42 	bl	80041f4 <HAL_I2C_Mem_Write>

	return;
 8003370:	bf00      	nop
}
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200001f0 	.word	0x200001f0

0800337c <DAC_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, DAC_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void DAC_Register_Init(){
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0

	DAC_Register_Write(DAC_REG_RESET , 0x80); // set system reset bit (device clears after reset)
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	2055      	movs	r0, #85	@ 0x55
 8003384:	f7ff ffdc 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_VOL_L , 0x27); // left channel volume -6dB
 8003388:	2127      	movs	r1, #39	@ 0x27
 800338a:	2040      	movs	r0, #64	@ 0x40
 800338c:	f7ff ffd8 	bl	8003340 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_VOL_R , 0x27); // right channel volume -6dB
 8003390:	2127      	movs	r1, #39	@ 0x27
 8003392:	2041      	movs	r0, #65	@ 0x41
 8003394:	f7ff ffd4 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ATTEN_L , 0x27); // left channel digital attenuator -24dB
 8003398:	2127      	movs	r1, #39	@ 0x27
 800339a:	2044      	movs	r0, #68	@ 0x44
 800339c:	f7ff ffd0 	bl	8003340 <DAC_Register_Write>
	DAC_Register_Write(DAC_REG_ATTEN_R , 0x27); // right channel digital attenuator -24dB
 80033a0:	2127      	movs	r1, #39	@ 0x27
 80033a2:	2045      	movs	r0, #69	@ 0x45
 80033a4:	f7ff ffcc 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DEMP_DGC , 0x00); // de-emphasis filter off, DAC format I2S, no digital gain, over sampling enabled
 80033a8:	2100      	movs	r1, #0
 80033aa:	2046      	movs	r0, #70	@ 0x46
 80033ac:	f7ff ffc8 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xE0); // power on bias circuitry and left/right DAC and filter
 80033b0:	21e0      	movs	r1, #224	@ 0xe0
 80033b2:	2049      	movs	r0, #73	@ 0x49
 80033b4:	f7ff ffc4 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_SAMPLE_RATE , 0x01); // zero cross detection enable
 80033b8:	2101      	movs	r1, #1
 80033ba:	2056      	movs	r0, #86	@ 0x56
 80033bc:	f7ff ffc0 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_HPA_DETECT , 0x03); // analog left/right mixer power on
 80033c0:	2103      	movs	r1, #3
 80033c2:	204b      	movs	r0, #75	@ 0x4b
 80033c4:	f7ff ffbc 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_MIX_SW , 0x11); // analog mixer close switch 2 and 5
 80033c8:	2111      	movs	r1, #17
 80033ca:	2058      	movs	r0, #88	@ 0x58
 80033cc:	f7ff ffb8 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_DAC_PWR , 0xEC); // enable headphone amplifier
 80033d0:	21ec      	movs	r1, #236	@ 0xec
 80033d2:	2049      	movs	r0, #73	@ 0x49
 80033d4:	f7ff ffb4 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_CONFIG , 0x01); // VCOM power up
 80033d8:	2101      	movs	r1, #1
 80033da:	204a      	movs	r0, #74	@ 0x4a
 80033dc:	f7ff ffb0 	bl	8003340 <DAC_Register_Write>

	DAC_Register_Write(DAC_REG_ANALOG_GAIN , 0x30); // power up analog front end
 80033e0:	2130      	movs	r1, #48	@ 0x30
 80033e2:	2059      	movs	r0, #89	@ 0x59
 80033e4:	f7ff ffac 	bl	8003340 <DAC_Register_Write>

	return;
 80033e8:	bf00      	nop
}
 80033ea:	bd80      	pop	{r7, pc}

080033ec <GPIO_Register_Write>:
#include "stdbool.h"

#include "i2c.h"
#include "gpioxpndr.h"

void GPIO_Register_Write(uint8_t register_addr, uint8_t data){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af04      	add	r7, sp, #16
 80033f2:	4603      	mov	r3, r0
 80033f4:	460a      	mov	r2, r1
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	4613      	mov	r3, r2
 80033fa:	71bb      	strb	r3, [r7, #6]

	uint8_t i2c_buf[2];

	i2c_buf[0] = data;
 80033fc:	79bb      	ldrb	r3, [r7, #6]
 80033fe:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Mem_Write(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	b29a      	uxth	r2, r3
 8003404:	230a      	movs	r3, #10
 8003406:	9302      	str	r3, [sp, #8]
 8003408:	2301      	movs	r3, #1
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2301      	movs	r3, #1
 8003414:	21ee      	movs	r1, #238	@ 0xee
 8003416:	4803      	ldr	r0, [pc, #12]	@ (8003424 <GPIO_Register_Write+0x38>)
 8003418:	f000 feec 	bl	80041f4 <HAL_I2C_Mem_Write>

	return;
 800341c:	bf00      	nop
}
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200001f0 	.word	0x200001f0

08003428 <GPIO_Register_Init>:
	HAL_I2C_Mem_Read(&hi2c3, GPIO_ADDR, register_addr, I2C_MEMADD_SIZE_8BIT, i2c_buf, 1, 10);

	return i2c_buf[0];
}

void GPIO_Register_Init(){
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0

	GPIO_Register_Write(GPIO_CFG_PORT0, 0x00); // configure all of port 0 as output
 800342c:	2100      	movs	r1, #0
 800342e:	2006      	movs	r0, #6
 8003430:	f7ff ffdc 	bl	80033ec <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_CFG_PORT1, 0x00); // configure all of port 1 as output
 8003434:	2100      	movs	r1, #0
 8003436:	2007      	movs	r0, #7
 8003438:	f7ff ffd8 	bl	80033ec <GPIO_Register_Write>

	GPIO_Register_Write(GPIO_OUT_PORT0, 0x00); // set initial state to all low
 800343c:	2100      	movs	r1, #0
 800343e:	2002      	movs	r0, #2
 8003440:	f7ff ffd4 	bl	80033ec <GPIO_Register_Write>
	GPIO_Register_Write(GPIO_OUT_PORT1, 0x00); // set initial state to all low
 8003444:	2100      	movs	r1, #0
 8003446:	2003      	movs	r0, #3
 8003448:	f7ff ffd0 	bl	80033ec <GPIO_Register_Write>

	return;
 800344c:	bf00      	nop
}
 800344e:	bd80      	pop	{r7, pc}

08003450 <GPIO_State_Change>:

uint16_t GPIO_State_Change(int reg_bank, uint16_t gpio_reg, int bit_position, bool state) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	460b      	mov	r3, r1
 800345e:	817b      	strh	r3, [r7, #10]
 8003460:	4613      	mov	r3, r2
 8003462:	727b      	strb	r3, [r7, #9]
    if (bit_position > 7) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b07      	cmp	r3, #7
 8003468:	dd02      	ble.n	8003470 <GPIO_State_Change+0x20>
        return 0xFFFF; // return an error code if bit position is out of range for an 8-bit section
 800346a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800346e:	e051      	b.n	8003514 <GPIO_State_Change+0xc4>
    }

    if (reg_bank == 0) {
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d121      	bne.n	80034ba <GPIO_State_Change+0x6a>
        // modify the lower byte (bits 0-7)
        if (state) {
 8003476:	7a7b      	ldrb	r3, [r7, #9]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <GPIO_State_Change+0x42>
            gpio_reg |= (1 << bit_position); // set the bit in the lower byte
 800347c:	2201      	movs	r2, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	b21a      	sxth	r2, r3
 8003486:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800348a:	4313      	orrs	r3, r2
 800348c:	b21b      	sxth	r3, r3
 800348e:	817b      	strh	r3, [r7, #10]
 8003490:	e00b      	b.n	80034aa <GPIO_State_Change+0x5a>
        } else {
            gpio_reg &= ~(1 << bit_position); // clear the bit in the lower byte
 8003492:	2201      	movs	r2, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	b21b      	sxth	r3, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	b21a      	sxth	r2, r3
 80034a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	817b      	strh	r3, [r7, #10]
        }

        // write the modified low byte to the corresponding GPIO register
        uint8_t gpio_reg_low = gpio_reg & 0xFF;
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	75bb      	strb	r3, [r7, #22]
        GPIO_Register_Write(GPIO_OUT_PORT0, gpio_reg_low);
 80034ae:	7dbb      	ldrb	r3, [r7, #22]
 80034b0:	4619      	mov	r1, r3
 80034b2:	2002      	movs	r0, #2
 80034b4:	f7ff ff9a 	bl	80033ec <GPIO_Register_Write>
 80034b8:	e02b      	b.n	8003512 <GPIO_State_Change+0xc2>

    } else if (reg_bank == 1) {
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d125      	bne.n	800350c <GPIO_State_Change+0xbc>
        // modify the higher byte (bits 8-15)
        if (state) {
 80034c0:	7a7b      	ldrb	r3, [r7, #9]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <GPIO_State_Change+0x8e>
            gpio_reg |= (1 << (bit_position + 8)); // set the bit in the higher byte
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3308      	adds	r3, #8
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	b21a      	sxth	r2, r3
 80034d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	b21b      	sxth	r3, r3
 80034da:	817b      	strh	r3, [r7, #10]
 80034dc:	e00c      	b.n	80034f8 <GPIO_State_Change+0xa8>
        } else {
            gpio_reg &= ~(1 << (bit_position + 8)); // clear the bit in the higher byte
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3308      	adds	r3, #8
 80034e2:	2201      	movs	r2, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	b21a      	sxth	r2, r3
 80034ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	817b      	strh	r3, [r7, #10]
        }

        // write the modified high byte to the corresponding GPIO register
        uint8_t gpio_reg_high = (gpio_reg >> 8) & 0xFF;
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	75fb      	strb	r3, [r7, #23]
        GPIO_Register_Write(GPIO_OUT_PORT1, gpio_reg_high);
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	4619      	mov	r1, r3
 8003504:	2003      	movs	r0, #3
 8003506:	f7ff ff71 	bl	80033ec <GPIO_Register_Write>
 800350a:	e002      	b.n	8003512 <GPIO_State_Change+0xc2>
    } else {
        return 0xFFFF; // return error code if reg_bank is out of range
 800350c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003510:	e000      	b.n	8003514 <GPIO_State_Change+0xc4>
    }

    return gpio_reg; // return the modified 16-bit register value
 8003512:	897b      	ldrh	r3, [r7, #10]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003526:	2003      	movs	r0, #3
 8003528:	f000 f95a 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800352c:	200f      	movs	r0, #15
 800352e:	f000 f80d 	bl	800354c <HAL_InitTick>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	71fb      	strb	r3, [r7, #7]
 800353c:	e001      	b.n	8003542 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800353e:	f7ff f883 	bl	8002648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003542:	79fb      	ldrb	r3, [r7, #7]

}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <HAL_InitTick+0x68>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003560:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_InitTick+0x6c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <HAL_InitTick+0x68>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800356c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f966 	bl	8003846 <HAL_SYSTICK_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d809      	bhi.n	800359a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003586:	2200      	movs	r2, #0
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	f000 f932 	bl	80037f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <HAL_InitTick+0x70>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e007      	b.n	80035aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e004      	b.n	80035aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e001      	b.n	80035aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000008 	.word	0x20000008
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_IncTick+0x1c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <HAL_IncTick+0x20>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	4a03      	ldr	r2, [pc, #12]	@ (80035dc <HAL_IncTick+0x1c>)
 80035d0:	6013      	str	r3, [r2, #0]
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	2000055c 	.word	0x2000055c
 80035e0:	20000008 	.word	0x20000008

080035e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return uwTick;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_GetTick+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000055c 	.word	0x2000055c

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff ffee 	bl	80035e4 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d004      	beq.n	8003620 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_Delay+0x40>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4413      	add	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003620:	bf00      	nop
 8003622:	f7ff ffdf 	bl	80035e4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d8f7      	bhi.n	8003622 <HAL_Delay+0x26>
  {
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000008 	.word	0x20000008

08003640 <__NVIC_SetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800366c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_GetPriorityGrouping>:
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_EnableIRQ>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	@ (80036dc <__NVIC_EnableIRQ+0x38>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <__NVIC_SetPriority>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	db0a      	blt.n	800370a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	490c      	ldr	r1, [pc, #48]	@ (800372c <__NVIC_SetPriority+0x4c>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	0112      	lsls	r2, r2, #4
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	440b      	add	r3, r1
 8003704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003708:	e00a      	b.n	8003720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4908      	ldr	r1, [pc, #32]	@ (8003730 <__NVIC_SetPriority+0x50>)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	3b04      	subs	r3, #4
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	440b      	add	r3, r1
 800371e:	761a      	strb	r2, [r3, #24]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000e100 	.word	0xe000e100
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <NVIC_EncodePriority>:
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f1c3 0307 	rsb	r3, r3, #7
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf28      	it	cs
 8003752:	2304      	movcs	r3, #4
 8003754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3304      	adds	r3, #4
 800375a:	2b06      	cmp	r3, #6
 800375c:	d902      	bls.n	8003764 <NVIC_EncodePriority+0x30>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b03      	subs	r3, #3
 8003762:	e000      	b.n	8003766 <NVIC_EncodePriority+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800377c:	f04f 31ff 	mov.w	r1, #4294967295
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43d9      	mvns	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	4313      	orrs	r3, r2
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	@ 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ac:	d301      	bcc.n	80037b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00f      	b.n	80037d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <SysTick_Config+0x40>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ba:	210f      	movs	r1, #15
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f7ff ff8e 	bl	80036e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <SysTick_Config+0x40>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <SysTick_Config+0x40>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff29 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4603      	mov	r3, r0
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff ff40 	bl	8003688 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff90 	bl	8003734 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff5f 	bl	80036e0 <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff33 	bl	80036a4 <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffa4 	bl	800379c <SysTick_Config>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e08d      	b.n	800398e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_DMA_Init+0x138>)
 800387a:	429a      	cmp	r2, r3
 800387c:	d80f      	bhi.n	800389e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	4b45      	ldr	r3, [pc, #276]	@ (800399c <HAL_DMA_Init+0x13c>)
 8003886:	4413      	add	r3, r2
 8003888:	4a45      	ldr	r2, [pc, #276]	@ (80039a0 <HAL_DMA_Init+0x140>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	009a      	lsls	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a42      	ldr	r2, [pc, #264]	@ (80039a4 <HAL_DMA_Init+0x144>)
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40
 800389c:	e00e      	b.n	80038bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b40      	ldr	r3, [pc, #256]	@ (80039a8 <HAL_DMA_Init+0x148>)
 80038a6:	4413      	add	r3, r2
 80038a8:	4a3d      	ldr	r2, [pc, #244]	@ (80039a0 <HAL_DMA_Init+0x140>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	009a      	lsls	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a3c      	ldr	r2, [pc, #240]	@ (80039ac <HAL_DMA_Init+0x14c>)
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9be 	bl	8003c90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391c:	d102      	bne.n	8003924 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003938:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_DMA_Init+0x104>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d80c      	bhi.n	8003964 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9de 	bl	8003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e008      	b.n	8003976 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40020407 	.word	0x40020407
 800399c:	bffdfff8 	.word	0xbffdfff8
 80039a0:	cccccccd 	.word	0xcccccccd
 80039a4:	40020000 	.word	0x40020000
 80039a8:	bffdfbf8 	.word	0xbffdfbf8
 80039ac:	40020400 	.word	0x40020400

080039b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d005      	beq.n	80039d4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2204      	movs	r2, #4
 80039cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	e037      	b.n	8003a44 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 020e 	bic.w	r2, r2, #14
 80039e2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039f2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a20:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a38:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a42:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d00d      	beq.n	8003a96 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e047      	b.n	8003b26 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 020e 	bic.w	r2, r2, #14
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f003 021f 	and.w	r2, r3, #31
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ae2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
    }
  }
  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2204      	movs	r2, #4
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d026      	beq.n	8003baa <HAL_DMA_IRQHandler+0x7a>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d021      	beq.n	8003baa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	2104      	movs	r1, #4
 8003b92:	fa01 f202 	lsl.w	r2, r1, r2
 8003b96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d071      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ba8:	e06c      	b.n	8003c84 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d029      	beq.n	8003c1c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 020a 	bic.w	r2, r2, #10
 8003be4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f003 021f 	and.w	r2, r3, #31
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003c00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d038      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c1a:	e033      	b.n	8003c84 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2208      	movs	r2, #8
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d02a      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d025      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020e 	bic.w	r2, r2, #14
 8003c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
}
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d802      	bhi.n	8003caa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e001      	b.n	8003cae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003caa:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	3b08      	subs	r3, #8
 8003cba:	4a12      	ldr	r2, [pc, #72]	@ (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40020407 	.word	0x40020407
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020820 	.word	0x40020820
 8003d04:	cccccccd 	.word	0xcccccccd
 8003d08:	40020880 	.word	0x40020880

08003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a08      	ldr	r2, [pc, #32]	@ (8003d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	1000823f 	.word	0x1000823f
 8003d50:	40020940 	.word	0x40020940

08003d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d62:	e15a      	b.n	800401a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 814c 	beq.w	8004014 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d005      	beq.n	8003d94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d130      	bne.n	8003df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dca:	2201      	movs	r2, #1
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0201 	and.w	r2, r3, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d017      	beq.n	8003e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d123      	bne.n	8003e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	08da      	lsrs	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	6939      	ldr	r1, [r7, #16]
 8003e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0203 	and.w	r2, r3, #3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a6 	beq.w	8004014 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8004038 <HAL_GPIO_Init+0x2e4>)
 8003eca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ecc:	4a5a      	ldr	r2, [pc, #360]	@ (8004038 <HAL_GPIO_Init+0x2e4>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ed4:	4b58      	ldr	r3, [pc, #352]	@ (8004038 <HAL_GPIO_Init+0x2e4>)
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ee0:	4a56      	ldr	r2, [pc, #344]	@ (800403c <HAL_GPIO_Init+0x2e8>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f0a:	d01f      	beq.n	8003f4c <HAL_GPIO_Init+0x1f8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004040 <HAL_GPIO_Init+0x2ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d019      	beq.n	8003f48 <HAL_GPIO_Init+0x1f4>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_GPIO_Init+0x2f0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_GPIO_Init+0x1f0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004048 <HAL_GPIO_Init+0x2f4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00d      	beq.n	8003f40 <HAL_GPIO_Init+0x1ec>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a49      	ldr	r2, [pc, #292]	@ (800404c <HAL_GPIO_Init+0x2f8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <HAL_GPIO_Init+0x1e8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a48      	ldr	r2, [pc, #288]	@ (8004050 <HAL_GPIO_Init+0x2fc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d101      	bne.n	8003f38 <HAL_GPIO_Init+0x1e4>
 8003f34:	2305      	movs	r3, #5
 8003f36:	e00a      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f38:	2306      	movs	r3, #6
 8003f3a:	e008      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	e006      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f40:	2303      	movs	r3, #3
 8003f42:	e004      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e002      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_GPIO_Init+0x1fa>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	f002 0203 	and.w	r2, r2, #3
 8003f54:	0092      	lsls	r2, r2, #2
 8003f56:	4093      	lsls	r3, r2
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f5e:	4937      	ldr	r1, [pc, #220]	@ (800403c <HAL_GPIO_Init+0x2e8>)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f6c:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f90:	4a30      	ldr	r2, [pc, #192]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f96:	4b2f      	ldr	r3, [pc, #188]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003fc0:	4b24      	ldr	r3, [pc, #144]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fea:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800400e:	4a11      	ldr	r2, [pc, #68]	@ (8004054 <HAL_GPIO_Init+0x300>)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3301      	adds	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	f47f ae9d 	bne.w	8003d64 <HAL_GPIO_Init+0x10>
  }
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40021000 	.word	0x40021000
 800403c:	40010000 	.word	0x40010000
 8004040:	48000400 	.word	0x48000400
 8004044:	48000800 	.word	0x48000800
 8004048:	48000c00 	.word	0x48000c00
 800404c:	48001000 	.word	0x48001000
 8004050:	48001400 	.word	0x48001400
 8004054:	40010400 	.word	0x40010400

08004058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
 8004064:	4613      	mov	r3, r2
 8004066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004068:	787b      	ldrb	r3, [r7, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004074:	e002      	b.n	800407c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	041a      	lsls	r2, r3, #16
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43d9      	mvns	r1, r3
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	400b      	ands	r3, r1
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e08d      	b.n	80041ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc ffb8 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800410c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800411c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	e006      	b.n	8004144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d108      	bne.n	800415e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	e007      	b.n	800416e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800417c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004180:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004190:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b20      	cmp	r3, #32
 8004218:	f040 80f9 	bne.w	800440e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_I2C_Mem_Write+0x34>
 8004222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ed      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Mem_Write+0x4e>
 800423e:	2302      	movs	r3, #2
 8004240:	e0e6      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800424a:	f7ff f9cb 	bl	80035e4 <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2319      	movs	r3, #25
 8004256:	2201      	movs	r2, #1
 8004258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f955 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0d1      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2221      	movs	r2, #33	@ 0x21
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2240      	movs	r2, #64	@ 0x40
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004294:	88f8      	ldrh	r0, [r7, #6]
 8004296:	893a      	ldrh	r2, [r7, #8]
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4603      	mov	r3, r0
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f8b9 	bl	800441c <I2C_RequestMemoryWrite>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0a9      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2bff      	cmp	r3, #255	@ 0xff
 80042c4:	d90e      	bls.n	80042e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	22ff      	movs	r2, #255	@ 0xff
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	8979      	ldrh	r1, [r7, #10]
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fad9 	bl	8004894 <I2C_TransferConfig>
 80042e2:	e00f      	b.n	8004304 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	8979      	ldrh	r1, [r7, #10]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fac8 	bl	8004894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f958 	bl	80045be <I2C_WaitOnTXISFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e07b      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d034      	beq.n	80043bc <HAL_I2C_Mem_Write+0x1c8>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d130      	bne.n	80043bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	@ 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f8d1 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e04d      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2bff      	cmp	r3, #255	@ 0xff
 800437c:	d90e      	bls.n	800439c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22ff      	movs	r2, #255	@ 0xff
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	b2da      	uxtb	r2, r3
 800438a:	8979      	ldrh	r1, [r7, #10]
 800438c:	2300      	movs	r3, #0
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa7d 	bl	8004894 <I2C_TransferConfig>
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	2300      	movs	r3, #0
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa6c 	bl	8004894 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d19e      	bne.n	8004304 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f93e 	bl	800464c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e01a      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2220      	movs	r2, #32
 80043e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_I2C_Mem_Write+0x224>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	fe00e800 	.word	0xfe00e800

0800441c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8979      	ldrh	r1, [r7, #10]
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <I2C_RequestMemoryWrite+0xa4>)
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fa25 	bl	8004894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8b5 	bl	80045be <I2C_WaitOnTXISFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02c      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	629a      	str	r2, [r3, #40]	@ 0x28
 800446e:	e015      	b.n	800449c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004470:	893b      	ldrh	r3, [r7, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	b29b      	uxth	r3, r3
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f89b 	bl	80045be <I2C_WaitOnTXISFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e012      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f830 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	80002000 	.word	0x80002000

080044c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d103      	bne.n	80044e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d007      	beq.n	8004500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	619a      	str	r2, [r3, #24]
  }
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e03b      	b.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8d6 	bl	80046d4 <I2C_IsErrorOccurred>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e041      	b.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d02d      	beq.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7ff f853 	bl	80035e4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x44>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d122      	bne.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4013      	ands	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	429a      	cmp	r2, r3
 800456c:	d113      	bne.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f043 0220 	orr.w	r2, r3, #32
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e00f      	b.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	bf0c      	ite	eq
 80045a6:	2301      	moveq	r3, #1
 80045a8:	2300      	movne	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d0b4      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045ca:	e033      	b.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f87f 	bl	80046d4 <I2C_IsErrorOccurred>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e031      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d025      	beq.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fe fffc 	bl	80035e4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11a      	bne.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d013      	beq.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d1c4      	bne.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004658:	e02f      	b.n	80046ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f838 	bl	80046d4 <I2C_IsErrorOccurred>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e02d      	b.n	80046ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fe ffb9 	bl	80035e4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b20      	cmp	r3, #32
 8004690:	d013      	beq.n	80046ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e007      	b.n	80046ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d1c8      	bne.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d068      	beq.n	80047d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2210      	movs	r2, #16
 8004706:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004708:	e049      	b.n	800479e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d045      	beq.n	800479e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe ff67 	bl	80035e4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_IsErrorOccurred+0x54>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d13a      	bne.n	800479e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004732:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474a:	d121      	bne.n	8004790 <I2C_IsErrorOccurred+0xbc>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004752:	d01d      	beq.n	8004790 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b20      	cmp	r3, #32
 8004758:	d01a      	beq.n	8004790 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004768:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800476a:	f7fe ff3b 	bl	80035e4 <HAL_GetTick>
 800476e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004770:	e00e      	b.n	8004790 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004772:	f7fe ff37 	bl	80035e4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b19      	cmp	r3, #25
 800477e:	d907      	bls.n	8004790 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f043 0320 	orr.w	r3, r3, #32
 8004786:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800478e:	e006      	b.n	800479e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d1e9      	bne.n	8004772 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d003      	beq.n	80047b4 <I2C_IsErrorOccurred+0xe0>
 80047ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0aa      	beq.n	800470a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f043 0304 	orr.w	r3, r3, #4
 80047ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01c      	beq.n	8004882 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff fe3b 	bl	80044c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <I2C_IsErrorOccurred+0x1bc>)
 800485a:	400b      	ands	r3, r1
 800485c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004886:	4618      	mov	r0, r3
 8004888:	3728      	adds	r7, #40	@ 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	fe00e800 	.word	0xfe00e800

08004894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	4613      	mov	r3, r2
 80048a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ac:	7a7b      	ldrb	r3, [r7, #9]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	4313      	orrs	r3, r2
 80048be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	0d5b      	lsrs	r3, r3, #21
 80048ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <I2C_TransferConfig+0x60>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	43db      	mvns	r3, r3
 80048d8:	ea02 0103 	and.w	r1, r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	03ff63ff 	.word	0x03ff63ff

080048f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b20      	cmp	r3, #32
 800490c:	d138      	bne.n	8004980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004918:	2302      	movs	r3, #2
 800491a:	e032      	b.n	8004982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	@ 0x24
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800494a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d139      	bne.n	8004a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e033      	b.n	8004a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2224      	movs	r2, #36	@ 0x24
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0d0      	b.n	8004bdc <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fb84 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a6a:	f023 030f 	bic.w	r3, r3, #15
 8004a6e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2202      	movs	r2, #2
 8004a76:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d061      	beq.n	8004b44 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a88:	2310      	movs	r3, #16
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e001      	b.n	8004a92 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d802      	bhi.n	8004aa0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004aa0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004aa4:	f002 fee6 	bl	8007874 <HAL_RCCEx_GetPeriphCLKFreq>
 8004aa8:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab2:	d125      	bne.n	8004b00 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d010      	beq.n	8004ade <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	3305      	adds	r3, #5
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e01f      	b.n	8004b1e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	461a      	mov	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	3305      	adds	r3, #5
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e00e      	b.n	8004b1e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	3305      	adds	r3, #5
 8004b1c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4a30      	ldr	r2, [pc, #192]	@ (8004be4 <HAL_I2S_Init+0x1bc>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e003      	b.n	8004b4c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b44:	2302      	movs	r3, #2
 8004b46:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d902      	bls.n	8004b58 <HAL_I2S_Init+0x130>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2bff      	cmp	r3, #255	@ 0xff
 8004b56:	d907      	bls.n	8004b68 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	f043 0210 	orr.w	r2, r3, #16
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e039      	b.n	8004bdc <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	ea42 0103 	orr.w	r1, r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b86:	f023 030f 	bic.w	r3, r3, #15
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6851      	ldr	r1, [r2, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6892      	ldr	r2, [r2, #8]
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68d2      	ldr	r2, [r2, #12]
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6992      	ldr	r2, [r2, #24]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004baa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b30      	cmp	r3, #48	@ 0x30
 8004bb2:	d003      	beq.n	8004bbc <HAL_I2S_Init+0x194>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2bb0      	cmp	r3, #176	@ 0xb0
 8004bba:	d107      	bne.n	8004bcc <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	cccccccd 	.word	0xcccccccd

08004be8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_I2S_Transmit+0x1c>
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0d8      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	e0d0      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_I2S_Transmit+0x40>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0c8      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2203      	movs	r2, #3
 8004c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pTxBuffPtr = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d002      	beq.n	8004c5c <HAL_I2S_Transmit+0x74>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d10a      	bne.n	8004c72 <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8004c70:	e005      	b.n	8004c7e <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	845a      	strh	r2, [r3, #34]	@ 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c94:	d007      	beq.n	8004ca6 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ca4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	2102      	movs	r1, #2
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f888 	bl	8004dc2 <I2S_WaitFlagStateUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d04e      	beq.n	8004d56 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	f043 0201 	orr.w	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    __HAL_UNLOCK(hi2s);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e070      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	845a      	strh	r2, [r3, #34]	@ 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2102      	movs	r1, #2
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f85d 	bl	8004dc2 <I2S_WaitFlagStateUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00f      	beq.n	8004d2e <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e045      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d10c      	bne.n	8004d56 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	f043 0204 	orr.w	r2, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	639a      	str	r2, [r3, #56]	@ 0x38
  while (hi2s->TxXferCount > 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1bb      	bne.n	8004cd8 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d74:	d118      	bne.n	8004da8 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f820 	bl	8004dc2 <I2S_WaitFlagStateUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	f043 0201 	orr.w	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      __HAL_UNLOCK(hi2s);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e008      	b.n	8004dba <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hi2s);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd2:	f7fe fc07 	bl	80035e4 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004dd8:	e018      	b.n	8004e0c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d014      	beq.n	8004e0c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004de2:	f7fe fbff 	bl	80035e4 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d902      	bls.n	8004df8 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e00f      	b.n	8004e2c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4013      	ands	r3, r2
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d1d7      	bne.n	8004dda <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e0c0      	b.n	8004fc8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f009 ffe2 	bl	800ee24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2203      	movs	r2, #3
 8004e64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f006 fae6 	bl	800b43e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e03e      	b.n	8004ef6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	3311      	adds	r3, #17
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	3313      	adds	r3, #19
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3320      	adds	r3, #32
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	3324      	adds	r3, #36	@ 0x24
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	791b      	ldrb	r3, [r3, #4]
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3bb      	bcc.n	8004e78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e044      	b.n	8004f90 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	440b      	add	r3, r1
 8004f14:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	791b      	ldrb	r3, [r3, #4]
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3b5      	bcc.n	8004f06 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fa6:	f006 fa65 	bl	800b474 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7a9b      	ldrb	r3, [r3, #10]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fc0e 	bl	80067e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_PCD_Start+0x16>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e012      	b.n	800500c <HAL_PCD_Start+0x3c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f006 fa0c 	bl	800b410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f007 ffe9 	bl	800cfd4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f007 ffee 	bl	800d002 <USB_ReadInterrupts>
 8005026:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fb06 	bl	8005644 <PCD_EP_ISR_Handler>

    return;
 8005038:	e110      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800504c:	b29a      	uxth	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005056:	b292      	uxth	r2, r2
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f009 ff72 	bl	800ef46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005062:	2100      	movs	r1, #0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8fc 	bl	8005262 <HAL_PCD_SetAddress>

    return;
 800506a:	e0f7      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005088:	b292      	uxth	r2, r2
 800508a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800508e:	e0e5      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ac:	b292      	uxth	r2, r2
 80050ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050b2:	e0d3      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d034      	beq.n	8005128 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0204 	bic.w	r2, r2, #4
 80050d0:	b292      	uxth	r2, r2
 80050d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0208 	bic.w	r2, r2, #8
 80050e8:	b292      	uxth	r2, r2
 80050ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005100:	2100      	movs	r1, #0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f00a f912 	bl	800f32c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f009 ff55 	bl	800efb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005120:	b292      	uxth	r2, r2
 8005122:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005126:	e099      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512e:	2b00      	cmp	r3, #0
 8005130:	d027      	beq.n	8005182 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800513a:	b29a      	uxth	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0208 	orr.w	r2, r2, #8
 8005144:	b292      	uxth	r2, r2
 8005146:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800515c:	b292      	uxth	r2, r2
 800515e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0204 	orr.w	r2, r2, #4
 8005174:	b292      	uxth	r2, r2
 8005176:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f009 ff02 	bl	800ef84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005180:	e06c      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d040      	beq.n	800520e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519e:	b292      	uxth	r2, r2
 80051a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d12b      	bne.n	8005206 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0204 	orr.w	r2, r2, #4
 80051c0:	b292      	uxth	r2, r2
 80051c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	b292      	uxth	r2, r2
 80051da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80051fc:	2101      	movs	r1, #1
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f00a f894 	bl	800f32c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005204:	e02a      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f009 febc 	bl	800ef84 <HAL_PCD_SuspendCallback>
    return;
 800520c:	e026      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00f      	beq.n	8005238 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005220:	b29a      	uxth	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800522a:	b292      	uxth	r2, r2
 800522c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f009 fe7a 	bl	800ef2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005236:	e011      	b.n	800525c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00c      	beq.n	800525c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005254:	b292      	uxth	r2, r2
 8005256:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800525a:	bf00      	nop
  }
}
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_PCD_SetAddress+0x1a>
 8005278:	2302      	movs	r3, #2
 800527a:	e012      	b.n	80052a2 <HAL_PCD_SetAddress+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f007 fe8a 	bl	800cfac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	461a      	mov	r2, r3
 80052b8:	4603      	mov	r3, r0
 80052ba:	70fb      	strb	r3, [r7, #3]
 80052bc:	460b      	mov	r3, r1
 80052be:	803b      	strh	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	da0e      	bge.n	80052ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 0207 	and.w	r2, r3, #7
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	3310      	adds	r3, #16
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4413      	add	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	705a      	strb	r2, [r3, #1]
 80052ec:	e00e      	b.n	800530c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	f003 0207 	and.w	r2, r3, #7
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005318:	883b      	ldrh	r3, [r7, #0]
 800531a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	78ba      	ldrb	r2, [r7, #2]
 8005326:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005328:	78bb      	ldrb	r3, [r7, #2]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d102      	bne.n	8005334 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_PCD_EP_Open+0x98>
 800533e:	2302      	movs	r3, #2
 8005340:	e00e      	b.n	8005360 <HAL_PCD_EP_Open+0xb6>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	f006 f8ad 	bl	800b4b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800535e:	7afb      	ldrb	r3, [r7, #11]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da0e      	bge.n	800539a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 0207 	and.w	r2, r3, #7
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	3310      	adds	r3, #16
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	705a      	strb	r2, [r3, #1]
 8005398:	e00e      	b.n	80053b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	f003 0207 	and.w	r2, r3, #7
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_PCD_EP_Close+0x6a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e00e      	b.n	80053f0 <HAL_PCD_EP_Close+0x88>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f006 fd4d 	bl	800be80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	460b      	mov	r3, r1
 8005406:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005408:	7afb      	ldrb	r3, [r7, #11]
 800540a:	f003 0207 	and.w	r2, r3, #7
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2200      	movs	r2, #0
 8005436:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005438:	7afb      	ldrb	r3, [r7, #11]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	b2da      	uxtb	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	4618      	mov	r0, r3
 800544c:	f006 ff05 	bl	800c25a <USB_EPStartXfer>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	f003 0207 	and.w	r2, r3, #7
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800547c:	681b      	ldr	r3, [r3, #0]
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	460b      	mov	r3, r1
 8005498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	f003 0207 	and.w	r2, r3, #7
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	3310      	adds	r3, #16
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2201      	movs	r2, #1
 80054d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f006 feb6 	bl	800c25a <USB_EPStartXfer>

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	7912      	ldrb	r2, [r2, #4]
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e03e      	b.n	8005594 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da0e      	bge.n	800553c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 0207 	and.w	r2, r3, #7
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	3310      	adds	r3, #16
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	705a      	strb	r2, [r3, #1]
 800553a:	e00c      	b.n	8005556 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_PCD_EP_SetStall+0x7e>
 8005572:	2302      	movs	r3, #2
 8005574:	e00e      	b.n	8005594 <HAL_PCD_EP_SetStall+0x9c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	4618      	mov	r0, r3
 8005586:	f007 fc17 	bl	800cdb8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	7912      	ldrb	r2, [r2, #4]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e040      	b.n	800563c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da0e      	bge.n	80055e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 0207 	and.w	r2, r3, #7
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	3310      	adds	r3, #16
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	705a      	strb	r2, [r3, #1]
 80055de:	e00e      	b.n	80055fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_PCD_EP_ClrStall+0x82>
 800561a:	2302      	movs	r3, #2
 800561c:	e00e      	b.n	800563c <HAL_PCD_EP_ClrStall+0xa0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	4618      	mov	r0, r3
 800562e:	f007 fc14 	bl	800ce5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b092      	sub	sp, #72	@ 0x48
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800564c:	e333      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005656:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005658:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005664:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 8108 	bne.w	800587e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800566e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	d14c      	bne.n	8005712 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	893b      	ldrh	r3, [r7, #8]
 8005690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3310      	adds	r3, #16
 80056a0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	441a      	add	r2, r3
 80056d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80056d8:	2100      	movs	r1, #0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f009 fc0b 	bl	800eef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 82e5 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
 80056ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 82e0 	bne.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	7b1b      	ldrb	r3, [r3, #12]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	731a      	strb	r2, [r3, #12]
 8005710:	e2d1      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005718:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005722:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005724:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005728:	2b00      	cmp	r3, #0
 800572a:	d032      	beq.n	8005792 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	4413      	add	r3, r2
 8005746:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005752:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800575e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005760:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005764:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005766:	b29b      	uxth	r3, r3
 8005768:	f007 fc9d 	bl	800d0a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29a      	uxth	r2, r3
 8005774:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005778:	4013      	ands	r3, r2
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	897a      	ldrh	r2, [r7, #10]
 8005782:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005786:	b292      	uxth	r2, r2
 8005788:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f009 fb86 	bl	800ee9c <HAL_PCD_SetupStageCallback>
 8005790:	e291      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005792:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005796:	2b00      	cmp	r3, #0
 8005798:	f280 828d 	bge.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80057a8:	4013      	ands	r3, r2
 80057aa:	81fb      	strh	r3, [r7, #14]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	89fa      	ldrh	r2, [r7, #14]
 80057b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057b6:	b292      	uxth	r2, r2
 80057b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d019      	beq.n	800581e <PCD_EP_ISR_Handler+0x1da>
 80057ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d015      	beq.n	800581e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057f8:	6959      	ldr	r1, [r3, #20]
 80057fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80057fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005800:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005802:	b29b      	uxth	r3, r3
 8005804:	f007 fc4f 	bl	800d0a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	441a      	add	r2, r3
 8005812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005814:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005816:	2100      	movs	r1, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f009 fb51 	bl	800eec0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005826:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582c:	2b00      	cmp	r3, #0
 800582e:	f040 8242 	bne.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
 8005832:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005834:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800583c:	f000 823b 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800584c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005850:	81bb      	strh	r3, [r7, #12]
 8005852:	89bb      	ldrh	r3, [r7, #12]
 8005854:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005858:	81bb      	strh	r3, [r7, #12]
 800585a:	89bb      	ldrh	r3, [r7, #12]
 800585c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005860:	81bb      	strh	r3, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	89bb      	ldrh	r3, [r7, #12]
 8005868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]
 800587c:	e21b      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005890:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005894:	2b00      	cmp	r3, #0
 8005896:	f280 80f1 	bge.w	8005a7c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80058b0:	4013      	ands	r3, r2
 80058b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80058c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058c8:	b292      	uxth	r2, r2
 80058ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058cc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4413      	add	r3, r2
 80058e0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80058e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e4:	7b1b      	ldrb	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d123      	bne.n	8005932 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	4413      	add	r3, r2
 8005904:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 808b 	beq.w	8005a32 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005922:	6959      	ldr	r1, [r3, #20]
 8005924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005926:	88da      	ldrh	r2, [r3, #6]
 8005928:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800592c:	f007 fbbb 	bl	800d0a6 <USB_ReadPMA>
 8005930:	e07f      	b.n	8005a32 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d109      	bne.n	800594e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800593a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800593c:	461a      	mov	r2, r3
 800593e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f9c6 	bl	8005cd2 <HAL_PCD_EP_DB_Receive>
 8005946:	4603      	mov	r3, r0
 8005948:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800594c:	e071      	b.n	8005a32 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005968:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005986:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d022      	beq.n	80059ee <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4413      	add	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80059d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d02c      	beq.n	8005a32 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059de:	6959      	ldr	r1, [r3, #20]
 80059e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e2:	891a      	ldrh	r2, [r3, #8]
 80059e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80059e8:	f007 fb5d 	bl	800d0a6 <USB_ReadPMA>
 80059ec:	e021      	b.n	8005a32 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005a16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a24:	6959      	ldr	r1, [r3, #20]
 8005a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a28:	895a      	ldrh	r2, [r3, #10]
 8005a2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a2e:	f007 fb3a 	bl	800d0a6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a3a:	441a      	add	r2, r3
 8005a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a48:	441a      	add	r2, r3
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <PCD_EP_ISR_Handler+0x41e>
 8005a56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d206      	bcs.n	8005a70 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f009 fa29 	bl	800eec0 <HAL_PCD_DataOutStageCallback>
 8005a6e:	e005      	b.n	8005a7c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a76:	4618      	mov	r0, r3
 8005a78:	f006 fbef 	bl	800c25a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8117 	beq.w	8005cb6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a88:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3310      	adds	r3, #16
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 80a1 	bne.w	8005c20 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8005ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae6:	7b1b      	ldrb	r3, [r3, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8092 	beq.w	8005c12 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d046      	beq.n	8005b86 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d126      	bne.n	8005b4e <PCD_EP_ISR_Handler+0x50a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00da      	lsls	r2, r3, #3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	e061      	b.n	8005c12 <PCD_EP_ISR_Handler+0x5ce>
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d15d      	bne.n	8005c12 <PCD_EP_ISR_Handler+0x5ce>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	00da      	lsls	r2, r3, #3
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2200      	movs	r2, #0
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e045      	b.n	8005c12 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d126      	bne.n	8005be2 <PCD_EP_ISR_Handler+0x59e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	4413      	add	r3, r2
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00da      	lsls	r2, r3, #3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e017      	b.n	8005c12 <PCD_EP_ISR_Handler+0x5ce>
 8005be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d113      	bne.n	8005c12 <PCD_EP_ISR_Handler+0x5ce>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf8:	4413      	add	r3, r2
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	00da      	lsls	r2, r3, #3
 8005c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2200      	movs	r2, #0
 8005c10:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f009 f96c 	bl	800eef6 <HAL_PCD_DataInStageCallback>
 8005c1e:	e04a      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13f      	bne.n	8005caa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c4e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d906      	bls.n	8005c68 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c64:	619a      	str	r2, [r3, #24]
 8005c66:	e002      	b.n	8005c6e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f009 f93a 	bl	800eef6 <HAL_PCD_DataInStageCallback>
 8005c82:	e018      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005c8a:	441a      	add	r2, r3
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c8e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005c96:	441a      	add	r2, r3
 8005c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f006 fad9 	bl	800c25a <USB_EPStartXfer>
 8005ca8:	e005      	b.n	8005cb6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005caa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005cac:	461a      	mov	r2, r3
 8005cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f917 	bl	8005ee4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f6ff acc3 	blt.w	800564e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3748      	adds	r7, #72	@ 0x48
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d07c      	beq.n	8005de4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	8b7b      	ldrh	r3, [r7, #26]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d306      	bcc.n	8005d28 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	8b7b      	ldrh	r3, [r7, #26]
 8005d20:	1ad2      	subs	r2, r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	619a      	str	r2, [r3, #24]
 8005d26:	e002      	b.n	8005d2e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d123      	bne.n	8005d7e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d50:	833b      	strh	r3, [r7, #24]
 8005d52:	8b3b      	ldrh	r3, [r7, #24]
 8005d54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d58:	833b      	strh	r3, [r7, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	8b3b      	ldrh	r3, [r7, #24]
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01f      	beq.n	8005dc8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da2:	82fb      	strh	r3, [r7, #22]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	8afb      	ldrh	r3, [r7, #22]
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005dc8:	8b7b      	ldrh	r3, [r7, #26]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8085 	beq.w	8005eda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6959      	ldr	r1, [r3, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	891a      	ldrh	r2, [r3, #8]
 8005ddc:	8b7b      	ldrh	r3, [r7, #26]
 8005dde:	f007 f962 	bl	800d0a6 <USB_ReadPMA>
 8005de2:	e07a      	b.n	8005eda <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	8b7b      	ldrh	r3, [r7, #26]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d306      	bcc.n	8005e22 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	8b7b      	ldrh	r3, [r7, #26]
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	619a      	str	r2, [r3, #24]
 8005e20:	e002      	b.n	8005e28 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2200      	movs	r2, #0
 8005e26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d123      	bne.n	8005e78 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4a:	83fb      	strh	r3, [r7, #30]
 8005e4c:	8bfb      	ldrh	r3, [r7, #30]
 8005e4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e52:	83fb      	strh	r3, [r7, #30]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8bfb      	ldrh	r3, [r7, #30]
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11f      	bne.n	8005ec2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9c:	83bb      	strh	r3, [r7, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	8bbb      	ldrh	r3, [r7, #28]
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ec2:	8b7b      	ldrh	r3, [r7, #26]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6959      	ldr	r1, [r3, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	895a      	ldrh	r2, [r3, #10]
 8005ed4:	8b7b      	ldrh	r3, [r7, #26]
 8005ed6:	f007 f8e6 	bl	800d0a6 <USB_ReadPMA>
    }
  }

  return count;
 8005eda:	8b7b      	ldrh	r3, [r7, #26]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b0a6      	sub	sp, #152	@ 0x98
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 81f7 	beq.w	80062ec <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4413      	add	r3, r2
 8005f18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d907      	bls.n	8005f42 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	619a      	str	r2, [r3, #24]
 8005f40:	e002      	b.n	8005f48 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 80e1 	bne.w	8006114 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d126      	bne.n	8005fa8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	4413      	add	r3, r2
 8005f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00da      	lsls	r2, r3, #3
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e01a      	b.n	8005fde <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d116      	bne.n	8005fde <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	4413      	add	r3, r2
 8005fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	00da      	lsls	r2, r3, #3
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	2200      	movs	r2, #0
 8005fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d126      	bne.n	800603a <HAL_PCD_EP_DB_Transmit+0x156>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	623b      	str	r3, [r7, #32]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	4413      	add	r3, r2
 8006002:	623b      	str	r3, [r7, #32]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00da      	lsls	r2, r3, #3
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	4413      	add	r3, r2
 800600e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800601e:	b29a      	uxth	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e017      	b.n	800606a <HAL_PCD_EP_DB_Transmit+0x186>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d113      	bne.n	800606a <HAL_PCD_EP_DB_Transmit+0x186>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	4413      	add	r3, r2
 8006052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	00da      	lsls	r2, r3, #3
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	4413      	add	r3, r2
 800605e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	2200      	movs	r2, #0
 8006068:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d123      	bne.n	80060ba <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608c:	837b      	strh	r3, [r7, #26]
 800608e:	8b7b      	ldrh	r3, [r7, #26]
 8006090:	f083 0320 	eor.w	r3, r3, #32
 8006094:	837b      	strh	r3, [r7, #26]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	8b7b      	ldrh	r3, [r7, #26]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f008 ff18 	bl	800eef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01f      	beq.n	8006110 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ea:	833b      	strh	r3, [r7, #24]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	8b3b      	ldrh	r3, [r7, #24]
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e31f      	b.n	8006754 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d021      	beq.n	8006162 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006138:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800615a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006168:	2b01      	cmp	r3, #1
 800616a:	f040 82ca 	bne.w	8006702 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006176:	441a      	add	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006184:	441a      	add	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d309      	bcc.n	80061aa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	621a      	str	r2, [r3, #32]
 80061a8:	e015      	b.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80061b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80061c0:	e009      	b.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d15f      	bne.n	800629e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f2:	4413      	add	r3, r2
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00da      	lsls	r2, r3, #3
 80061fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061fe:	4413      	add	r3, r2
 8006200:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006210:	b29a      	uxth	r2, r3
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <HAL_PCD_EP_DB_Transmit+0x34e>
 800621c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e051      	b.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006234:	2b3e      	cmp	r3, #62	@ 0x3e
 8006236:	d816      	bhi.n	8006266 <HAL_PCD_EP_DB_Transmit+0x382>
 8006238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	653b      	str	r3, [r7, #80]	@ 0x50
 800623e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_PCD_EP_DB_Transmit+0x36a>
 8006248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800624a:	3301      	adds	r3, #1
 800624c:	653b      	str	r3, [r7, #80]	@ 0x50
 800624e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29a      	uxth	r2, r3
 8006254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	b29b      	uxth	r3, r3
 800625c:	4313      	orrs	r3, r2
 800625e:	b29a      	uxth	r2, r3
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e037      	b.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006266:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	653b      	str	r3, [r7, #80]	@ 0x50
 800626c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <HAL_PCD_EP_DB_Transmit+0x398>
 8006276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006278:	3b01      	subs	r3, #1
 800627a:	653b      	str	r3, [r7, #80]	@ 0x50
 800627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	b29b      	uxth	r3, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006296:	b29a      	uxth	r2, r3
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e01b      	b.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d117      	bne.n	80062d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ba:	4413      	add	r3, r2
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	00da      	lsls	r2, r3, #3
 80062c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6959      	ldr	r1, [r3, #20]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	891a      	ldrh	r2, [r3, #8]
 80062e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f006 fe9c 	bl	800d022 <USB_WritePMA>
 80062ea:	e20a      	b.n	8006702 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	4413      	add	r3, r2
 8006306:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006310:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800631c:	429a      	cmp	r2, r3
 800631e:	d307      	bcc.n	8006330 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	699a      	ldr	r2, [r3, #24]
 8006324:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	619a      	str	r2, [r3, #24]
 800632e:	e002      	b.n	8006336 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f040 80f6 	bne.w	800652c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d126      	bne.n	8006396 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	677b      	str	r3, [r7, #116]	@ 0x74
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800635c:	4413      	add	r3, r2
 800635e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	00da      	lsls	r2, r3, #3
 8006366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006368:	4413      	add	r3, r2
 800636a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800636e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637a:	b29a      	uxth	r2, r3
 800637c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29a      	uxth	r2, r3
 8006390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e01a      	b.n	80063cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d116      	bne.n	80063cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063b2:	4413      	add	r3, r2
 80063b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	00da      	lsls	r2, r3, #3
 80063bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063be:	4413      	add	r3, r2
 80063c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c8:	2200      	movs	r2, #0
 80063ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d12f      	bne.n	800643c <HAL_PCD_EP_DB_Transmit+0x558>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f4:	4413      	add	r3, r2
 80063f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006404:	4413      	add	r3, r2
 8006406:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800640a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800640e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e01c      	b.n	8006476 <HAL_PCD_EP_DB_Transmit+0x592>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d118      	bne.n	8006476 <HAL_PCD_EP_DB_Transmit+0x592>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006454:	4413      	add	r3, r2
 8006456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	00da      	lsls	r2, r3, #3
 8006460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006464:	4413      	add	r3, r2
 8006466:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800646a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	78db      	ldrb	r3, [r3, #3]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d127      	bne.n	80064ce <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006498:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800649c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80064a0:	f083 0320 	eor.w	r3, r3, #32
 80064a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f008 fd0e 	bl	800eef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d121      	bne.n	8006528 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	441a      	add	r2, r3
 8006510:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	e113      	b.n	8006754 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d121      	bne.n	800657a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006550:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006580:	2b01      	cmp	r3, #1
 8006582:	f040 80be 	bne.w	8006702 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800658e:	441a      	add	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800659c:	441a      	add	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d309      	bcc.n	80065c2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	621a      	str	r2, [r3, #32]
 80065c0:	e015      	b.n	80065ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80065ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80065ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065d8:	e009      	b.n	80065ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d15f      	bne.n	80066bc <HAL_PCD_EP_DB_Transmit+0x7d8>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006610:	4413      	add	r3, r2
 8006612:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800661c:	4413      	add	r3, r2
 800661e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006622:	667b      	str	r3, [r7, #100]	@ 0x64
 8006624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662e:	b29a      	uxth	r2, r3
 8006630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <HAL_PCD_EP_DB_Transmit+0x76c>
 800663a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006648:	b29a      	uxth	r2, r3
 800664a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	e04e      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x80a>
 8006650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006652:	2b3e      	cmp	r3, #62	@ 0x3e
 8006654:	d816      	bhi.n	8006684 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	663b      	str	r3, [r7, #96]	@ 0x60
 800665c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_PCD_EP_DB_Transmit+0x788>
 8006666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006668:	3301      	adds	r3, #1
 800666a:	663b      	str	r3, [r7, #96]	@ 0x60
 800666c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29a      	uxth	r2, r3
 8006672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29b      	uxth	r3, r3
 800667a:	4313      	orrs	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	e034      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x80a>
 8006684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	663b      	str	r3, [r7, #96]	@ 0x60
 800668a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006696:	3b01      	subs	r3, #1
 8006698:	663b      	str	r3, [r7, #96]	@ 0x60
 800669a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	4313      	orrs	r3, r2
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e018      	b.n	80066ee <HAL_PCD_EP_DB_Transmit+0x80a>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d114      	bne.n	80066ee <HAL_PCD_EP_DB_Transmit+0x80a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d2:	4413      	add	r3, r2
 80066d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	00da      	lsls	r2, r3, #3
 80066dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066de:	4413      	add	r3, r2
 80066e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6959      	ldr	r1, [r3, #20]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	895a      	ldrh	r2, [r3, #10]
 80066fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f006 fc90 	bl	800d022 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800671c:	82fb      	strh	r3, [r7, #22]
 800671e:	8afb      	ldrh	r3, [r7, #22]
 8006720:	f083 0310 	eor.w	r3, r3, #16
 8006724:	82fb      	strh	r3, [r7, #22]
 8006726:	8afb      	ldrh	r3, [r7, #22]
 8006728:	f083 0320 	eor.w	r3, r3, #32
 800672c:	82fb      	strh	r3, [r7, #22]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8afb      	ldrh	r3, [r7, #22]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3798      	adds	r7, #152	@ 0x98
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	4613      	mov	r3, r2
 800676c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800677a:	897b      	ldrh	r3, [r7, #10]
 800677c:	f003 0207 	and.w	r2, r3, #7
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	3310      	adds	r3, #16
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e009      	b.n	80067a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006792:	897a      	ldrh	r2, [r7, #10]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80067a6:	893b      	ldrh	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2200      	movs	r2, #0
 80067b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	80da      	strh	r2, [r3, #6]
 80067ba:	e00b      	b.n	80067d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2201      	movs	r2, #1
 80067c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006806:	b29b      	uxth	r3, r3
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800681a:	b29b      	uxth	r3, r3
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d141      	bne.n	80068ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006846:	4b4b      	ldr	r3, [pc, #300]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006852:	d131      	bne.n	80068b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006854:	4b47      	ldr	r3, [pc, #284]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685a:	4a46      	ldr	r2, [pc, #280]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006864:	4b43      	ldr	r3, [pc, #268]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800686c:	4a41      	ldr	r2, [pc, #260]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006872:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006874:	4b40      	ldr	r3, [pc, #256]	@ (8006978 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2232      	movs	r2, #50	@ 0x32
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	4a3f      	ldr	r2, [pc, #252]	@ (800697c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	0c9b      	lsrs	r3, r3, #18
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800688a:	e002      	b.n	8006892 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006892:	4b38      	ldr	r3, [pc, #224]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800689a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689e:	d102      	bne.n	80068a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f2      	bne.n	800688c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068a6:	4b33      	ldr	r3, [pc, #204]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b2:	d158      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e057      	b.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068be:	4a2d      	ldr	r2, [pc, #180]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80068c8:	e04d      	b.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d0:	d141      	bne.n	8006956 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068d2:	4b28      	ldr	r3, [pc, #160]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068de:	d131      	bne.n	8006944 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068e0:	4b24      	ldr	r3, [pc, #144]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e6:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068f0:	4b20      	ldr	r3, [pc, #128]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006900:	4b1d      	ldr	r3, [pc, #116]	@ (8006978 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2232      	movs	r2, #50	@ 0x32
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	4a1c      	ldr	r2, [pc, #112]	@ (800697c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	0c9b      	lsrs	r3, r3, #18
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006916:	e002      	b.n	800691e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3b01      	subs	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800691e:	4b15      	ldr	r3, [pc, #84]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692a:	d102      	bne.n	8006932 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f2      	bne.n	8006918 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006932:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693e:	d112      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e011      	b.n	8006968 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006944:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694a:	4a0a      	ldr	r2, [pc, #40]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006950:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006954:	e007      	b.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006956:	4b07      	ldr	r3, [pc, #28]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800695e:	4a05      	ldr	r2, [pc, #20]	@ (8006974 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006964:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40007000 	.word	0x40007000
 8006978:	20000000 	.word	0x20000000
 800697c:	431bde83 	.word	0x431bde83

08006980 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4a04      	ldr	r2, [pc, #16]	@ (800699c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800698a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800698e:	6093      	str	r3, [r2, #8]
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40007000 	.word	0x40007000

080069a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e2fe      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d075      	beq.n	8006aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069be:	4b97      	ldr	r3, [pc, #604]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
 80069c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069c8:	4b94      	ldr	r3, [pc, #592]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d102      	bne.n	80069de <HAL_RCC_OscConfig+0x3e>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_OscConfig+0x44>
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10b      	bne.n	80069fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	4b8d      	ldr	r3, [pc, #564]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05b      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x108>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d157      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e2d9      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a04:	d106      	bne.n	8006a14 <HAL_RCC_OscConfig+0x74>
 8006a06:	4b85      	ldr	r3, [pc, #532]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a84      	ldr	r2, [pc, #528]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	e01d      	b.n	8006a50 <HAL_RCC_OscConfig+0xb0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x98>
 8006a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7e      	ldr	r2, [pc, #504]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e00b      	b.n	8006a50 <HAL_RCC_OscConfig+0xb0>
 8006a38:	4b78      	ldr	r3, [pc, #480]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a77      	ldr	r2, [pc, #476]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b75      	ldr	r3, [pc, #468]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a74      	ldr	r2, [pc, #464]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d013      	beq.n	8006a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fc fdc4 	bl	80035e4 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a60:	f7fc fdc0 	bl	80035e4 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b64      	cmp	r3, #100	@ 0x64
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e29e      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a72:	4b6a      	ldr	r3, [pc, #424]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f0      	beq.n	8006a60 <HAL_RCC_OscConfig+0xc0>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc fdb0 	bl	80035e4 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a88:	f7fc fdac 	bl	80035e4 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	@ 0x64
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e28a      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a9a:	4b60      	ldr	r3, [pc, #384]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0xe8>
 8006aa6:	e000      	b.n	8006aaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d075      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ab6:	4b59      	ldr	r3, [pc, #356]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 030c 	and.w	r3, r3, #12
 8006abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ac0:	4b56      	ldr	r3, [pc, #344]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b0c      	cmp	r3, #12
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x136>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d002      	beq.n	8006adc <HAL_RCC_OscConfig+0x13c>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d11f      	bne.n	8006b1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006adc:	4b4f      	ldr	r3, [pc, #316]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_OscConfig+0x154>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e25d      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af4:	4b49      	ldr	r3, [pc, #292]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	061b      	lsls	r3, r3, #24
 8006b02:	4946      	ldr	r1, [pc, #280]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b08:	4b45      	ldr	r3, [pc, #276]	@ (8006c20 <HAL_RCC_OscConfig+0x280>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fc fd1d 	bl	800354c <HAL_InitTick>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d043      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e249      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d023      	beq.n	8006b6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b24:	4b3d      	ldr	r3, [pc, #244]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3c      	ldr	r2, [pc, #240]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fc fd58 	bl	80035e4 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b38:	f7fc fd54 	bl	80035e4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e232      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b4a:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b56:	4b31      	ldr	r3, [pc, #196]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	492d      	ldr	r1, [pc, #180]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	604b      	str	r3, [r1, #4]
 8006b6a:	e01a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fc fd34 	bl	80035e4 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b80:	f7fc fd30 	bl	80035e4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e20e      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b92:	4b22      	ldr	r3, [pc, #136]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x1e0>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d041      	beq.n	8006c32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01c      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bb6:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bbc:	4a17      	ldr	r2, [pc, #92]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc6:	f7fc fd0d 	bl	80035e4 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bce:	f7fc fd09 	bl	80035e4 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e1e7      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006be0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0ef      	beq.n	8006bce <HAL_RCC_OscConfig+0x22e>
 8006bee:	e020      	b.n	8006c32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf6:	4a09      	ldr	r2, [pc, #36]	@ (8006c1c <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fc fcf0 	bl	80035e4 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c06:	e00d      	b.n	8006c24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fc fcec 	bl	80035e4 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d906      	bls.n	8006c24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e1ca      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c24:	4b8c      	ldr	r3, [pc, #560]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ea      	bne.n	8006c08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80a6 	beq.w	8006d8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c40:	2300      	movs	r3, #0
 8006c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c44:	4b84      	ldr	r3, [pc, #528]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_OscConfig+0x2b4>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x2b6>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00d      	beq.n	8006c76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c66:	4b7c      	ldr	r3, [pc, #496]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c72:	2301      	movs	r3, #1
 8006c74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c76:	4b79      	ldr	r3, [pc, #484]	@ (8006e5c <HAL_RCC_OscConfig+0x4bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d118      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c82:	4b76      	ldr	r3, [pc, #472]	@ (8006e5c <HAL_RCC_OscConfig+0x4bc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a75      	ldr	r2, [pc, #468]	@ (8006e5c <HAL_RCC_OscConfig+0x4bc>)
 8006c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c8e:	f7fc fca9 	bl	80035e4 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c96:	f7fc fca5 	bl	80035e4 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e183      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8006e5c <HAL_RCC_OscConfig+0x4bc>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d108      	bne.n	8006cce <HAL_RCC_OscConfig+0x32e>
 8006cbc:	4b66      	ldr	r3, [pc, #408]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc2:	4a65      	ldr	r2, [pc, #404]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ccc:	e024      	b.n	8006d18 <HAL_RCC_OscConfig+0x378>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d110      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x358>
 8006cd6:	4b60      	ldr	r3, [pc, #384]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cde:	f043 0304 	orr.w	r3, r3, #4
 8006ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cec:	4a5a      	ldr	r2, [pc, #360]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cf6:	e00f      	b.n	8006d18 <HAL_RCC_OscConfig+0x378>
 8006cf8:	4b57      	ldr	r3, [pc, #348]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfe:	4a56      	ldr	r2, [pc, #344]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d08:	4b53      	ldr	r3, [pc, #332]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0e:	4a52      	ldr	r2, [pc, #328]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d016      	beq.n	8006d4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fc fc60 	bl	80035e4 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d26:	e00a      	b.n	8006d3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d28:	f7fc fc5c 	bl	80035e4 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e138      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3e:	4b46      	ldr	r3, [pc, #280]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ed      	beq.n	8006d28 <HAL_RCC_OscConfig+0x388>
 8006d4c:	e015      	b.n	8006d7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7fc fc49 	bl	80035e4 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fc fc45 	bl	80035e4 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e121      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ed      	bne.n	8006d56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d7a:	7ffb      	ldrb	r3, [r7, #31]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d80:	4b35      	ldr	r3, [pc, #212]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d84:	4a34      	ldr	r2, [pc, #208]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d03c      	beq.n	8006e12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01c      	beq.n	8006dda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006da0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006da6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fc fc18 	bl	80035e4 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006db8:	f7fc fc14 	bl	80035e4 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0f2      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dca:	4b23      	ldr	r3, [pc, #140]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0ef      	beq.n	8006db8 <HAL_RCC_OscConfig+0x418>
 8006dd8:	e01b      	b.n	8006e12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dda:	4b1f      	ldr	r3, [pc, #124]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dea:	f7fc fbfb 	bl	80035e4 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df2:	f7fc fbf7 	bl	80035e4 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e0d5      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e04:	4b14      	ldr	r3, [pc, #80]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ef      	bne.n	8006df2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80c9 	beq.w	8006fae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 030c 	and.w	r3, r3, #12
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	f000 8083 	beq.w	8006f30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d15e      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e32:	4b09      	ldr	r3, [pc, #36]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a08      	ldr	r2, [pc, #32]	@ (8006e58 <HAL_RCC_OscConfig+0x4b8>)
 8006e38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3e:	f7fc fbd1 	bl	80035e4 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e44:	e00c      	b.n	8006e60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e46:	f7fc fbcd 	bl	80035e4 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d905      	bls.n	8006e60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0ab      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e60:	4b55      	ldr	r3, [pc, #340]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1ec      	bne.n	8006e46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e6c:	4b52      	ldr	r3, [pc, #328]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	4b52      	ldr	r3, [pc, #328]	@ (8006fbc <HAL_RCC_OscConfig+0x61c>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6a11      	ldr	r1, [r2, #32]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	0112      	lsls	r2, r2, #4
 8006e80:	4311      	orrs	r1, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006e86:	0212      	lsls	r2, r2, #8
 8006e88:	4311      	orrs	r1, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e8e:	0852      	lsrs	r2, r2, #1
 8006e90:	3a01      	subs	r2, #1
 8006e92:	0552      	lsls	r2, r2, #21
 8006e94:	4311      	orrs	r1, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e9a:	0852      	lsrs	r2, r2, #1
 8006e9c:	3a01      	subs	r2, #1
 8006e9e:	0652      	lsls	r2, r2, #25
 8006ea0:	4311      	orrs	r1, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ea6:	06d2      	lsls	r2, r2, #27
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	4943      	ldr	r1, [pc, #268]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb0:	4b41      	ldr	r3, [pc, #260]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a40      	ldr	r2, [pc, #256]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ec6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fc fb8c 	bl	80035e4 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fc fb88 	bl	80035e4 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e066      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ee2:	4b35      	ldr	r3, [pc, #212]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x530>
 8006eee:	e05e      	b.n	8006fae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef0:	4b31      	ldr	r3, [pc, #196]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a30      	ldr	r2, [pc, #192]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fc fb72 	bl	80035e4 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fc fb6e 	bl	80035e4 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e04c      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f16:	4b28      	ldr	r3, [pc, #160]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f22:	4b25      	ldr	r3, [pc, #148]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	4924      	ldr	r1, [pc, #144]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006f28:	4b25      	ldr	r3, [pc, #148]	@ (8006fc0 <HAL_RCC_OscConfig+0x620>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	60cb      	str	r3, [r1, #12]
 8006f2e:	e03e      	b.n	8006fae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e039      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb8 <HAL_RCC_OscConfig+0x618>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f003 0203 	and.w	r2, r3, #3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d12c      	bne.n	8006faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d123      	bne.n	8006faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d11b      	bne.n	8006faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d113      	bne.n	8006faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d109      	bne.n	8006faa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d001      	beq.n	8006fae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	019f800c 	.word	0x019f800c
 8006fc0:	feeefffc 	.word	0xfeeefffc

08006fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e11e      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fdc:	4b91      	ldr	r3, [pc, #580]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d910      	bls.n	800700c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	4b8e      	ldr	r3, [pc, #568]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f023 020f 	bic.w	r2, r3, #15
 8006ff2:	498c      	ldr	r1, [pc, #560]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d001      	beq.n	800700c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e106      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d073      	beq.n	8007100 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d129      	bne.n	8007074 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007020:	4b81      	ldr	r3, [pc, #516]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0f4      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007030:	f000 f99e 	bl	8007370 <RCC_GetSysClockFreqFromPLLSource>
 8007034:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4a7c      	ldr	r2, [pc, #496]	@ (800722c <HAL_RCC_ClockConfig+0x268>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d93f      	bls.n	80070be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800703e:	4b7a      	ldr	r3, [pc, #488]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007052:	2b00      	cmp	r3, #0
 8007054:	d033      	beq.n	80070be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800705a:	2b00      	cmp	r3, #0
 800705c:	d12f      	bne.n	80070be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800705e:	4b72      	ldr	r3, [pc, #456]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007066:	4a70      	ldr	r2, [pc, #448]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800706e:	2380      	movs	r3, #128	@ 0x80
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	e024      	b.n	80070be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d107      	bne.n	800708c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707c:	4b6a      	ldr	r3, [pc, #424]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e0c6      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800708c:	4b66      	ldr	r3, [pc, #408]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e0be      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800709c:	f000 f8ce 	bl	800723c <HAL_RCC_GetSysClockFreq>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4a61      	ldr	r2, [pc, #388]	@ (800722c <HAL_RCC_ClockConfig+0x268>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d909      	bls.n	80070be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070b2:	4a5d      	ldr	r2, [pc, #372]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80070b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070ba:	2380      	movs	r3, #128	@ 0x80
 80070bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070be:	4b5a      	ldr	r3, [pc, #360]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f023 0203 	bic.w	r2, r3, #3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4957      	ldr	r1, [pc, #348]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d0:	f7fc fa88 	bl	80035e4 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d6:	e00a      	b.n	80070ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d8:	f7fc fa84 	bl	80035e4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e095      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 020c 	and.w	r2, r3, #12
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d1eb      	bne.n	80070d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d023      	beq.n	8007154 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007118:	4b43      	ldr	r3, [pc, #268]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4a42      	ldr	r2, [pc, #264]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800711e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007122:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007130:	4b3d      	ldr	r3, [pc, #244]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007138:	4a3b      	ldr	r2, [pc, #236]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800713a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800713e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007140:	4b39      	ldr	r3, [pc, #228]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4936      	ldr	r1, [pc, #216]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800714e:	4313      	orrs	r3, r2
 8007150:	608b      	str	r3, [r1, #8]
 8007152:	e008      	b.n	8007166 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b80      	cmp	r3, #128	@ 0x80
 8007158:	d105      	bne.n	8007166 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800715a:	4b33      	ldr	r3, [pc, #204]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4a32      	ldr	r2, [pc, #200]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 8007160:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007164:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007166:	4b2f      	ldr	r3, [pc, #188]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d21d      	bcs.n	80071b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007174:	4b2b      	ldr	r3, [pc, #172]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 020f 	bic.w	r2, r3, #15
 800717c:	4929      	ldr	r1, [pc, #164]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007184:	f7fc fa2e 	bl	80035e4 <HAL_GetTick>
 8007188:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718c:	f7fc fa2a 	bl	80035e4 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e03b      	b.n	800721a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b20      	ldr	r3, [pc, #128]	@ (8007224 <HAL_RCC_ClockConfig+0x260>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1ed      	bne.n	800718c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4917      	ldr	r1, [pc, #92]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071da:	4b13      	ldr	r3, [pc, #76]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	490f      	ldr	r1, [pc, #60]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071ee:	f000 f825 	bl	800723c <HAL_RCC_GetSysClockFreq>
 80071f2:	4602      	mov	r2, r0
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_RCC_ClockConfig+0x264>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	091b      	lsrs	r3, r3, #4
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	490c      	ldr	r1, [pc, #48]	@ (8007230 <HAL_RCC_ClockConfig+0x26c>)
 8007200:	5ccb      	ldrb	r3, [r1, r3]
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	fa22 f303 	lsr.w	r3, r2, r3
 800720a:	4a0a      	ldr	r2, [pc, #40]	@ (8007234 <HAL_RCC_ClockConfig+0x270>)
 800720c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800720e:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <HAL_RCC_ClockConfig+0x274>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f7fc f99a 	bl	800354c <HAL_InitTick>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40022000 	.word	0x40022000
 8007228:	40021000 	.word	0x40021000
 800722c:	04c4b400 	.word	0x04c4b400
 8007230:	0800fe80 	.word	0x0800fe80
 8007234:	20000000 	.word	0x20000000
 8007238:	20000004 	.word	0x20000004

0800723c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007242:	4b2c      	ldr	r3, [pc, #176]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b04      	cmp	r3, #4
 800724c:	d102      	bne.n	8007254 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	e047      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007254:	4b27      	ldr	r3, [pc, #156]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 030c 	and.w	r3, r3, #12
 800725c:	2b08      	cmp	r3, #8
 800725e:	d102      	bne.n	8007266 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007260:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007262:	613b      	str	r3, [r7, #16]
 8007264:	e03e      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
 800726e:	2b0c      	cmp	r3, #12
 8007270:	d136      	bne.n	80072e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007272:	4b20      	ldr	r3, [pc, #128]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800727c:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	3301      	adds	r3, #1
 8007288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d10c      	bne.n	80072aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007290:	4a1a      	ldr	r2, [pc, #104]	@ (80072fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	4a16      	ldr	r2, [pc, #88]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800729a:	68d2      	ldr	r2, [r2, #12]
 800729c:	0a12      	lsrs	r2, r2, #8
 800729e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	617b      	str	r3, [r7, #20]
      break;
 80072a8:	e00c      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072aa:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b2:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b4:	68d2      	ldr	r2, [r2, #12]
 80072b6:	0a12      	lsrs	r2, r2, #8
 80072b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]
      break;
 80072c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072c4:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	0e5b      	lsrs	r3, r3, #25
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	3301      	adds	r3, #1
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	e001      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80072e4:	693b      	ldr	r3, [r7, #16]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000
 80072f8:	00f42400 	.word	0x00f42400
 80072fc:	016e3600 	.word	0x016e3600

08007300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007304:	4b03      	ldr	r3, [pc, #12]	@ (8007314 <HAL_RCC_GetHCLKFreq+0x14>)
 8007306:	681b      	ldr	r3, [r3, #0]
}
 8007308:	4618      	mov	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20000000 	.word	0x20000000

08007318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800731c:	f7ff fff0 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b06      	ldr	r3, [pc, #24]	@ (800733c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4904      	ldr	r1, [pc, #16]	@ (8007340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000
 8007340:	0800fe90 	.word	0x0800fe90

08007344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007348:	f7ff ffda 	bl	8007300 <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0adb      	lsrs	r3, r3, #11
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4904      	ldr	r1, [pc, #16]	@ (800736c <HAL_RCC_GetPCLK2Freq+0x28>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40021000 	.word	0x40021000
 800736c:	0800fe90 	.word	0x0800fe90

08007370 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007376:	4b1e      	ldr	r3, [pc, #120]	@ (80073f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007380:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b03      	cmp	r3, #3
 8007392:	d10c      	bne.n	80073ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007394:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	4a14      	ldr	r2, [pc, #80]	@ (80073f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800739e:	68d2      	ldr	r2, [r2, #12]
 80073a0:	0a12      	lsrs	r2, r2, #8
 80073a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	617b      	str	r3, [r7, #20]
    break;
 80073ac:	e00c      	b.n	80073c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073ae:	4a12      	ldr	r2, [pc, #72]	@ (80073f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073b8:	68d2      	ldr	r2, [r2, #12]
 80073ba:	0a12      	lsrs	r2, r2, #8
 80073bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]
    break;
 80073c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80073c8:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	0e5b      	lsrs	r3, r3, #25
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	3301      	adds	r3, #1
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80073e2:	687b      	ldr	r3, [r7, #4]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40021000 	.word	0x40021000
 80073f4:	016e3600 	.word	0x016e3600
 80073f8:	00f42400 	.word	0x00f42400

080073fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007404:	2300      	movs	r3, #0
 8007406:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007408:	2300      	movs	r3, #0
 800740a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8098 	beq.w	800754a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800741a:	2300      	movs	r3, #0
 800741c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741e:	4b43      	ldr	r3, [pc, #268]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10d      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800742a:	4b40      	ldr	r3, [pc, #256]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	4a3f      	ldr	r2, [pc, #252]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007434:	6593      	str	r3, [r2, #88]	@ 0x58
 8007436:	4b3d      	ldr	r3, [pc, #244]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007442:	2301      	movs	r3, #1
 8007444:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007446:	4b3a      	ldr	r3, [pc, #232]	@ (8007530 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a39      	ldr	r2, [pc, #228]	@ (8007530 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800744c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007450:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007452:	f7fc f8c7 	bl	80035e4 <HAL_GetTick>
 8007456:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007458:	e009      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745a:	f7fc f8c3 	bl	80035e4 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d902      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	74fb      	strb	r3, [r7, #19]
        break;
 800746c:	e005      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800746e:	4b30      	ldr	r3, [pc, #192]	@ (8007530 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0ef      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800747a:	7cfb      	ldrb	r3, [r7, #19]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d159      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007480:	4b2a      	ldr	r3, [pc, #168]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800748a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01e      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	429a      	cmp	r2, r3
 800749a:	d019      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800749c:	4b23      	ldr	r3, [pc, #140]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074a8:	4b20      	ldr	r3, [pc, #128]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ae:	4a1f      	ldr	r2, [pc, #124]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074b8:	4b1c      	ldr	r3, [pc, #112]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074be:	4a1b      	ldr	r2, [pc, #108]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074c8:	4a18      	ldr	r2, [pc, #96]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d016      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074da:	f7fc f883 	bl	80035e4 <HAL_GetTick>
 80074de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e0:	e00b      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e2:	f7fc f87f 	bl	80035e4 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d902      	bls.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	74fb      	strb	r3, [r7, #19]
            break;
 80074f8:	e006      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0ec      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007508:	7cfb      	ldrb	r3, [r7, #19]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800750e:	4b07      	ldr	r3, [pc, #28]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800751c:	4903      	ldr	r1, [pc, #12]	@ (800752c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007524:	e008      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007526:	7cfb      	ldrb	r3, [r7, #19]
 8007528:	74bb      	strb	r3, [r7, #18]
 800752a:	e005      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800752c:	40021000 	.word	0x40021000
 8007530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	7cfb      	ldrb	r3, [r7, #19]
 8007536:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007538:	7c7b      	ldrb	r3, [r7, #17]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d105      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800753e:	4ba7      	ldr	r3, [pc, #668]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007542:	4aa6      	ldr	r2, [pc, #664]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007544:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007548:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007556:	4ba1      	ldr	r3, [pc, #644]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755c:	f023 0203 	bic.w	r2, r3, #3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	499d      	ldr	r1, [pc, #628]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007578:	4b98      	ldr	r3, [pc, #608]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757e:	f023 020c 	bic.w	r2, r3, #12
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	4995      	ldr	r1, [pc, #596]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800759a:	4b90      	ldr	r3, [pc, #576]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	498c      	ldr	r1, [pc, #560]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075bc:	4b87      	ldr	r3, [pc, #540]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	4984      	ldr	r1, [pc, #528]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075de:	4b7f      	ldr	r3, [pc, #508]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	497b      	ldr	r1, [pc, #492]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007600:	4b76      	ldr	r3, [pc, #472]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007606:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	4973      	ldr	r1, [pc, #460]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007622:	4b6e      	ldr	r3, [pc, #440]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007628:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	496a      	ldr	r1, [pc, #424]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007644:	4b65      	ldr	r3, [pc, #404]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	4962      	ldr	r1, [pc, #392]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007666:	4b5d      	ldr	r3, [pc, #372]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007674:	4959      	ldr	r1, [pc, #356]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007688:	4b54      	ldr	r3, [pc, #336]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800768e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	4951      	ldr	r1, [pc, #324]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d015      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076aa:	4b4c      	ldr	r3, [pc, #304]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b8:	4948      	ldr	r1, [pc, #288]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c8:	d105      	bne.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ca:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	4a43      	ldr	r2, [pc, #268]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076d4:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d015      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076e2:	4b3e      	ldr	r3, [pc, #248]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f0:	493a      	ldr	r1, [pc, #232]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007700:	d105      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007702:	4b36      	ldr	r3, [pc, #216]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	4a35      	ldr	r2, [pc, #212]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800770c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d015      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800771a:	4b30      	ldr	r3, [pc, #192]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007720:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007728:	492c      	ldr	r1, [pc, #176]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007738:	d105      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800773a:	4b28      	ldr	r3, [pc, #160]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	4a27      	ldr	r2, [pc, #156]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007744:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d015      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007752:	4b22      	ldr	r3, [pc, #136]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	491e      	ldr	r1, [pc, #120]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007770:	d105      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007772:	4b1a      	ldr	r3, [pc, #104]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4a19      	ldr	r2, [pc, #100]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800777c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d015      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800778a:	4b14      	ldr	r3, [pc, #80]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007790:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	4910      	ldr	r1, [pc, #64]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a8:	d105      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077aa:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	4a0b      	ldr	r2, [pc, #44]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d018      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077c2:	4b06      	ldr	r3, [pc, #24]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d0:	4902      	ldr	r1, [pc, #8]	@ (80077dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80077dc:	40021000 	.word	0x40021000
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077e8:	4b21      	ldr	r3, [pc, #132]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4a20      	ldr	r2, [pc, #128]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80077ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d015      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007800:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007806:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780e:	4918      	ldr	r1, [pc, #96]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781e:	d105      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007820:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a12      	ldr	r2, [pc, #72]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800782a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d015      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007838:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800783a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800783e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007846:	490a      	ldr	r1, [pc, #40]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007856:	d105      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4a04      	ldr	r2, [pc, #16]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800785e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007862:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007864:	7cbb      	ldrb	r3, [r7, #18]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40021000 	.word	0x40021000

08007874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007886:	d136      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007888:	4bb3      	ldr	r3, [pc, #716]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007892:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007894:	4bb0      	ldr	r3, [pc, #704]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d108      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a8:	d104      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80078aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	f000 bce6 	b.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80078b4:	4ba8      	ldr	r3, [pc, #672]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80078b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d108      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c8:	d104      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80078ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	f000 bcd6 	b.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80078d4:	4ba0      	ldr	r3, [pc, #640]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078e0:	f040 84ce 	bne.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ea:	f040 84c9 	bne.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 80078ee:	4b9b      	ldr	r3, [pc, #620]	@ (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	f000 bcc5 	b.w	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80078f6:	4b98      	ldr	r3, [pc, #608]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d10c      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007902:	4b95      	ldr	r3, [pc, #596]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800790a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8007910:	4b93      	ldr	r3, [pc, #588]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	e017      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	e014      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800791c:	4b8e      	ldr	r3, [pc, #568]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b03      	cmp	r3, #3
 8007926:	d10c      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007928:	4b8b      	ldr	r3, [pc, #556]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007934:	d102      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8007936:	4b8b      	ldr	r3, [pc, #556]	@ (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e004      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	e001      	b.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007946:	4b84      	ldr	r3, [pc, #528]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	091b      	lsrs	r3, r3, #4
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	3301      	adds	r3, #1
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007960:	f000 843c 	beq.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800796a:	f200 8464 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007974:	f000 83f7 	beq.w	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797e:	f200 845a 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007988:	f000 83b0 	beq.w	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007992:	f200 8450 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800799c:	f000 8378 	beq.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079a6:	f200 8446 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b0:	f000 8335 	beq.w	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ba:	f200 843c 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c4:	f000 82f6 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ce:	f200 8432 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d8:	f000 82a8 	beq.w	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e2:	f200 8428 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ec:	f000 825a 	beq.w	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f6:	f200 841e 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a00:	f000 8214 	beq.w	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a0a:	f200 8414 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a14:	f000 81e0 	beq.w	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a1e:	f200 840a 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b80      	cmp	r3, #128	@ 0x80
 8007a26:	f000 81b2 	beq.w	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b80      	cmp	r3, #128	@ 0x80
 8007a2e:	f200 8402 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d84b      	bhi.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 83fb 	beq.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b1f      	cmp	r3, #31
 8007a46:	f200 83f6 	bhi.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007adb 	.word	0x08007adb
 8007a54:	08007b3d 	.word	0x08007b3d
 8007a58:	08008237 	.word	0x08008237
 8007a5c:	08007bb1 	.word	0x08007bb1
 8007a60:	08008237 	.word	0x08008237
 8007a64:	08008237 	.word	0x08008237
 8007a68:	08008237 	.word	0x08008237
 8007a6c:	08007c13 	.word	0x08007c13
 8007a70:	08008237 	.word	0x08008237
 8007a74:	08008237 	.word	0x08008237
 8007a78:	08008237 	.word	0x08008237
 8007a7c:	08008237 	.word	0x08008237
 8007a80:	08008237 	.word	0x08008237
 8007a84:	08008237 	.word	0x08008237
 8007a88:	08008237 	.word	0x08008237
 8007a8c:	08007c75 	.word	0x08007c75
 8007a90:	08008237 	.word	0x08008237
 8007a94:	08008237 	.word	0x08008237
 8007a98:	08008237 	.word	0x08008237
 8007a9c:	08008237 	.word	0x08008237
 8007aa0:	08008237 	.word	0x08008237
 8007aa4:	08008237 	.word	0x08008237
 8007aa8:	08008237 	.word	0x08008237
 8007aac:	08008237 	.word	0x08008237
 8007ab0:	08008237 	.word	0x08008237
 8007ab4:	08008237 	.word	0x08008237
 8007ab8:	08008237 	.word	0x08008237
 8007abc:	08008237 	.word	0x08008237
 8007ac0:	08008237 	.word	0x08008237
 8007ac4:	08008237 	.word	0x08008237
 8007ac8:	08008237 	.word	0x08008237
 8007acc:	08007cdd 	.word	0x08007cdd
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b40      	cmp	r3, #64	@ 0x40
 8007ad4:	f000 8136 	beq.w	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 8007ad8:	e3ad      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ada:	4b1f      	ldr	r3, [pc, #124]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d103      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 8007aec:	f7ff fc2a 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8007af0:	61f8      	str	r0, [r7, #28]
      break;
 8007af2:	e3a2      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d103      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 8007afa:	f7ff fb9f 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007afe:	61f8      	str	r0, [r7, #28]
      break;
 8007b00:	e39b      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8007b02:	4b15      	ldr	r3, [pc, #84]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0e:	d105      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d102      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 8007b16:	4b12      	ldr	r3, [pc, #72]	@ (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007b18:	61fb      	str	r3, [r7, #28]
      break;
 8007b1a:	e38e      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f040 8387 	bne.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f040 8383 	bne.w	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 8007b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b38:	61fb      	str	r3, [r7, #28]
      break;
 8007b3a:	e37e      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b3c:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10c      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b4e:	f7ff fbe3 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007b52:	61f8      	str	r0, [r7, #28]
      break;
 8007b54:	e373      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007b56:	bf00      	nop
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	000b71b0 	.word	0x000b71b0
 8007b60:	00f42400 	.word	0x00f42400
 8007b64:	016e3600 	.word	0x016e3600
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 8007b6e:	f7ff fb65 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007b72:	61f8      	str	r0, [r7, #28]
      break;
 8007b74:	e363      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007b76:	4ba3      	ldr	r3, [pc, #652]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b82:	d105      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b08      	cmp	r3, #8
 8007b88:	d102      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 8007b8a:	4b9f      	ldr	r3, [pc, #636]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b8c:	61fb      	str	r3, [r7, #28]
      break;
 8007b8e:	e356      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007b90:	4b9c      	ldr	r3, [pc, #624]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	f040 834f 	bne.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b0c      	cmp	r3, #12
 8007ba4:	f040 834b 	bne.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 8007ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bac:	61fb      	str	r3, [r7, #28]
      break;
 8007bae:	e346      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007bb0:	4b94      	ldr	r3, [pc, #592]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bba:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7ff fba9 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	61f8      	str	r0, [r7, #28]
      break;
 8007bc8:	e33b      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d103      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 8007bd0:	f7ff fb34 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007bd4:	61f8      	str	r0, [r7, #28]
      break;
 8007bd6:	e334      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be4:	d105      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d102      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 8007bec:	4b86      	ldr	r3, [pc, #536]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007bee:	61fb      	str	r3, [r7, #28]
      break;
 8007bf0:	e327      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007bf2:	4b84      	ldr	r3, [pc, #528]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	f040 8320 	bne.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b30      	cmp	r3, #48	@ 0x30
 8007c06:	f040 831c 	bne.w	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 8007c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c0e:	61fb      	str	r3, [r7, #28]
      break;
 8007c10:	e317      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c12:	4b7c      	ldr	r3, [pc, #496]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c1c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c24:	f7ff fb78 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007c28:	61f8      	str	r0, [r7, #28]
      break;
 8007c2a:	e30c      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b40      	cmp	r3, #64	@ 0x40
 8007c30:	d103      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 8007c32:	f7ff fb03 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007c36:	61f8      	str	r0, [r7, #28]
      break;
 8007c38:	e305      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c3a:	4b72      	ldr	r3, [pc, #456]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c46:	d105      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b80      	cmp	r3, #128	@ 0x80
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 8007c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c50:	61fb      	str	r3, [r7, #28]
      break;
 8007c52:	e2f8      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007c54:	4b6b      	ldr	r3, [pc, #428]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	f040 82f1 	bne.w	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c68:	f040 82ed 	bne.w	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 8007c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c70:	61fb      	str	r3, [r7, #28]
      break;
 8007c72:	e2e8      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007c74:	4b63      	ldr	r3, [pc, #396]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c7e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007c86:	f7ff fb47 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007c8a:	61f8      	str	r0, [r7, #28]
      break;
 8007c8c:	e2dd      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c94:	d103      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 8007c96:	f7ff fad1 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007c9a:	61f8      	str	r0, [r7, #28]
      break;
 8007c9c:	e2d5      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007c9e:	4b59      	ldr	r3, [pc, #356]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 8007cb4:	4b54      	ldr	r3, [pc, #336]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007cb6:	61fb      	str	r3, [r7, #28]
      break;
 8007cb8:	e2c7      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007cba:	4b52      	ldr	r3, [pc, #328]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	f040 82c0 	bne.w	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cd0:	f040 82bb 	bne.w	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 8007cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cd8:	61fb      	str	r3, [r7, #28]
      break;
 8007cda:	e2b6      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007cdc:	4b49      	ldr	r3, [pc, #292]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ce6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007cee:	f7ff fb13 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007cf2:	61f8      	str	r0, [r7, #28]
      break;
 8007cf4:	e2ab      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cfc:	d103      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7ff fa9d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007d02:	61f8      	str	r0, [r7, #28]
      break;
 8007d04:	e2a3      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d06:	4b3f      	ldr	r3, [pc, #252]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d12:	d106      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 8007d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d1e:	61fb      	str	r3, [r7, #28]
      break;
 8007d20:	e295      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d22:	4b38      	ldr	r3, [pc, #224]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	f040 828e 	bne.w	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d38:	f040 8289 	bne.w	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 8007d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d40:	61fb      	str	r3, [r7, #28]
      break;
 8007d42:	e284      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d44:	4b2f      	ldr	r3, [pc, #188]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d4e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007d56:	f7ff fadf 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007d5a:	61f8      	str	r0, [r7, #28]
      break;
 8007d5c:	e279      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d64:	d103      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8007d66:	f7ff fa69 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007d6a:	61f8      	str	r0, [r7, #28]
      break;
 8007d6c:	e271      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007d6e:	4b25      	ldr	r3, [pc, #148]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d7a:	f040 826a 	bne.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d84:	f040 8265 	bne.w	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 8007d88:	4b1f      	ldr	r3, [pc, #124]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007d8a:	61fb      	str	r3, [r7, #28]
      break;
 8007d8c:	e261      	b.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007d98:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007da0:	f7ff faba 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007da4:	61f8      	str	r0, [r7, #28]
      break;
 8007da6:	e256      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dae:	d103      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 8007db0:	f7ff fa44 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007db4:	61f8      	str	r0, [r7, #28]
      break;
 8007db6:	e24e      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007db8:	4b12      	ldr	r3, [pc, #72]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc4:	f040 8247 	bne.w	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dce:	f040 8242 	bne.w	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007dd4:	61fb      	str	r3, [r7, #28]
      break;
 8007dd6:	e23e      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007de2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007dea:	f7ff fa95 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007dee:	61f8      	str	r0, [r7, #28]
      break;
 8007df0:	e233      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df8:	d108      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 8007dfa:	f7ff fa1f 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007dfe:	61f8      	str	r0, [r7, #28]
      break;
 8007e00:	e22b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8007e02:	bf00      	nop
 8007e04:	40021000 	.word	0x40021000
 8007e08:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007e0c:	4b9b      	ldr	r3, [pc, #620]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e18:	f040 821f 	bne.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e22:	f040 821a 	bne.w	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 8007e26:	4b96      	ldr	r3, [pc, #600]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007e28:	61fb      	str	r3, [r7, #28]
      break;
 8007e2a:	e216      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e2c:	4b93      	ldr	r3, [pc, #588]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e32:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007e36:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d103      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e3e:	f7ff fa6b 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007e42:	61f8      	str	r0, [r7, #28]
      break;
 8007e44:	e20b      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007e46:	4b8d      	ldr	r3, [pc, #564]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d107      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e5a:	d103      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 8007e5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e01e      	b.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007e64:	4b85      	ldr	r3, [pc, #532]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e70:	d106      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e78:	d102      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 8007e7a:	4b81      	ldr	r3, [pc, #516]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	e010      	b.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007e80:	4b7e      	ldr	r3, [pc, #504]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	f040 81e7 	bne.w	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007e96:	f040 81e2 	bne.w	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e9e:	61fb      	str	r3, [r7, #28]
      break;
 8007ea0:	e1dd      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8007ea2:	e1dc      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007ea4:	4b75      	ldr	r3, [pc, #468]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007eae:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d103      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7ff f9c1 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007eba:	61f8      	str	r0, [r7, #28]
      break;
 8007ebc:	e1d1      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ec4:	d11b      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 81c7 	beq.w	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ed4:	4b69      	ldr	r3, [pc, #420]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	0a1b      	lsrs	r3, r3, #8
 8007eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ede:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	fb03 f202 	mul.w	r2, r3, r2
 8007ee8:	4b64      	ldr	r3, [pc, #400]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	0d5b      	lsrs	r3, r3, #21
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	61fb      	str	r3, [r7, #28]
      break;
 8007efc:	e1b1      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f04:	d102      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f06:	4b5f      	ldr	r3, [pc, #380]	@ (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007f08:	61fb      	str	r3, [r7, #28]
      break;
 8007f0a:	e1aa      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8007f0c:	4b5b      	ldr	r3, [pc, #364]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f18:	f040 81a3 	bne.w	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f22:	f040 819e 	bne.w	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 8007f26:	4b56      	ldr	r3, [pc, #344]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007f28:	61fb      	str	r3, [r7, #28]
      break;
 8007f2a:	e19a      	b.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007f2c:	4b53      	ldr	r3, [pc, #332]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f32:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007f36:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 8007f3e:	f7ff f97d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8007f42:	61f8      	str	r0, [r7, #28]
      break;
 8007f44:	e18f      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f4c:	d11b      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8185 	beq.w	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f5c:	4b47      	ldr	r3, [pc, #284]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	0a1b      	lsrs	r3, r3, #8
 8007f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f66:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	fb03 f202 	mul.w	r2, r3, r2
 8007f70:	4b42      	ldr	r3, [pc, #264]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	0d5b      	lsrs	r3, r3, #21
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f82:	61fb      	str	r3, [r7, #28]
      break;
 8007f84:	e16f      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007f90:	61fb      	str	r3, [r7, #28]
      break;
 8007f92:	e168      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8007f94:	4b39      	ldr	r3, [pc, #228]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa0:	f040 8161 	bne.w	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007faa:	f040 815c 	bne.w	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 8007fae:	4b34      	ldr	r3, [pc, #208]	@ (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007fb0:	61fb      	str	r3, [r7, #28]
      break;
 8007fb2:	e158      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007fb4:	4b31      	ldr	r3, [pc, #196]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007fbe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fc6:	d103      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8007fc8:	f7ff f9a6 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8007fcc:	61f8      	str	r0, [r7, #28]
      break;
 8007fce:	e14c      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 8007fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007fd8:	61fb      	str	r3, [r7, #28]
      break;
 8007fda:	e146      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fe2:	f040 8142 	bne.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8007fe6:	4b25      	ldr	r3, [pc, #148]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 813b 	beq.w	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007ff4:	4b21      	ldr	r3, [pc, #132]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	fb03 f202 	mul.w	r2, r3, r2
 8008008:	4b1c      	ldr	r3, [pc, #112]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	0d5b      	lsrs	r3, r3, #21
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	3301      	adds	r3, #1
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	fbb2 f3f3 	udiv	r3, r2, r3
 800801a:	61fb      	str	r3, [r7, #28]
      break;
 800801c:	e125      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 800801e:	4b17      	ldr	r3, [pc, #92]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008024:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008028:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008030:	d114      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008032:	4b12      	ldr	r3, [pc, #72]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	fb03 f202 	mul.w	r2, r3, r2
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	0d5b      	lsrs	r3, r3, #21
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	3301      	adds	r3, #1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	61fb      	str	r3, [r7, #28]
      break;
 800805a:	e108      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800805c:	4b07      	ldr	r3, [pc, #28]	@ (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800805e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b02      	cmp	r3, #2
 8008068:	f040 8101 	bne.w	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f040 80fd 	bne.w	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008076:	61fb      	str	r3, [r7, #28]
      break;
 8008078:	e0f9      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800807a:	bf00      	nop
 800807c:	40021000 	.word	0x40021000
 8008080:	00f42400 	.word	0x00f42400
 8008084:	00bb8000 	.word	0x00bb8000
 8008088:	016e3600 	.word	0x016e3600
 800808c:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008090:	4b7e      	ldr	r3, [pc, #504]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008096:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800809a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a2:	d114      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80080a4:	4b79      	ldr	r3, [pc, #484]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	0a1b      	lsrs	r3, r3, #8
 80080aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ae:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	fb03 f202 	mul.w	r2, r3, r2
 80080b8:	4b74      	ldr	r3, [pc, #464]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	0d5b      	lsrs	r3, r3, #21
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	3301      	adds	r3, #1
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	61fb      	str	r3, [r7, #28]
      break;
 80080cc:	e0d1      	b.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80080ce:	4b6f      	ldr	r3, [pc, #444]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b02      	cmp	r3, #2
 80080da:	f040 80ca 	bne.w	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 80c6 	bne.w	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 80080e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 80080e8:	61fb      	str	r3, [r7, #28]
      break;
 80080ea:	e0c2      	b.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80080ec:	4b67      	ldr	r3, [pc, #412]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80080ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080f6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080fe:	d129      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8008100:	4b62      	ldr	r3, [pc, #392]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80b4 	beq.w	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800810e:	4b5f      	ldr	r3, [pc, #380]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008118:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800811a:	4b5c      	ldr	r3, [pc, #368]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	0edb      	lsrs	r3, r3, #27
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800812c:	4b57      	ldr	r3, [pc, #348]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 8008138:	2311      	movs	r3, #17
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e001      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 800813e:	2307      	movs	r3, #7
 8008140:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	fb03 f202 	mul.w	r2, r3, r2
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	61fb      	str	r3, [r7, #28]
      break;
 8008152:	e090      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815a:	f040 808c 	bne.w	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 800815e:	f7ff f86d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8008162:	61f8      	str	r0, [r7, #28]
      break;
 8008164:	e087      	b.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8008166:	4b49      	ldr	r3, [pc, #292]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800816c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008170:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008178:	d128      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800817a:	4b44      	ldr	r3, [pc, #272]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d079      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008186:	4b41      	ldr	r3, [pc, #260]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008190:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008192:	4b3e      	ldr	r3, [pc, #248]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	0edb      	lsrs	r3, r3, #27
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80081a4:	4b39      	ldr	r3, [pc, #228]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 80081b0:	2311      	movs	r3, #17
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e001      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 80081b6:	2307      	movs	r3, #7
 80081b8:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	fb03 f202 	mul.w	r2, r3, r2
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	61fb      	str	r3, [r7, #28]
      break;
 80081ca:	e056      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d2:	d152      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 80081d4:	f7ff f832 	bl	800723c <HAL_RCC_GetSysClockFreq>
 80081d8:	61f8      	str	r0, [r7, #28]
      break;
 80081da:	e04e      	b.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80081dc:	4b2b      	ldr	r3, [pc, #172]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80081de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081e2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80081e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081ee:	d114      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80081f0:	4b26      	ldr	r3, [pc, #152]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fa:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	fb03 f202 	mul.w	r2, r3, r2
 8008204:	4b21      	ldr	r3, [pc, #132]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	0d5b      	lsrs	r3, r3, #21
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	3301      	adds	r3, #1
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	fbb2 f3f3 	udiv	r3, r2, r3
 8008216:	61fb      	str	r3, [r7, #28]
      break;
 8008218:	e031      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008220:	d102      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 8008222:	4b1c      	ldr	r3, [pc, #112]	@ (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 8008224:	61fb      	str	r3, [r7, #28]
      break;
 8008226:	e02a      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d127      	bne.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 800822e:	f7ff f805 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8008232:	61f8      	str	r0, [r7, #28]
      break;
 8008234:	e023      	b.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 8008236:	bf00      	nop
 8008238:	e022      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800823a:	bf00      	nop
 800823c:	e020      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800823e:	bf00      	nop
 8008240:	e01e      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008242:	bf00      	nop
 8008244:	e01c      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008246:	bf00      	nop
 8008248:	e01a      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800824a:	bf00      	nop
 800824c:	e018      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800824e:	bf00      	nop
 8008250:	e016      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008252:	bf00      	nop
 8008254:	e014      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008256:	bf00      	nop
 8008258:	e012      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800825a:	bf00      	nop
 800825c:	e010      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800825e:	bf00      	nop
 8008260:	e00e      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008262:	bf00      	nop
 8008264:	e00c      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008266:	bf00      	nop
 8008268:	e00a      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800826a:	bf00      	nop
 800826c:	e008      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800826e:	bf00      	nop
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008272:	bf00      	nop
 8008274:	e004      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 8008276:	bf00      	nop
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800827e:	bf00      	nop
    }
  }

  return(frequency);
 8008280:	69fb      	ldr	r3, [r7, #28]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40021000 	.word	0x40021000
 8008290:	02dc6c00 	.word	0x02dc6c00
 8008294:	00f42400 	.word	0x00f42400

08008298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e09d      	b.n	80083e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d108      	bne.n	80082c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082ba:	d009      	beq.n	80082d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	61da      	str	r2, [r3, #28]
 80082c2:	e005      	b.n	80082d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fa f968 	bl	80025c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008310:	d902      	bls.n	8008318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e002      	b.n	800831e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800831c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008326:	d007      	beq.n	8008338 <HAL_SPI_Init+0xa0>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008330:	d002      	beq.n	8008338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837a:	ea42 0103 	orr.w	r1, r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	f003 0204 	and.w	r2, r3, #4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80083b4:	ea42 0103 	orr.w	r1, r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b088      	sub	sp, #32
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083fe:	f7fb f8f1 	bl	80035e4 <HAL_GetTick>
 8008402:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
 8008416:	e15c      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <HAL_SPI_Transmit+0x36>
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e154      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_SPI_Transmit+0x48>
 8008432:	2302      	movs	r3, #2
 8008434:	e14d      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2203      	movs	r2, #3
 8008442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008488:	d10f      	bne.n	80084aa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b4:	2b40      	cmp	r3, #64	@ 0x40
 80084b6:	d007      	beq.n	80084c8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80084d0:	d952      	bls.n	8008578 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <HAL_SPI_Transmit+0xf2>
 80084da:	8b7b      	ldrh	r3, [r7, #26]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d145      	bne.n	800856c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	881a      	ldrh	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f0:	1c9a      	adds	r2, r3, #2
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008504:	e032      	b.n	800856c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b02      	cmp	r3, #2
 8008512:	d112      	bne.n	800853a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008518:	881a      	ldrh	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008524:	1c9a      	adds	r2, r3, #2
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008538:	e018      	b.n	800856c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800853a:	f7fb f853 	bl	80035e4 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d803      	bhi.n	8008552 <HAL_SPI_Transmit+0x164>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d102      	bne.n	8008558 <HAL_SPI_Transmit+0x16a>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e0b2      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1c7      	bne.n	8008506 <HAL_SPI_Transmit+0x118>
 8008576:	e083      	b.n	8008680 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_Transmit+0x198>
 8008580:	8b7b      	ldrh	r3, [r7, #26]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d177      	bne.n	8008676 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800858a:	b29b      	uxth	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	d912      	bls.n	80085b6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008594:	881a      	ldrh	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a0:	1c9a      	adds	r2, r3, #2
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b02      	subs	r3, #2
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085b4:	e05f      	b.n	8008676 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	330c      	adds	r3, #12
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80085dc:	e04b      	b.n	8008676 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d12b      	bne.n	8008644 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d912      	bls.n	800861c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fa:	881a      	ldrh	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008606:	1c9a      	adds	r2, r3, #2
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b02      	subs	r3, #2
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800861a:	e02c      	b.n	8008676 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008642:	e018      	b.n	8008676 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008644:	f7fa ffce 	bl	80035e4 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d803      	bhi.n	800865c <HAL_SPI_Transmit+0x26e>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d102      	bne.n	8008662 <HAL_SPI_Transmit+0x274>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e02d      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1ae      	bne.n	80085de <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f947 	bl	8008918 <SPI_EndRxTxTransaction>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e000      	b.n	80086d2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80086d0:	2300      	movs	r3, #0
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	4613      	mov	r3, r2
 80086ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086ec:	f7fa ff7a 	bl	80035e4 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4413      	add	r3, r2
 80086fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086fc:	f7fa ff72 	bl	80035e4 <HAL_GetTick>
 8008700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008702:	4b39      	ldr	r3, [pc, #228]	@ (80087e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	015b      	lsls	r3, r3, #5
 8008708:	0d1b      	lsrs	r3, r3, #20
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	fb02 f303 	mul.w	r3, r2, r3
 8008710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008712:	e054      	b.n	80087be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871a:	d050      	beq.n	80087be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800871c:	f7fa ff62 	bl	80035e4 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	429a      	cmp	r2, r3
 800872a:	d902      	bls.n	8008732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d13d      	bne.n	80087ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800874a:	d111      	bne.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008754:	d004      	beq.n	8008760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875e:	d107      	bne.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800876e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008778:	d10f      	bne.n	800879a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e017      	b.n	80087de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4013      	ands	r3, r2
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	bf0c      	ite	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	2300      	movne	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d19b      	bne.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000000 	.word	0x20000000

080087ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	@ 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087fe:	f7fa fef1 	bl	80035e4 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	4413      	add	r3, r2
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800880e:	f7fa fee9 	bl	80035e4 <HAL_GetTick>
 8008812:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800881c:	4b3d      	ldr	r3, [pc, #244]	@ (8008914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	00da      	lsls	r2, r3, #3
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	0d1b      	lsrs	r3, r3, #20
 800882c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008834:	e060      	b.n	80088f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800883c:	d107      	bne.n	800884e <SPI_WaitFifoStateUntilTimeout+0x62>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800884c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d050      	beq.n	80088f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008856:	f7fa fec5 	bl	80035e4 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008862:	429a      	cmp	r2, r3
 8008864:	d902      	bls.n	800886c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d13d      	bne.n	80088e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800887a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008884:	d111      	bne.n	80088aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800888e:	d004      	beq.n	800889a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008898:	d107      	bne.n	80088aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088b2:	d10f      	bne.n	80088d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e010      	b.n	800890a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	4013      	ands	r3, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	429a      	cmp	r2, r3
 8008906:	d196      	bne.n	8008836 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	@ 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000000 	.word	0x20000000

08008918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7ff ff5b 	bl	80087ec <SPI_WaitFifoStateUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008940:	f043 0220 	orr.w	r2, r3, #32
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e027      	b.n	800899c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	2180      	movs	r1, #128	@ 0x80
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff fec0 	bl	80086dc <SPI_WaitFlagStateUntilTimeout>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008966:	f043 0220 	orr.w	r2, r3, #32
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e014      	b.n	800899c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff ff34 	bl	80087ec <SPI_WaitFifoStateUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898e:	f043 0220 	orr.w	r2, r3, #32
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e000      	b.n	800899c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e049      	b.n	8008a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fa fbb8 	bl	8003140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f000 fa4c 	bl	8008e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d001      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e04f      	b.n	8008b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a23      	ldr	r2, [pc, #140]	@ (8008b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01d      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a96:	d018      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8008b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00e      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d009      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1b      	ldr	r2, [pc, #108]	@ (8008b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d004      	beq.n	8008aca <HAL_TIM_Base_Start_IT+0x76>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a19      	ldr	r2, [pc, #100]	@ (8008b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d115      	bne.n	8008af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b06      	cmp	r3, #6
 8008ada:	d015      	beq.n	8008b08 <HAL_TIM_Base_Start_IT+0xb4>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae2:	d011      	beq.n	8008b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af4:	e008      	b.n	8008b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0201 	orr.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e000      	b.n	8008b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	40012c00 	.word	0x40012c00
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40013400 	.word	0x40013400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	40015000 	.word	0x40015000
 8008b30:	00010007 	.word	0x00010007

08008b34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0201 	bic.w	r2, r2, #1
 8008b4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10f      	bne.n	8008b7c <HAL_TIM_Base_Stop_IT+0x48>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6a1a      	ldr	r2, [r3, #32]
 8008b62:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008b66:	4013      	ands	r3, r2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d107      	bne.n	8008b7c <HAL_TIM_Base_Stop_IT+0x48>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d020      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01b      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f06f 0202 	mvn.w	r2, #2
 8008bc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f931 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008be2:	e005      	b.n	8008bf0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f923 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f934 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d020      	beq.n	8008c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01b      	beq.n	8008c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f06f 0204 	mvn.w	r2, #4
 8008c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f90b 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008c2e:	e005      	b.n	8008c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8fd 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f90e 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d020      	beq.n	8008c8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d01b      	beq.n	8008c8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f06f 0208 	mvn.w	r2, #8
 8008c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2204      	movs	r2, #4
 8008c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8e5 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008c7a:	e005      	b.n	8008c88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8d7 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f8e8 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d020      	beq.n	8008cda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01b      	beq.n	8008cda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f06f 0210 	mvn.w	r2, #16
 8008caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2208      	movs	r2, #8
 8008cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8bf 	bl	8008e44 <HAL_TIM_IC_CaptureCallback>
 8008cc6:	e005      	b.n	8008cd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f8b1 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f8c2 	bl	8008e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00c      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f06f 0201 	mvn.w	r2, #1
 8008cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7fa f98d 	bl	8003018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d007      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f9ec 	bl	8009104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d007      	beq.n	8008d50 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f9e4 	bl	8009118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f87c 	bl	8008e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d007      	beq.n	8008d98 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f06f 0220 	mvn.w	r2, #32
 8008d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f9ac 	bl	80090f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00c      	beq.n	8008dbc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d007      	beq.n	8008dbc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f9b8 	bl	800912c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00c      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f9b0 	bl	8009140 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00c      	beq.n	8008e04 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f9a8 	bl	8009154 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00c      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9a0 	bl	8009168 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a48      	ldr	r2, [pc, #288]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9e:	d00f      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a45      	ldr	r2, [pc, #276]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a44      	ldr	r2, [pc, #272]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a43      	ldr	r2, [pc, #268]	@ (8008fc0 <TIM_Base_SetConfig+0x140>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a42      	ldr	r2, [pc, #264]	@ (8008fc4 <TIM_Base_SetConfig+0x144>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d108      	bne.n	8008ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a37      	ldr	r2, [pc, #220]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee0:	d01b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a34      	ldr	r2, [pc, #208]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d017      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a33      	ldr	r2, [pc, #204]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a32      	ldr	r2, [pc, #200]	@ (8008fc0 <TIM_Base_SetConfig+0x140>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a32      	ldr	r2, [pc, #200]	@ (8008fc8 <TIM_Base_SetConfig+0x148>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a31      	ldr	r2, [pc, #196]	@ (8008fcc <TIM_Base_SetConfig+0x14c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d007      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a30      	ldr	r2, [pc, #192]	@ (8008fd0 <TIM_Base_SetConfig+0x150>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2b      	ldr	r2, [pc, #172]	@ (8008fc4 <TIM_Base_SetConfig+0x144>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d108      	bne.n	8008f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a18      	ldr	r2, [pc, #96]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <TIM_Base_SetConfig+0x100>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a19      	ldr	r2, [pc, #100]	@ (8008fc0 <TIM_Base_SetConfig+0x140>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00f      	beq.n	8008f80 <TIM_Base_SetConfig+0x100>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a19      	ldr	r2, [pc, #100]	@ (8008fc8 <TIM_Base_SetConfig+0x148>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00b      	beq.n	8008f80 <TIM_Base_SetConfig+0x100>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	@ (8008fcc <TIM_Base_SetConfig+0x14c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d007      	beq.n	8008f80 <TIM_Base_SetConfig+0x100>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a17      	ldr	r2, [pc, #92]	@ (8008fd0 <TIM_Base_SetConfig+0x150>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_Base_SetConfig+0x100>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a12      	ldr	r2, [pc, #72]	@ (8008fc4 <TIM_Base_SetConfig+0x144>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d103      	bne.n	8008f88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d105      	bne.n	8008fa6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f023 0201 	bic.w	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	611a      	str	r2, [r3, #16]
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40012c00 	.word	0x40012c00
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40013400 	.word	0x40013400
 8008fc4:	40015000 	.word	0x40015000
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400
 8008fd0:	40014800 	.word	0x40014800

08008fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e06f      	b.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a31      	ldr	r2, [pc, #196]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a30      	ldr	r2, [pc, #192]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a2e      	ldr	r2, [pc, #184]	@ (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d108      	bne.n	800903c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009030:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1e      	ldr	r2, [pc, #120]	@ (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01d      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906c:	d018      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1c      	ldr	r2, [pc, #112]	@ (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d013      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a1a      	ldr	r2, [pc, #104]	@ (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00e      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a15      	ldr	r2, [pc, #84]	@ (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d009      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a16      	ldr	r2, [pc, #88]	@ (80090ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d004      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a11      	ldr	r2, [pc, #68]	@ (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10c      	bne.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	40013400 	.word	0x40013400
 80090e0:	40015000 	.word	0x40015000
 80090e4:	40000400 	.word	0x40000400
 80090e8:	40000800 	.word	0x40000800
 80090ec:	40014000 	.word	0x40014000

080090f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e042      	b.n	8009214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fa f843 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2224      	movs	r2, #36	@ 0x24
 80091aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0201 	bic.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 ff60 	bl	800a08c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fc61 	bl	8009a94 <UART_SetConfig>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e01b      	b.n	8009214 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 ffdf 	bl	800a1d0 <UART_CheckIdleState>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	@ 0x28
 8009220:	af02      	add	r7, sp, #8
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	4613      	mov	r3, r2
 800922a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009232:	2b20      	cmp	r3, #32
 8009234:	d17b      	bne.n	800932e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <HAL_UART_Transmit+0x26>
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e074      	b.n	8009330 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2221      	movs	r2, #33	@ 0x21
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009256:	f7fa f9c5 	bl	80035e4 <HAL_GetTick>
 800925a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	88fa      	ldrh	r2, [r7, #6]
 8009260:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009274:	d108      	bne.n	8009288 <HAL_UART_Transmit+0x6c>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d104      	bne.n	8009288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	e003      	b.n	8009290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800928c:	2300      	movs	r3, #0
 800928e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009290:	e030      	b.n	80092f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2200      	movs	r2, #0
 800929a:	2180      	movs	r1, #128	@ 0x80
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f001 f841 	bl	800a324 <UART_WaitOnFlagUntilTimeout>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e03d      	b.n	8009330 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	3302      	adds	r3, #2
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	e007      	b.n	80092e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1c8      	bne.n	8009292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2200      	movs	r2, #0
 8009308:	2140      	movs	r1, #64	@ 0x40
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f001 f80a 	bl	800a324 <UART_WaitOnFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e006      	b.n	8009330 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e000      	b.n	8009330 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800932e:	2302      	movs	r3, #2
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	@ 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934c:	2b20      	cmp	r3, #32
 800934e:	d137      	bne.n	80093c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <HAL_UART_Receive_IT+0x24>
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e030      	b.n	80093c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a18      	ldr	r2, [pc, #96]	@ (80093cc <HAL_UART_Receive_IT+0x94>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d01f      	beq.n	80093b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d018      	beq.n	80093b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	613b      	str	r3, [r7, #16]
   return(result);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009392:	627b      	str	r3, [r7, #36]	@ 0x24
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	461a      	mov	r2, r3
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	623b      	str	r3, [r7, #32]
 800939e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	69f9      	ldr	r1, [r7, #28]
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e6      	bne.n	800937e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	461a      	mov	r2, r3
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 f822 	bl	800a400 <UART_Start_Receive_IT>
 80093bc:	4603      	mov	r3, r0
 80093be:	e000      	b.n	80093c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80093c0:	2302      	movs	r3, #2
  }
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3728      	adds	r7, #40	@ 0x28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40008000 	.word	0x40008000

080093d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b0ba      	sub	sp, #232	@ 0xe8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80093fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80093fe:	4013      	ands	r3, r2
 8009400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d11b      	bne.n	8009444 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d015      	beq.n	8009444 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d009      	beq.n	8009444 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 8300 	beq.w	8009a3a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
      }
      return;
 8009442:	e2fa      	b.n	8009a3a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 8123 	beq.w	8009694 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800944e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009452:	4b8d      	ldr	r3, [pc, #564]	@ (8009688 <HAL_UART_IRQHandler+0x2b8>)
 8009454:	4013      	ands	r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800945a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800945e:	4b8b      	ldr	r3, [pc, #556]	@ (800968c <HAL_UART_IRQHandler+0x2bc>)
 8009460:	4013      	ands	r3, r2
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8116 	beq.w	8009694 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d011      	beq.n	8009498 <HAL_UART_IRQHandler+0xc8>
 8009474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800948e:	f043 0201 	orr.w	r2, r3, #1
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d011      	beq.n	80094c8 <HAL_UART_IRQHandler+0xf8>
 80094a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00b      	beq.n	80094c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2202      	movs	r2, #2
 80094b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	f043 0204 	orr.w	r2, r3, #4
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d011      	beq.n	80094f8 <HAL_UART_IRQHandler+0x128>
 80094d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00b      	beq.n	80094f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2204      	movs	r2, #4
 80094e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ee:	f043 0202 	orr.w	r2, r3, #2
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d017      	beq.n	8009534 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d105      	bne.n	800951c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009510:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009514:	4b5c      	ldr	r3, [pc, #368]	@ (8009688 <HAL_UART_IRQHandler+0x2b8>)
 8009516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2208      	movs	r2, #8
 8009522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952a:	f043 0208 	orr.w	r2, r3, #8
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800953c:	2b00      	cmp	r3, #0
 800953e:	d012      	beq.n	8009566 <HAL_UART_IRQHandler+0x196>
 8009540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009544:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00c      	beq.n	8009566 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 8266 	beq.w	8009a3e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d013      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800957e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d105      	bne.n	8009596 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800958a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800958e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ba:	2b40      	cmp	r3, #64	@ 0x40
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d054      	beq.n	8009674 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f83a 	bl	800a644 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095da:	2b40      	cmp	r3, #64	@ 0x40
 80095dc:	d146      	bne.n	800966c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800960a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800960e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1d9      	bne.n	80095de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009630:	2b00      	cmp	r3, #0
 8009632:	d017      	beq.n	8009664 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963a:	4a15      	ldr	r2, [pc, #84]	@ (8009690 <HAL_UART_IRQHandler+0x2c0>)
 800963c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009644:	4618      	mov	r0, r3
 8009646:	f7fa fa0c 	bl	8003a62 <HAL_DMA_Abort_IT>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d019      	beq.n	8009684 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800965e:	4610      	mov	r0, r2
 8009660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009662:	e00f      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9ff 	bl	8009a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966a:	e00b      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f9fb 	bl	8009a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009672:	e007      	b.n	8009684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f9f7 	bl	8009a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009682:	e1dc      	b.n	8009a3e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009684:	bf00      	nop
    return;
 8009686:	e1da      	b.n	8009a3e <HAL_UART_IRQHandler+0x66e>
 8009688:	10000001 	.word	0x10000001
 800968c:	04000120 	.word	0x04000120
 8009690:	0800a711 	.word	0x0800a711

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009698:	2b01      	cmp	r3, #1
 800969a:	f040 8170 	bne.w	800997e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8169 	beq.w	800997e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8162 	beq.w	800997e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2210      	movs	r2, #16
 80096c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	f040 80d8 	bne.w	8009882 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80af 	beq.w	8009848 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096f4:	429a      	cmp	r2, r3
 80096f6:	f080 80a7 	bcs.w	8009848 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009700:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 8087 	bne.w	8009826 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800972c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009746:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800974e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800975a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1da      	bne.n	8009718 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009786:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800978a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800978e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e1      	bne.n	8009762 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3308      	adds	r3, #8
 80097be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e3      	bne.n	800979e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f4:	f023 0310 	bic.w	r3, r3, #16
 80097f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009808:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800980c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009820:	4618      	mov	r0, r3
 8009822:	f7fa f8c5 	bl	80039b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f91b 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009846:	e0fc      	b.n	8009a42 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800984e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009852:	429a      	cmp	r2, r3
 8009854:	f040 80f5 	bne.w	8009a42 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b20      	cmp	r3, #32
 8009868:	f040 80eb 	bne.w	8009a42 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f8fe 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
      return;
 8009880:	e0df      	b.n	8009a42 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800988e:	b29b      	uxth	r3, r3
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 80d1 	beq.w	8009a46 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80098a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80cc 	beq.w	8009a46 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e4      	bne.n	80098ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3308      	adds	r3, #8
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	623b      	str	r3, [r7, #32]
   return(result);
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800990c:	633a      	str	r2, [r7, #48]	@ 0x30
 800990e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e1      	bne.n	80098e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	60fb      	str	r3, [r7, #12]
   return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f023 0310 	bic.w	r3, r3, #16
 8009948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	69b9      	ldr	r1, [r7, #24]
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	617b      	str	r3, [r7, #20]
   return(result);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f880 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800997c:	e063      	b.n	8009a46 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <HAL_UART_IRQHandler+0x5d8>
 800998a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800998e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800999e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 fc13 	bl	800b1cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099a6:	e051      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d014      	beq.n	80099de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d008      	beq.n	80099de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d03a      	beq.n	8009a4a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	4798      	blx	r3
    }
    return;
 80099dc:	e035      	b.n	8009a4a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_UART_IRQHandler+0x62e>
 80099ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fe9c 	bl	800a734 <UART_EndTransmit_IT>
    return;
 80099fc:	e026      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d009      	beq.n	8009a1e <HAL_UART_IRQHandler+0x64e>
 8009a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fbec 	bl	800b1f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a1c:	e016      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d010      	beq.n	8009a4c <HAL_UART_IRQHandler+0x67c>
 8009a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	da0c      	bge.n	8009a4c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fbd4 	bl	800b1e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a38:	e008      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a3a:	bf00      	nop
 8009a3c:	e006      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
    return;
 8009a3e:	bf00      	nop
 8009a40:	e004      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
      return;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_UART_IRQHandler+0x67c>
    return;
 8009a4a:	bf00      	nop
  }
}
 8009a4c:	37e8      	adds	r7, #232	@ 0xe8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a98:	b08c      	sub	sp, #48	@ 0x30
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	431a      	orrs	r2, r3
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4baa      	ldr	r3, [pc, #680]	@ (8009d6c <UART_SetConfig+0x2d8>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	6812      	ldr	r2, [r2, #0]
 8009aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a9f      	ldr	r2, [pc, #636]	@ (8009d70 <UART_SetConfig+0x2dc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009afc:	4313      	orrs	r3, r2
 8009afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009b0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b14:	430b      	orrs	r3, r1
 8009b16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1e:	f023 010f 	bic.w	r1, r3, #15
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a90      	ldr	r2, [pc, #576]	@ (8009d74 <UART_SetConfig+0x2e0>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d125      	bne.n	8009b84 <UART_SetConfig+0xf0>
 8009b38:	4b8f      	ldr	r3, [pc, #572]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d81a      	bhi.n	8009b7c <UART_SetConfig+0xe8>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0xb8>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b5d 	.word	0x08009b5d
 8009b50:	08009b6d 	.word	0x08009b6d
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b75 	.word	0x08009b75
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b62:	e116      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009b64:	2302      	movs	r3, #2
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6a:	e112      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e10e      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	e10a      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b82:	e106      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a7c      	ldr	r2, [pc, #496]	@ (8009d7c <UART_SetConfig+0x2e8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d138      	bne.n	8009c00 <UART_SetConfig+0x16c>
 8009b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b94:	f003 030c 	and.w	r3, r3, #12
 8009b98:	2b0c      	cmp	r3, #12
 8009b9a:	d82d      	bhi.n	8009bf8 <UART_SetConfig+0x164>
 8009b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <UART_SetConfig+0x110>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009bd9 	.word	0x08009bd9
 8009ba8:	08009bf9 	.word	0x08009bf9
 8009bac:	08009bf9 	.word	0x08009bf9
 8009bb0:	08009bf9 	.word	0x08009bf9
 8009bb4:	08009be9 	.word	0x08009be9
 8009bb8:	08009bf9 	.word	0x08009bf9
 8009bbc:	08009bf9 	.word	0x08009bf9
 8009bc0:	08009bf9 	.word	0x08009bf9
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	08009bf9 	.word	0x08009bf9
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bde:	e0d8      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009be0:	2302      	movs	r3, #2
 8009be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009be6:	e0d4      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bee:	e0d0      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bf6:	e0cc      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bfe:	e0c8      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a5e      	ldr	r2, [pc, #376]	@ (8009d80 <UART_SetConfig+0x2ec>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d125      	bne.n	8009c56 <UART_SetConfig+0x1c2>
 8009c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c14:	2b30      	cmp	r3, #48	@ 0x30
 8009c16:	d016      	beq.n	8009c46 <UART_SetConfig+0x1b2>
 8009c18:	2b30      	cmp	r3, #48	@ 0x30
 8009c1a:	d818      	bhi.n	8009c4e <UART_SetConfig+0x1ba>
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d00a      	beq.n	8009c36 <UART_SetConfig+0x1a2>
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d814      	bhi.n	8009c4e <UART_SetConfig+0x1ba>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <UART_SetConfig+0x19a>
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	d008      	beq.n	8009c3e <UART_SetConfig+0x1aa>
 8009c2c:	e00f      	b.n	8009c4e <UART_SetConfig+0x1ba>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c34:	e0ad      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c36:	2302      	movs	r3, #2
 8009c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c3c:	e0a9      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c3e:	2304      	movs	r3, #4
 8009c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c44:	e0a5      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c46:	2308      	movs	r3, #8
 8009c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c4c:	e0a1      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c4e:	2310      	movs	r3, #16
 8009c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c54:	e09d      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8009d84 <UART_SetConfig+0x2f0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d125      	bne.n	8009cac <UART_SetConfig+0x218>
 8009c60:	4b45      	ldr	r3, [pc, #276]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c6c:	d016      	beq.n	8009c9c <UART_SetConfig+0x208>
 8009c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c70:	d818      	bhi.n	8009ca4 <UART_SetConfig+0x210>
 8009c72:	2b80      	cmp	r3, #128	@ 0x80
 8009c74:	d00a      	beq.n	8009c8c <UART_SetConfig+0x1f8>
 8009c76:	2b80      	cmp	r3, #128	@ 0x80
 8009c78:	d814      	bhi.n	8009ca4 <UART_SetConfig+0x210>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <UART_SetConfig+0x1f0>
 8009c7e:	2b40      	cmp	r3, #64	@ 0x40
 8009c80:	d008      	beq.n	8009c94 <UART_SetConfig+0x200>
 8009c82:	e00f      	b.n	8009ca4 <UART_SetConfig+0x210>
 8009c84:	2300      	movs	r3, #0
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c8a:	e082      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c92:	e07e      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c9a:	e07a      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ca2:	e076      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009caa:	e072      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a35      	ldr	r2, [pc, #212]	@ (8009d88 <UART_SetConfig+0x2f4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d12a      	bne.n	8009d0c <UART_SetConfig+0x278>
 8009cb6:	4b30      	ldr	r3, [pc, #192]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc4:	d01a      	beq.n	8009cfc <UART_SetConfig+0x268>
 8009cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cca:	d81b      	bhi.n	8009d04 <UART_SetConfig+0x270>
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd0:	d00c      	beq.n	8009cec <UART_SetConfig+0x258>
 8009cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd6:	d815      	bhi.n	8009d04 <UART_SetConfig+0x270>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <UART_SetConfig+0x250>
 8009cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce0:	d008      	beq.n	8009cf4 <UART_SetConfig+0x260>
 8009ce2:	e00f      	b.n	8009d04 <UART_SetConfig+0x270>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e052      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009cec:	2302      	movs	r3, #2
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cf2:	e04e      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	e04a      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d02:	e046      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d04:	2310      	movs	r3, #16
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d0a:	e042      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a17      	ldr	r2, [pc, #92]	@ (8009d70 <UART_SetConfig+0x2dc>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d13a      	bne.n	8009d8c <UART_SetConfig+0x2f8>
 8009d16:	4b18      	ldr	r3, [pc, #96]	@ (8009d78 <UART_SetConfig+0x2e4>)
 8009d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d24:	d01a      	beq.n	8009d5c <UART_SetConfig+0x2c8>
 8009d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d2a:	d81b      	bhi.n	8009d64 <UART_SetConfig+0x2d0>
 8009d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d30:	d00c      	beq.n	8009d4c <UART_SetConfig+0x2b8>
 8009d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d36:	d815      	bhi.n	8009d64 <UART_SetConfig+0x2d0>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <UART_SetConfig+0x2b0>
 8009d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d40:	d008      	beq.n	8009d54 <UART_SetConfig+0x2c0>
 8009d42:	e00f      	b.n	8009d64 <UART_SetConfig+0x2d0>
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d4a:	e022      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d52:	e01e      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5a:	e01a      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d62:	e016      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d64:	2310      	movs	r3, #16
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6a:	e012      	b.n	8009d92 <UART_SetConfig+0x2fe>
 8009d6c:	cfff69f3 	.word	0xcfff69f3
 8009d70:	40008000 	.word	0x40008000
 8009d74:	40013800 	.word	0x40013800
 8009d78:	40021000 	.word	0x40021000
 8009d7c:	40004400 	.word	0x40004400
 8009d80:	40004800 	.word	0x40004800
 8009d84:	40004c00 	.word	0x40004c00
 8009d88:	40005000 	.word	0x40005000
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4aae      	ldr	r2, [pc, #696]	@ (800a050 <UART_SetConfig+0x5bc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	f040 8097 	bne.w	8009ecc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d823      	bhi.n	8009dee <UART_SetConfig+0x35a>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <UART_SetConfig+0x318>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009def 	.word	0x08009def
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009def 	.word	0x08009def
 8009dbc:	08009ddf 	.word	0x08009ddf
 8009dc0:	08009def 	.word	0x08009def
 8009dc4:	08009def 	.word	0x08009def
 8009dc8:	08009def 	.word	0x08009def
 8009dcc:	08009de7 	.word	0x08009de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fd faa2 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8009dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dd6:	e010      	b.n	8009dfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b9e      	ldr	r3, [pc, #632]	@ (800a054 <UART_SetConfig+0x5c0>)
 8009dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ddc:	e00d      	b.n	8009dfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dde:	f7fd fa2d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8009de2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009de4:	e009      	b.n	8009dfa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dec:	e005      	b.n	8009dfa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009df8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8130 	beq.w	800a062 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	4a94      	ldr	r2, [pc, #592]	@ (800a058 <UART_SetConfig+0x5c4>)
 8009e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	4413      	add	r3, r2
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d305      	bcc.n	8009e32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d903      	bls.n	8009e3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e38:	e113      	b.n	800a062 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	60bb      	str	r3, [r7, #8]
 8009e40:	60fa      	str	r2, [r7, #12]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e46:	4a84      	ldr	r2, [pc, #528]	@ (800a058 <UART_SetConfig+0x5c4>)
 8009e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2200      	movs	r2, #0
 8009e50:	603b      	str	r3, [r7, #0]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e5c:	f7f6 fe22 	bl	8000aa4 <__aeabi_uldivmod>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4610      	mov	r0, r2
 8009e66:	4619      	mov	r1, r3
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	020b      	lsls	r3, r1, #8
 8009e72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e76:	0202      	lsls	r2, r0, #8
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	6849      	ldr	r1, [r1, #4]
 8009e7c:	0849      	lsrs	r1, r1, #1
 8009e7e:	2000      	movs	r0, #0
 8009e80:	460c      	mov	r4, r1
 8009e82:	4605      	mov	r5, r0
 8009e84:	eb12 0804 	adds.w	r8, r2, r4
 8009e88:	eb43 0905 	adc.w	r9, r3, r5
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	469a      	mov	sl, r3
 8009e94:	4693      	mov	fp, r2
 8009e96:	4652      	mov	r2, sl
 8009e98:	465b      	mov	r3, fp
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	f7f6 fe01 	bl	8000aa4 <__aeabi_uldivmod>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eb0:	d308      	bcc.n	8009ec4 <UART_SetConfig+0x430>
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009eb8:	d204      	bcs.n	8009ec4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a3a      	ldr	r2, [r7, #32]
 8009ec0:	60da      	str	r2, [r3, #12]
 8009ec2:	e0ce      	b.n	800a062 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009eca:	e0ca      	b.n	800a062 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ed4:	d166      	bne.n	8009fa4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d827      	bhi.n	8009f2e <UART_SetConfig+0x49a>
 8009ede:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee4 <UART_SetConfig+0x450>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f09 	.word	0x08009f09
 8009ee8:	08009f11 	.word	0x08009f11
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	08009f2f 	.word	0x08009f2f
 8009ef4:	08009f1f 	.word	0x08009f1f
 8009ef8:	08009f2f 	.word	0x08009f2f
 8009efc:	08009f2f 	.word	0x08009f2f
 8009f00:	08009f2f 	.word	0x08009f2f
 8009f04:	08009f27 	.word	0x08009f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f08:	f7fd fa06 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8009f0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f0e:	e014      	b.n	8009f3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f10:	f7fd fa18 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8009f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f16:	e010      	b.n	8009f3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f18:	4b4e      	ldr	r3, [pc, #312]	@ (800a054 <UART_SetConfig+0x5c0>)
 8009f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f1c:	e00d      	b.n	8009f3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f1e:	f7fd f98d 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8009f22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f24:	e009      	b.n	8009f3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f2c:	e005      	b.n	8009f3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8090 	beq.w	800a062 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f46:	4a44      	ldr	r2, [pc, #272]	@ (800a058 <UART_SetConfig+0x5c4>)
 8009f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f54:	005a      	lsls	r2, r3, #1
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	085b      	lsrs	r3, r3, #1
 8009f5c:	441a      	add	r2, r3
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	2b0f      	cmp	r3, #15
 8009f6c:	d916      	bls.n	8009f9c <UART_SetConfig+0x508>
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f74:	d212      	bcs.n	8009f9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f023 030f 	bic.w	r3, r3, #15
 8009f7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	8bfb      	ldrh	r3, [r7, #30]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	8bfa      	ldrh	r2, [r7, #30]
 8009f98:	60da      	str	r2, [r3, #12]
 8009f9a:	e062      	b.n	800a062 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fa2:	e05e      	b.n	800a062 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fa4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d828      	bhi.n	8009ffe <UART_SetConfig+0x56a>
 8009fac:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <UART_SetConfig+0x520>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	08009fe1 	.word	0x08009fe1
 8009fbc:	08009fe9 	.word	0x08009fe9
 8009fc0:	08009fff 	.word	0x08009fff
 8009fc4:	08009fef 	.word	0x08009fef
 8009fc8:	08009fff 	.word	0x08009fff
 8009fcc:	08009fff 	.word	0x08009fff
 8009fd0:	08009fff 	.word	0x08009fff
 8009fd4:	08009ff7 	.word	0x08009ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd8:	f7fd f99e 	bl	8007318 <HAL_RCC_GetPCLK1Freq>
 8009fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fde:	e014      	b.n	800a00a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fe0:	f7fd f9b0 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8009fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fe6:	e010      	b.n	800a00a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fe8:	4b1a      	ldr	r3, [pc, #104]	@ (800a054 <UART_SetConfig+0x5c0>)
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fec:	e00d      	b.n	800a00a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fee:	f7fd f925 	bl	800723c <HAL_RCC_GetSysClockFreq>
 8009ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ff4:	e009      	b.n	800a00a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ffc:	e005      	b.n	800a00a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a008:	bf00      	nop
    }

    if (pclk != 0U)
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d028      	beq.n	800a062 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a014:	4a10      	ldr	r2, [pc, #64]	@ (800a058 <UART_SetConfig+0x5c4>)
 800a016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a01a:	461a      	mov	r2, r3
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	085b      	lsrs	r3, r3, #1
 800a028:	441a      	add	r2, r3
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a032:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d910      	bls.n	800a05c <UART_SetConfig+0x5c8>
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a040:	d20c      	bcs.n	800a05c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	b29a      	uxth	r2, r3
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60da      	str	r2, [r3, #12]
 800a04c:	e009      	b.n	800a062 <UART_SetConfig+0x5ce>
 800a04e:	bf00      	nop
 800a050:	40008000 	.word	0x40008000
 800a054:	00f42400 	.word	0x00f42400
 800a058:	0800fe98 	.word	0x0800fe98
      }
      else
      {
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2201      	movs	r2, #1
 800a066:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2200      	movs	r2, #0
 800a07c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a07e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a082:	4618      	mov	r0, r3
 800a084:	3730      	adds	r7, #48	@ 0x30
 800a086:	46bd      	mov	sp, r7
 800a088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a08c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00a      	beq.n	800a0b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00a      	beq.n	800a0fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	430a      	orrs	r2, r1
 800a11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a18a:	d10a      	bne.n	800a1a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b098      	sub	sp, #96	@ 0x60
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1e0:	f7f9 fa00 	bl	80035e4 <HAL_GetTick>
 800a1e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0308 	and.w	r3, r3, #8
 800a1f0:	2b08      	cmp	r3, #8
 800a1f2:	d12f      	bne.n	800a254 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f88e 	bl	800a324 <UART_WaitOnFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d022      	beq.n	800a254 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a222:	653b      	str	r3, [r7, #80]	@ 0x50
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a22e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e6      	bne.n	800a20e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2220      	movs	r2, #32
 800a244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e063      	b.n	800a31c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d149      	bne.n	800a2f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a26a:	2200      	movs	r2, #0
 800a26c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f857 	bl	800a324 <UART_WaitOnFlagUntilTimeout>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d03c      	beq.n	800a2f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	e853 3f00 	ldrex	r3, [r3]
 800a288:	623b      	str	r3, [r7, #32]
   return(result);
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a29a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a29c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a2:	e841 2300 	strex	r3, r2, [r1]
 800a2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1e6      	bne.n	800a27c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3308      	adds	r3, #8
 800a2b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ce:	61fa      	str	r2, [r7, #28]
 800a2d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	69b9      	ldr	r1, [r7, #24]
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	617b      	str	r3, [r7, #20]
   return(result);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e5      	bne.n	800a2ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e012      	b.n	800a31c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3758      	adds	r7, #88	@ 0x58
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	4613      	mov	r3, r2
 800a332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a334:	e04f      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33c:	d04b      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a33e:	f7f9 f951 	bl	80035e4 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d302      	bcc.n	800a354 <UART_WaitOnFlagUntilTimeout+0x30>
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e04e      	b.n	800a3f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0304 	and.w	r3, r3, #4
 800a362:	2b00      	cmp	r3, #0
 800a364:	d037      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b80      	cmp	r3, #128	@ 0x80
 800a36a:	d034      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b40      	cmp	r3, #64	@ 0x40
 800a370:	d031      	beq.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	f003 0308 	and.w	r3, r3, #8
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d110      	bne.n	800a3a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2208      	movs	r2, #8
 800a386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 f95b 	bl	800a644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2208      	movs	r2, #8
 800a392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e029      	b.n	800a3f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3b0:	d111      	bne.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f941 	bl	800a644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e00f      	b.n	800a3f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	69da      	ldr	r2, [r3, #28]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	bf0c      	ite	eq
 800a3e6:	2301      	moveq	r3, #1
 800a3e8:	2300      	movne	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d0a0      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a400:	b480      	push	{r7}
 800a402:	b0a3      	sub	sp, #140	@ 0x8c
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	88fa      	ldrh	r2, [r7, #6]
 800a418:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a432:	d10e      	bne.n	800a452 <UART_Start_Receive_IT+0x52>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d105      	bne.n	800a448 <UART_Start_Receive_IT+0x48>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a442:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a446:	e02d      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	22ff      	movs	r2, #255	@ 0xff
 800a44c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a450:	e028      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10d      	bne.n	800a476 <UART_Start_Receive_IT+0x76>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <UART_Start_Receive_IT+0x6c>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	22ff      	movs	r2, #255	@ 0xff
 800a466:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a46a:	e01b      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	227f      	movs	r2, #127	@ 0x7f
 800a470:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a474:	e016      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a47e:	d10d      	bne.n	800a49c <UART_Start_Receive_IT+0x9c>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d104      	bne.n	800a492 <UART_Start_Receive_IT+0x92>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	227f      	movs	r2, #127	@ 0x7f
 800a48c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a490:	e008      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	223f      	movs	r2, #63	@ 0x3f
 800a496:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a49a:	e003      	b.n	800a4a4 <UART_Start_Receive_IT+0xa4>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2222      	movs	r2, #34	@ 0x22
 800a4b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a4c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4c6:	f043 0301 	orr.w	r3, r3, #1
 800a4ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a4d8:	673a      	str	r2, [r7, #112]	@ 0x70
 800a4da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a4de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a4e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e3      	bne.n	800a4b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f4:	d14f      	bne.n	800a596 <UART_Start_Receive_IT+0x196>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4fc:	88fa      	ldrh	r2, [r7, #6]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d349      	bcc.n	800a596 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a50a:	d107      	bne.n	800a51c <UART_Start_Receive_IT+0x11c>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	4a47      	ldr	r2, [pc, #284]	@ (800a634 <UART_Start_Receive_IT+0x234>)
 800a518:	675a      	str	r2, [r3, #116]	@ 0x74
 800a51a:	e002      	b.n	800a522 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a46      	ldr	r2, [pc, #280]	@ (800a638 <UART_Start_Receive_IT+0x238>)
 800a520:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d01a      	beq.n	800a560 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a53a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a53e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a54c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a54e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e4      	bne.n	800a52a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3308      	adds	r3, #8
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a576:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a580:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a582:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e5      	bne.n	800a560 <UART_Start_Receive_IT+0x160>
 800a594:	e046      	b.n	800a624 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a59e:	d107      	bne.n	800a5b0 <UART_Start_Receive_IT+0x1b0>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d103      	bne.n	800a5b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4a24      	ldr	r2, [pc, #144]	@ (800a63c <UART_Start_Receive_IT+0x23c>)
 800a5ac:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5ae:	e002      	b.n	800a5b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4a23      	ldr	r2, [pc, #140]	@ (800a640 <UART_Start_Receive_IT+0x240>)
 800a5b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d019      	beq.n	800a5f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ce:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a5d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5de:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e6      	bne.n	800a5be <UART_Start_Receive_IT+0x1be>
 800a5f0:	e018      	b.n	800a624 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f043 0320 	orr.w	r3, r3, #32
 800a606:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	461a      	mov	r2, r3
 800a60e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a610:	623b      	str	r3, [r7, #32]
 800a612:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	69f9      	ldr	r1, [r7, #28]
 800a616:	6a3a      	ldr	r2, [r7, #32]
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e6      	bne.n	800a5f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	378c      	adds	r7, #140	@ 0x8c
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	0800ae61 	.word	0x0800ae61
 800a638:	0800aafd 	.word	0x0800aafd
 800a63c:	0800a945 	.word	0x0800a945
 800a640:	0800a78d 	.word	0x0800a78d

0800a644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b095      	sub	sp, #84	@ 0x54
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a66a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a66c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e6      	bne.n	800a64c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3308      	adds	r3, #8
 800a684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a694:	f023 0301 	bic.w	r3, r3, #1
 800a698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e3      	bne.n	800a67e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d118      	bne.n	800a6f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	f023 0310 	bic.w	r3, r3, #16
 800a6d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	6979      	ldr	r1, [r7, #20]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	e841 2300 	strex	r3, r2, [r1]
 800a6e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e6      	bne.n	800a6be <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a704:	bf00      	nop
 800a706:	3754      	adds	r7, #84	@ 0x54
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff f99e 	bl	8009a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	60bb      	str	r3, [r7, #8]
   return(result);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	61bb      	str	r3, [r7, #24]
 800a75c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6979      	ldr	r1, [r7, #20]
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	613b      	str	r3, [r7, #16]
   return(result);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e6      	bne.n	800a73c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff f969 	bl	8009a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a782:	bf00      	nop
 800a784:	3720      	adds	r7, #32
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b09c      	sub	sp, #112	@ 0x70
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a79a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7a4:	2b22      	cmp	r3, #34	@ 0x22
 800a7a6:	f040 80be 	bne.w	800a926 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7b8:	b2d9      	uxtb	r1, r3
 800a7ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7c4:	400a      	ands	r2, r1
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f040 80a1 	bne.w	800a936 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a812:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a814:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a818:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e6      	bne.n	800a7f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3308      	adds	r3, #8
 800a82c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a838:	f023 0301 	bic.w	r3, r3, #1
 800a83c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3308      	adds	r3, #8
 800a844:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a846:	647a      	str	r2, [r7, #68]	@ 0x44
 800a848:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a84c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a84e:	e841 2300 	strex	r3, r2, [r1]
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e5      	bne.n	800a826 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a33      	ldr	r2, [pc, #204]	@ (800a940 <UART_RxISR_8BIT+0x1b4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d01f      	beq.n	800a8b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d018      	beq.n	800a8b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	e853 3f00 	ldrex	r3, [r3]
 800a892:	623b      	str	r3, [r7, #32]
   return(result);
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a89a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ac:	e841 2300 	strex	r3, r2, [r1]
 800a8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1e6      	bne.n	800a886 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d12e      	bne.n	800a91e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0310 	bic.w	r3, r3, #16
 800a8da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e4:	61fb      	str	r3, [r7, #28]
 800a8e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e6      	bne.n	800a8c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	69db      	ldr	r3, [r3, #28]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b10      	cmp	r3, #16
 800a904:	d103      	bne.n	800a90e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2210      	movs	r2, #16
 800a90c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff f8b0 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a91c:	e00b      	b.n	800a936 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7f6 fddc 	bl	80014dc <HAL_UART_RxCpltCallback>
}
 800a924:	e007      	b.n	800a936 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0208 	orr.w	r2, r2, #8
 800a934:	619a      	str	r2, [r3, #24]
}
 800a936:	bf00      	nop
 800a938:	3770      	adds	r7, #112	@ 0x70
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	40008000 	.word	0x40008000

0800a944 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b09c      	sub	sp, #112	@ 0x70
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a952:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a95c:	2b22      	cmp	r3, #34	@ 0x22
 800a95e:	f040 80be 	bne.w	800aade <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a968:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a970:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a972:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a976:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a97a:	4013      	ands	r3, r2
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a980:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a986:	1c9a      	adds	r2, r3, #2
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a992:	b29b      	uxth	r3, r3
 800a994:	3b01      	subs	r3, #1
 800a996:	b29a      	uxth	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f040 80a1 	bne.w	800aaee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a9ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e6      	bne.n	800a9ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	f023 0301 	bic.w	r3, r3, #1
 800a9f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e5      	bne.n	800a9de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a33      	ldr	r2, [pc, #204]	@ (800aaf8 <UART_RxISR_16BIT+0x1b4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d01f      	beq.n	800aa70 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d018      	beq.n	800aa70 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa5e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e6      	bne.n	800aa3e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d12e      	bne.n	800aad6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	e853 3f00 	ldrex	r3, [r3]
 800aa8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f023 0310 	bic.w	r3, r3, #16
 800aa92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa9c:	61bb      	str	r3, [r7, #24]
 800aa9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa0:	6979      	ldr	r1, [r7, #20]
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	e841 2300 	strex	r3, r2, [r1]
 800aaa8:	613b      	str	r3, [r7, #16]
   return(result);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1e6      	bne.n	800aa7e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	f003 0310 	and.w	r3, r3, #16
 800aaba:	2b10      	cmp	r3, #16
 800aabc:	d103      	bne.n	800aac6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2210      	movs	r2, #16
 800aac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7fe ffd4 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aad4:	e00b      	b.n	800aaee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7f6 fd00 	bl	80014dc <HAL_UART_RxCpltCallback>
}
 800aadc:	e007      	b.n	800aaee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	699a      	ldr	r2, [r3, #24]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f042 0208 	orr.w	r2, r2, #8
 800aaec:	619a      	str	r2, [r3, #24]
}
 800aaee:	bf00      	nop
 800aaf0:	3770      	adds	r7, #112	@ 0x70
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40008000 	.word	0x40008000

0800aafc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b0ac      	sub	sp, #176	@ 0xb0
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab32:	2b22      	cmp	r3, #34	@ 0x22
 800ab34:	f040 8183 	bne.w	800ae3e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab3e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab42:	e126      	b.n	800ad92 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab4e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ab52:	b2d9      	uxtb	r1, r3
 800ab54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab5e:	400a      	ands	r2, r1
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab8e:	f003 0307 	and.w	r3, r3, #7
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d053      	beq.n	800ac3e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d011      	beq.n	800abc6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800aba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2201      	movs	r2, #1
 800abb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abbc:	f043 0201 	orr.w	r2, r3, #1
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d011      	beq.n	800abf6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800abd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2202      	movs	r2, #2
 800abe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abec:	f043 0204 	orr.w	r2, r3, #4
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d011      	beq.n	800ac26 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2204      	movs	r2, #4
 800ac14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac1c:	f043 0202 	orr.w	r2, r3, #2
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7fe ff19 	bl	8009a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 80a3 	bne.w	800ad92 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac54:	e853 3f00 	ldrex	r3, [r3]
 800ac58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac70:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ac74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ac7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e4      	bne.n	800ac4c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ac92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3308      	adds	r3, #8
 800aca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acaa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800acac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800acb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800acb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e1      	bne.n	800ac82 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a60      	ldr	r2, [pc, #384]	@ (800ae58 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d021      	beq.n	800ad20 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01a      	beq.n	800ad20 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acf2:	e853 3f00 	ldrex	r3, [r3]
 800acf6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800acf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800acfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad0c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad14:	e841 2300 	strex	r3, r2, [r1]
 800ad18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e4      	bne.n	800acea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d130      	bne.n	800ad8a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad36:	e853 3f00 	ldrex	r3, [r3]
 800ad3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3e:	f023 0310 	bic.w	r3, r3, #16
 800ad42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad50:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e4      	bne.n	800ad2e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	f003 0310 	and.w	r3, r3, #16
 800ad6e:	2b10      	cmp	r3, #16
 800ad70:	d103      	bne.n	800ad7a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2210      	movs	r2, #16
 800ad78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7fe fe7a 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ad88:	e00e      	b.n	800ada8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7f6 fba6 	bl	80014dc <HAL_UART_RxCpltCallback>
        break;
 800ad90:	e00a      	b.n	800ada8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad92:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d006      	beq.n	800ada8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800ad9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad9e:	f003 0320 	and.w	r3, r3, #32
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f47f aece 	bne.w	800ab44 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800adb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d049      	beq.n	800ae4e <UART_RxISR_8BIT_FIFOEN+0x352>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adc0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d242      	bcs.n	800ae4e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3308      	adds	r3, #8
 800adce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	e853 3f00 	ldrex	r3, [r3]
 800add6:	61fb      	str	r3, [r7, #28]
   return(result);
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3308      	adds	r3, #8
 800ade8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800adec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e3      	bne.n	800adc8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a16      	ldr	r2, [pc, #88]	@ (800ae5c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ae04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f043 0320 	orr.w	r3, r3, #32
 800ae1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6979      	ldr	r1, [r7, #20]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	613b      	str	r3, [r7, #16]
   return(result);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e4      	bne.n	800ae06 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae3c:	e007      	b.n	800ae4e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	699a      	ldr	r2, [r3, #24]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f042 0208 	orr.w	r2, r2, #8
 800ae4c:	619a      	str	r2, [r3, #24]
}
 800ae4e:	bf00      	nop
 800ae50:	37b0      	adds	r7, #176	@ 0xb0
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	40008000 	.word	0x40008000
 800ae5c:	0800a78d 	.word	0x0800a78d

0800ae60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b0ae      	sub	sp, #184	@ 0xb8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae6e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae96:	2b22      	cmp	r3, #34	@ 0x22
 800ae98:	f040 8187 	bne.w	800b1aa <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aea2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aea6:	e12a      	b.n	800b0fe <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aeba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aebe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800aec2:	4013      	ands	r3, r2
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aeca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed0:	1c9a      	adds	r2, r3, #2
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3b01      	subs	r3, #1
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d053      	beq.n	800afa6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aefe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d011      	beq.n	800af2e <UART_RxISR_16BIT_FIFOEN+0xce>
 800af0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00b      	beq.n	800af2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2201      	movs	r2, #1
 800af1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af24:	f043 0201 	orr.w	r2, r3, #1
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d011      	beq.n	800af5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00b      	beq.n	800af5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2202      	movs	r2, #2
 800af4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af54:	f043 0204 	orr.w	r2, r3, #4
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d011      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800af6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2204      	movs	r2, #4
 800af7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af84:	f043 0202 	orr.w	r2, r3, #2
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe fd65 	bl	8009a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afac:	b29b      	uxth	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f040 80a5 	bne.w	800b0fe <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800afc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afda:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800afde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800afe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e2      	bne.n	800afb4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800affe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b004:	f023 0301 	bic.w	r3, r3, #1
 800b008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3308      	adds	r3, #8
 800b012:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b016:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b018:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b01c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b01e:	e841 2300 	strex	r3, r2, [r1]
 800b022:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1e1      	bne.n	800afee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a60      	ldr	r2, [pc, #384]	@ (800b1c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d021      	beq.n	800b08c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d01a      	beq.n	800b08c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b05e:	e853 3f00 	ldrex	r3, [r3]
 800b062:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b066:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b06a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	461a      	mov	r2, r3
 800b074:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b07a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b07e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e4      	bne.n	800b056 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d130      	bne.n	800b0f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	e853 3f00 	ldrex	r3, [r3]
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0aa:	f023 0310 	bic.w	r3, r3, #16
 800b0ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e4      	bne.n	800b09a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f003 0310 	and.w	r3, r3, #16
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d103      	bne.n	800b0e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2210      	movs	r2, #16
 800b0e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7fe fcc4 	bl	8009a7c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b0f4:	e00e      	b.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7f6 f9f0 	bl	80014dc <HAL_UART_RxCpltCallback>
        break;
 800b0fc:	e00a      	b.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b0fe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b10a:	f003 0320 	and.w	r3, r3, #32
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f47f aeca 	bne.w	800aea8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b11a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b11e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b122:	2b00      	cmp	r3, #0
 800b124:	d049      	beq.n	800b1ba <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b12c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b130:	429a      	cmp	r2, r3
 800b132:	d242      	bcs.n	800b1ba <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3308      	adds	r3, #8
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13e:	e853 3f00 	ldrex	r3, [r3]
 800b142:	623b      	str	r3, [r7, #32]
   return(result);
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b14a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3308      	adds	r3, #8
 800b154:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b158:	633a      	str	r2, [r7, #48]	@ 0x30
 800b15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b160:	e841 2300 	strex	r3, r2, [r1]
 800b164:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e3      	bne.n	800b134 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a16      	ldr	r2, [pc, #88]	@ (800b1c8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b170:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	e853 3f00 	ldrex	r3, [r3]
 800b17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f043 0320 	orr.w	r3, r3, #32
 800b186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b198:	69b9      	ldr	r1, [r7, #24]
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	e841 2300 	strex	r3, r2, [r1]
 800b1a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1e4      	bne.n	800b172 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1a8:	e007      	b.n	800b1ba <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0208 	orr.w	r2, r2, #8
 800b1b8:	619a      	str	r2, [r3, #24]
}
 800b1ba:	bf00      	nop
 800b1bc:	37b8      	adds	r7, #184	@ 0xb8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	40008000 	.word	0x40008000
 800b1c8:	0800a945 	.word	0x0800a945

0800b1cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b216:	2b01      	cmp	r3, #1
 800b218:	d101      	bne.n	800b21e <HAL_UARTEx_DisableFifoMode+0x16>
 800b21a:	2302      	movs	r3, #2
 800b21c:	e027      	b.n	800b26e <HAL_UARTEx_DisableFifoMode+0x66>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2224      	movs	r2, #36	@ 0x24
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f022 0201 	bic.w	r2, r2, #1
 800b244:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b24c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2220      	movs	r2, #32
 800b260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b28e:	2302      	movs	r3, #2
 800b290:	e02d      	b.n	800b2ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2224      	movs	r2, #36	@ 0x24
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f022 0201 	bic.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f850 	bl	800b374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b306:	2b01      	cmp	r3, #1
 800b308:	d101      	bne.n	800b30e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b30a:	2302      	movs	r3, #2
 800b30c:	e02d      	b.n	800b36a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2224      	movs	r2, #36	@ 0x24
 800b31a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f022 0201 	bic.w	r2, r2, #1
 800b334:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	430a      	orrs	r2, r1
 800b348:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f812 	bl	800b374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2220      	movs	r2, #32
 800b35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b380:	2b00      	cmp	r3, #0
 800b382:	d108      	bne.n	800b396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b394:	e031      	b.n	800b3fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b396:	2308      	movs	r3, #8
 800b398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b39a:	2308      	movs	r3, #8
 800b39c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	0e5b      	lsrs	r3, r3, #25
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	0f5b      	lsrs	r3, r3, #29
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	f003 0307 	and.w	r3, r3, #7
 800b3bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	7b3a      	ldrb	r2, [r7, #12]
 800b3c2:	4911      	ldr	r1, [pc, #68]	@ (800b408 <UARTEx_SetNbDataToProcess+0x94>)
 800b3c4:	5c8a      	ldrb	r2, [r1, r2]
 800b3c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3ca:	7b3a      	ldrb	r2, [r7, #12]
 800b3cc:	490f      	ldr	r1, [pc, #60]	@ (800b40c <UARTEx_SetNbDataToProcess+0x98>)
 800b3ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	7b7a      	ldrb	r2, [r7, #13]
 800b3e0:	4909      	ldr	r1, [pc, #36]	@ (800b408 <UARTEx_SetNbDataToProcess+0x94>)
 800b3e2:	5c8a      	ldrb	r2, [r1, r2]
 800b3e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3e8:	7b7a      	ldrb	r2, [r7, #13]
 800b3ea:	4908      	ldr	r1, [pc, #32]	@ (800b40c <UARTEx_SetNbDataToProcess+0x98>)
 800b3ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	0800feb0 	.word	0x0800feb0
 800b40c:	0800feb8 	.word	0x0800feb8

0800b410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b420:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b424:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3714      	adds	r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b43e:	b480      	push	{r7}
 800b440:	b085      	sub	sp, #20
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b446:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b44a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b452:	b29a      	uxth	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	b29b      	uxth	r3, r3
 800b458:	43db      	mvns	r3, r3
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4013      	ands	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	1d3b      	adds	r3, r7, #4
 800b47e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b0a7      	sub	sp, #156	@ 0x9c
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b4d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4d6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	78db      	ldrb	r3, [r3, #3]
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d81f      	bhi.n	800b522 <USB_ActivateEndpoint+0x72>
 800b4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e8 <USB_ActivateEndpoint+0x38>)
 800b4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e8:	0800b4f9 	.word	0x0800b4f9
 800b4ec:	0800b515 	.word	0x0800b515
 800b4f0:	0800b52b 	.word	0x0800b52b
 800b4f4:	0800b507 	.word	0x0800b507
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b4f8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b4fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b500:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b504:	e012      	b.n	800b52c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b506:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b50a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b50e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b512:	e00b      	b.n	800b52c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b514:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b518:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b51c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800b520:	e004      	b.n	800b52c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800b528:	e000      	b.n	800b52c <USB_ActivateEndpoint+0x7c>
      break;
 800b52a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	441a      	add	r2, r3
 800b536:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b53a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b53e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	b21b      	sxth	r3, r3
 800b55e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b566:	b21a      	sxth	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b21b      	sxth	r3, r3
 800b56e:	4313      	orrs	r3, r2
 800b570:	b21b      	sxth	r3, r3
 800b572:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	441a      	add	r2, r3
 800b580:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b58c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b594:	b29b      	uxth	r3, r3
 800b596:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	7b1b      	ldrb	r3, [r3, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 8180 	bne.w	800b8a2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 8084 	beq.w	800b6b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	61bb      	str	r3, [r7, #24]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	4413      	add	r3, r2
 800b5be:	61bb      	str	r3, [r7, #24]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	00da      	lsls	r2, r3, #3
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	88db      	ldrh	r3, [r3, #6]
 800b5d4:	085b      	lsrs	r3, r3, #1
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	827b      	strh	r3, [r7, #18]
 800b5ee:	8a7b      	ldrh	r3, [r7, #18]
 800b5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01b      	beq.n	800b630 <USB_ActivateEndpoint+0x180>
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b60a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b60e:	823b      	strh	r3, [r7, #16]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	441a      	add	r2, r3
 800b61a:	8a3b      	ldrh	r3, [r7, #16]
 800b61c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b628:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	78db      	ldrb	r3, [r3, #3]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d020      	beq.n	800b67a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	b29b      	uxth	r3, r3
 800b646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b64a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b64e:	81bb      	strh	r3, [r7, #12]
 800b650:	89bb      	ldrh	r3, [r7, #12]
 800b652:	f083 0320 	eor.w	r3, r3, #32
 800b656:	81bb      	strh	r3, [r7, #12]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	441a      	add	r2, r3
 800b662:	89bb      	ldrh	r3, [r7, #12]
 800b664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b66c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b674:	b29b      	uxth	r3, r3
 800b676:	8013      	strh	r3, [r2, #0]
 800b678:	e3f9      	b.n	800be6e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b68c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b690:	81fb      	strh	r3, [r7, #14]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	441a      	add	r2, r3
 800b69c:	89fb      	ldrh	r3, [r7, #14]
 800b69e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	8013      	strh	r3, [r2, #0]
 800b6b2:	e3dc      	b.n	800be6e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	4413      	add	r3, r2
 800b6c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	00da      	lsls	r2, r3, #3
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	88db      	ldrh	r3, [r3, #6]
 800b6dc:	085b      	lsrs	r3, r3, #1
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	4413      	add	r3, r2
 800b6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	00da      	lsls	r2, r3, #3
 800b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b704:	4413      	add	r3, r2
 800b706:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	b29b      	uxth	r3, r3
 800b712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b716:	b29a      	uxth	r2, r3
 800b718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <USB_ActivateEndpoint+0x28a>
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	b29b      	uxth	r3, r3
 800b72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b732:	b29a      	uxth	r2, r3
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	801a      	strh	r2, [r3, #0]
 800b738:	e041      	b.n	800b7be <USB_ActivateEndpoint+0x30e>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b740:	d81c      	bhi.n	800b77c <USB_ActivateEndpoint+0x2cc>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d004      	beq.n	800b762 <USB_ActivateEndpoint+0x2b2>
 800b758:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b75c:	3301      	adds	r3, #1
 800b75e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	b29a      	uxth	r2, r3
 800b768:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	029b      	lsls	r3, r3, #10
 800b770:	b29b      	uxth	r3, r3
 800b772:	4313      	orrs	r3, r2
 800b774:	b29a      	uxth	r2, r3
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	801a      	strh	r2, [r3, #0]
 800b77a:	e020      	b.n	800b7be <USB_ActivateEndpoint+0x30e>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	095b      	lsrs	r3, r3, #5
 800b782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 031f 	and.w	r3, r3, #31
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d104      	bne.n	800b79c <USB_ActivateEndpoint+0x2ec>
 800b792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b796:	3b01      	subs	r3, #1
 800b798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	029b      	lsls	r3, r3, #10
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b7cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d01b      	beq.n	800b80e <USB_ActivateEndpoint+0x35e>
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7ec:	843b      	strh	r3, [r7, #32]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	441a      	add	r2, r3
 800b7f8:	8c3b      	ldrh	r3, [r7, #32]
 800b7fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d124      	bne.n	800b860 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b82c:	83bb      	strh	r3, [r7, #28]
 800b82e:	8bbb      	ldrh	r3, [r7, #28]
 800b830:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b834:	83bb      	strh	r3, [r7, #28]
 800b836:	8bbb      	ldrh	r3, [r7, #28]
 800b838:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b83c:	83bb      	strh	r3, [r7, #28]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	441a      	add	r2, r3
 800b848:	8bbb      	ldrh	r3, [r7, #28]
 800b84a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b84e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	8013      	strh	r3, [r2, #0]
 800b85e:	e306      	b.n	800be6e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b876:	83fb      	strh	r3, [r7, #30]
 800b878:	8bfb      	ldrh	r3, [r7, #30]
 800b87a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b87e:	83fb      	strh	r3, [r7, #30]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	441a      	add	r2, r3
 800b88a:	8bfb      	ldrh	r3, [r7, #30]
 800b88c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	8013      	strh	r3, [r2, #0]
 800b8a0:	e2e5      	b.n	800be6e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	78db      	ldrb	r3, [r3, #3]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d11e      	bne.n	800b8e8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8c0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	441a      	add	r2, r3
 800b8ce:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800b8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	8013      	strh	r3, [r2, #0]
 800b8e6:	e01d      	b.n	800b924 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b8fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8fe:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	441a      	add	r2, r3
 800b90c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b91c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b920:	b29b      	uxth	r3, r3
 800b922:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b92e:	b29b      	uxth	r3, r3
 800b930:	461a      	mov	r2, r3
 800b932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b934:	4413      	add	r3, r2
 800b936:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	00da      	lsls	r2, r3, #3
 800b93e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b940:	4413      	add	r3, r2
 800b942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b946:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	891b      	ldrh	r3, [r3, #8]
 800b94c:	085b      	lsrs	r3, r3, #1
 800b94e:	b29b      	uxth	r3, r3
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b956:	801a      	strh	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b962:	b29b      	uxth	r3, r3
 800b964:	461a      	mov	r2, r3
 800b966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b968:	4413      	add	r3, r2
 800b96a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	00da      	lsls	r2, r3, #3
 800b972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b974:	4413      	add	r3, r2
 800b976:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b97a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	895b      	ldrh	r3, [r3, #10]
 800b980:	085b      	lsrs	r3, r3, #1
 800b982:	b29b      	uxth	r3, r3
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	b29a      	uxth	r2, r3
 800b988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b98a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	785b      	ldrb	r3, [r3, #1]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 81af 	bne.w	800bcf4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800b9a6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800b9aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d01d      	beq.n	800b9ee <USB_ActivateEndpoint+0x53e>
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9c8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	441a      	add	r2, r3
 800b9d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800b9da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800b9fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800ba02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d01d      	beq.n	800ba46 <USB_ActivateEndpoint+0x596>
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba20:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	441a      	add	r2, r3
 800ba2e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800ba32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d16b      	bne.n	800bb26 <USB_ActivateEndpoint+0x676>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba5e:	4413      	add	r3, r2
 800ba60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	00da      	lsls	r2, r3, #3
 800ba68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba80:	801a      	strh	r2, [r3, #0]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <USB_ActivateEndpoint+0x5f0>
 800ba8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba9c:	801a      	strh	r2, [r3, #0]
 800ba9e:	e05d      	b.n	800bb5c <USB_ActivateEndpoint+0x6ac>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	2b3e      	cmp	r3, #62	@ 0x3e
 800baa6:	d81c      	bhi.n	800bae2 <USB_ActivateEndpoint+0x632>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	085b      	lsrs	r3, r3, #1
 800baae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <USB_ActivateEndpoint+0x618>
 800babe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bac2:	3301      	adds	r3, #1
 800bac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29a      	uxth	r2, r3
 800bace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	029b      	lsls	r3, r3, #10
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4313      	orrs	r3, r2
 800bada:	b29a      	uxth	r2, r3
 800badc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bade:	801a      	strh	r2, [r3, #0]
 800bae0:	e03c      	b.n	800bb5c <USB_ActivateEndpoint+0x6ac>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	095b      	lsrs	r3, r3, #5
 800bae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	f003 031f 	and.w	r3, r3, #31
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <USB_ActivateEndpoint+0x652>
 800baf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bafc:	3b01      	subs	r3, #1
 800bafe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	029b      	lsls	r3, r3, #10
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	4313      	orrs	r3, r2
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb22:	801a      	strh	r2, [r3, #0]
 800bb24:	e01a      	b.n	800bb5c <USB_ActivateEndpoint+0x6ac>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	785b      	ldrb	r3, [r3, #1]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d116      	bne.n	800bb5c <USB_ActivateEndpoint+0x6ac>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb3e:	4413      	add	r3, r2
 800bb40:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	00da      	lsls	r2, r3, #3
 800bb48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bb50:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb5a:	801a      	strh	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d16b      	bne.n	800bc40 <USB_ActivateEndpoint+0x790>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	461a      	mov	r2, r3
 800bb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb78:	4413      	add	r3, r2
 800bb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	00da      	lsls	r2, r3, #3
 800bb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb84:	4413      	add	r3, r2
 800bb86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9a:	801a      	strh	r2, [r3, #0]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10a      	bne.n	800bbba <USB_ActivateEndpoint+0x70a>
 800bba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	e05b      	b.n	800bc72 <USB_ActivateEndpoint+0x7c2>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbc0:	d81c      	bhi.n	800bbfc <USB_ActivateEndpoint+0x74c>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	085b      	lsrs	r3, r3, #1
 800bbc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d004      	beq.n	800bbe2 <USB_ActivateEndpoint+0x732>
 800bbd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bbdc:	3301      	adds	r3, #1
 800bbde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	029b      	lsls	r3, r3, #10
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	801a      	strh	r2, [r3, #0]
 800bbfa:	e03a      	b.n	800bc72 <USB_ActivateEndpoint+0x7c2>
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	095b      	lsrs	r3, r3, #5
 800bc02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	f003 031f 	and.w	r3, r3, #31
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d104      	bne.n	800bc1c <USB_ActivateEndpoint+0x76c>
 800bc12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc16:	3b01      	subs	r3, #1
 800bc18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	029b      	lsls	r3, r3, #10
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3c:	801a      	strh	r2, [r3, #0]
 800bc3e:	e018      	b.n	800bc72 <USB_ActivateEndpoint+0x7c2>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d114      	bne.n	800bc72 <USB_ActivateEndpoint+0x7c2>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc54:	4413      	add	r3, r2
 800bc56:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	00da      	lsls	r2, r3, #3
 800bc5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc60:	4413      	add	r3, r2
 800bc62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc66:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc70:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc88:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bc8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc90:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bc92:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bc94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc98:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	441a      	add	r2, r3
 800bca4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcd0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	441a      	add	r2, r3
 800bcdc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bcde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	8013      	strh	r3, [r2, #0]
 800bcf2:	e0bc      	b.n	800be6e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800bd04:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bd08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d01d      	beq.n	800bd4c <USB_ActivateEndpoint+0x89c>
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	441a      	add	r2, r3
 800bd34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800bd5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800bd60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01d      	beq.n	800bda4 <USB_ActivateEndpoint+0x8f4>
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	441a      	add	r2, r3
 800bd8c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800bd90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	78db      	ldrb	r3, [r3, #3]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d024      	beq.n	800bdf6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdc2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bdc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bdca:	f083 0320 	eor.w	r3, r3, #32
 800bdce:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	441a      	add	r2, r3
 800bddc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800bde0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bde4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bde8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	8013      	strh	r3, [r2, #0]
 800bdf4:	e01d      	b.n	800be32 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be0c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	441a      	add	r2, r3
 800be1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800be1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2e:	b29b      	uxth	r3, r3
 800be30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	b29b      	uxth	r3, r3
 800be40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be48:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	441a      	add	r2, r3
 800be56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800be5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800be6e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800be72:	4618      	mov	r0, r3
 800be74:	379c      	adds	r7, #156	@ 0x9c
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop

0800be80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be80:	b480      	push	{r7}
 800be82:	b08d      	sub	sp, #52	@ 0x34
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	7b1b      	ldrb	r3, [r3, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f040 808e 	bne.w	800bfb0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d044      	beq.n	800bf26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	81bb      	strh	r3, [r7, #12]
 800beaa:	89bb      	ldrh	r3, [r7, #12]
 800beac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01b      	beq.n	800beec <USB_DeactivateEndpoint+0x6c>
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beca:	817b      	strh	r3, [r7, #10]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	441a      	add	r2, r3
 800bed6:	897b      	ldrh	r3, [r7, #10]
 800bed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bedc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bee8:	b29b      	uxth	r3, r3
 800beea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800befe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf02:	813b      	strh	r3, [r7, #8]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	441a      	add	r2, r3
 800bf0e:	893b      	ldrh	r3, [r7, #8]
 800bf10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	8013      	strh	r3, [r2, #0]
 800bf24:	e192      	b.n	800c24c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	827b      	strh	r3, [r7, #18]
 800bf34:	8a7b      	ldrh	r3, [r7, #18]
 800bf36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d01b      	beq.n	800bf76 <USB_DeactivateEndpoint+0xf6>
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf54:	823b      	strh	r3, [r7, #16]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	441a      	add	r2, r3
 800bf60:	8a3b      	ldrh	r3, [r7, #16]
 800bf62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf8c:	81fb      	strh	r3, [r7, #14]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	441a      	add	r2, r3
 800bf98:	89fb      	ldrh	r3, [r7, #14]
 800bf9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	8013      	strh	r3, [r2, #0]
 800bfae:	e14d      	b.n	800c24c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f040 80a5 	bne.w	800c104 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	843b      	strh	r3, [r7, #32]
 800bfc8:	8c3b      	ldrh	r3, [r7, #32]
 800bfca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01b      	beq.n	800c00a <USB_DeactivateEndpoint+0x18a>
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfe8:	83fb      	strh	r3, [r7, #30]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	441a      	add	r2, r3
 800bff4:	8bfb      	ldrh	r3, [r7, #30]
 800bff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bffe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c006:	b29b      	uxth	r3, r3
 800c008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	83bb      	strh	r3, [r7, #28]
 800c018:	8bbb      	ldrh	r3, [r7, #28]
 800c01a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d01b      	beq.n	800c05a <USB_DeactivateEndpoint+0x1da>
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	b29b      	uxth	r3, r3
 800c030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c038:	837b      	strh	r3, [r7, #26]
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	441a      	add	r2, r3
 800c044:	8b7b      	ldrh	r3, [r7, #26]
 800c046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c056:	b29b      	uxth	r3, r3
 800c058:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	b29b      	uxth	r3, r3
 800c068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c070:	833b      	strh	r3, [r7, #24]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	441a      	add	r2, r3
 800c07c:	8b3b      	ldrh	r3, [r7, #24]
 800c07e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c08a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c08e:	b29b      	uxth	r3, r3
 800c090:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0a8:	82fb      	strh	r3, [r7, #22]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	441a      	add	r2, r3
 800c0b4:	8afb      	ldrh	r3, [r7, #22]
 800c0b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e0:	82bb      	strh	r3, [r7, #20]
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	441a      	add	r2, r3
 800c0ec:	8abb      	ldrh	r3, [r7, #20]
 800c0ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	8013      	strh	r3, [r2, #0]
 800c102:	e0a3      	b.n	800c24c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c112:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01b      	beq.n	800c154 <USB_DeactivateEndpoint+0x2d4>
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	881b      	ldrh	r3, [r3, #0]
 800c128:	b29b      	uxth	r3, r3
 800c12a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c12e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c132:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	441a      	add	r2, r3
 800c13e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c148:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c150:	b29b      	uxth	r3, r3
 800c152:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c162:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01b      	beq.n	800c1a4 <USB_DeactivateEndpoint+0x324>
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c17e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c182:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	441a      	add	r2, r3
 800c18e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c19c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	441a      	add	r2, r3
 800c1c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c1c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	441a      	add	r2, r3
 800c1fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c20c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c210:	b29b      	uxth	r3, r3
 800c212:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	b29b      	uxth	r3, r3
 800c222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c22a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	441a      	add	r2, r3
 800c236:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c23c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c248:	b29b      	uxth	r3, r3
 800c24a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3734      	adds	r7, #52	@ 0x34
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b0ac      	sub	sp, #176	@ 0xb0
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	785b      	ldrb	r3, [r3, #1]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	f040 84ca 	bne.w	800cc02 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	429a      	cmp	r2, r3
 800c278:	d904      	bls.n	800c284 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c282:	e003      	b.n	800c28c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	7b1b      	ldrb	r3, [r3, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d122      	bne.n	800c2da <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	6959      	ldr	r1, [r3, #20]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	88da      	ldrh	r2, [r3, #6]
 800c29c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 febd 	bl	800d022 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	00da      	lsls	r2, r3, #3
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	801a      	strh	r2, [r3, #0]
 800c2d6:	f000 bc6f 	b.w	800cbb8 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	78db      	ldrb	r3, [r3, #3]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	f040 831e 	bne.w	800c920 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	6a1a      	ldr	r2, [r3, #32]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	f240 82cf 	bls.w	800c890 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c308:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	441a      	add	r2, r3
 800c316:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c31a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c31e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c322:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	6a1a      	ldr	r2, [r3, #32]
 800c332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	b29b      	uxth	r3, r3
 800c34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 814f 	beq.w	800c5f2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	633b      	str	r3, [r7, #48]	@ 0x30
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	785b      	ldrb	r3, [r3, #1]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d16b      	bne.n	800c438 <USB_EPStartXfer+0x1de>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	461a      	mov	r2, r3
 800c36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c370:	4413      	add	r3, r2
 800c372:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	00da      	lsls	r2, r3, #3
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37c:	4413      	add	r3, r2
 800c37e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c382:	627b      	str	r3, [r7, #36]	@ 0x24
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	b29b      	uxth	r3, r3
 800c38a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c38e:	b29a      	uxth	r2, r3
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	801a      	strh	r2, [r3, #0]
 800c394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <USB_EPStartXfer+0x158>
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	801a      	strh	r2, [r3, #0]
 800c3b0:	e05b      	b.n	800c46a <USB_EPStartXfer+0x210>
 800c3b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3b8:	d81c      	bhi.n	800c3f4 <USB_EPStartXfer+0x19a>
 800c3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3be:	085b      	lsrs	r3, r3, #1
 800c3c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d004      	beq.n	800c3da <USB_EPStartXfer+0x180>
 800c3d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	029b      	lsls	r3, r3, #10
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	801a      	strh	r2, [r3, #0]
 800c3f2:	e03a      	b.n	800c46a <USB_EPStartXfer+0x210>
 800c3f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3f8:	095b      	lsrs	r3, r3, #5
 800c3fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c3fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c402:	f003 031f 	and.w	r3, r3, #31
 800c406:	2b00      	cmp	r3, #0
 800c408:	d104      	bne.n	800c414 <USB_EPStartXfer+0x1ba>
 800c40a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c40e:	3b01      	subs	r3, #1
 800c410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	b29a      	uxth	r2, r3
 800c41a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c41e:	b29b      	uxth	r3, r3
 800c420:	029b      	lsls	r3, r3, #10
 800c422:	b29b      	uxth	r3, r3
 800c424:	4313      	orrs	r3, r2
 800c426:	b29b      	uxth	r3, r3
 800c428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c430:	b29a      	uxth	r2, r3
 800c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c434:	801a      	strh	r2, [r3, #0]
 800c436:	e018      	b.n	800c46a <USB_EPStartXfer+0x210>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d114      	bne.n	800c46a <USB_EPStartXfer+0x210>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	4413      	add	r3, r2
 800c44e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00da      	lsls	r2, r3, #3
 800c456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c458:	4413      	add	r3, r2
 800c45a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c464:	b29a      	uxth	r2, r3
 800c466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	895b      	ldrh	r3, [r3, #10]
 800c46e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	6959      	ldr	r1, [r3, #20]
 800c476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fdce 	bl	800d022 <USB_WritePMA>
            ep->xfer_buff += len;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	695a      	ldr	r2, [r3, #20]
 800c48a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c48e:	441a      	add	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	6a1a      	ldr	r2, [r3, #32]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d907      	bls.n	800c4b0 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	6a1a      	ldr	r2, [r3, #32]
 800c4a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4a8:	1ad2      	subs	r2, r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	621a      	str	r2, [r3, #32]
 800c4ae:	e006      	b.n	800c4be <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d16b      	bne.n	800c59e <USB_EPStartXfer+0x344>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	61bb      	str	r3, [r7, #24]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	00da      	lsls	r2, r3, #3
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	801a      	strh	r2, [r3, #0]
 800c4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <USB_EPStartXfer+0x2be>
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29b      	uxth	r3, r3
 800c508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c510:	b29a      	uxth	r2, r3
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	801a      	strh	r2, [r3, #0]
 800c516:	e05d      	b.n	800c5d4 <USB_EPStartXfer+0x37a>
 800c518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c51c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c51e:	d81c      	bhi.n	800c55a <USB_EPStartXfer+0x300>
 800c520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c524:	085b      	lsrs	r3, r3, #1
 800c526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <USB_EPStartXfer+0x2e6>
 800c536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c53a:	3301      	adds	r3, #1
 800c53c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	b29a      	uxth	r2, r3
 800c546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	029b      	lsls	r3, r3, #10
 800c54e:	b29b      	uxth	r3, r3
 800c550:	4313      	orrs	r3, r2
 800c552:	b29a      	uxth	r2, r3
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	801a      	strh	r2, [r3, #0]
 800c558:	e03c      	b.n	800c5d4 <USB_EPStartXfer+0x37a>
 800c55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c55e:	095b      	lsrs	r3, r3, #5
 800c560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d104      	bne.n	800c57a <USB_EPStartXfer+0x320>
 800c570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c574:	3b01      	subs	r3, #1
 800c576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	b29a      	uxth	r2, r3
 800c580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c584:	b29b      	uxth	r3, r3
 800c586:	029b      	lsls	r3, r3, #10
 800c588:	b29b      	uxth	r3, r3
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c596:	b29a      	uxth	r2, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	e01a      	b.n	800c5d4 <USB_EPStartXfer+0x37a>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d116      	bne.n	800c5d4 <USB_EPStartXfer+0x37a>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	623b      	str	r3, [r7, #32]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	623b      	str	r3, [r7, #32]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	00da      	lsls	r2, r3, #3
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	891b      	ldrh	r3, [r3, #8]
 800c5d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	6959      	ldr	r1, [r3, #20]
 800c5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fd19 	bl	800d022 <USB_WritePMA>
 800c5f0:	e2e2      	b.n	800cbb8 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d16b      	bne.n	800c6d2 <USB_EPStartXfer+0x478>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c604:	b29b      	uxth	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c60a:	4413      	add	r3, r2
 800c60c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	00da      	lsls	r2, r3, #3
 800c614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c616:	4413      	add	r3, r2
 800c618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c61e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	b29b      	uxth	r3, r3
 800c624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c628:	b29a      	uxth	r2, r3
 800c62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62c:	801a      	strh	r2, [r3, #0]
 800c62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10a      	bne.n	800c64c <USB_EPStartXfer+0x3f2>
 800c636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c644:	b29a      	uxth	r2, r3
 800c646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c648:	801a      	strh	r2, [r3, #0]
 800c64a:	e05d      	b.n	800c708 <USB_EPStartXfer+0x4ae>
 800c64c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c650:	2b3e      	cmp	r3, #62	@ 0x3e
 800c652:	d81c      	bhi.n	800c68e <USB_EPStartXfer+0x434>
 800c654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c658:	085b      	lsrs	r3, r3, #1
 800c65a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <USB_EPStartXfer+0x41a>
 800c66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c66e:	3301      	adds	r3, #1
 800c670:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29a      	uxth	r2, r3
 800c67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c67e:	b29b      	uxth	r3, r3
 800c680:	029b      	lsls	r3, r3, #10
 800c682:	b29b      	uxth	r3, r3
 800c684:	4313      	orrs	r3, r2
 800c686:	b29a      	uxth	r2, r3
 800c688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c68a:	801a      	strh	r2, [r3, #0]
 800c68c:	e03c      	b.n	800c708 <USB_EPStartXfer+0x4ae>
 800c68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c692:	095b      	lsrs	r3, r3, #5
 800c694:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c69c:	f003 031f 	and.w	r3, r3, #31
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d104      	bne.n	800c6ae <USB_EPStartXfer+0x454>
 800c6a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	029b      	lsls	r3, r3, #10
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ce:	801a      	strh	r2, [r3, #0]
 800c6d0:	e01a      	b.n	800c708 <USB_EPStartXfer+0x4ae>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d116      	bne.n	800c708 <USB_EPStartXfer+0x4ae>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ea:	4413      	add	r3, r2
 800c6ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	00da      	lsls	r2, r3, #3
 800c6f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6f6:	4413      	add	r3, r2
 800c6f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c702:	b29a      	uxth	r2, r3
 800c704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c706:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	891b      	ldrh	r3, [r3, #8]
 800c70c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	6959      	ldr	r1, [r3, #20]
 800c714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c718:	b29b      	uxth	r3, r3
 800c71a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fc7f 	bl	800d022 <USB_WritePMA>
            ep->xfer_buff += len;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	695a      	ldr	r2, [r3, #20]
 800c728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c72c:	441a      	add	r2, r3
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	6a1a      	ldr	r2, [r3, #32]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d907      	bls.n	800c74e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	6a1a      	ldr	r2, [r3, #32]
 800c742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c746:	1ad2      	subs	r2, r2, r3
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	621a      	str	r2, [r3, #32]
 800c74c:	e006      	b.n	800c75c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	6a1b      	ldr	r3, [r3, #32]
 800c752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2200      	movs	r2, #0
 800c75a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	785b      	ldrb	r3, [r3, #1]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d16b      	bne.n	800c840 <USB_EPStartXfer+0x5e6>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c772:	b29b      	uxth	r3, r3
 800c774:	461a      	mov	r2, r3
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	4413      	add	r3, r2
 800c77a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	00da      	lsls	r2, r3, #3
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	4413      	add	r3, r2
 800c786:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	b29b      	uxth	r3, r3
 800c792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c796:	b29a      	uxth	r2, r3
 800c798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79a:	801a      	strh	r2, [r3, #0]
 800c79c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <USB_EPStartXfer+0x560>
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	801a      	strh	r2, [r3, #0]
 800c7b8:	e05b      	b.n	800c872 <USB_EPStartXfer+0x618>
 800c7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7be:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7c0:	d81c      	bhi.n	800c7fc <USB_EPStartXfer+0x5a2>
 800c7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7c6:	085b      	lsrs	r3, r3, #1
 800c7c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <USB_EPStartXfer+0x588>
 800c7d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	029b      	lsls	r3, r3, #10
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f8:	801a      	strh	r2, [r3, #0]
 800c7fa:	e03a      	b.n	800c872 <USB_EPStartXfer+0x618>
 800c7fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c800:	095b      	lsrs	r3, r3, #5
 800c802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c80a:	f003 031f 	and.w	r3, r3, #31
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <USB_EPStartXfer+0x5c2>
 800c812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c816:	3b01      	subs	r3, #1
 800c818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	b29a      	uxth	r2, r3
 800c822:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c826:	b29b      	uxth	r3, r3
 800c828:	029b      	lsls	r3, r3, #10
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	4313      	orrs	r3, r2
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c838:	b29a      	uxth	r2, r3
 800c83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83c:	801a      	strh	r2, [r3, #0]
 800c83e:	e018      	b.n	800c872 <USB_EPStartXfer+0x618>
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	785b      	ldrb	r3, [r3, #1]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d114      	bne.n	800c872 <USB_EPStartXfer+0x618>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c84e:	b29b      	uxth	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c854:	4413      	add	r3, r2
 800c856:	643b      	str	r3, [r7, #64]	@ 0x40
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	00da      	lsls	r2, r3, #3
 800c85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c860:	4413      	add	r3, r2
 800c862:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	6959      	ldr	r1, [r3, #20]
 800c87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c882:	b29b      	uxth	r3, r3
 800c884:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 fbca 	bl	800d022 <USB_WritePMA>
 800c88e:	e193      	b.n	800cbb8 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	441a      	add	r2, r3
 800c8bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c8c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8e4:	4413      	add	r3, r2
 800c8e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	00da      	lsls	r2, r3, #3
 800c8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c900:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	891b      	ldrh	r3, [r3, #8]
 800c906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	6959      	ldr	r1, [r3, #20]
 800c90e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c912:	b29b      	uxth	r3, r3
 800c914:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fb82 	bl	800d022 <USB_WritePMA>
 800c91e:	e14b      	b.n	800cbb8 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	6a1a      	ldr	r2, [r3, #32]
 800c924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c928:	1ad2      	subs	r2, r2, r3
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 809a 	beq.w	800ca7a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	673b      	str	r3, [r7, #112]	@ 0x70
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	785b      	ldrb	r3, [r3, #1]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d16b      	bne.n	800ca2a <USB_EPStartXfer+0x7d0>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	461a      	mov	r2, r3
 800c960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c962:	4413      	add	r3, r2
 800c964:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	00da      	lsls	r2, r3, #3
 800c96c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c96e:	4413      	add	r3, r2
 800c970:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c974:	667b      	str	r3, [r7, #100]	@ 0x64
 800c976:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c980:	b29a      	uxth	r2, r3
 800c982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c984:	801a      	strh	r2, [r3, #0]
 800c986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <USB_EPStartXfer+0x74a>
 800c98e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
 800c994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9a0:	801a      	strh	r2, [r3, #0]
 800c9a2:	e05b      	b.n	800ca5c <USB_EPStartXfer+0x802>
 800c9a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9aa:	d81c      	bhi.n	800c9e6 <USB_EPStartXfer+0x78c>
 800c9ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9b0:	085b      	lsrs	r3, r3, #1
 800c9b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d004      	beq.n	800c9cc <USB_EPStartXfer+0x772>
 800c9c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9ce:	881b      	ldrh	r3, [r3, #0]
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	029b      	lsls	r3, r3, #10
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e2:	801a      	strh	r2, [r3, #0]
 800c9e4:	e03a      	b.n	800ca5c <USB_EPStartXfer+0x802>
 800c9e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9ea:	095b      	lsrs	r3, r3, #5
 800c9ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9f4:	f003 031f 	and.w	r3, r3, #31
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <USB_EPStartXfer+0x7ac>
 800c9fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca00:	3b01      	subs	r3, #1
 800ca02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	029b      	lsls	r3, r3, #10
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	4313      	orrs	r3, r2
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca26:	801a      	strh	r2, [r3, #0]
 800ca28:	e018      	b.n	800ca5c <USB_EPStartXfer+0x802>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d114      	bne.n	800ca5c <USB_EPStartXfer+0x802>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca3e:	4413      	add	r3, r2
 800ca40:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	00da      	lsls	r2, r3, #3
 800ca48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	895b      	ldrh	r3, [r3, #10]
 800ca60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	6959      	ldr	r1, [r3, #20]
 800ca68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fad5 	bl	800d022 <USB_WritePMA>
 800ca78:	e09e      	b.n	800cbb8 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	785b      	ldrb	r3, [r3, #1]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d16b      	bne.n	800cb5a <USB_EPStartXfer+0x900>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	461a      	mov	r2, r3
 800ca90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca92:	4413      	add	r3, r2
 800ca94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	00da      	lsls	r2, r3, #3
 800ca9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca9e:	4413      	add	r3, r2
 800caa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800caa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800caa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cab4:	801a      	strh	r2, [r3, #0]
 800cab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <USB_EPStartXfer+0x87a>
 800cabe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cacc:	b29a      	uxth	r2, r3
 800cace:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cad0:	801a      	strh	r2, [r3, #0]
 800cad2:	e063      	b.n	800cb9c <USB_EPStartXfer+0x942>
 800cad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cada:	d81c      	bhi.n	800cb16 <USB_EPStartXfer+0x8bc>
 800cadc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cae0:	085b      	lsrs	r3, r3, #1
 800cae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d004      	beq.n	800cafc <USB_EPStartXfer+0x8a2>
 800caf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800caf6:	3301      	adds	r3, #1
 800caf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cafc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	029b      	lsls	r3, r3, #10
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb12:	801a      	strh	r2, [r3, #0]
 800cb14:	e042      	b.n	800cb9c <USB_EPStartXfer+0x942>
 800cb16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb24:	f003 031f 	and.w	r3, r3, #31
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d104      	bne.n	800cb36 <USB_EPStartXfer+0x8dc>
 800cb2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cb30:	3b01      	subs	r3, #1
 800cb32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	029b      	lsls	r3, r3, #10
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	4313      	orrs	r3, r2
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb56:	801a      	strh	r2, [r3, #0]
 800cb58:	e020      	b.n	800cb9c <USB_EPStartXfer+0x942>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	785b      	ldrb	r3, [r3, #1]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d11c      	bne.n	800cb9c <USB_EPStartXfer+0x942>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb76:	4413      	add	r3, r2
 800cb78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	00da      	lsls	r2, r3, #3
 800cb82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb86:	4413      	add	r3, r2
 800cb88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cb90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	891b      	ldrh	r3, [r3, #8]
 800cba0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	6959      	ldr	r1, [r3, #20]
 800cba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fa35 	bl	800d022 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbce:	817b      	strh	r3, [r7, #10]
 800cbd0:	897b      	ldrh	r3, [r7, #10]
 800cbd2:	f083 0310 	eor.w	r3, r3, #16
 800cbd6:	817b      	strh	r3, [r7, #10]
 800cbd8:	897b      	ldrh	r3, [r7, #10]
 800cbda:	f083 0320 	eor.w	r3, r3, #32
 800cbde:	817b      	strh	r3, [r7, #10]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	441a      	add	r2, r3
 800cbea:	897b      	ldrh	r3, [r7, #10]
 800cbec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	8013      	strh	r3, [r2, #0]
 800cc00:	e0d5      	b.n	800cdae <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	7b1b      	ldrb	r3, [r3, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d156      	bne.n	800ccb8 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d122      	bne.n	800cc58 <USB_EPStartXfer+0x9fe>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	78db      	ldrb	r3, [r3, #3]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d11e      	bne.n	800cc58 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	4413      	add	r3, r2
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc30:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	441a      	add	r2, r3
 800cc3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cc42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc4a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cc4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	8013      	strh	r3, [r2, #0]
 800cc56:	e01d      	b.n	800cc94 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cc6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc6e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	441a      	add	r2, r3
 800cc7c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800cc80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	699a      	ldr	r2, [r3, #24]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d907      	bls.n	800ccb0 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	699a      	ldr	r2, [r3, #24]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	1ad2      	subs	r2, r2, r3
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	619a      	str	r2, [r3, #24]
 800ccae:	e054      	b.n	800cd5a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	619a      	str	r2, [r3, #24]
 800ccb6:	e050      	b.n	800cd5a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	78db      	ldrb	r3, [r3, #3]
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d142      	bne.n	800cd46 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d048      	beq.n	800cd5a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ccd8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ccdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d005      	beq.n	800ccf0 <USB_EPStartXfer+0xa96>
 800cce4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d10b      	bne.n	800cd08 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ccf0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ccf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d12e      	bne.n	800cd5a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ccfc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800cd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d128      	bne.n	800cd5a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4413      	add	r3, r2
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd1e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	441a      	add	r2, r3
 800cd2c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800cd30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8013      	strh	r3, [r2, #0]
 800cd44:	e009      	b.n	800cd5a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	78db      	ldrb	r3, [r3, #3]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d103      	bne.n	800cd56 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2200      	movs	r2, #0
 800cd52:	619a      	str	r2, [r3, #24]
 800cd54:	e001      	b.n	800cd5a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e02a      	b.n	800cdb0 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cd74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cd78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cd80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cd84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cd88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	441a      	add	r2, r3
 800cd96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cd9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cda2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cda6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	37b0      	adds	r7, #176	@ 0xb0
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	785b      	ldrb	r3, [r3, #1]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d020      	beq.n	800ce0c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cde0:	81bb      	strh	r3, [r7, #12]
 800cde2:	89bb      	ldrh	r3, [r7, #12]
 800cde4:	f083 0310 	eor.w	r3, r3, #16
 800cde8:	81bb      	strh	r3, [r7, #12]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	441a      	add	r2, r3
 800cdf4:	89bb      	ldrh	r3, [r7, #12]
 800cdf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	8013      	strh	r3, [r2, #0]
 800ce0a:	e01f      	b.n	800ce4c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce22:	81fb      	strh	r3, [r7, #14]
 800ce24:	89fb      	ldrh	r3, [r7, #14]
 800ce26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce2a:	81fb      	strh	r3, [r7, #14]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	441a      	add	r2, r3
 800ce36:	89fb      	ldrh	r3, [r7, #14]
 800ce38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b087      	sub	sp, #28
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d04c      	beq.n	800cf06 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	881b      	ldrh	r3, [r3, #0]
 800ce78:	823b      	strh	r3, [r7, #16]
 800ce7a:	8a3b      	ldrh	r3, [r7, #16]
 800ce7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d01b      	beq.n	800cebc <USB_EPClearStall+0x62>
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce9a:	81fb      	strh	r3, [r7, #14]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	441a      	add	r2, r3
 800cea6:	89fb      	ldrh	r3, [r7, #14]
 800cea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	78db      	ldrb	r3, [r3, #3]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d06c      	beq.n	800cf9e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ced6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ceda:	81bb      	strh	r3, [r7, #12]
 800cedc:	89bb      	ldrh	r3, [r7, #12]
 800cede:	f083 0320 	eor.w	r3, r3, #32
 800cee2:	81bb      	strh	r3, [r7, #12]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	441a      	add	r2, r3
 800ceee:	89bb      	ldrh	r3, [r7, #12]
 800cef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cefc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	8013      	strh	r3, [r2, #0]
 800cf04:	e04b      	b.n	800cf9e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	82fb      	strh	r3, [r7, #22]
 800cf14:	8afb      	ldrh	r3, [r7, #22]
 800cf16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d01b      	beq.n	800cf56 <USB_EPClearStall+0xfc>
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf34:	82bb      	strh	r3, [r7, #20]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	441a      	add	r2, r3
 800cf40:	8abb      	ldrh	r3, [r7, #20]
 800cf42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4413      	add	r3, r2
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf6c:	827b      	strh	r3, [r7, #18]
 800cf6e:	8a7b      	ldrh	r3, [r7, #18]
 800cf70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cf74:	827b      	strh	r3, [r7, #18]
 800cf76:	8a7b      	ldrh	r3, [r7, #18]
 800cf78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cf7c:	827b      	strh	r3, [r7, #18]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	441a      	add	r2, r3
 800cf88:	8a7b      	ldrh	r3, [r7, #18]
 800cf8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	371c      	adds	r7, #28
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d103      	bne.n	800cfc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2280      	movs	r2, #128	@ 0x80
 800cfc2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d002:	b480      	push	{r7}
 800d004:	b085      	sub	sp, #20
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d010:	b29b      	uxth	r3, r3
 800d012:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d014:	68fb      	ldr	r3, [r7, #12]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d022:	b480      	push	{r7}
 800d024:	b08b      	sub	sp, #44	@ 0x2c
 800d026:	af00      	add	r7, sp, #0
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	60b9      	str	r1, [r7, #8]
 800d02c:	4611      	mov	r1, r2
 800d02e:	461a      	mov	r2, r3
 800d030:	460b      	mov	r3, r1
 800d032:	80fb      	strh	r3, [r7, #6]
 800d034:	4613      	mov	r3, r2
 800d036:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d038:	88bb      	ldrh	r3, [r7, #4]
 800d03a:	3301      	adds	r3, #1
 800d03c:	085b      	lsrs	r3, r3, #1
 800d03e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d048:	88fa      	ldrh	r2, [r7, #6]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d052:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	627b      	str	r3, [r7, #36]	@ 0x24
 800d058:	e01b      	b.n	800d092 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	3301      	adds	r3, #1
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	b21a      	sxth	r2, r3
 800d06a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d06e:	4313      	orrs	r3, r2
 800d070:	b21b      	sxth	r3, r3
 800d072:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	8a7a      	ldrh	r2, [r7, #18]
 800d078:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	3302      	adds	r3, #2
 800d07e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	3301      	adds	r3, #1
 800d084:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	3301      	adds	r3, #1
 800d08a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08e:	3b01      	subs	r3, #1
 800d090:	627b      	str	r3, [r7, #36]	@ 0x24
 800d092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e0      	bne.n	800d05a <USB_WritePMA+0x38>
  }
}
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	372c      	adds	r7, #44	@ 0x2c
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	b08b      	sub	sp, #44	@ 0x2c
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	80fb      	strh	r3, [r7, #6]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d0bc:	88bb      	ldrh	r3, [r7, #4]
 800d0be:	085b      	lsrs	r3, r3, #1
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d0cc:	88fa      	ldrh	r2, [r7, #6]
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0dc:	e018      	b.n	800d110 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	0a1b      	lsrs	r3, r3, #8
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	3301      	adds	r3, #1
 800d108:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	3b01      	subs	r3, #1
 800d10e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1e3      	bne.n	800d0de <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d116:	88bb      	ldrh	r3, [r7, #4]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d007      	beq.n	800d132 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	b29b      	uxth	r3, r3
 800d128:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	b2da      	uxtb	r2, r3
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	701a      	strb	r2, [r3, #0]
  }
}
 800d132:	bf00      	nop
 800d134:	372c      	adds	r7, #44	@ 0x2c
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b084      	sub	sp, #16
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d14a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d14e:	f002 f923 	bl	800f398 <USBD_static_malloc>
 800d152:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d105      	bne.n	800d166 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d162:	2302      	movs	r3, #2
 800d164:	e066      	b.n	800d234 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7c1b      	ldrb	r3, [r3, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d119      	bne.n	800d1aa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d17a:	2202      	movs	r2, #2
 800d17c:	2181      	movs	r1, #129	@ 0x81
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f001 ffb1 	bl	800f0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d18a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d18e:	2202      	movs	r2, #2
 800d190:	2101      	movs	r1, #1
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 ffa7 	bl	800f0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2210      	movs	r2, #16
 800d1a4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d1a8:	e016      	b.n	800d1d8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d1aa:	2340      	movs	r3, #64	@ 0x40
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	2181      	movs	r1, #129	@ 0x81
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 ff98 	bl	800f0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1bc:	2340      	movs	r3, #64	@ 0x40
 800d1be:	2202      	movs	r2, #2
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 ff8f 	bl	800f0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1d8:	2308      	movs	r3, #8
 800d1da:	2203      	movs	r2, #3
 800d1dc:	2182      	movs	r1, #130	@ 0x82
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f001 ff81 	bl	800f0e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	7c1b      	ldrb	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d109      	bne.n	800d222 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d218:	2101      	movs	r1, #1
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f002 f852 	bl	800f2c4 <USBD_LL_PrepareReceive>
 800d220:	e007      	b.n	800d232 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d228:	2340      	movs	r3, #64	@ 0x40
 800d22a:	2101      	movs	r1, #1
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f002 f849 	bl	800f2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d248:	2181      	movs	r1, #129	@ 0x81
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f001 ff71 	bl	800f132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d256:	2101      	movs	r1, #1
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f001 ff6a 	bl	800f132 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d266:	2182      	movs	r1, #130	@ 0x82
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 ff62 	bl	800f132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d284:	2b00      	cmp	r3, #0
 800d286:	d00e      	beq.n	800d2a6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d298:	4618      	mov	r0, r3
 800d29a:	f002 f88b 	bl	800f3b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d2c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e0af      	b.n	800d438 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d03f      	beq.n	800d364 <USBD_CDC_Setup+0xb4>
 800d2e4:	2b20      	cmp	r3, #32
 800d2e6:	f040 809f 	bne.w	800d428 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	88db      	ldrh	r3, [r3, #6]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d02e      	beq.n	800d350 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	b25b      	sxtb	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	da16      	bge.n	800d32a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d308:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d30a:	683a      	ldr	r2, [r7, #0]
 800d30c:	88d2      	ldrh	r2, [r2, #6]
 800d30e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	88db      	ldrh	r3, [r3, #6]
 800d314:	2b07      	cmp	r3, #7
 800d316:	bf28      	it	cs
 800d318:	2307      	movcs	r3, #7
 800d31a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	89fa      	ldrh	r2, [r7, #14]
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f001 facd 	bl	800e8c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d328:	e085      	b.n	800d436 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	785a      	ldrb	r2, [r3, #1]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	88db      	ldrh	r3, [r3, #6]
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d340:	6939      	ldr	r1, [r7, #16]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	88db      	ldrh	r3, [r3, #6]
 800d346:	461a      	mov	r2, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f001 fae6 	bl	800e91a <USBD_CtlPrepareRx>
      break;
 800d34e:	e072      	b.n	800d436 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	7850      	ldrb	r0, [r2, #1]
 800d35c:	2200      	movs	r2, #0
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	4798      	blx	r3
      break;
 800d362:	e068      	b.n	800d436 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	785b      	ldrb	r3, [r3, #1]
 800d368:	2b0b      	cmp	r3, #11
 800d36a:	d852      	bhi.n	800d412 <USBD_CDC_Setup+0x162>
 800d36c:	a201      	add	r2, pc, #4	@ (adr r2, 800d374 <USBD_CDC_Setup+0xc4>)
 800d36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d372:	bf00      	nop
 800d374:	0800d3a5 	.word	0x0800d3a5
 800d378:	0800d421 	.word	0x0800d421
 800d37c:	0800d413 	.word	0x0800d413
 800d380:	0800d413 	.word	0x0800d413
 800d384:	0800d413 	.word	0x0800d413
 800d388:	0800d413 	.word	0x0800d413
 800d38c:	0800d413 	.word	0x0800d413
 800d390:	0800d413 	.word	0x0800d413
 800d394:	0800d413 	.word	0x0800d413
 800d398:	0800d413 	.word	0x0800d413
 800d39c:	0800d3cf 	.word	0x0800d3cf
 800d3a0:	0800d3f9 	.word	0x0800d3f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d107      	bne.n	800d3c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3b0:	f107 030a 	add.w	r3, r7, #10
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f001 fa82 	bl	800e8c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3be:	e032      	b.n	800d426 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f001 fa0c 	bl	800e7e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	75fb      	strb	r3, [r7, #23]
          break;
 800d3cc:	e02b      	b.n	800d426 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d107      	bne.n	800d3ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3da:	f107 030d 	add.w	r3, r7, #13
 800d3de:	2201      	movs	r2, #1
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f001 fa6d 	bl	800e8c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3e8:	e01d      	b.n	800d426 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f001 f9f7 	bl	800e7e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d3f6:	e016      	b.n	800d426 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	2b03      	cmp	r3, #3
 800d402:	d00f      	beq.n	800d424 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f001 f9ea 	bl	800e7e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800d40c:	2303      	movs	r3, #3
 800d40e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d410:	e008      	b.n	800d424 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f001 f9e3 	bl	800e7e0 <USBD_CtlError>
          ret = USBD_FAIL;
 800d41a:	2303      	movs	r3, #3
 800d41c:	75fb      	strb	r3, [r7, #23]
          break;
 800d41e:	e002      	b.n	800d426 <USBD_CDC_Setup+0x176>
          break;
 800d420:	bf00      	nop
 800d422:	e008      	b.n	800d436 <USBD_CDC_Setup+0x186>
          break;
 800d424:	bf00      	nop
      }
      break;
 800d426:	e006      	b.n	800d436 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d428:	6839      	ldr	r1, [r7, #0]
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f001 f9d8 	bl	800e7e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800d430:	2303      	movs	r3, #3
 800d432:	75fb      	strb	r3, [r7, #23]
      break;
 800d434:	bf00      	nop
  }

  return (uint8_t)ret;
 800d436:	7dfb      	ldrb	r3, [r7, #23]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d452:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d45e:	2303      	movs	r3, #3
 800d460:	e04f      	b.n	800d502 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d468:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d46a:	78fa      	ldrb	r2, [r7, #3]
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	4613      	mov	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	440b      	add	r3, r1
 800d478:	3318      	adds	r3, #24
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d029      	beq.n	800d4d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d480:	78fa      	ldrb	r2, [r7, #3]
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	4613      	mov	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	440b      	add	r3, r1
 800d48e:	3318      	adds	r3, #24
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	78f9      	ldrb	r1, [r7, #3]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	460b      	mov	r3, r1
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	4403      	add	r3, r0
 800d4a0:	3320      	adds	r3, #32
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4a8:	fb01 f303 	mul.w	r3, r1, r3
 800d4ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d110      	bne.n	800d4d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d4b2:	78fa      	ldrb	r2, [r7, #3]
 800d4b4:	6879      	ldr	r1, [r7, #4]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	440b      	add	r3, r1
 800d4c0:	3318      	adds	r3, #24
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4c6:	78f9      	ldrb	r1, [r7, #3]
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f001 fed8 	bl	800f282 <USBD_LL_Transmit>
 800d4d2:	e015      	b.n	800d500 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00b      	beq.n	800d500 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d4fc:	78fa      	ldrb	r2, [r7, #3]
 800d4fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	460b      	mov	r3, r1
 800d514:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d51c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d524:	2b00      	cmp	r3, #0
 800d526:	d101      	bne.n	800d52c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d528:	2303      	movs	r3, #3
 800d52a:	e015      	b.n	800d558 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f001 fee8 	bl	800f306 <USBD_LL_GetRxDataSize>
 800d536:	4602      	mov	r2, r0
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d552:	4611      	mov	r1, r2
 800d554:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d56e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d101      	bne.n	800d57a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d576:	2303      	movs	r3, #3
 800d578:	e01a      	b.n	800d5b0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d014      	beq.n	800d5ae <USBD_CDC_EP0_RxReady+0x4e>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d58a:	2bff      	cmp	r3, #255	@ 0xff
 800d58c:	d00f      	beq.n	800d5ae <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d59c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d5a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	22ff      	movs	r2, #255	@ 0xff
 800d5aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2243      	movs	r2, #67	@ 0x43
 800d5c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d5c6:	4b03      	ldr	r3, [pc, #12]	@ (800d5d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	20000094 	.word	0x20000094

0800d5d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2243      	movs	r2, #67	@ 0x43
 800d5e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d5e6:	4b03      	ldr	r3, [pc, #12]	@ (800d5f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	20000050 	.word	0x20000050

0800d5f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2243      	movs	r2, #67	@ 0x43
 800d604:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d606:	4b03      	ldr	r3, [pc, #12]	@ (800d614 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	200000d8 	.word	0x200000d8

0800d618 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	220a      	movs	r2, #10
 800d624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d626:	4b03      	ldr	r3, [pc, #12]	@ (800d634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d628:	4618      	mov	r0, r3
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	2000000c 	.word	0x2000000c

0800d638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d648:	2303      	movs	r3, #3
 800d64a:	e004      	b.n	800d656 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d662:	b480      	push	{r7}
 800d664:	b087      	sub	sp, #28
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d674:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d67c:	2303      	movs	r3, #3
 800d67e:	e008      	b.n	800d692 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	68ba      	ldr	r2, [r7, #8]
 800d684:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	371c      	adds	r7, #28
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d69e:	b480      	push	{r7}
 800d6a0:	b085      	sub	sp, #20
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d101      	bne.n	800d6ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	e004      	b.n	800d6c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e01a      	b.n	800d728 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d114      	bne.n	800d726 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d71a:	2181      	movs	r1, #129	@ 0x81
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f001 fdb0 	bl	800f282 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d73e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d746:	2b00      	cmp	r3, #0
 800d748:	d101      	bne.n	800d74e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d74a:	2303      	movs	r3, #3
 800d74c:	e016      	b.n	800d77c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	7c1b      	ldrb	r3, [r3, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d109      	bne.n	800d76a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d75c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d760:	2101      	movs	r1, #1
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f001 fdae 	bl	800f2c4 <USBD_LL_PrepareReceive>
 800d768:	e007      	b.n	800d77a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d770:	2340      	movs	r3, #64	@ 0x40
 800d772:	2101      	movs	r1, #1
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f001 fda5 	bl	800f2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d101      	bne.n	800d79c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	e01f      	b.n	800d7dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d003      	beq.n	800d7c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	79fa      	ldrb	r2, [r7, #7]
 800d7ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f001 fc0d 	bl	800eff0 <USBD_LL_Init>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d101      	bne.n	800d7fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e016      	b.n	800d82a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d818:	f107 020e 	add.w	r2, r7, #14
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	4602      	mov	r2, r0
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f001 fc38 	bl	800f0b0 <USBD_LL_Start>
 800d840:	4603      	mov	r3, r0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d86c:	2303      	movs	r3, #3
 800d86e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d876:	2b00      	cmp	r3, #0
 800d878:	d009      	beq.n	800d88e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	78fa      	ldrb	r2, [r7, #3]
 800d884:	4611      	mov	r1, r2
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	4798      	blx	r3
 800d88a:	4603      	mov	r3, r0
 800d88c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d007      	beq.n	800d8be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	78fa      	ldrb	r2, [r7, #3]
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	4798      	blx	r3
  }

  return USBD_OK;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 ff46 	bl	800e76c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d8fc:	f003 031f 	and.w	r3, r3, #31
 800d900:	2b02      	cmp	r3, #2
 800d902:	d01a      	beq.n	800d93a <USBD_LL_SetupStage+0x72>
 800d904:	2b02      	cmp	r3, #2
 800d906:	d822      	bhi.n	800d94e <USBD_LL_SetupStage+0x86>
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <USBD_LL_SetupStage+0x4a>
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d00a      	beq.n	800d926 <USBD_LL_SetupStage+0x5e>
 800d910:	e01d      	b.n	800d94e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f9ee 	bl	800dcfc <USBD_StdDevReq>
 800d920:	4603      	mov	r3, r0
 800d922:	73fb      	strb	r3, [r7, #15]
      break;
 800d924:	e020      	b.n	800d968 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa52 	bl	800ddd8 <USBD_StdItfReq>
 800d934:	4603      	mov	r3, r0
 800d936:	73fb      	strb	r3, [r7, #15]
      break;
 800d938:	e016      	b.n	800d968 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fa91 	bl	800de6a <USBD_StdEPReq>
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]
      break;
 800d94c:	e00c      	b.n	800d968 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d954:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f001 fc07 	bl	800f170 <USBD_LL_StallEP>
 800d962:	4603      	mov	r3, r0
 800d964:	73fb      	strb	r3, [r7, #15]
      break;
 800d966:	bf00      	nop
  }

  return ret;
 800d968:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b086      	sub	sp, #24
 800d976:	af00      	add	r7, sp, #0
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	460b      	mov	r3, r1
 800d97c:	607a      	str	r2, [r7, #4]
 800d97e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d980:	7afb      	ldrb	r3, [r7, #11]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d138      	bne.n	800d9f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d98c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d994:	2b03      	cmp	r3, #3
 800d996:	d14a      	bne.n	800da2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d913      	bls.n	800d9cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	689a      	ldr	r2, [r3, #8]
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	1ad2      	subs	r2, r2, r3
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	bf28      	it	cs
 800d9be:	4613      	movcs	r3, r2
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6879      	ldr	r1, [r7, #4]
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 ffc5 	bl	800e954 <USBD_CtlContinueRx>
 800d9ca:	e030      	b.n	800da2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d10b      	bne.n	800d9f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d005      	beq.n	800d9f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 ffc0 	bl	800e976 <USBD_CtlSendStatus>
 800d9f6:	e01a      	b.n	800da2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b03      	cmp	r3, #3
 800da02:	d114      	bne.n	800da2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00e      	beq.n	800da2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	7afa      	ldrb	r2, [r7, #11]
 800da1a:	4611      	mov	r1, r2
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	4798      	blx	r3
 800da20:	4603      	mov	r3, r0
 800da22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800da2a:	7dfb      	ldrb	r3, [r7, #23]
 800da2c:	e000      	b.n	800da30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	460b      	mov	r3, r1
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d16b      	bne.n	800db24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3314      	adds	r3, #20
 800da50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d156      	bne.n	800db0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	689a      	ldr	r2, [r3, #8]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	429a      	cmp	r2, r3
 800da66:	d914      	bls.n	800da92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	689a      	ldr	r2, [r3, #8]
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	1ad2      	subs	r2, r2, r3
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	461a      	mov	r2, r3
 800da7c:	6879      	ldr	r1, [r7, #4]
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 ff3a 	bl	800e8f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da84:	2300      	movs	r3, #0
 800da86:	2200      	movs	r2, #0
 800da88:	2100      	movs	r1, #0
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f001 fc1a 	bl	800f2c4 <USBD_LL_PrepareReceive>
 800da90:	e03b      	b.n	800db0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	68da      	ldr	r2, [r3, #12]
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d11c      	bne.n	800dad8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d316      	bcc.n	800dad8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d20f      	bcs.n	800dad8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dab8:	2200      	movs	r2, #0
 800daba:	2100      	movs	r1, #0
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 ff1b 	bl	800e8f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daca:	2300      	movs	r3, #0
 800dacc:	2200      	movs	r2, #0
 800dace:	2100      	movs	r1, #0
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f001 fbf7 	bl	800f2c4 <USBD_LL_PrepareReceive>
 800dad6:	e018      	b.n	800db0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d10b      	bne.n	800dafc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d005      	beq.n	800dafc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dafc:	2180      	movs	r1, #128	@ 0x80
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f001 fb36 	bl	800f170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 ff49 	bl	800e99c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800db10:	2b01      	cmp	r3, #1
 800db12:	d122      	bne.n	800db5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fe98 	bl	800d84a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800db22:	e01a      	b.n	800db5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	d114      	bne.n	800db5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00e      	beq.n	800db5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	7afa      	ldrb	r2, [r7, #11]
 800db46:	4611      	mov	r1, r2
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	4798      	blx	r3
 800db4c:	4603      	mov	r3, r0
 800db4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	e000      	b.n	800db5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3718      	adds	r7, #24
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2200      	movs	r2, #0
 800db80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800db94:	2303      	movs	r3, #3
 800db96:	e02f      	b.n	800dbf8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00f      	beq.n	800dbc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d009      	beq.n	800dbc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6852      	ldr	r2, [r2, #4]
 800dbba:	b2d2      	uxtb	r2, r2
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbc2:	2340      	movs	r3, #64	@ 0x40
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f001 fa8c 	bl	800f0e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2240      	movs	r2, #64	@ 0x40
 800dbda:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbde:	2340      	movs	r3, #64	@ 0x40
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	2180      	movs	r1, #128	@ 0x80
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 fa7e 	bl	800f0e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2240      	movs	r2, #64	@ 0x40
 800dbf4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	78fa      	ldrb	r2, [r7, #3]
 800dc10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2204      	movs	r2, #4
 800dc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	d106      	bne.n	800dc6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dc66:	b2da      	uxtb	r2, r3
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e012      	b.n	800dcb8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d10b      	bne.n	800dcb6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcb0:	69db      	ldr	r3, [r3, #28]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dcde:	8a3b      	ldrh	r3, [r7, #16]
 800dce0:	021b      	lsls	r3, r3, #8
 800dce2:	b21a      	sxth	r2, r3
 800dce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	b21b      	sxth	r3, r3
 800dcec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dcee:	89fb      	ldrh	r3, [r7, #14]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	371c      	adds	r7, #28
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd12:	2b40      	cmp	r3, #64	@ 0x40
 800dd14:	d005      	beq.n	800dd22 <USBD_StdDevReq+0x26>
 800dd16:	2b40      	cmp	r3, #64	@ 0x40
 800dd18:	d853      	bhi.n	800ddc2 <USBD_StdDevReq+0xc6>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00b      	beq.n	800dd36 <USBD_StdDevReq+0x3a>
 800dd1e:	2b20      	cmp	r3, #32
 800dd20:	d14f      	bne.n	800ddc2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
 800dd30:	4603      	mov	r3, r0
 800dd32:	73fb      	strb	r3, [r7, #15]
      break;
 800dd34:	e04a      	b.n	800ddcc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	2b09      	cmp	r3, #9
 800dd3c:	d83b      	bhi.n	800ddb6 <USBD_StdDevReq+0xba>
 800dd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd44 <USBD_StdDevReq+0x48>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd99 	.word	0x0800dd99
 800dd48:	0800ddad 	.word	0x0800ddad
 800dd4c:	0800ddb7 	.word	0x0800ddb7
 800dd50:	0800dda3 	.word	0x0800dda3
 800dd54:	0800ddb7 	.word	0x0800ddb7
 800dd58:	0800dd77 	.word	0x0800dd77
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800ddb7 	.word	0x0800ddb7
 800dd64:	0800dd8f 	.word	0x0800dd8f
 800dd68:	0800dd81 	.word	0x0800dd81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f9de 	bl	800e130 <USBD_GetDescriptor>
          break;
 800dd74:	e024      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fb6d 	bl	800e458 <USBD_SetAddress>
          break;
 800dd7e:	e01f      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dd80:	6839      	ldr	r1, [r7, #0]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fbac 	bl	800e4e0 <USBD_SetConfig>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]
          break;
 800dd8c:	e018      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fc4b 	bl	800e62c <USBD_GetConfig>
          break;
 800dd96:	e013      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fc7c 	bl	800e698 <USBD_GetStatus>
          break;
 800dda0:	e00e      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fcab 	bl	800e700 <USBD_SetFeature>
          break;
 800ddaa:	e009      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fcba 	bl	800e728 <USBD_ClrFeature>
          break;
 800ddb4:	e004      	b.n	800ddc0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ddb6:	6839      	ldr	r1, [r7, #0]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 fd11 	bl	800e7e0 <USBD_CtlError>
          break;
 800ddbe:	bf00      	nop
      }
      break;
 800ddc0:	e004      	b.n	800ddcc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fd0b 	bl	800e7e0 <USBD_CtlError>
      break;
 800ddca:	bf00      	nop
  }

  return ret;
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop

0800ddd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddee:	2b40      	cmp	r3, #64	@ 0x40
 800ddf0:	d005      	beq.n	800ddfe <USBD_StdItfReq+0x26>
 800ddf2:	2b40      	cmp	r3, #64	@ 0x40
 800ddf4:	d82f      	bhi.n	800de56 <USBD_StdItfReq+0x7e>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <USBD_StdItfReq+0x26>
 800ddfa:	2b20      	cmp	r3, #32
 800ddfc:	d12b      	bne.n	800de56 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de04:	b2db      	uxtb	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d81d      	bhi.n	800de48 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	889b      	ldrh	r3, [r3, #4]
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	d813      	bhi.n	800de3e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	4798      	blx	r3
 800de24:	4603      	mov	r3, r0
 800de26:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	88db      	ldrh	r3, [r3, #6]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d110      	bne.n	800de52 <USBD_StdItfReq+0x7a>
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10d      	bne.n	800de52 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fd9d 	bl	800e976 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800de3c:	e009      	b.n	800de52 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fccd 	bl	800e7e0 <USBD_CtlError>
          break;
 800de46:	e004      	b.n	800de52 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fcc8 	bl	800e7e0 <USBD_CtlError>
          break;
 800de50:	e000      	b.n	800de54 <USBD_StdItfReq+0x7c>
          break;
 800de52:	bf00      	nop
      }
      break;
 800de54:	e004      	b.n	800de60 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fcc1 	bl	800e7e0 <USBD_CtlError>
      break;
 800de5e:	bf00      	nop
  }

  return ret;
 800de60:	7bfb      	ldrb	r3, [r7, #15]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	889b      	ldrh	r3, [r3, #4]
 800de7c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de86:	2b40      	cmp	r3, #64	@ 0x40
 800de88:	d007      	beq.n	800de9a <USBD_StdEPReq+0x30>
 800de8a:	2b40      	cmp	r3, #64	@ 0x40
 800de8c:	f200 8145 	bhi.w	800e11a <USBD_StdEPReq+0x2b0>
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00c      	beq.n	800deae <USBD_StdEPReq+0x44>
 800de94:	2b20      	cmp	r3, #32
 800de96:	f040 8140 	bne.w	800e11a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	4798      	blx	r3
 800dea8:	4603      	mov	r3, r0
 800deaa:	73fb      	strb	r3, [r7, #15]
      break;
 800deac:	e13a      	b.n	800e124 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	785b      	ldrb	r3, [r3, #1]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d007      	beq.n	800dec6 <USBD_StdEPReq+0x5c>
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	f300 8129 	bgt.w	800e10e <USBD_StdEPReq+0x2a4>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d07f      	beq.n	800dfc0 <USBD_StdEPReq+0x156>
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d03c      	beq.n	800df3e <USBD_StdEPReq+0xd4>
 800dec4:	e123      	b.n	800e10e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b02      	cmp	r3, #2
 800ded0:	d002      	beq.n	800ded8 <USBD_StdEPReq+0x6e>
 800ded2:	2b03      	cmp	r3, #3
 800ded4:	d016      	beq.n	800df04 <USBD_StdEPReq+0x9a>
 800ded6:	e02c      	b.n	800df32 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ded8:	7bbb      	ldrb	r3, [r7, #14]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00d      	beq.n	800defa <USBD_StdEPReq+0x90>
 800dede:	7bbb      	ldrb	r3, [r7, #14]
 800dee0:	2b80      	cmp	r3, #128	@ 0x80
 800dee2:	d00a      	beq.n	800defa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	4619      	mov	r1, r3
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f001 f941 	bl	800f170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deee:	2180      	movs	r1, #128	@ 0x80
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 f93d 	bl	800f170 <USBD_LL_StallEP>
 800def6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800def8:	e020      	b.n	800df3c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fc6f 	bl	800e7e0 <USBD_CtlError>
              break;
 800df02:	e01b      	b.n	800df3c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	885b      	ldrh	r3, [r3, #2]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10e      	bne.n	800df2a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00b      	beq.n	800df2a <USBD_StdEPReq+0xc0>
 800df12:	7bbb      	ldrb	r3, [r7, #14]
 800df14:	2b80      	cmp	r3, #128	@ 0x80
 800df16:	d008      	beq.n	800df2a <USBD_StdEPReq+0xc0>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	88db      	ldrh	r3, [r3, #6]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d104      	bne.n	800df2a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f001 f923 	bl	800f170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fd23 	bl	800e976 <USBD_CtlSendStatus>

              break;
 800df30:	e004      	b.n	800df3c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fc53 	bl	800e7e0 <USBD_CtlError>
              break;
 800df3a:	bf00      	nop
          }
          break;
 800df3c:	e0ec      	b.n	800e118 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df44:	b2db      	uxtb	r3, r3
 800df46:	2b02      	cmp	r3, #2
 800df48:	d002      	beq.n	800df50 <USBD_StdEPReq+0xe6>
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	d016      	beq.n	800df7c <USBD_StdEPReq+0x112>
 800df4e:	e030      	b.n	800dfb2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df50:	7bbb      	ldrb	r3, [r7, #14]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00d      	beq.n	800df72 <USBD_StdEPReq+0x108>
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b80      	cmp	r3, #128	@ 0x80
 800df5a:	d00a      	beq.n	800df72 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f001 f905 	bl	800f170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df66:	2180      	movs	r1, #128	@ 0x80
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f001 f901 	bl	800f170 <USBD_LL_StallEP>
 800df6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df70:	e025      	b.n	800dfbe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fc33 	bl	800e7e0 <USBD_CtlError>
              break;
 800df7a:	e020      	b.n	800dfbe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d11b      	bne.n	800dfbc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df84:	7bbb      	ldrb	r3, [r7, #14]
 800df86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d004      	beq.n	800df98 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df8e:	7bbb      	ldrb	r3, [r7, #14]
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f001 f90b 	bl	800f1ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fcec 	bl	800e976 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	4798      	blx	r3
 800dfac:	4603      	mov	r3, r0
 800dfae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dfb0:	e004      	b.n	800dfbc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fc13 	bl	800e7e0 <USBD_CtlError>
              break;
 800dfba:	e000      	b.n	800dfbe <USBD_StdEPReq+0x154>
              break;
 800dfbc:	bf00      	nop
          }
          break;
 800dfbe:	e0ab      	b.n	800e118 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d002      	beq.n	800dfd2 <USBD_StdEPReq+0x168>
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d032      	beq.n	800e036 <USBD_StdEPReq+0x1cc>
 800dfd0:	e097      	b.n	800e102 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d007      	beq.n	800dfe8 <USBD_StdEPReq+0x17e>
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	2b80      	cmp	r3, #128	@ 0x80
 800dfdc:	d004      	beq.n	800dfe8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 fbfd 	bl	800e7e0 <USBD_CtlError>
                break;
 800dfe6:	e091      	b.n	800e10c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	da0b      	bge.n	800e008 <USBD_StdEPReq+0x19e>
 800dff0:	7bbb      	ldrb	r3, [r7, #14]
 800dff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dff6:	4613      	mov	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4413      	add	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	3310      	adds	r3, #16
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	4413      	add	r3, r2
 800e004:	3304      	adds	r3, #4
 800e006:	e00b      	b.n	800e020 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e00e:	4613      	mov	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	4413      	add	r3, r2
 800e01e:	3304      	adds	r3, #4
 800e020:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2200      	movs	r2, #0
 800e026:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2202      	movs	r2, #2
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fc47 	bl	800e8c2 <USBD_CtlSendData>
              break;
 800e034:	e06a      	b.n	800e10c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	da11      	bge.n	800e062 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	f003 020f 	and.w	r2, r3, #15
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	440b      	add	r3, r1
 800e050:	3324      	adds	r3, #36	@ 0x24
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d117      	bne.n	800e088 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fbc0 	bl	800e7e0 <USBD_CtlError>
                  break;
 800e060:	e054      	b.n	800e10c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e062:	7bbb      	ldrb	r3, [r7, #14]
 800e064:	f003 020f 	and.w	r2, r3, #15
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	4613      	mov	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4413      	add	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	440b      	add	r3, r1
 800e074:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d104      	bne.n	800e088 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e07e:	6839      	ldr	r1, [r7, #0]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 fbad 	bl	800e7e0 <USBD_CtlError>
                  break;
 800e086:	e041      	b.n	800e10c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	da0b      	bge.n	800e0a8 <USBD_StdEPReq+0x23e>
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e096:	4613      	mov	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	3310      	adds	r3, #16
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	e00b      	b.n	800e0c0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	4413      	add	r3, r2
 800e0be:	3304      	adds	r3, #4
 800e0c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0c2:	7bbb      	ldrb	r3, [r7, #14]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <USBD_StdEPReq+0x264>
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ca:	2b80      	cmp	r3, #128	@ 0x80
 800e0cc:	d103      	bne.n	800e0d6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	e00e      	b.n	800e0f4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0d6:	7bbb      	ldrb	r3, [r7, #14]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f001 f886 	bl	800f1ec <USBD_LL_IsStallEP>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	e002      	b.n	800e0f4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fbe1 	bl	800e8c2 <USBD_CtlSendData>
              break;
 800e100:	e004      	b.n	800e10c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e102:	6839      	ldr	r1, [r7, #0]
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fb6b 	bl	800e7e0 <USBD_CtlError>
              break;
 800e10a:	bf00      	nop
          }
          break;
 800e10c:	e004      	b.n	800e118 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e10e:	6839      	ldr	r1, [r7, #0]
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fb65 	bl	800e7e0 <USBD_CtlError>
          break;
 800e116:	bf00      	nop
      }
      break;
 800e118:	e004      	b.n	800e124 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fb5f 	bl	800e7e0 <USBD_CtlError>
      break;
 800e122:	bf00      	nop
  }

  return ret;
 800e124:	7bfb      	ldrb	r3, [r7, #15]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
	...

0800e130 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e13a:	2300      	movs	r3, #0
 800e13c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e13e:	2300      	movs	r3, #0
 800e140:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e142:	2300      	movs	r3, #0
 800e144:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	885b      	ldrh	r3, [r3, #2]
 800e14a:	0a1b      	lsrs	r3, r3, #8
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	3b01      	subs	r3, #1
 800e150:	2b0e      	cmp	r3, #14
 800e152:	f200 8152 	bhi.w	800e3fa <USBD_GetDescriptor+0x2ca>
 800e156:	a201      	add	r2, pc, #4	@ (adr r2, 800e15c <USBD_GetDescriptor+0x2c>)
 800e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15c:	0800e1cd 	.word	0x0800e1cd
 800e160:	0800e1e5 	.word	0x0800e1e5
 800e164:	0800e225 	.word	0x0800e225
 800e168:	0800e3fb 	.word	0x0800e3fb
 800e16c:	0800e3fb 	.word	0x0800e3fb
 800e170:	0800e39b 	.word	0x0800e39b
 800e174:	0800e3c7 	.word	0x0800e3c7
 800e178:	0800e3fb 	.word	0x0800e3fb
 800e17c:	0800e3fb 	.word	0x0800e3fb
 800e180:	0800e3fb 	.word	0x0800e3fb
 800e184:	0800e3fb 	.word	0x0800e3fb
 800e188:	0800e3fb 	.word	0x0800e3fb
 800e18c:	0800e3fb 	.word	0x0800e3fb
 800e190:	0800e3fb 	.word	0x0800e3fb
 800e194:	0800e199 	.word	0x0800e199
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e19e:	69db      	ldr	r3, [r3, #28]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00b      	beq.n	800e1bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1aa:	69db      	ldr	r3, [r3, #28]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	7c12      	ldrb	r2, [r2, #16]
 800e1b0:	f107 0108 	add.w	r1, r7, #8
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4798      	blx	r3
 800e1b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1ba:	e126      	b.n	800e40a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 fb0e 	bl	800e7e0 <USBD_CtlError>
        err++;
 800e1c4:	7afb      	ldrb	r3, [r7, #11]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ca:	e11e      	b.n	800e40a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	7c12      	ldrb	r2, [r2, #16]
 800e1d8:	f107 0108 	add.w	r1, r7, #8
 800e1dc:	4610      	mov	r0, r2
 800e1de:	4798      	blx	r3
 800e1e0:	60f8      	str	r0, [r7, #12]
      break;
 800e1e2:	e112      	b.n	800e40a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7c1b      	ldrb	r3, [r3, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10d      	bne.n	800e208 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f4:	f107 0208 	add.w	r2, r7, #8
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4798      	blx	r3
 800e1fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3301      	adds	r3, #1
 800e202:	2202      	movs	r2, #2
 800e204:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e206:	e100      	b.n	800e40a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e210:	f107 0208 	add.w	r2, r7, #8
 800e214:	4610      	mov	r0, r2
 800e216:	4798      	blx	r3
 800e218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3301      	adds	r3, #1
 800e21e:	2202      	movs	r2, #2
 800e220:	701a      	strb	r2, [r3, #0]
      break;
 800e222:	e0f2      	b.n	800e40a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	885b      	ldrh	r3, [r3, #2]
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2b05      	cmp	r3, #5
 800e22c:	f200 80ac 	bhi.w	800e388 <USBD_GetDescriptor+0x258>
 800e230:	a201      	add	r2, pc, #4	@ (adr r2, 800e238 <USBD_GetDescriptor+0x108>)
 800e232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e236:	bf00      	nop
 800e238:	0800e251 	.word	0x0800e251
 800e23c:	0800e285 	.word	0x0800e285
 800e240:	0800e2b9 	.word	0x0800e2b9
 800e244:	0800e2ed 	.word	0x0800e2ed
 800e248:	0800e321 	.word	0x0800e321
 800e24c:	0800e355 	.word	0x0800e355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00b      	beq.n	800e274 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	7c12      	ldrb	r2, [r2, #16]
 800e268:	f107 0108 	add.w	r1, r7, #8
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
 800e270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e272:	e091      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fab2 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e27c:	7afb      	ldrb	r3, [r7, #11]
 800e27e:	3301      	adds	r3, #1
 800e280:	72fb      	strb	r3, [r7, #11]
          break;
 800e282:	e089      	b.n	800e398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00b      	beq.n	800e2a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	7c12      	ldrb	r2, [r2, #16]
 800e29c:	f107 0108 	add.w	r1, r7, #8
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	4798      	blx	r3
 800e2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2a6:	e077      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 fa98 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e2b0:	7afb      	ldrb	r3, [r7, #11]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2b6:	e06f      	b.n	800e398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d00b      	beq.n	800e2dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	7c12      	ldrb	r2, [r2, #16]
 800e2d0:	f107 0108 	add.w	r1, r7, #8
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4798      	blx	r3
 800e2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2da:	e05d      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fa7e 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e2e4:	7afb      	ldrb	r3, [r7, #11]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ea:	e055      	b.n	800e398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00b      	beq.n	800e310 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	7c12      	ldrb	r2, [r2, #16]
 800e304:	f107 0108 	add.w	r1, r7, #8
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
 800e30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e30e:	e043      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fa64 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e318:	7afb      	ldrb	r3, [r7, #11]
 800e31a:	3301      	adds	r3, #1
 800e31c:	72fb      	strb	r3, [r7, #11]
          break;
 800e31e:	e03b      	b.n	800e398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e332:	695b      	ldr	r3, [r3, #20]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	7c12      	ldrb	r2, [r2, #16]
 800e338:	f107 0108 	add.w	r1, r7, #8
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
 800e340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e342:	e029      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fa4a 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e34c:	7afb      	ldrb	r3, [r7, #11]
 800e34e:	3301      	adds	r3, #1
 800e350:	72fb      	strb	r3, [r7, #11]
          break;
 800e352:	e021      	b.n	800e398 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e366:	699b      	ldr	r3, [r3, #24]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	7c12      	ldrb	r2, [r2, #16]
 800e36c:	f107 0108 	add.w	r1, r7, #8
 800e370:	4610      	mov	r0, r2
 800e372:	4798      	blx	r3
 800e374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e376:	e00f      	b.n	800e398 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fa30 	bl	800e7e0 <USBD_CtlError>
            err++;
 800e380:	7afb      	ldrb	r3, [r7, #11]
 800e382:	3301      	adds	r3, #1
 800e384:	72fb      	strb	r3, [r7, #11]
          break;
 800e386:	e007      	b.n	800e398 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fa28 	bl	800e7e0 <USBD_CtlError>
          err++;
 800e390:	7afb      	ldrb	r3, [r7, #11]
 800e392:	3301      	adds	r3, #1
 800e394:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e396:	bf00      	nop
      }
      break;
 800e398:	e037      	b.n	800e40a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7c1b      	ldrb	r3, [r3, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d109      	bne.n	800e3b6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3aa:	f107 0208 	add.w	r2, r7, #8
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	4798      	blx	r3
 800e3b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3b4:	e029      	b.n	800e40a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fa11 	bl	800e7e0 <USBD_CtlError>
        err++;
 800e3be:	7afb      	ldrb	r3, [r7, #11]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	72fb      	strb	r3, [r7, #11]
      break;
 800e3c4:	e021      	b.n	800e40a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	7c1b      	ldrb	r3, [r3, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10d      	bne.n	800e3ea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d6:	f107 0208 	add.w	r2, r7, #8
 800e3da:	4610      	mov	r0, r2
 800e3dc:	4798      	blx	r3
 800e3de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	2207      	movs	r2, #7
 800e3e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3e8:	e00f      	b.n	800e40a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f9f7 	bl	800e7e0 <USBD_CtlError>
        err++;
 800e3f2:	7afb      	ldrb	r3, [r7, #11]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3f8:	e007      	b.n	800e40a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f9ef 	bl	800e7e0 <USBD_CtlError>
      err++;
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	3301      	adds	r3, #1
 800e406:	72fb      	strb	r3, [r7, #11]
      break;
 800e408:	bf00      	nop
  }

  if (err != 0U)
 800e40a:	7afb      	ldrb	r3, [r7, #11]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d11e      	bne.n	800e44e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	88db      	ldrh	r3, [r3, #6]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d016      	beq.n	800e446 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e418:	893b      	ldrh	r3, [r7, #8]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00e      	beq.n	800e43c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	88da      	ldrh	r2, [r3, #6]
 800e422:	893b      	ldrh	r3, [r7, #8]
 800e424:	4293      	cmp	r3, r2
 800e426:	bf28      	it	cs
 800e428:	4613      	movcs	r3, r2
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e42e:	893b      	ldrh	r3, [r7, #8]
 800e430:	461a      	mov	r2, r3
 800e432:	68f9      	ldr	r1, [r7, #12]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 fa44 	bl	800e8c2 <USBD_CtlSendData>
 800e43a:	e009      	b.n	800e450 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f9ce 	bl	800e7e0 <USBD_CtlError>
 800e444:	e004      	b.n	800e450 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 fa95 	bl	800e976 <USBD_CtlSendStatus>
 800e44c:	e000      	b.n	800e450 <USBD_GetDescriptor+0x320>
    return;
 800e44e:	bf00      	nop
  }
}
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop

0800e458 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	889b      	ldrh	r3, [r3, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d131      	bne.n	800e4ce <USBD_SetAddress+0x76>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	88db      	ldrh	r3, [r3, #6]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d12d      	bne.n	800e4ce <USBD_SetAddress+0x76>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	885b      	ldrh	r3, [r3, #2]
 800e476:	2b7f      	cmp	r3, #127	@ 0x7f
 800e478:	d829      	bhi.n	800e4ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	885b      	ldrh	r3, [r3, #2]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d104      	bne.n	800e49c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f9a3 	bl	800e7e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e49a:	e01d      	b.n	800e4d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7bfa      	ldrb	r2, [r7, #15]
 800e4a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fecb 	bl	800f244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fa61 	bl	800e976 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d004      	beq.n	800e4c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2202      	movs	r2, #2
 800e4be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4c2:	e009      	b.n	800e4d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4cc:	e004      	b.n	800e4d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f985 	bl	800e7e0 <USBD_CtlError>
  }
}
 800e4d6:	bf00      	nop
 800e4d8:	bf00      	nop
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	885b      	ldrh	r3, [r3, #2]
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	4b4c      	ldr	r3, [pc, #304]	@ (800e628 <USBD_SetConfig+0x148>)
 800e4f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4f8:	4b4b      	ldr	r3, [pc, #300]	@ (800e628 <USBD_SetConfig+0x148>)
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d905      	bls.n	800e50c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f96c 	bl	800e7e0 <USBD_CtlError>
    return USBD_FAIL;
 800e508:	2303      	movs	r3, #3
 800e50a:	e088      	b.n	800e61e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e512:	b2db      	uxtb	r3, r3
 800e514:	2b02      	cmp	r3, #2
 800e516:	d002      	beq.n	800e51e <USBD_SetConfig+0x3e>
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d025      	beq.n	800e568 <USBD_SetConfig+0x88>
 800e51c:	e071      	b.n	800e602 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e51e:	4b42      	ldr	r3, [pc, #264]	@ (800e628 <USBD_SetConfig+0x148>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d01c      	beq.n	800e560 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e526:	4b40      	ldr	r3, [pc, #256]	@ (800e628 <USBD_SetConfig+0x148>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e530:	4b3d      	ldr	r3, [pc, #244]	@ (800e628 <USBD_SetConfig+0x148>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	4619      	mov	r1, r3
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff f992 	bl	800d860 <USBD_SetClassConfig>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d004      	beq.n	800e550 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f949 	bl	800e7e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e54e:	e065      	b.n	800e61c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 fa10 	bl	800e976 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2203      	movs	r2, #3
 800e55a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e55e:	e05d      	b.n	800e61c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fa08 	bl	800e976 <USBD_CtlSendStatus>
      break;
 800e566:	e059      	b.n	800e61c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e568:	4b2f      	ldr	r3, [pc, #188]	@ (800e628 <USBD_SetConfig+0x148>)
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d112      	bne.n	800e596 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e578:	4b2b      	ldr	r3, [pc, #172]	@ (800e628 <USBD_SetConfig+0x148>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	461a      	mov	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e582:	4b29      	ldr	r3, [pc, #164]	@ (800e628 <USBD_SetConfig+0x148>)
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff f985 	bl	800d898 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f9f1 	bl	800e976 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e594:	e042      	b.n	800e61c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e596:	4b24      	ldr	r3, [pc, #144]	@ (800e628 <USBD_SetConfig+0x148>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	461a      	mov	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d02a      	beq.n	800e5fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff f973 	bl	800d898 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800e628 <USBD_SetConfig+0x148>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5bc:	4b1a      	ldr	r3, [pc, #104]	@ (800e628 <USBD_SetConfig+0x148>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff f94c 	bl	800d860 <USBD_SetClassConfig>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00f      	beq.n	800e5f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f903 	bl	800e7e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff f958 	bl	800d898 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2202      	movs	r2, #2
 800e5ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e5f0:	e014      	b.n	800e61c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f9bf 	bl	800e976 <USBD_CtlSendStatus>
      break;
 800e5f8:	e010      	b.n	800e61c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f9bb 	bl	800e976 <USBD_CtlSendStatus>
      break;
 800e600:	e00c      	b.n	800e61c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f8eb 	bl	800e7e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e60a:	4b07      	ldr	r3, [pc, #28]	@ (800e628 <USBD_SetConfig+0x148>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	4619      	mov	r1, r3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff f941 	bl	800d898 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e616:	2303      	movs	r3, #3
 800e618:	73fb      	strb	r3, [r7, #15]
      break;
 800e61a:	bf00      	nop
  }

  return ret;
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20000560 	.word	0x20000560

0800e62c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	88db      	ldrh	r3, [r3, #6]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d004      	beq.n	800e648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f8cd 	bl	800e7e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e646:	e023      	b.n	800e690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b02      	cmp	r3, #2
 800e652:	dc02      	bgt.n	800e65a <USBD_GetConfig+0x2e>
 800e654:	2b00      	cmp	r3, #0
 800e656:	dc03      	bgt.n	800e660 <USBD_GetConfig+0x34>
 800e658:	e015      	b.n	800e686 <USBD_GetConfig+0x5a>
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d00b      	beq.n	800e676 <USBD_GetConfig+0x4a>
 800e65e:	e012      	b.n	800e686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3308      	adds	r3, #8
 800e66a:	2201      	movs	r2, #1
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f927 	bl	800e8c2 <USBD_CtlSendData>
        break;
 800e674:	e00c      	b.n	800e690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	3304      	adds	r3, #4
 800e67a:	2201      	movs	r2, #1
 800e67c:	4619      	mov	r1, r3
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f91f 	bl	800e8c2 <USBD_CtlSendData>
        break;
 800e684:	e004      	b.n	800e690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f8a9 	bl	800e7e0 <USBD_CtlError>
        break;
 800e68e:	bf00      	nop
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d81e      	bhi.n	800e6ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	88db      	ldrh	r3, [r3, #6]
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d004      	beq.n	800e6c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f890 	bl	800e7e0 <USBD_CtlError>
        break;
 800e6c0:	e01a      	b.n	800e6f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d005      	beq.n	800e6de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	f043 0202 	orr.w	r2, r3, #2
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	330c      	adds	r3, #12
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f8eb 	bl	800e8c2 <USBD_CtlSendData>
      break;
 800e6ec:	e004      	b.n	800e6f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f875 	bl	800e7e0 <USBD_CtlError>
      break;
 800e6f6:	bf00      	nop
  }
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	885b      	ldrh	r3, [r3, #2]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d106      	bne.n	800e720 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 f92b 	bl	800e976 <USBD_CtlSendStatus>
  }
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	3b01      	subs	r3, #1
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d80b      	bhi.n	800e758 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	885b      	ldrh	r3, [r3, #2]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d10c      	bne.n	800e762 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f910 	bl	800e976 <USBD_CtlSendStatus>
      }
      break;
 800e756:	e004      	b.n	800e762 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 f840 	bl	800e7e0 <USBD_CtlError>
      break;
 800e760:	e000      	b.n	800e764 <USBD_ClrFeature+0x3c>
      break;
 800e762:	bf00      	nop
  }
}
 800e764:	bf00      	nop
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	781a      	ldrb	r2, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3301      	adds	r3, #1
 800e786:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	781a      	ldrb	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3301      	adds	r3, #1
 800e794:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7ff fa92 	bl	800dcc0 <SWAPBYTE>
 800e79c:	4603      	mov	r3, r0
 800e79e:	461a      	mov	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f7ff fa85 	bl	800dcc0 <SWAPBYTE>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f7ff fa78 	bl	800dcc0 <SWAPBYTE>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	80da      	strh	r2, [r3, #6]
}
 800e7d8:	bf00      	nop
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ea:	2180      	movs	r1, #128	@ 0x80
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fcbf 	bl	800f170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fcbb 	bl	800f170 <USBD_LL_StallEP>
}
 800e7fa:	bf00      	nop
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b086      	sub	sp, #24
 800e806:	af00      	add	r7, sp, #0
 800e808:	60f8      	str	r0, [r7, #12]
 800e80a:	60b9      	str	r1, [r7, #8]
 800e80c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e80e:	2300      	movs	r3, #0
 800e810:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d036      	beq.n	800e886 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e81c:	6938      	ldr	r0, [r7, #16]
 800e81e:	f000 f836 	bl	800e88e <USBD_GetLen>
 800e822:	4603      	mov	r3, r0
 800e824:	3301      	adds	r3, #1
 800e826:	b29b      	uxth	r3, r3
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	4413      	add	r3, r2
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	7812      	ldrb	r2, [r2, #0]
 800e83a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	3301      	adds	r3, #1
 800e840:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e842:	7dfb      	ldrb	r3, [r7, #23]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	4413      	add	r3, r2
 800e848:	2203      	movs	r2, #3
 800e84a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	3301      	adds	r3, #1
 800e850:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e852:	e013      	b.n	800e87c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	4413      	add	r3, r2
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	7812      	ldrb	r2, [r2, #0]
 800e85e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	3301      	adds	r3, #1
 800e864:	613b      	str	r3, [r7, #16]
    idx++;
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	3301      	adds	r3, #1
 800e86a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	4413      	add	r3, r2
 800e872:	2200      	movs	r2, #0
 800e874:	701a      	strb	r2, [r3, #0]
    idx++;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
 800e878:	3301      	adds	r3, #1
 800e87a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e7      	bne.n	800e854 <USBD_GetString+0x52>
 800e884:	e000      	b.n	800e888 <USBD_GetString+0x86>
    return;
 800e886:	bf00      	nop
  }
}
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e88e:	b480      	push	{r7}
 800e890:	b085      	sub	sp, #20
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e89e:	e005      	b.n	800e8ac <USBD_GetLen+0x1e>
  {
    len++;
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1f5      	bne.n	800e8a0 <USBD_GetLen+0x12>
  }

  return len;
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b084      	sub	sp, #16
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 fcca 	bl	800f282 <USBD_LL_Transmit>

  return USBD_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f000 fcb9 	bl	800f282 <USBD_LL_Transmit>

  return USBD_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2203      	movs	r2, #3
 800e92a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	2100      	movs	r1, #0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 fcbd 	bl	800f2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68ba      	ldr	r2, [r7, #8]
 800e964:	2100      	movs	r1, #0
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f000 fcac 	bl	800f2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2204      	movs	r2, #4
 800e982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e986:	2300      	movs	r3, #0
 800e988:	2200      	movs	r2, #0
 800e98a:	2100      	movs	r1, #0
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fc78 	bl	800f282 <USBD_LL_Transmit>

  return USBD_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2205      	movs	r2, #5
 800e9a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 fc86 	bl	800f2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
	...

0800e9c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

	// force host to re-enumerate device to ensure debugger compatibility
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, RESET);
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2120      	movs	r1, #32
 800e9cc:	4818      	ldr	r0, [pc, #96]	@ (800ea30 <MX_USB_Device_Init+0x6c>)
 800e9ce:	f7f5 fb43 	bl	8004058 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800e9d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e9d6:	f7f4 fe11 	bl	80035fc <HAL_Delay>
	HAL_GPIO_WritePin(USB_RENUM_PORT, USB_RENUM_PIN, SET);
 800e9da:	2201      	movs	r2, #1
 800e9dc:	2120      	movs	r1, #32
 800e9de:	4814      	ldr	r0, [pc, #80]	@ (800ea30 <MX_USB_Device_Init+0x6c>)
 800e9e0:	f7f5 fb3a 	bl	8004058 <HAL_GPIO_WritePin>

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	4913      	ldr	r1, [pc, #76]	@ (800ea34 <MX_USB_Device_Init+0x70>)
 800e9e8:	4813      	ldr	r0, [pc, #76]	@ (800ea38 <MX_USB_Device_Init+0x74>)
 800e9ea:	f7fe fecb 	bl	800d784 <USBD_Init>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d001      	beq.n	800e9f8 <MX_USB_Device_Init+0x34>
    Error_Handler();
 800e9f4:	f7f2 fd05 	bl	8001402 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e9f8:	4910      	ldr	r1, [pc, #64]	@ (800ea3c <MX_USB_Device_Init+0x78>)
 800e9fa:	480f      	ldr	r0, [pc, #60]	@ (800ea38 <MX_USB_Device_Init+0x74>)
 800e9fc:	f7fe fef2 	bl	800d7e4 <USBD_RegisterClass>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <MX_USB_Device_Init+0x46>
    Error_Handler();
 800ea06:	f7f2 fcfc 	bl	8001402 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ea0a:	490d      	ldr	r1, [pc, #52]	@ (800ea40 <MX_USB_Device_Init+0x7c>)
 800ea0c:	480a      	ldr	r0, [pc, #40]	@ (800ea38 <MX_USB_Device_Init+0x74>)
 800ea0e:	f7fe fe13 	bl	800d638 <USBD_CDC_RegisterInterface>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <MX_USB_Device_Init+0x58>
    Error_Handler();
 800ea18:	f7f2 fcf3 	bl	8001402 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ea1c:	4806      	ldr	r0, [pc, #24]	@ (800ea38 <MX_USB_Device_Init+0x74>)
 800ea1e:	f7fe ff08 	bl	800d832 <USBD_Start>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <MX_USB_Device_Init+0x68>
    Error_Handler();
 800ea28:	f7f2 fceb 	bl	8001402 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ea2c:	bf00      	nop
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	48000400 	.word	0x48000400
 800ea34:	20000130 	.word	0x20000130
 800ea38:	20000564 	.word	0x20000564
 800ea3c:	20000018 	.word	0x20000018
 800ea40:	2000011c 	.word	0x2000011c

0800ea44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4905      	ldr	r1, [pc, #20]	@ (800ea60 <CDC_Init_FS+0x1c>)
 800ea4c:	4805      	ldr	r0, [pc, #20]	@ (800ea64 <CDC_Init_FS+0x20>)
 800ea4e:	f7fe fe08 	bl	800d662 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea52:	4905      	ldr	r1, [pc, #20]	@ (800ea68 <CDC_Init_FS+0x24>)
 800ea54:	4803      	ldr	r0, [pc, #12]	@ (800ea64 <CDC_Init_FS+0x20>)
 800ea56:	f7fe fe22 	bl	800d69e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	20001034 	.word	0x20001034
 800ea64:	20000564 	.word	0x20000564
 800ea68:	20000834 	.word	0x20000834

0800ea6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	6039      	str	r1, [r7, #0]
 800ea86:	71fb      	strb	r3, [r7, #7]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	2b23      	cmp	r3, #35	@ 0x23
 800ea90:	d84a      	bhi.n	800eb28 <CDC_Control_FS+0xac>
 800ea92:	a201      	add	r2, pc, #4	@ (adr r2, 800ea98 <CDC_Control_FS+0x1c>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eb29 	.word	0x0800eb29
 800ea9c:	0800eb29 	.word	0x0800eb29
 800eaa0:	0800eb29 	.word	0x0800eb29
 800eaa4:	0800eb29 	.word	0x0800eb29
 800eaa8:	0800eb29 	.word	0x0800eb29
 800eaac:	0800eb29 	.word	0x0800eb29
 800eab0:	0800eb29 	.word	0x0800eb29
 800eab4:	0800eb29 	.word	0x0800eb29
 800eab8:	0800eb29 	.word	0x0800eb29
 800eabc:	0800eb29 	.word	0x0800eb29
 800eac0:	0800eb29 	.word	0x0800eb29
 800eac4:	0800eb29 	.word	0x0800eb29
 800eac8:	0800eb29 	.word	0x0800eb29
 800eacc:	0800eb29 	.word	0x0800eb29
 800ead0:	0800eb29 	.word	0x0800eb29
 800ead4:	0800eb29 	.word	0x0800eb29
 800ead8:	0800eb29 	.word	0x0800eb29
 800eadc:	0800eb29 	.word	0x0800eb29
 800eae0:	0800eb29 	.word	0x0800eb29
 800eae4:	0800eb29 	.word	0x0800eb29
 800eae8:	0800eb29 	.word	0x0800eb29
 800eaec:	0800eb29 	.word	0x0800eb29
 800eaf0:	0800eb29 	.word	0x0800eb29
 800eaf4:	0800eb29 	.word	0x0800eb29
 800eaf8:	0800eb29 	.word	0x0800eb29
 800eafc:	0800eb29 	.word	0x0800eb29
 800eb00:	0800eb29 	.word	0x0800eb29
 800eb04:	0800eb29 	.word	0x0800eb29
 800eb08:	0800eb29 	.word	0x0800eb29
 800eb0c:	0800eb29 	.word	0x0800eb29
 800eb10:	0800eb29 	.word	0x0800eb29
 800eb14:	0800eb29 	.word	0x0800eb29
 800eb18:	0800eb29 	.word	0x0800eb29
 800eb1c:	0800eb29 	.word	0x0800eb29
 800eb20:	0800eb29 	.word	0x0800eb29
 800eb24:	0800eb29 	.word	0x0800eb29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb28:	bf00      	nop
  }

  return (USBD_OK);
 800eb2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb42:	6879      	ldr	r1, [r7, #4]
 800eb44:	4810      	ldr	r0, [pc, #64]	@ (800eb88 <CDC_Receive_FS+0x50>)
 800eb46:	f7fe fdaa 	bl	800d69e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb4a:	480f      	ldr	r0, [pc, #60]	@ (800eb88 <CDC_Receive_FS+0x50>)
 800eb4c:	f7fe fdf0 	bl	800d730 <USBD_CDC_ReceivePacket>

  sys.usb_data_present = 1;
 800eb50:	4b0e      	ldr	r3, [pc, #56]	@ (800eb8c <CDC_Receive_FS+0x54>)
 800eb52:	2201      	movs	r2, #1
 800eb54:	669a      	str	r2, [r3, #104]	@ 0x68

  uint8_t len = (uint8_t) *Len;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	73fb      	strb	r3, [r7, #15]
  memset (sys.usb_vcp_buffer, '\0', 64); // to clear buffer of old data
 800eb5c:	2240      	movs	r2, #64	@ 0x40
 800eb5e:	2100      	movs	r1, #0
 800eb60:	480b      	ldr	r0, [pc, #44]	@ (800eb90 <CDC_Receive_FS+0x58>)
 800eb62:	f000 fca9 	bl	800f4b8 <memset>
  memcpy (sys.usb_vcp_buffer, Buf, len); // copy data from receive buffer to program buffer
 800eb66:	7bfb      	ldrb	r3, [r7, #15]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	6879      	ldr	r1, [r7, #4]
 800eb6c:	4808      	ldr	r0, [pc, #32]	@ (800eb90 <CDC_Receive_FS+0x58>)
 800eb6e:	f000 fcd5 	bl	800f51c <memcpy>
  memset (Buf, '\0', 64); // clear receive buffer
 800eb72:	2240      	movs	r2, #64	@ 0x40
 800eb74:	2100      	movs	r1, #0
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 fc9e 	bl	800f4b8 <memset>

  return (USBD_OK);
 800eb7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000564 	.word	0x20000564
 800eb8c:	200003f4 	.word	0x200003f4
 800eb90:	20000410 	.word	0x20000410

0800eb94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eba4:	4b0d      	ldr	r3, [pc, #52]	@ (800ebdc <CDC_Transmit_FS+0x48>)
 800eba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e00b      	b.n	800ebd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ebba:	887b      	ldrh	r3, [r7, #2]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	6879      	ldr	r1, [r7, #4]
 800ebc0:	4806      	ldr	r0, [pc, #24]	@ (800ebdc <CDC_Transmit_FS+0x48>)
 800ebc2:	f7fe fd4e 	bl	800d662 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ebc6:	4805      	ldr	r0, [pc, #20]	@ (800ebdc <CDC_Transmit_FS+0x48>)
 800ebc8:	f7fe fd82 	bl	800d6d0 <USBD_CDC_TransmitPacket>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20000564 	.word	0x20000564

0800ebe0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	4613      	mov	r3, r2
 800ebec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ebf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	371c      	adds	r7, #28
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr
	...

0800ec04 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	6039      	str	r1, [r7, #0]
 800ec0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	2212      	movs	r2, #18
 800ec14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ec16:	4b03      	ldr	r3, [pc, #12]	@ (800ec24 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr
 800ec24:	20000150 	.word	0x20000150

0800ec28 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	6039      	str	r1, [r7, #0]
 800ec32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	2204      	movs	r2, #4
 800ec38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec3a:	4b03      	ldr	r3, [pc, #12]	@ (800ec48 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	20000164 	.word	0x20000164

0800ec4c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	6039      	str	r1, [r7, #0]
 800ec56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	4907      	ldr	r1, [pc, #28]	@ (800ec80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ec62:	4808      	ldr	r0, [pc, #32]	@ (800ec84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ec64:	f7ff fdcd 	bl	800e802 <USBD_GetString>
 800ec68:	e004      	b.n	800ec74 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	4904      	ldr	r1, [pc, #16]	@ (800ec80 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ec6e:	4805      	ldr	r0, [pc, #20]	@ (800ec84 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ec70:	f7ff fdc7 	bl	800e802 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec74:	4b02      	ldr	r3, [pc, #8]	@ (800ec80 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20001834 	.word	0x20001834
 800ec84:	0800fe3c 	.word	0x0800fe3c

0800ec88 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	4603      	mov	r3, r0
 800ec90:	6039      	str	r1, [r7, #0]
 800ec92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	4904      	ldr	r1, [pc, #16]	@ (800eca8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ec98:	4804      	ldr	r0, [pc, #16]	@ (800ecac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ec9a:	f7ff fdb2 	bl	800e802 <USBD_GetString>
  return USBD_StrDesc;
 800ec9e:	4b02      	ldr	r3, [pc, #8]	@ (800eca8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	20001834 	.word	0x20001834
 800ecac:	0800fe50 	.word	0x0800fe50

0800ecb0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	6039      	str	r1, [r7, #0]
 800ecba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	221a      	movs	r2, #26
 800ecc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ecc2:	f000 f843 	bl	800ed4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ecc6:	4b02      	ldr	r3, [pc, #8]	@ (800ecd0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	20000168 	.word	0x20000168

0800ecd4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4603      	mov	r3, r0
 800ecdc:	6039      	str	r1, [r7, #0]
 800ecde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ece0:	79fb      	ldrb	r3, [r7, #7]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d105      	bne.n	800ecf2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	4907      	ldr	r1, [pc, #28]	@ (800ed08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ecea:	4808      	ldr	r0, [pc, #32]	@ (800ed0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ecec:	f7ff fd89 	bl	800e802 <USBD_GetString>
 800ecf0:	e004      	b.n	800ecfc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	4904      	ldr	r1, [pc, #16]	@ (800ed08 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ecf6:	4805      	ldr	r0, [pc, #20]	@ (800ed0c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ecf8:	f7ff fd83 	bl	800e802 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecfc:	4b02      	ldr	r3, [pc, #8]	@ (800ed08 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3708      	adds	r7, #8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20001834 	.word	0x20001834
 800ed0c:	0800fe64 	.word	0x0800fe64

0800ed10 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	6039      	str	r1, [r7, #0]
 800ed1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d105      	bne.n	800ed2e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	4907      	ldr	r1, [pc, #28]	@ (800ed44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ed26:	4808      	ldr	r0, [pc, #32]	@ (800ed48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ed28:	f7ff fd6b 	bl	800e802 <USBD_GetString>
 800ed2c:	e004      	b.n	800ed38 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	4904      	ldr	r1, [pc, #16]	@ (800ed44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ed32:	4805      	ldr	r0, [pc, #20]	@ (800ed48 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ed34:	f7ff fd65 	bl	800e802 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed38:	4b02      	ldr	r3, [pc, #8]	@ (800ed44 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	20001834 	.word	0x20001834
 800ed48:	0800fe70 	.word	0x0800fe70

0800ed4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed52:	4b0f      	ldr	r3, [pc, #60]	@ (800ed90 <Get_SerialNum+0x44>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed58:	4b0e      	ldr	r3, [pc, #56]	@ (800ed94 <Get_SerialNum+0x48>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <Get_SerialNum+0x4c>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4413      	add	r3, r2
 800ed6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d009      	beq.n	800ed86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed72:	2208      	movs	r2, #8
 800ed74:	4909      	ldr	r1, [pc, #36]	@ (800ed9c <Get_SerialNum+0x50>)
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 f814 	bl	800eda4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed7c:	2204      	movs	r2, #4
 800ed7e:	4908      	ldr	r1, [pc, #32]	@ (800eda0 <Get_SerialNum+0x54>)
 800ed80:	68b8      	ldr	r0, [r7, #8]
 800ed82:	f000 f80f 	bl	800eda4 <IntToUnicode>
  }
}
 800ed86:	bf00      	nop
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	1fff7590 	.word	0x1fff7590
 800ed94:	1fff7594 	.word	0x1fff7594
 800ed98:	1fff7598 	.word	0x1fff7598
 800ed9c:	2000016a 	.word	0x2000016a
 800eda0:	2000017a 	.word	0x2000017a

0800eda4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b087      	sub	sp, #28
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800edb6:	2300      	movs	r3, #0
 800edb8:	75fb      	strb	r3, [r7, #23]
 800edba:	e027      	b.n	800ee0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	0f1b      	lsrs	r3, r3, #28
 800edc0:	2b09      	cmp	r3, #9
 800edc2:	d80b      	bhi.n	800eddc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	0f1b      	lsrs	r3, r3, #28
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	4619      	mov	r1, r3
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	440b      	add	r3, r1
 800edd4:	3230      	adds	r2, #48	@ 0x30
 800edd6:	b2d2      	uxtb	r2, r2
 800edd8:	701a      	strb	r2, [r3, #0]
 800edda:	e00a      	b.n	800edf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	0f1b      	lsrs	r3, r3, #28
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	7dfb      	ldrb	r3, [r7, #23]
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4619      	mov	r1, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	440b      	add	r3, r1
 800edec:	3237      	adds	r2, #55	@ 0x37
 800edee:	b2d2      	uxtb	r2, r2
 800edf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	011b      	lsls	r3, r3, #4
 800edf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800edf8:	7dfb      	ldrb	r3, [r7, #23]
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	3301      	adds	r3, #1
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	4413      	add	r3, r2
 800ee02:	2200      	movs	r2, #0
 800ee04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee06:	7dfb      	ldrb	r3, [r7, #23]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	75fb      	strb	r3, [r7, #23]
 800ee0c:	7dfa      	ldrb	r2, [r7, #23]
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d3d3      	bcc.n	800edbc <IntToUnicode+0x18>
  }
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
	...

0800ee24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b098      	sub	sp, #96	@ 0x60
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ee2c:	f107 0310 	add.w	r3, r7, #16
 800ee30:	2250      	movs	r2, #80	@ 0x50
 800ee32:	2100      	movs	r1, #0
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 fb3f 	bl	800f4b8 <memset>
  if(pcdHandle->Instance==USB)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a15      	ldr	r2, [pc, #84]	@ (800ee94 <HAL_PCD_MspInit+0x70>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d122      	bne.n	800ee8a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ee44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ee48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ee4e:	f107 0310 	add.w	r3, r7, #16
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7f8 fad2 	bl	80073fc <HAL_RCCEx_PeriphCLKConfig>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ee5e:	f7f2 fad0 	bl	8001402 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ee62:	4b0d      	ldr	r3, [pc, #52]	@ (800ee98 <HAL_PCD_MspInit+0x74>)
 800ee64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee66:	4a0c      	ldr	r2, [pc, #48]	@ (800ee98 <HAL_PCD_MspInit+0x74>)
 800ee68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ee6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee98 <HAL_PCD_MspInit+0x74>)
 800ee70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	2014      	movs	r0, #20
 800ee80:	f7f4 fcb9 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ee84:	2014      	movs	r0, #20
 800ee86:	f7f4 fcd0 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ee8a:	bf00      	nop
 800ee8c:	3760      	adds	r7, #96	@ 0x60
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	40005c00 	.word	0x40005c00
 800ee98:	40021000 	.word	0x40021000

0800ee9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f7fe fd08 	bl	800d8c8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800eed2:	78fa      	ldrb	r2, [r7, #3]
 800eed4:	6879      	ldr	r1, [r7, #4]
 800eed6:	4613      	mov	r3, r2
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4413      	add	r3, r2
 800eedc:	00db      	lsls	r3, r3, #3
 800eede:	440b      	add	r3, r1
 800eee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	78fb      	ldrb	r3, [r7, #3]
 800eee8:	4619      	mov	r1, r3
 800eeea:	f7fe fd42 	bl	800d972 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b082      	sub	sp, #8
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
 800eefe:	460b      	mov	r3, r1
 800ef00:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ef08:	78fa      	ldrb	r2, [r7, #3]
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4413      	add	r3, r2
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	440b      	add	r3, r1
 800ef16:	3324      	adds	r3, #36	@ 0x24
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	78fb      	ldrb	r3, [r7, #3]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	f7fe fd8b 	bl	800da38 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ef22:	bf00      	nop
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fe fe9f 	bl	800dc7c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b084      	sub	sp, #16
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	795b      	ldrb	r3, [r3, #5]
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d001      	beq.n	800ef5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef5a:	f7f2 fa52 	bl	8001402 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ef64:	7bfa      	ldrb	r2, [r7, #15]
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fe fe49 	bl	800dc00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fe fdf5 	bl	800db64 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ef7a:	bf00      	nop
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fe fe44 	bl	800dc20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7a5b      	ldrb	r3, [r3, #9]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d005      	beq.n	800efac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efa0:	4b04      	ldr	r3, [pc, #16]	@ (800efb4 <HAL_PCD_SuspendCallback+0x30>)
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	4a03      	ldr	r2, [pc, #12]	@ (800efb4 <HAL_PCD_SuspendCallback+0x30>)
 800efa6:	f043 0306 	orr.w	r3, r3, #6
 800efaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800efac:	bf00      	nop
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	e000ed00 	.word	0xe000ed00

0800efb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7a5b      	ldrb	r3, [r3, #9]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d007      	beq.n	800efd8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efc8:	4b08      	ldr	r3, [pc, #32]	@ (800efec <HAL_PCD_ResumeCallback+0x34>)
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	4a07      	ldr	r2, [pc, #28]	@ (800efec <HAL_PCD_ResumeCallback+0x34>)
 800efce:	f023 0306 	bic.w	r3, r3, #6
 800efd2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800efd4:	f000 f9f8 	bl	800f3c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe fe34 	bl	800dc4c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800efe4:	bf00      	nop
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	e000ed00 	.word	0xe000ed00

0800eff0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800eff8:	4a2b      	ldr	r2, [pc, #172]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a29      	ldr	r2, [pc, #164]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f004:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f008:	4b27      	ldr	r3, [pc, #156]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f00a:	4a28      	ldr	r2, [pc, #160]	@ (800f0ac <USBD_LL_Init+0xbc>)
 800f00c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f00e:	4b26      	ldr	r3, [pc, #152]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f010:	2208      	movs	r2, #8
 800f012:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f014:	4b24      	ldr	r3, [pc, #144]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f016:	2202      	movs	r2, #2
 800f018:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f01a:	4b23      	ldr	r3, [pc, #140]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f01c:	2202      	movs	r2, #2
 800f01e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f020:	4b21      	ldr	r3, [pc, #132]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f022:	2200      	movs	r2, #0
 800f024:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f026:	4b20      	ldr	r3, [pc, #128]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f028:	2200      	movs	r2, #0
 800f02a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f02c:	4b1e      	ldr	r3, [pc, #120]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f02e:	2200      	movs	r2, #0
 800f030:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f032:	4b1d      	ldr	r3, [pc, #116]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f034:	2200      	movs	r2, #0
 800f036:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f038:	481b      	ldr	r0, [pc, #108]	@ (800f0a8 <USBD_LL_Init+0xb8>)
 800f03a:	f7f5 fefb 	bl	8004e34 <HAL_PCD_Init>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f044:	f7f2 f9dd 	bl	8001402 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f04e:	2318      	movs	r3, #24
 800f050:	2200      	movs	r2, #0
 800f052:	2100      	movs	r1, #0
 800f054:	f7f7 fb82 	bl	800675c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f05e:	2358      	movs	r3, #88	@ 0x58
 800f060:	2200      	movs	r2, #0
 800f062:	2180      	movs	r1, #128	@ 0x80
 800f064:	f7f7 fb7a 	bl	800675c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f06e:	23c0      	movs	r3, #192	@ 0xc0
 800f070:	2200      	movs	r2, #0
 800f072:	2181      	movs	r1, #129	@ 0x81
 800f074:	f7f7 fb72 	bl	800675c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f07e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f082:	2200      	movs	r2, #0
 800f084:	2101      	movs	r1, #1
 800f086:	f7f7 fb69 	bl	800675c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f094:	2200      	movs	r2, #0
 800f096:	2182      	movs	r1, #130	@ 0x82
 800f098:	f7f7 fb60 	bl	800675c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20001a34 	.word	0x20001a34
 800f0ac:	40005c00 	.word	0x40005c00

0800f0b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7f5 ff82 	bl	8004fd0 <HAL_PCD_Start>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f97e 	bl	800f3d4 <USBD_Get_USB_Status>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	70fb      	strb	r3, [r7, #3]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	70bb      	strb	r3, [r7, #2]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f100:	2300      	movs	r3, #0
 800f102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f10e:	78bb      	ldrb	r3, [r7, #2]
 800f110:	883a      	ldrh	r2, [r7, #0]
 800f112:	78f9      	ldrb	r1, [r7, #3]
 800f114:	f7f6 f8c9 	bl	80052aa <HAL_PCD_EP_Open>
 800f118:	4603      	mov	r3, r0
 800f11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 f958 	bl	800f3d4 <USBD_Get_USB_Status>
 800f124:	4603      	mov	r3, r0
 800f126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f128:	7bbb      	ldrb	r3, [r7, #14]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f142:	2300      	movs	r3, #0
 800f144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f14c:	78fa      	ldrb	r2, [r7, #3]
 800f14e:	4611      	mov	r1, r2
 800f150:	4618      	mov	r0, r3
 800f152:	f7f6 f909 	bl	8005368 <HAL_PCD_EP_Close>
 800f156:	4603      	mov	r3, r0
 800f158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f000 f939 	bl	800f3d4 <USBD_Get_USB_Status>
 800f162:	4603      	mov	r3, r0
 800f164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f166:	7bbb      	ldrb	r3, [r7, #14]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	460b      	mov	r3, r1
 800f17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f18a:	78fa      	ldrb	r2, [r7, #3]
 800f18c:	4611      	mov	r1, r2
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f6 f9b2 	bl	80054f8 <HAL_PCD_EP_SetStall>
 800f194:	4603      	mov	r3, r0
 800f196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 f91a 	bl	800f3d4 <USBD_Get_USB_Status>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f1c8:	78fa      	ldrb	r2, [r7, #3]
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7f6 f9e5 	bl	800559c <HAL_PCD_EP_ClrStall>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d6:	7bfb      	ldrb	r3, [r7, #15]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 f8fb 	bl	800f3d4 <USBD_Get_USB_Status>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b085      	sub	sp, #20
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f1fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f204:	2b00      	cmp	r3, #0
 800f206:	da0b      	bge.n	800f220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f20e:	68f9      	ldr	r1, [r7, #12]
 800f210:	4613      	mov	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	4413      	add	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	440b      	add	r3, r1
 800f21a:	3312      	adds	r3, #18
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	e00b      	b.n	800f238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f226:	68f9      	ldr	r1, [r7, #12]
 800f228:	4613      	mov	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	440b      	add	r3, r1
 800f232:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f236:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3714      	adds	r7, #20
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	460b      	mov	r3, r1
 800f24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f25e:	78fa      	ldrb	r2, [r7, #3]
 800f260:	4611      	mov	r1, r2
 800f262:	4618      	mov	r0, r3
 800f264:	f7f5 fffd 	bl	8005262 <HAL_PCD_SetAddress>
 800f268:	4603      	mov	r3, r0
 800f26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f26c:	7bfb      	ldrb	r3, [r7, #15]
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 f8b0 	bl	800f3d4 <USBD_Get_USB_Status>
 800f274:	4603      	mov	r3, r0
 800f276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f278:	7bbb      	ldrb	r3, [r7, #14]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b086      	sub	sp, #24
 800f286:	af00      	add	r7, sp, #0
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	603b      	str	r3, [r7, #0]
 800f28e:	460b      	mov	r3, r1
 800f290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2a0:	7af9      	ldrb	r1, [r7, #11]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	f7f6 f8f0 	bl	800548a <HAL_PCD_EP_Transmit>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ae:	7dfb      	ldrb	r3, [r7, #23]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f000 f88f 	bl	800f3d4 <USBD_Get_USB_Status>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	607a      	str	r2, [r7, #4]
 800f2ce:	603b      	str	r3, [r7, #0]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2e2:	7af9      	ldrb	r1, [r7, #11]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	f7f6 f886 	bl	80053f8 <HAL_PCD_EP_Receive>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 f86e 	bl	800f3d4 <USBD_Get_USB_Status>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b082      	sub	sp, #8
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
 800f30e:	460b      	mov	r3, r1
 800f310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f318:	78fa      	ldrb	r2, [r7, #3]
 800f31a:	4611      	mov	r1, r2
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f6 f89c 	bl	800545a <HAL_PCD_EP_GetRxCount>
 800f322:	4603      	mov	r3, r0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f338:	78fb      	ldrb	r3, [r7, #3]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <HAL_PCDEx_LPM_Callback+0x18>
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d013      	beq.n	800f36a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f342:	e023      	b.n	800f38c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	7a5b      	ldrb	r3, [r3, #9]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d007      	beq.n	800f35c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f34c:	f000 f83c 	bl	800f3c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f350:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <HAL_PCDEx_LPM_Callback+0x68>)
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	4a0f      	ldr	r2, [pc, #60]	@ (800f394 <HAL_PCDEx_LPM_Callback+0x68>)
 800f356:	f023 0306 	bic.w	r3, r3, #6
 800f35a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f362:	4618      	mov	r0, r3
 800f364:	f7fe fc72 	bl	800dc4c <USBD_LL_Resume>
    break;
 800f368:	e010      	b.n	800f38c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe fc55 	bl	800dc20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7a5b      	ldrb	r3, [r3, #9]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d005      	beq.n	800f38a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f37e:	4b05      	ldr	r3, [pc, #20]	@ (800f394 <HAL_PCDEx_LPM_Callback+0x68>)
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	4a04      	ldr	r2, [pc, #16]	@ (800f394 <HAL_PCDEx_LPM_Callback+0x68>)
 800f384:	f043 0306 	orr.w	r3, r3, #6
 800f388:	6113      	str	r3, [r2, #16]
    break;
 800f38a:	bf00      	nop
}
 800f38c:	bf00      	nop
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	e000ed00 	.word	0xe000ed00

0800f398 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f3a0:	4b03      	ldr	r3, [pc, #12]	@ (800f3b0 <USBD_static_malloc+0x18>)
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	370c      	adds	r7, #12
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	20001d10 	.word	0x20001d10

0800f3b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]

}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f3cc:	f7f1 ffce 	bl	800136c <SystemClock_Config>
}
 800f3d0:	bf00      	nop
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f3e2:	79fb      	ldrb	r3, [r7, #7]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d817      	bhi.n	800f418 <USBD_Get_USB_Status+0x44>
 800f3e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f0 <USBD_Get_USB_Status+0x1c>)
 800f3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ee:	bf00      	nop
 800f3f0:	0800f401 	.word	0x0800f401
 800f3f4:	0800f407 	.word	0x0800f407
 800f3f8:	0800f40d 	.word	0x0800f40d
 800f3fc:	0800f413 	.word	0x0800f413
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	73fb      	strb	r3, [r7, #15]
    break;
 800f404:	e00b      	b.n	800f41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f406:	2303      	movs	r3, #3
 800f408:	73fb      	strb	r3, [r7, #15]
    break;
 800f40a:	e008      	b.n	800f41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f40c:	2301      	movs	r3, #1
 800f40e:	73fb      	strb	r3, [r7, #15]
    break;
 800f410:	e005      	b.n	800f41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f412:	2303      	movs	r3, #3
 800f414:	73fb      	strb	r3, [r7, #15]
    break;
 800f416:	e002      	b.n	800f41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f418:	2303      	movs	r3, #3
 800f41a:	73fb      	strb	r3, [r7, #15]
    break;
 800f41c:	bf00      	nop
  }
  return usb_status;
 800f41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <arm_sin_f32>:
 800f42c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f4ac <arm_sin_f32+0x80>
 800f430:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f434:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f440:	d504      	bpl.n	800f44c <arm_sin_f32+0x20>
 800f442:	ee17 3a90 	vmov	r3, s15
 800f446:	3b01      	subs	r3, #1
 800f448:	ee07 3a90 	vmov	s15, r3
 800f44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f450:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800f4b0 <arm_sin_f32+0x84>
 800f454:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f458:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f45c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800f460:	ee17 3a90 	vmov	r3, s15
 800f464:	b29b      	uxth	r3, r3
 800f466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f46a:	d21a      	bcs.n	800f4a2 <arm_sin_f32+0x76>
 800f46c:	ee07 3a90 	vmov	s15, r3
 800f470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f474:	1c59      	adds	r1, r3, #1
 800f476:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f47a:	4a0e      	ldr	r2, [pc, #56]	@ (800f4b4 <arm_sin_f32+0x88>)
 800f47c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f484:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f488:	ed93 7a00 	vldr	s14, [r3]
 800f48c:	edd2 6a00 	vldr	s13, [r2]
 800f490:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f494:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f49c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f4a0:	4770      	bx	lr
 800f4a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	e7e6      	b.n	800f47a <arm_sin_f32+0x4e>
 800f4ac:	3e22f983 	.word	0x3e22f983
 800f4b0:	44000000 	.word	0x44000000
 800f4b4:	0800fec0 	.word	0x0800fec0

0800f4b8 <memset>:
 800f4b8:	4402      	add	r2, r0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d100      	bne.n	800f4c2 <memset+0xa>
 800f4c0:	4770      	bx	lr
 800f4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f4c6:	e7f9      	b.n	800f4bc <memset+0x4>

0800f4c8 <__errno>:
 800f4c8:	4b01      	ldr	r3, [pc, #4]	@ (800f4d0 <__errno+0x8>)
 800f4ca:	6818      	ldr	r0, [r3, #0]
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	20000184 	.word	0x20000184

0800f4d4 <__libc_init_array>:
 800f4d4:	b570      	push	{r4, r5, r6, lr}
 800f4d6:	4d0d      	ldr	r5, [pc, #52]	@ (800f50c <__libc_init_array+0x38>)
 800f4d8:	4c0d      	ldr	r4, [pc, #52]	@ (800f510 <__libc_init_array+0x3c>)
 800f4da:	1b64      	subs	r4, r4, r5
 800f4dc:	10a4      	asrs	r4, r4, #2
 800f4de:	2600      	movs	r6, #0
 800f4e0:	42a6      	cmp	r6, r4
 800f4e2:	d109      	bne.n	800f4f8 <__libc_init_array+0x24>
 800f4e4:	4d0b      	ldr	r5, [pc, #44]	@ (800f514 <__libc_init_array+0x40>)
 800f4e6:	4c0c      	ldr	r4, [pc, #48]	@ (800f518 <__libc_init_array+0x44>)
 800f4e8:	f000 fc92 	bl	800fe10 <_init>
 800f4ec:	1b64      	subs	r4, r4, r5
 800f4ee:	10a4      	asrs	r4, r4, #2
 800f4f0:	2600      	movs	r6, #0
 800f4f2:	42a6      	cmp	r6, r4
 800f4f4:	d105      	bne.n	800f502 <__libc_init_array+0x2e>
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4fc:	4798      	blx	r3
 800f4fe:	3601      	adds	r6, #1
 800f500:	e7ee      	b.n	800f4e0 <__libc_init_array+0xc>
 800f502:	f855 3b04 	ldr.w	r3, [r5], #4
 800f506:	4798      	blx	r3
 800f508:	3601      	adds	r6, #1
 800f50a:	e7f2      	b.n	800f4f2 <__libc_init_array+0x1e>
 800f50c:	080106ec 	.word	0x080106ec
 800f510:	080106ec 	.word	0x080106ec
 800f514:	080106ec 	.word	0x080106ec
 800f518:	080106f0 	.word	0x080106f0

0800f51c <memcpy>:
 800f51c:	440a      	add	r2, r1
 800f51e:	4291      	cmp	r1, r2
 800f520:	f100 33ff 	add.w	r3, r0, #4294967295
 800f524:	d100      	bne.n	800f528 <memcpy+0xc>
 800f526:	4770      	bx	lr
 800f528:	b510      	push	{r4, lr}
 800f52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f532:	4291      	cmp	r1, r2
 800f534:	d1f9      	bne.n	800f52a <memcpy+0xe>
 800f536:	bd10      	pop	{r4, pc}

0800f538 <fmodf>:
 800f538:	b508      	push	{r3, lr}
 800f53a:	ed2d 8b02 	vpush	{d8}
 800f53e:	eef0 8a40 	vmov.f32	s17, s0
 800f542:	eeb0 8a60 	vmov.f32	s16, s1
 800f546:	f000 f879 	bl	800f63c <__ieee754_fmodf>
 800f54a:	eef4 8a48 	vcmp.f32	s17, s16
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	d60c      	bvs.n	800f56e <fmodf+0x36>
 800f554:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f574 <fmodf+0x3c>
 800f558:	eeb4 8a68 	vcmp.f32	s16, s17
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	d105      	bne.n	800f56e <fmodf+0x36>
 800f562:	f7ff ffb1 	bl	800f4c8 <__errno>
 800f566:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f56a:	2321      	movs	r3, #33	@ 0x21
 800f56c:	6003      	str	r3, [r0, #0]
 800f56e:	ecbd 8b02 	vpop	{d8}
 800f572:	bd08      	pop	{r3, pc}
 800f574:	00000000 	.word	0x00000000

0800f578 <powf>:
 800f578:	b508      	push	{r3, lr}
 800f57a:	ed2d 8b04 	vpush	{d8-d9}
 800f57e:	eeb0 8a60 	vmov.f32	s16, s1
 800f582:	eeb0 9a40 	vmov.f32	s18, s0
 800f586:	f000 f8db 	bl	800f740 <__ieee754_powf>
 800f58a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f592:	eef0 8a40 	vmov.f32	s17, s0
 800f596:	d63e      	bvs.n	800f616 <powf+0x9e>
 800f598:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a0:	d112      	bne.n	800f5c8 <powf+0x50>
 800f5a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5aa:	d039      	beq.n	800f620 <powf+0xa8>
 800f5ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f5b0:	f000 f839 	bl	800f626 <finitef>
 800f5b4:	b378      	cbz	r0, 800f616 <powf+0x9e>
 800f5b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	d52a      	bpl.n	800f616 <powf+0x9e>
 800f5c0:	f7ff ff82 	bl	800f4c8 <__errno>
 800f5c4:	2322      	movs	r3, #34	@ 0x22
 800f5c6:	e014      	b.n	800f5f2 <powf+0x7a>
 800f5c8:	f000 f82d 	bl	800f626 <finitef>
 800f5cc:	b998      	cbnz	r0, 800f5f6 <powf+0x7e>
 800f5ce:	eeb0 0a49 	vmov.f32	s0, s18
 800f5d2:	f000 f828 	bl	800f626 <finitef>
 800f5d6:	b170      	cbz	r0, 800f5f6 <powf+0x7e>
 800f5d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f5dc:	f000 f823 	bl	800f626 <finitef>
 800f5e0:	b148      	cbz	r0, 800f5f6 <powf+0x7e>
 800f5e2:	eef4 8a68 	vcmp.f32	s17, s17
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	d7e9      	bvc.n	800f5c0 <powf+0x48>
 800f5ec:	f7ff ff6c 	bl	800f4c8 <__errno>
 800f5f0:	2321      	movs	r3, #33	@ 0x21
 800f5f2:	6003      	str	r3, [r0, #0]
 800f5f4:	e00f      	b.n	800f616 <powf+0x9e>
 800f5f6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fe:	d10a      	bne.n	800f616 <powf+0x9e>
 800f600:	eeb0 0a49 	vmov.f32	s0, s18
 800f604:	f000 f80f 	bl	800f626 <finitef>
 800f608:	b128      	cbz	r0, 800f616 <powf+0x9e>
 800f60a:	eeb0 0a48 	vmov.f32	s0, s16
 800f60e:	f000 f80a 	bl	800f626 <finitef>
 800f612:	2800      	cmp	r0, #0
 800f614:	d1d4      	bne.n	800f5c0 <powf+0x48>
 800f616:	eeb0 0a68 	vmov.f32	s0, s17
 800f61a:	ecbd 8b04 	vpop	{d8-d9}
 800f61e:	bd08      	pop	{r3, pc}
 800f620:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f624:	e7f7      	b.n	800f616 <powf+0x9e>

0800f626 <finitef>:
 800f626:	ee10 3a10 	vmov	r3, s0
 800f62a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f62e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f632:	bfac      	ite	ge
 800f634:	2000      	movge	r0, #0
 800f636:	2001      	movlt	r0, #1
 800f638:	4770      	bx	lr
	...

0800f63c <__ieee754_fmodf>:
 800f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63e:	ee10 5a90 	vmov	r5, s1
 800f642:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800f646:	1e43      	subs	r3, r0, #1
 800f648:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f64c:	d206      	bcs.n	800f65c <__ieee754_fmodf+0x20>
 800f64e:	ee10 3a10 	vmov	r3, s0
 800f652:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800f656:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800f65a:	d304      	bcc.n	800f666 <__ieee754_fmodf+0x2a>
 800f65c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f660:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f666:	4286      	cmp	r6, r0
 800f668:	dbfc      	blt.n	800f664 <__ieee754_fmodf+0x28>
 800f66a:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800f66e:	d105      	bne.n	800f67c <__ieee754_fmodf+0x40>
 800f670:	4b32      	ldr	r3, [pc, #200]	@ (800f73c <__ieee754_fmodf+0x100>)
 800f672:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800f676:	ed93 0a00 	vldr	s0, [r3]
 800f67a:	e7f3      	b.n	800f664 <__ieee754_fmodf+0x28>
 800f67c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f680:	d140      	bne.n	800f704 <__ieee754_fmodf+0xc8>
 800f682:	0232      	lsls	r2, r6, #8
 800f684:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800f688:	2a00      	cmp	r2, #0
 800f68a:	dc38      	bgt.n	800f6fe <__ieee754_fmodf+0xc2>
 800f68c:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800f690:	d13e      	bne.n	800f710 <__ieee754_fmodf+0xd4>
 800f692:	0207      	lsls	r7, r0, #8
 800f694:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800f698:	2f00      	cmp	r7, #0
 800f69a:	da36      	bge.n	800f70a <__ieee754_fmodf+0xce>
 800f69c:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800f6a0:	bfb9      	ittee	lt
 800f6a2:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800f6a6:	1a5b      	sublt	r3, r3, r1
 800f6a8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800f6ac:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800f6b0:	bfb8      	it	lt
 800f6b2:	fa06 f303 	lsllt.w	r3, r6, r3
 800f6b6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f6ba:	bfb5      	itete	lt
 800f6bc:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800f6c0:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800f6c4:	1aad      	sublt	r5, r5, r2
 800f6c6:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800f6ca:	bfb8      	it	lt
 800f6cc:	40a8      	lsllt	r0, r5
 800f6ce:	1a89      	subs	r1, r1, r2
 800f6d0:	1a1d      	subs	r5, r3, r0
 800f6d2:	bb01      	cbnz	r1, 800f716 <__ieee754_fmodf+0xda>
 800f6d4:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800f6d8:	bf38      	it	cc
 800f6da:	462b      	movcc	r3, r5
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d0c7      	beq.n	800f670 <__ieee754_fmodf+0x34>
 800f6e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f6e4:	db1f      	blt.n	800f726 <__ieee754_fmodf+0xea>
 800f6e6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f6ea:	db1f      	blt.n	800f72c <__ieee754_fmodf+0xf0>
 800f6ec:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800f6f0:	327f      	adds	r2, #127	@ 0x7f
 800f6f2:	4323      	orrs	r3, r4
 800f6f4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f6f8:	ee00 3a10 	vmov	s0, r3
 800f6fc:	e7b2      	b.n	800f664 <__ieee754_fmodf+0x28>
 800f6fe:	3901      	subs	r1, #1
 800f700:	0052      	lsls	r2, r2, #1
 800f702:	e7c1      	b.n	800f688 <__ieee754_fmodf+0x4c>
 800f704:	15f1      	asrs	r1, r6, #23
 800f706:	397f      	subs	r1, #127	@ 0x7f
 800f708:	e7c0      	b.n	800f68c <__ieee754_fmodf+0x50>
 800f70a:	3a01      	subs	r2, #1
 800f70c:	007f      	lsls	r7, r7, #1
 800f70e:	e7c3      	b.n	800f698 <__ieee754_fmodf+0x5c>
 800f710:	15c2      	asrs	r2, r0, #23
 800f712:	3a7f      	subs	r2, #127	@ 0x7f
 800f714:	e7c2      	b.n	800f69c <__ieee754_fmodf+0x60>
 800f716:	2d00      	cmp	r5, #0
 800f718:	da02      	bge.n	800f720 <__ieee754_fmodf+0xe4>
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	3901      	subs	r1, #1
 800f71e:	e7d7      	b.n	800f6d0 <__ieee754_fmodf+0x94>
 800f720:	d0a6      	beq.n	800f670 <__ieee754_fmodf+0x34>
 800f722:	006b      	lsls	r3, r5, #1
 800f724:	e7fa      	b.n	800f71c <__ieee754_fmodf+0xe0>
 800f726:	005b      	lsls	r3, r3, #1
 800f728:	3a01      	subs	r2, #1
 800f72a:	e7d9      	b.n	800f6e0 <__ieee754_fmodf+0xa4>
 800f72c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800f730:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f734:	3282      	adds	r2, #130	@ 0x82
 800f736:	4113      	asrs	r3, r2
 800f738:	4323      	orrs	r3, r4
 800f73a:	e7dd      	b.n	800f6f8 <__ieee754_fmodf+0xbc>
 800f73c:	080106c4 	.word	0x080106c4

0800f740 <__ieee754_powf>:
 800f740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f744:	ee10 4a90 	vmov	r4, s1
 800f748:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f74c:	ed2d 8b02 	vpush	{d8}
 800f750:	ee10 6a10 	vmov	r6, s0
 800f754:	eeb0 8a40 	vmov.f32	s16, s0
 800f758:	eef0 8a60 	vmov.f32	s17, s1
 800f75c:	d10c      	bne.n	800f778 <__ieee754_powf+0x38>
 800f75e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f762:	0076      	lsls	r6, r6, #1
 800f764:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f768:	f240 829c 	bls.w	800fca4 <__ieee754_powf+0x564>
 800f76c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f770:	ecbd 8b02 	vpop	{d8}
 800f774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f778:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f77c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f780:	d802      	bhi.n	800f788 <__ieee754_powf+0x48>
 800f782:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f786:	d908      	bls.n	800f79a <__ieee754_powf+0x5a>
 800f788:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f78c:	d1ee      	bne.n	800f76c <__ieee754_powf+0x2c>
 800f78e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f792:	0064      	lsls	r4, r4, #1
 800f794:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f798:	e7e6      	b.n	800f768 <__ieee754_powf+0x28>
 800f79a:	2e00      	cmp	r6, #0
 800f79c:	da1e      	bge.n	800f7dc <__ieee754_powf+0x9c>
 800f79e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f7a2:	d22b      	bcs.n	800f7fc <__ieee754_powf+0xbc>
 800f7a4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f7a8:	d332      	bcc.n	800f810 <__ieee754_powf+0xd0>
 800f7aa:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f7ae:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f7b2:	fa49 f503 	asr.w	r5, r9, r3
 800f7b6:	fa05 f303 	lsl.w	r3, r5, r3
 800f7ba:	454b      	cmp	r3, r9
 800f7bc:	d126      	bne.n	800f80c <__ieee754_powf+0xcc>
 800f7be:	f005 0501 	and.w	r5, r5, #1
 800f7c2:	f1c5 0502 	rsb	r5, r5, #2
 800f7c6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f7ca:	d122      	bne.n	800f812 <__ieee754_powf+0xd2>
 800f7cc:	2c00      	cmp	r4, #0
 800f7ce:	f280 826f 	bge.w	800fcb0 <__ieee754_powf+0x570>
 800f7d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f7d6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f7da:	e7c9      	b.n	800f770 <__ieee754_powf+0x30>
 800f7dc:	2500      	movs	r5, #0
 800f7de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f7e2:	d1f0      	bne.n	800f7c6 <__ieee754_powf+0x86>
 800f7e4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f7e8:	f000 825c 	beq.w	800fca4 <__ieee754_powf+0x564>
 800f7ec:	d908      	bls.n	800f800 <__ieee754_powf+0xc0>
 800f7ee:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800fb50 <__ieee754_powf+0x410>
 800f7f2:	2c00      	cmp	r4, #0
 800f7f4:	bfa8      	it	ge
 800f7f6:	eeb0 0a68 	vmovge.f32	s0, s17
 800f7fa:	e7b9      	b.n	800f770 <__ieee754_powf+0x30>
 800f7fc:	2502      	movs	r5, #2
 800f7fe:	e7ee      	b.n	800f7de <__ieee754_powf+0x9e>
 800f800:	2c00      	cmp	r4, #0
 800f802:	f280 8252 	bge.w	800fcaa <__ieee754_powf+0x56a>
 800f806:	eeb1 0a68 	vneg.f32	s0, s17
 800f80a:	e7b1      	b.n	800f770 <__ieee754_powf+0x30>
 800f80c:	2500      	movs	r5, #0
 800f80e:	e7da      	b.n	800f7c6 <__ieee754_powf+0x86>
 800f810:	2500      	movs	r5, #0
 800f812:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f816:	d102      	bne.n	800f81e <__ieee754_powf+0xde>
 800f818:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f81c:	e7a8      	b.n	800f770 <__ieee754_powf+0x30>
 800f81e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f822:	d109      	bne.n	800f838 <__ieee754_powf+0xf8>
 800f824:	2e00      	cmp	r6, #0
 800f826:	db07      	blt.n	800f838 <__ieee754_powf+0xf8>
 800f828:	eeb0 0a48 	vmov.f32	s0, s16
 800f82c:	ecbd 8b02 	vpop	{d8}
 800f830:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f834:	f000 bae8 	b.w	800fe08 <__ieee754_sqrtf>
 800f838:	eeb0 0a48 	vmov.f32	s0, s16
 800f83c:	f000 fa50 	bl	800fce0 <fabsf>
 800f840:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f844:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f848:	4647      	mov	r7, r8
 800f84a:	d002      	beq.n	800f852 <__ieee754_powf+0x112>
 800f84c:	f1b8 0f00 	cmp.w	r8, #0
 800f850:	d117      	bne.n	800f882 <__ieee754_powf+0x142>
 800f852:	2c00      	cmp	r4, #0
 800f854:	bfbc      	itt	lt
 800f856:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f85a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f85e:	2e00      	cmp	r6, #0
 800f860:	da86      	bge.n	800f770 <__ieee754_powf+0x30>
 800f862:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f866:	ea58 0805 	orrs.w	r8, r8, r5
 800f86a:	d104      	bne.n	800f876 <__ieee754_powf+0x136>
 800f86c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f870:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f874:	e77c      	b.n	800f770 <__ieee754_powf+0x30>
 800f876:	2d01      	cmp	r5, #1
 800f878:	f47f af7a 	bne.w	800f770 <__ieee754_powf+0x30>
 800f87c:	eeb1 0a40 	vneg.f32	s0, s0
 800f880:	e776      	b.n	800f770 <__ieee754_powf+0x30>
 800f882:	0ff0      	lsrs	r0, r6, #31
 800f884:	3801      	subs	r0, #1
 800f886:	ea55 0300 	orrs.w	r3, r5, r0
 800f88a:	d104      	bne.n	800f896 <__ieee754_powf+0x156>
 800f88c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f890:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f894:	e76c      	b.n	800f770 <__ieee754_powf+0x30>
 800f896:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f89a:	d973      	bls.n	800f984 <__ieee754_powf+0x244>
 800f89c:	4bad      	ldr	r3, [pc, #692]	@ (800fb54 <__ieee754_powf+0x414>)
 800f89e:	4598      	cmp	r8, r3
 800f8a0:	d808      	bhi.n	800f8b4 <__ieee754_powf+0x174>
 800f8a2:	2c00      	cmp	r4, #0
 800f8a4:	da0b      	bge.n	800f8be <__ieee754_powf+0x17e>
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	ecbd 8b02 	vpop	{d8}
 800f8ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b0:	f000 baa4 	b.w	800fdfc <__math_oflowf>
 800f8b4:	4ba8      	ldr	r3, [pc, #672]	@ (800fb58 <__ieee754_powf+0x418>)
 800f8b6:	4598      	cmp	r8, r3
 800f8b8:	d908      	bls.n	800f8cc <__ieee754_powf+0x18c>
 800f8ba:	2c00      	cmp	r4, #0
 800f8bc:	dcf3      	bgt.n	800f8a6 <__ieee754_powf+0x166>
 800f8be:	2000      	movs	r0, #0
 800f8c0:	ecbd 8b02 	vpop	{d8}
 800f8c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	f000 ba92 	b.w	800fdf0 <__math_uflowf>
 800f8cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f8d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f8d4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800fb5c <__ieee754_powf+0x41c>
 800f8d8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f8dc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f8e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f8e4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f8e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8f0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800fb60 <__ieee754_powf+0x420>
 800f8f4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f8f8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800fb64 <__ieee754_powf+0x424>
 800f8fc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f900:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800fb68 <__ieee754_powf+0x428>
 800f904:	eef0 6a67 	vmov.f32	s13, s15
 800f908:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f90c:	ee16 3a90 	vmov	r3, s13
 800f910:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f914:	f023 030f 	bic.w	r3, r3, #15
 800f918:	ee06 3a90 	vmov	s13, r3
 800f91c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f920:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f924:	3d01      	subs	r5, #1
 800f926:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f92a:	4305      	orrs	r5, r0
 800f92c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f930:	f024 040f 	bic.w	r4, r4, #15
 800f934:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f938:	bf18      	it	ne
 800f93a:	eeb0 8a47 	vmovne.f32	s16, s14
 800f93e:	ee07 4a10 	vmov	s14, r4
 800f942:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f946:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f94a:	ee07 3a90 	vmov	s15, r3
 800f94e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f952:	ee07 4a10 	vmov	s14, r4
 800f956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f95a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f95e:	ee17 1a10 	vmov	r1, s14
 800f962:	2900      	cmp	r1, #0
 800f964:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f968:	f340 80dd 	ble.w	800fb26 <__ieee754_powf+0x3e6>
 800f96c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f970:	f240 80ca 	bls.w	800fb08 <__ieee754_powf+0x3c8>
 800f974:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	bf4c      	ite	mi
 800f97e:	2001      	movmi	r0, #1
 800f980:	2000      	movpl	r0, #0
 800f982:	e791      	b.n	800f8a8 <__ieee754_powf+0x168>
 800f984:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f988:	bf01      	itttt	eq
 800f98a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fb6c <__ieee754_powf+0x42c>
 800f98e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f992:	f06f 0317 	mvneq.w	r3, #23
 800f996:	ee17 7a90 	vmoveq	r7, s15
 800f99a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f99e:	bf18      	it	ne
 800f9a0:	2300      	movne	r3, #0
 800f9a2:	3a7f      	subs	r2, #127	@ 0x7f
 800f9a4:	441a      	add	r2, r3
 800f9a6:	4b72      	ldr	r3, [pc, #456]	@ (800fb70 <__ieee754_powf+0x430>)
 800f9a8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f9ac:	429f      	cmp	r7, r3
 800f9ae:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f9b2:	dd06      	ble.n	800f9c2 <__ieee754_powf+0x282>
 800f9b4:	4b6f      	ldr	r3, [pc, #444]	@ (800fb74 <__ieee754_powf+0x434>)
 800f9b6:	429f      	cmp	r7, r3
 800f9b8:	f340 80a4 	ble.w	800fb04 <__ieee754_powf+0x3c4>
 800f9bc:	3201      	adds	r2, #1
 800f9be:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f9c2:	2600      	movs	r6, #0
 800f9c4:	4b6c      	ldr	r3, [pc, #432]	@ (800fb78 <__ieee754_powf+0x438>)
 800f9c6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f9ca:	ee07 1a10 	vmov	s14, r1
 800f9ce:	edd3 5a00 	vldr	s11, [r3]
 800f9d2:	4b6a      	ldr	r3, [pc, #424]	@ (800fb7c <__ieee754_powf+0x43c>)
 800f9d4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f9d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9dc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f9e0:	1049      	asrs	r1, r1, #1
 800f9e2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f9e6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f9ea:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f9ee:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f9f2:	ee07 1a90 	vmov	s15, r1
 800f9f6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f9fa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f9fe:	ee15 7a10 	vmov	r7, s10
 800fa02:	401f      	ands	r7, r3
 800fa04:	ee06 7a90 	vmov	s13, r7
 800fa08:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800fa0c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fa10:	ee65 7a05 	vmul.f32	s15, s10, s10
 800fa14:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fa18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fb80 <__ieee754_powf+0x440>
 800fa1c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fb84 <__ieee754_powf+0x444>
 800fa20:	eee7 5a87 	vfma.f32	s11, s15, s14
 800fa24:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fb88 <__ieee754_powf+0x448>
 800fa28:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fa2c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fb5c <__ieee754_powf+0x41c>
 800fa30:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fa34:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fb8c <__ieee754_powf+0x44c>
 800fa38:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fa3c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fb90 <__ieee754_powf+0x450>
 800fa40:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fa44:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fa48:	ee35 7a26 	vadd.f32	s14, s10, s13
 800fa4c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800fa50:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fa54:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800fa58:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800fa5c:	eef0 5a67 	vmov.f32	s11, s15
 800fa60:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800fa64:	ee75 5a87 	vadd.f32	s11, s11, s14
 800fa68:	ee15 1a90 	vmov	r1, s11
 800fa6c:	4019      	ands	r1, r3
 800fa6e:	ee05 1a90 	vmov	s11, r1
 800fa72:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fa76:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800fa7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa7e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fa82:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa86:	eeb0 6a67 	vmov.f32	s12, s15
 800fa8a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fa8e:	ee16 1a10 	vmov	r1, s12
 800fa92:	4019      	ands	r1, r3
 800fa94:	ee06 1a10 	vmov	s12, r1
 800fa98:	eeb0 7a46 	vmov.f32	s14, s12
 800fa9c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800faa0:	493c      	ldr	r1, [pc, #240]	@ (800fb94 <__ieee754_powf+0x454>)
 800faa2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800faa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faaa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fb98 <__ieee754_powf+0x458>
 800faae:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fb9c <__ieee754_powf+0x45c>
 800fab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fab6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fba0 <__ieee754_powf+0x460>
 800faba:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fabe:	ed91 7a00 	vldr	s14, [r1]
 800fac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fac6:	ee07 2a10 	vmov	s14, r2
 800faca:	eef0 6a67 	vmov.f32	s13, s15
 800face:	4a35      	ldr	r2, [pc, #212]	@ (800fba4 <__ieee754_powf+0x464>)
 800fad0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800fad4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fad8:	ed92 5a00 	vldr	s10, [r2]
 800fadc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fae0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800fae4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800fae8:	ee16 2a90 	vmov	r2, s13
 800faec:	4013      	ands	r3, r2
 800faee:	ee06 3a90 	vmov	s13, r3
 800faf2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800faf6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fafa:	eea6 7a65 	vfms.f32	s14, s12, s11
 800fafe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb02:	e70f      	b.n	800f924 <__ieee754_powf+0x1e4>
 800fb04:	2601      	movs	r6, #1
 800fb06:	e75d      	b.n	800f9c4 <__ieee754_powf+0x284>
 800fb08:	d152      	bne.n	800fbb0 <__ieee754_powf+0x470>
 800fb0a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fba8 <__ieee754_powf+0x468>
 800fb0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb12:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fb16:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1e:	f73f af29 	bgt.w	800f974 <__ieee754_powf+0x234>
 800fb22:	2386      	movs	r3, #134	@ 0x86
 800fb24:	e048      	b.n	800fbb8 <__ieee754_powf+0x478>
 800fb26:	4a21      	ldr	r2, [pc, #132]	@ (800fbac <__ieee754_powf+0x46c>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d907      	bls.n	800fb3c <__ieee754_powf+0x3fc>
 800fb2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	bf4c      	ite	mi
 800fb36:	2001      	movmi	r0, #1
 800fb38:	2000      	movpl	r0, #0
 800fb3a:	e6c1      	b.n	800f8c0 <__ieee754_powf+0x180>
 800fb3c:	d138      	bne.n	800fbb0 <__ieee754_powf+0x470>
 800fb3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb42:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4a:	dbea      	blt.n	800fb22 <__ieee754_powf+0x3e2>
 800fb4c:	e7ee      	b.n	800fb2c <__ieee754_powf+0x3ec>
 800fb4e:	bf00      	nop
 800fb50:	00000000 	.word	0x00000000
 800fb54:	3f7ffff3 	.word	0x3f7ffff3
 800fb58:	3f800007 	.word	0x3f800007
 800fb5c:	3eaaaaab 	.word	0x3eaaaaab
 800fb60:	3fb8aa3b 	.word	0x3fb8aa3b
 800fb64:	36eca570 	.word	0x36eca570
 800fb68:	3fb8aa00 	.word	0x3fb8aa00
 800fb6c:	4b800000 	.word	0x4b800000
 800fb70:	001cc471 	.word	0x001cc471
 800fb74:	005db3d6 	.word	0x005db3d6
 800fb78:	080106dc 	.word	0x080106dc
 800fb7c:	fffff000 	.word	0xfffff000
 800fb80:	3e6c3255 	.word	0x3e6c3255
 800fb84:	3e53f142 	.word	0x3e53f142
 800fb88:	3e8ba305 	.word	0x3e8ba305
 800fb8c:	3edb6db7 	.word	0x3edb6db7
 800fb90:	3f19999a 	.word	0x3f19999a
 800fb94:	080106cc 	.word	0x080106cc
 800fb98:	3f76384f 	.word	0x3f76384f
 800fb9c:	3f763800 	.word	0x3f763800
 800fba0:	369dc3a0 	.word	0x369dc3a0
 800fba4:	080106d4 	.word	0x080106d4
 800fba8:	3338aa3c 	.word	0x3338aa3c
 800fbac:	43160000 	.word	0x43160000
 800fbb0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800fbb4:	d971      	bls.n	800fc9a <__ieee754_powf+0x55a>
 800fbb6:	15db      	asrs	r3, r3, #23
 800fbb8:	3b7e      	subs	r3, #126	@ 0x7e
 800fbba:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800fbbe:	4118      	asrs	r0, r3
 800fbc0:	4408      	add	r0, r1
 800fbc2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fbc6:	4a3c      	ldr	r2, [pc, #240]	@ (800fcb8 <__ieee754_powf+0x578>)
 800fbc8:	3b7f      	subs	r3, #127	@ 0x7f
 800fbca:	411a      	asrs	r2, r3
 800fbcc:	4002      	ands	r2, r0
 800fbce:	ee07 2a10 	vmov	s14, r2
 800fbd2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800fbd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800fbda:	f1c3 0317 	rsb	r3, r3, #23
 800fbde:	4118      	asrs	r0, r3
 800fbe0:	2900      	cmp	r1, #0
 800fbe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbe6:	bfb8      	it	lt
 800fbe8:	4240      	neglt	r0, r0
 800fbea:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fbee:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800fcbc <__ieee754_powf+0x57c>
 800fbf2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800fcc0 <__ieee754_powf+0x580>
 800fbf6:	ee17 3a10 	vmov	r3, s14
 800fbfa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800fbfe:	f023 030f 	bic.w	r3, r3, #15
 800fc02:	ee07 3a10 	vmov	s14, r3
 800fc06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fc0e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fc12:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800fcc4 <__ieee754_powf+0x584>
 800fc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc1a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fc1e:	eef0 6a67 	vmov.f32	s13, s15
 800fc22:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fc26:	eef0 5a66 	vmov.f32	s11, s13
 800fc2a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800fc2e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fc32:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fc36:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800fcc8 <__ieee754_powf+0x588>
 800fc3a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800fccc <__ieee754_powf+0x58c>
 800fc3e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fc42:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800fcd0 <__ieee754_powf+0x590>
 800fc46:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fc4a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800fcd4 <__ieee754_powf+0x594>
 800fc4e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fc52:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fcd8 <__ieee754_powf+0x598>
 800fc56:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fc5a:	eeb0 6a66 	vmov.f32	s12, s13
 800fc5e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800fc62:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fc66:	ee66 5a86 	vmul.f32	s11, s13, s12
 800fc6a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fc6e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800fc72:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fc76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc82:	ee10 3a10 	vmov	r3, s0
 800fc86:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fc8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fc8e:	da06      	bge.n	800fc9e <__ieee754_powf+0x55e>
 800fc90:	f000 f82e 	bl	800fcf0 <scalbnf>
 800fc94:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fc98:	e56a      	b.n	800f770 <__ieee754_powf+0x30>
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	e7a5      	b.n	800fbea <__ieee754_powf+0x4aa>
 800fc9e:	ee00 3a10 	vmov	s0, r3
 800fca2:	e7f7      	b.n	800fc94 <__ieee754_powf+0x554>
 800fca4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fca8:	e562      	b.n	800f770 <__ieee754_powf+0x30>
 800fcaa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fcdc <__ieee754_powf+0x59c>
 800fcae:	e55f      	b.n	800f770 <__ieee754_powf+0x30>
 800fcb0:	eeb0 0a48 	vmov.f32	s0, s16
 800fcb4:	e55c      	b.n	800f770 <__ieee754_powf+0x30>
 800fcb6:	bf00      	nop
 800fcb8:	ff800000 	.word	0xff800000
 800fcbc:	3f317218 	.word	0x3f317218
 800fcc0:	3f317200 	.word	0x3f317200
 800fcc4:	35bfbe8c 	.word	0x35bfbe8c
 800fcc8:	b5ddea0e 	.word	0xb5ddea0e
 800fccc:	3331bb4c 	.word	0x3331bb4c
 800fcd0:	388ab355 	.word	0x388ab355
 800fcd4:	bb360b61 	.word	0xbb360b61
 800fcd8:	3e2aaaab 	.word	0x3e2aaaab
 800fcdc:	00000000 	.word	0x00000000

0800fce0 <fabsf>:
 800fce0:	ee10 3a10 	vmov	r3, s0
 800fce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fce8:	ee00 3a10 	vmov	s0, r3
 800fcec:	4770      	bx	lr
	...

0800fcf0 <scalbnf>:
 800fcf0:	ee10 3a10 	vmov	r3, s0
 800fcf4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fcf8:	d02b      	beq.n	800fd52 <scalbnf+0x62>
 800fcfa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fcfe:	d302      	bcc.n	800fd06 <scalbnf+0x16>
 800fd00:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd04:	4770      	bx	lr
 800fd06:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd0a:	d123      	bne.n	800fd54 <scalbnf+0x64>
 800fd0c:	4b24      	ldr	r3, [pc, #144]	@ (800fda0 <scalbnf+0xb0>)
 800fd0e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fda4 <scalbnf+0xb4>
 800fd12:	4298      	cmp	r0, r3
 800fd14:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd18:	db17      	blt.n	800fd4a <scalbnf+0x5a>
 800fd1a:	ee10 3a10 	vmov	r3, s0
 800fd1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fd22:	3a19      	subs	r2, #25
 800fd24:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fd28:	4288      	cmp	r0, r1
 800fd2a:	dd15      	ble.n	800fd58 <scalbnf+0x68>
 800fd2c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fda8 <scalbnf+0xb8>
 800fd30:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fdac <scalbnf+0xbc>
 800fd34:	ee10 3a10 	vmov	r3, s0
 800fd38:	eeb0 7a67 	vmov.f32	s14, s15
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	bfb8      	it	lt
 800fd40:	eef0 7a66 	vmovlt.f32	s15, s13
 800fd44:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fd48:	4770      	bx	lr
 800fd4a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fdb0 <scalbnf+0xc0>
 800fd4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd52:	4770      	bx	lr
 800fd54:	0dd2      	lsrs	r2, r2, #23
 800fd56:	e7e5      	b.n	800fd24 <scalbnf+0x34>
 800fd58:	4410      	add	r0, r2
 800fd5a:	28fe      	cmp	r0, #254	@ 0xfe
 800fd5c:	dce6      	bgt.n	800fd2c <scalbnf+0x3c>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	dd06      	ble.n	800fd70 <scalbnf+0x80>
 800fd62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd66:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fd6a:	ee00 3a10 	vmov	s0, r3
 800fd6e:	4770      	bx	lr
 800fd70:	f110 0f16 	cmn.w	r0, #22
 800fd74:	da09      	bge.n	800fd8a <scalbnf+0x9a>
 800fd76:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fdb0 <scalbnf+0xc0>
 800fd7a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fdb4 <scalbnf+0xc4>
 800fd7e:	ee10 3a10 	vmov	r3, s0
 800fd82:	eeb0 7a67 	vmov.f32	s14, s15
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	e7d9      	b.n	800fd3e <scalbnf+0x4e>
 800fd8a:	3019      	adds	r0, #25
 800fd8c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd90:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fd94:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fdb8 <scalbnf+0xc8>
 800fd98:	ee07 3a90 	vmov	s15, r3
 800fd9c:	e7d7      	b.n	800fd4e <scalbnf+0x5e>
 800fd9e:	bf00      	nop
 800fda0:	ffff3cb0 	.word	0xffff3cb0
 800fda4:	4c000000 	.word	0x4c000000
 800fda8:	7149f2ca 	.word	0x7149f2ca
 800fdac:	f149f2ca 	.word	0xf149f2ca
 800fdb0:	0da24260 	.word	0x0da24260
 800fdb4:	8da24260 	.word	0x8da24260
 800fdb8:	33000000 	.word	0x33000000

0800fdbc <with_errnof>:
 800fdbc:	b510      	push	{r4, lr}
 800fdbe:	ed2d 8b02 	vpush	{d8}
 800fdc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	f7ff fb7e 	bl	800f4c8 <__errno>
 800fdcc:	eeb0 0a48 	vmov.f32	s0, s16
 800fdd0:	ecbd 8b02 	vpop	{d8}
 800fdd4:	6004      	str	r4, [r0, #0]
 800fdd6:	bd10      	pop	{r4, pc}

0800fdd8 <xflowf>:
 800fdd8:	b130      	cbz	r0, 800fde8 <xflowf+0x10>
 800fdda:	eef1 7a40 	vneg.f32	s15, s0
 800fdde:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fde2:	2022      	movs	r0, #34	@ 0x22
 800fde4:	f7ff bfea 	b.w	800fdbc <with_errnof>
 800fde8:	eef0 7a40 	vmov.f32	s15, s0
 800fdec:	e7f7      	b.n	800fdde <xflowf+0x6>
	...

0800fdf0 <__math_uflowf>:
 800fdf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fdf8 <__math_uflowf+0x8>
 800fdf4:	f7ff bff0 	b.w	800fdd8 <xflowf>
 800fdf8:	10000000 	.word	0x10000000

0800fdfc <__math_oflowf>:
 800fdfc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fe04 <__math_oflowf+0x8>
 800fe00:	f7ff bfea 	b.w	800fdd8 <xflowf>
 800fe04:	70000000 	.word	0x70000000

0800fe08 <__ieee754_sqrtf>:
 800fe08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fe0c:	4770      	bx	lr
	...

0800fe10 <_init>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	bf00      	nop
 800fe14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe16:	bc08      	pop	{r3}
 800fe18:	469e      	mov	lr, r3
 800fe1a:	4770      	bx	lr

0800fe1c <_fini>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	bf00      	nop
 800fe20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe22:	bc08      	pop	{r3}
 800fe24:	469e      	mov	lr, r3
 800fe26:	4770      	bx	lr
